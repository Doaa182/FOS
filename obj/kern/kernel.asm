
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 30 19 00 	lgdtl  0x193018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc 2f 19 f0       	mov    $0xf0192fbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 58 f7 85 f0 01 	movl   $0x1,0xf085f758
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 2c f7 85 f0 01 	movl   $0x1,0xf085f72c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 18             	sub    $0x18,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba bc f8 85 f0       	mov    $0xf085f8bc,%edx
f010006a:	b8 9c eb 85 f0       	mov    $0xf085eb9c,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 9c eb 85 f0       	push   $0xf085eb9c
f010007e:	e8 70 1b 03 00       	call   f0131bf3 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	/*2022*/
	scheduler_status = SCH_UNINITIALIZED;
f0100086:	c7 05 54 f7 85 f0 ff 	movl   $0xffffffff,0xf085f754
f010008d:	ff ff ff 

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100090:	e8 c5 0b 00 00       	call   f0100c5a <console_initialize>

	//print welcome message
	print_welcome_message();
f0100095:	e8 f2 00 00 00       	call   f010018c <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f010009a:	e8 54 61 00 00       	call   f01061f3 <detect_memory>
	initialize_kernel_VM();
f010009f:	e8 e0 5c 00 00       	call   f0105d84 <initialize_kernel_VM>
	initialize_paging();
f01000a4:	e8 61 64 00 00       	call   f010650a <initialize_paging>
	//	page_check();

	// Lab 3 user environment initialization functions
	env_init();
f01000a9:	e8 5c a1 00 00       	call   f010a20a <env_init>
	idt_init();
f01000ae:	e8 14 b7 00 00       	call   f010b7c7 <idt_init>

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f01000b3:	e8 47 e2 00 00       	call   f010e2ff <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000b8:	e8 92 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000bd:	e8 7d ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

#if USE_KHEAP
	//2022:
	{
		int freeFrames_before = sys_calculate_free_frames() ;
f01000c2:	e8 ea d0 00 00       	call   f010d1b1 <sys_calculate_free_frames>
f01000c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		int freeDiskFrames_before = pf_calculate_free_frames() ;
f01000ca:	e8 e0 3c 00 00       	call   f0103daf <pf_calculate_free_frames>
f01000cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		initialize_dyn_block_system();
f01000d2:	e8 d5 78 00 00       	call   f01079ac <initialize_dyn_block_system>
		int freeFrames_after = sys_calculate_free_frames() ;
f01000d7:	e8 d5 d0 00 00       	call   f010d1b1 <sys_calculate_free_frames>
f01000dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		int freeDiskFrames_after = pf_calculate_free_frames() ;
f01000df:	e8 cb 3c 00 00       	call   f0103daf <pf_calculate_free_frames>
f01000e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
f01000e7:	ff 75 e8             	pushl  -0x18(%ebp)
f01000ea:	ff 75 ec             	pushl  -0x14(%ebp)
f01000ed:	ff 75 f0             	pushl  -0x10(%ebp)
f01000f0:	ff 75 f4             	pushl  -0xc(%ebp)
f01000f3:	e8 5e 04 03 00       	call   f0130556 <test_initialize_dyn_block_system>
f01000f8:	83 c4 10             	add    $0x10,%esp
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000fb:	c7 05 24 f7 85 f0 61 	movl   $0x61,0xf085f724
f0100102:	00 00 00 
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f0100105:	c7 05 b0 f6 85 f0 59 	movl   $0x59,0xf085f6b0
f010010c:	00 00 00 
#endif
	create_shares_array(MAX_SHARES);
f010010f:	a1 24 f7 85 f0       	mov    0xf085f724,%eax
f0100114:	83 ec 0c             	sub    $0xc,%esp
f0100117:	50                   	push   %eax
f0100118:	e8 c7 6f 00 00       	call   f01070e4 <create_shares_array>
f010011d:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f0100120:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f0100125:	83 ec 0c             	sub    $0xc,%esp
f0100128:	50                   	push   %eax
f0100129:	e8 5b e6 00 00       	call   f010e789 <create_semaphores_array>
f010012e:	83 c4 10             	add    $0x10,%esp



	enableBuffering(0);
f0100131:	83 ec 0c             	sub    $0xc,%esp
f0100134:	6a 00                	push   $0x0
f0100136:	e8 d1 e2 00 00       	call   f010e40c <enableBuffering>
f010013b:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f010013e:	83 ec 0c             	sub    $0xc,%esp
f0100141:	6a 00                	push   $0x0
f0100143:	e8 ac e2 00 00       	call   f010e3f4 <enableModifiedBuffer>
f0100148:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f010014b:	83 ec 0c             	sub    $0xc,%esp
f010014e:	68 e8 03 00 00       	push   $0x3e8
f0100153:	e8 cc e2 00 00       	call   f010e424 <setModifiedBufferLength>
f0100158:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f010015b:	e8 9e 5a 00 00       	call   f0105bfe <pic_init>
	sched_init() ;
f0100160:	e8 47 47 00 00       	call   f01048ac <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100165:	83 ec 0c             	sub    $0xc,%esp
f0100168:	68 a0 37 13 f0       	push   $0xf01337a0
f010016d:	e8 9c 0b 00 00       	call   f0100d0e <cprintf>
f0100172:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100175:	83 ec 0c             	sub    $0xc,%esp
f0100178:	68 cc 37 13 f0       	push   $0xf01337cc
f010017d:	e8 8c 0b 00 00       	call   f0100d0e <cprintf>
f0100182:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100185:	e8 aa 0b 00 00       	call   f0100d34 <run_command_prompt>
	}
f010018a:	eb d9                	jmp    f0100165 <FOS_initialize+0x106>

f010018c <print_welcome_message>:
}


void print_welcome_message()
{
f010018c:	55                   	push   %ebp
f010018d:	89 e5                	mov    %esp,%ebp
f010018f:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100192:	83 ec 0c             	sub    $0xc,%esp
f0100195:	68 f1 37 13 f0       	push   $0xf01337f1
f010019a:	e8 6f 0b 00 00       	call   f0100d0e <cprintf>
f010019f:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001a2:	83 ec 0c             	sub    $0xc,%esp
f01001a5:	68 f8 37 13 f0       	push   $0xf01337f8
f01001aa:	e8 5f 0b 00 00       	call   f0100d0e <cprintf>
f01001af:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001b2:	83 ec 0c             	sub    $0xc,%esp
f01001b5:	68 40 38 13 f0       	push   $0xf0133840
f01001ba:	e8 4f 0b 00 00       	call   f0100d0e <cprintf>
f01001bf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01001c2:	83 ec 0c             	sub    $0xc,%esp
f01001c5:	68 88 38 13 f0       	push   $0xf0133888
f01001ca:	e8 3f 0b 00 00       	call   f0100d0e <cprintf>
f01001cf:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01001d2:	83 ec 0c             	sub    $0xc,%esp
f01001d5:	68 40 38 13 f0       	push   $0xf0133840
f01001da:	e8 2f 0b 00 00       	call   f0100d0e <cprintf>
f01001df:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01001e2:	83 ec 0c             	sub    $0xc,%esp
f01001e5:	68 f8 37 13 f0       	push   $0xf01337f8
f01001ea:	e8 1f 0b 00 00       	call   f0100d0e <cprintf>
f01001ef:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f01001f2:	83 ec 0c             	sub    $0xc,%esp
f01001f5:	68 cd 38 13 f0       	push   $0xf01338cd
f01001fa:	e8 0f 0b 00 00       	call   f0100d0e <cprintf>
f01001ff:	83 c4 10             	add    $0x10,%esp
}
f0100202:	90                   	nop
f0100203:	c9                   	leave  
f0100204:	c3                   	ret    

f0100205 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f0100205:	55                   	push   %ebp
f0100206:	89 e5                	mov    %esp,%ebp
f0100208:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010020b:	8b 45 10             	mov    0x10(%ebp),%eax
f010020e:	a3 a0 eb 85 f0       	mov    %eax,0xf085eba0

	va_start(ap, fmt);
f0100213:	8d 45 10             	lea    0x10(%ebp),%eax
f0100216:	83 c0 04             	add    $0x4,%eax
f0100219:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010021c:	83 ec 04             	sub    $0x4,%esp
f010021f:	ff 75 0c             	pushl  0xc(%ebp)
f0100222:	ff 75 08             	pushl  0x8(%ebp)
f0100225:	68 d2 38 13 f0       	push   $0xf01338d2
f010022a:	e8 df 0a 00 00       	call   f0100d0e <cprintf>
f010022f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100232:	8b 45 10             	mov    0x10(%ebp),%eax
f0100235:	83 ec 08             	sub    $0x8,%esp
f0100238:	ff 75 f4             	pushl  -0xc(%ebp)
f010023b:	50                   	push   %eax
f010023c:	e8 a4 0a 00 00       	call   f0100ce5 <vcprintf>
f0100241:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100244:	83 ec 0c             	sub    $0xc,%esp
f0100247:	68 eb 38 13 f0       	push   $0xf01338eb
f010024c:	e8 bd 0a 00 00       	call   f0100d0e <cprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f0100254:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0100259:	85 c0                	test   %eax,%eax
f010025b:	74 12                	je     f010026f <_panic+0x6a>
f010025d:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0100262:	8b 40 54             	mov    0x54(%eax),%eax
f0100265:	83 f8 02             	cmp    $0x2,%eax
f0100268:	75 05                	jne    f010026f <_panic+0x6a>
	{
		//2015
		env_exit();
f010026a:	e8 90 9e 00 00       	call   f010a0ff <env_exit>
		//env_run_cmd_prmpt() ;
	}

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010026f:	a1 54 f7 85 f0       	mov    0xf085f754,%eax
f0100274:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100277:	74 1b                	je     f0100294 <_panic+0x8f>
	{
		cprintf("scheduler_status=%d\n", scheduler_status);
f0100279:	a1 54 f7 85 f0       	mov    0xf085f754,%eax
f010027e:	83 ec 08             	sub    $0x8,%esp
f0100281:	50                   	push   %eax
f0100282:	68 ed 38 13 f0       	push   $0xf01338ed
f0100287:	e8 82 0a 00 00       	call   f0100d0e <cprintf>
f010028c:	83 c4 10             	add    $0x10,%esp
		//2015
		fos_scheduler();
f010028f:	e8 79 44 00 00       	call   f010470d <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f0100294:	c7 05 f4 ed 85 f0 00 	movl   $0x0,0xf085edf4
f010029b:	00 00 00 
		lcr3(phys_page_directory);
f010029e:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f01002a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01002a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01002a9:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f01002ac:	83 ec 0c             	sub    $0xc,%esp
f01002af:	6a 00                	push   $0x0
f01002b1:	e8 7e 0a 00 00       	call   f0100d34 <run_command_prompt>
f01002b6:	83 c4 10             	add    $0x10,%esp
f01002b9:	eb f1                	jmp    f01002ac <_panic+0xa7>

f01002bb <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01002bb:	55                   	push   %ebp
f01002bc:	89 e5                	mov    %esp,%ebp
f01002be:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	a3 a0 eb 85 f0       	mov    %eax,0xf085eba0

	va_start(ap, fmt);
f01002c9:	8d 45 10             	lea    0x10(%ebp),%eax
f01002cc:	83 c0 04             	add    $0x4,%eax
f01002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002d2:	83 ec 04             	sub    $0x4,%esp
f01002d5:	ff 75 0c             	pushl  0xc(%ebp)
f01002d8:	ff 75 08             	pushl  0x8(%ebp)
f01002db:	68 d2 38 13 f0       	push   $0xf01338d2
f01002e0:	e8 29 0a 00 00       	call   f0100d0e <cprintf>
f01002e5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002eb:	83 ec 08             	sub    $0x8,%esp
f01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01002f1:	50                   	push   %eax
f01002f2:	e8 ee 09 00 00       	call   f0100ce5 <vcprintf>
f01002f7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002fa:	83 ec 0c             	sub    $0xc,%esp
f01002fd:	68 eb 38 13 f0       	push   $0xf01338eb
f0100302:	e8 07 0a 00 00       	call   f0100d0e <cprintf>
f0100307:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f010030a:	a1 54 f7 85 f0       	mov    0xf085f754,%eax
f010030f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0100312:	74 27                	je     f010033b <_panic_all+0x80>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f0100314:	e8 a9 51 00 00       	call   f01054c2 <sched_exit_all_ready_envs>
		if (curenv != NULL)
f0100319:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010031e:	85 c0                	test   %eax,%eax
f0100320:	74 14                	je     f0100336 <_panic_all+0x7b>
		{
			//cprintf("exit curenv...........\n");
			sched_exit_env(curenv->env_id);
f0100322:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0100327:	8b 40 4c             	mov    0x4c(%eax),%eax
f010032a:	83 ec 0c             	sub    $0xc,%esp
f010032d:	50                   	push   %eax
f010032e:	e8 56 4f 00 00       	call   f0105289 <sched_exit_env>
f0100333:	83 c4 10             	add    $0x10,%esp
			//env_run_cmd_prmpt() ;
		}

		fos_scheduler();
f0100336:	e8 d2 43 00 00       	call   f010470d <fos_scheduler>
	}
	else
	{
		curenv = NULL;
f010033b:	c7 05 f4 ed 85 f0 00 	movl   $0x0,0xf085edf4
f0100342:	00 00 00 
		lcr3(phys_page_directory);
f0100345:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f010034a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010034d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100350:	0f 22 d8             	mov    %eax,%cr3
		while (1)
			run_command_prompt(NULL);
f0100353:	83 ec 0c             	sub    $0xc,%esp
f0100356:	6a 00                	push   $0x0
f0100358:	e8 d7 09 00 00       	call   f0100d34 <run_command_prompt>
f010035d:	83 c4 10             	add    $0x10,%esp
f0100360:	eb f1                	jmp    f0100353 <_panic_all+0x98>

f0100362 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100362:	55                   	push   %ebp
f0100363:	89 e5                	mov    %esp,%ebp
f0100365:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100368:	8b 45 10             	mov    0x10(%ebp),%eax
f010036b:	a3 a0 eb 85 f0       	mov    %eax,0xf085eba0

	va_start(ap, fmt);
f0100370:	8d 45 10             	lea    0x10(%ebp),%eax
f0100373:	83 c0 04             	add    $0x4,%eax
f0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100379:	83 ec 04             	sub    $0x4,%esp
f010037c:	ff 75 0c             	pushl  0xc(%ebp)
f010037f:	ff 75 08             	pushl  0x8(%ebp)
f0100382:	68 d2 38 13 f0       	push   $0xf01338d2
f0100387:	e8 82 09 00 00       	call   f0100d0e <cprintf>
f010038c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010038f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 f4             	pushl  -0xc(%ebp)
f0100398:	50                   	push   %eax
f0100399:	e8 47 09 00 00       	call   f0100ce5 <vcprintf>
f010039e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003a1:	83 ec 0c             	sub    $0xc,%esp
f01003a4:	68 eb 38 13 f0       	push   $0xf01338eb
f01003a9:	e8 60 09 00 00       	call   f0100d0e <cprintf>
f01003ae:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01003b1:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f01003b6:	85 c0                	test   %eax,%eax
f01003b8:	74 28                	je     f01003e2 <_panic_into_prompt+0x80>
f01003ba:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f01003bf:	8b 40 54             	mov    0x54(%eax),%eax
f01003c2:	83 f8 02             	cmp    $0x2,%eax
f01003c5:	75 1b                	jne    f01003e2 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01003c7:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f01003cc:	83 ec 0c             	sub    $0xc,%esp
f01003cf:	50                   	push   %eax
f01003d0:	e8 6c 47 00 00       	call   f0104b41 <sched_insert_exit>
f01003d5:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f01003d8:	c7 05 f4 ed 85 f0 00 	movl   $0x0,0xf085edf4
f01003df:	00 00 00 
	}

	lcr3(phys_page_directory);
f01003e2:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f01003e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01003ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01003ed:	0f 22 d8             	mov    %eax,%cr3

	/*2022*///Check if the scheduler is successfully initialized or not
	if (scheduler_status != SCH_UNINITIALIZED)
f01003f0:	a1 54 f7 85 f0       	mov    0xf085f754,%eax
f01003f5:	83 f8 ff             	cmp    $0xffffffff,%eax
f01003f8:	74 0a                	je     f0100404 <_panic_into_prompt+0xa2>
	{
		scheduler_status = SCH_STOPPED;
f01003fa:	c7 05 54 f7 85 f0 00 	movl   $0x0,0xf085f754
f0100401:	00 00 00 
	}
	while (1)
		run_command_prompt(NULL);
f0100404:	83 ec 0c             	sub    $0xc,%esp
f0100407:	6a 00                	push   $0x0
f0100409:	e8 26 09 00 00       	call   f0100d34 <run_command_prompt>
f010040e:	83 c4 10             	add    $0x10,%esp
f0100411:	eb f1                	jmp    f0100404 <_panic_into_prompt+0xa2>

f0100413 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100413:	55                   	push   %ebp
f0100414:	89 e5                	mov    %esp,%ebp
f0100416:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100419:	8d 45 10             	lea    0x10(%ebp),%eax
f010041c:	83 c0 04             	add    $0x4,%eax
f010041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100422:	83 ec 04             	sub    $0x4,%esp
f0100425:	ff 75 0c             	pushl  0xc(%ebp)
f0100428:	ff 75 08             	pushl  0x8(%ebp)
f010042b:	68 02 39 13 f0       	push   $0xf0133902
f0100430:	e8 d9 08 00 00       	call   f0100d0e <cprintf>
f0100435:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100438:	8b 45 10             	mov    0x10(%ebp),%eax
f010043b:	83 ec 08             	sub    $0x8,%esp
f010043e:	ff 75 f4             	pushl  -0xc(%ebp)
f0100441:	50                   	push   %eax
f0100442:	e8 9e 08 00 00       	call   f0100ce5 <vcprintf>
f0100447:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010044a:	83 ec 0c             	sub    $0xc,%esp
f010044d:	68 eb 38 13 f0       	push   $0xf01338eb
f0100452:	e8 b7 08 00 00       	call   f0100d0e <cprintf>
f0100457:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f010045a:	90                   	nop
f010045b:	c9                   	leave  
f010045c:	c3                   	ret    

f010045d <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010045d:	55                   	push   %ebp
f010045e:	89 e5                	mov    %esp,%ebp
f0100460:	83 ec 10             	sub    $0x10,%esp
f0100463:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010046d:	89 c2                	mov    %eax,%edx
f010046f:	ec                   	in     (%dx),%al
f0100470:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100473:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100476:	0f b6 c0             	movzbl %al,%eax
f0100479:	83 e0 01             	and    $0x1,%eax
f010047c:	85 c0                	test   %eax,%eax
f010047e:	75 07                	jne    f0100487 <serial_proc_data+0x2a>
		return -1;
f0100480:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100485:	eb 16                	jmp    f010049d <serial_proc_data+0x40>
f0100487:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100491:	89 c2                	mov    %eax,%edx
f0100493:	ec                   	in     (%dx),%al
f0100494:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f0100497:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010049a:	0f b6 c0             	movzbl %al,%eax
}
f010049d:	c9                   	leave  
f010049e:	c3                   	ret    

f010049f <serial_intr>:

void
serial_intr(void)
{
f010049f:	55                   	push   %ebp
f01004a0:	89 e5                	mov    %esp,%ebp
f01004a2:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01004a5:	a1 c0 eb 85 f0       	mov    0xf085ebc0,%eax
f01004aa:	85 c0                	test   %eax,%eax
f01004ac:	74 10                	je     f01004be <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01004ae:	83 ec 0c             	sub    $0xc,%esp
f01004b1:	68 5d 04 10 f0       	push   $0xf010045d
f01004b6:	e8 e4 05 00 00       	call   f0100a9f <cons_intr>
f01004bb:	83 c4 10             	add    $0x10,%esp
}
f01004be:	90                   	nop
f01004bf:	c9                   	leave  
f01004c0:	c3                   	ret    

f01004c1 <serial_init>:

void
serial_init(void)
{
f01004c1:	55                   	push   %ebp
f01004c2:	89 e5                	mov    %esp,%ebp
f01004c4:	83 ec 40             	sub    $0x40,%esp
f01004c7:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01004ce:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01004d2:	8a 45 ce             	mov    -0x32(%ebp),%al
f01004d5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01004d8:	ee                   	out    %al,(%dx)
f01004d9:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01004e0:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f01004e4:	8a 45 cf             	mov    -0x31(%ebp),%al
f01004e7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01004ea:	ee                   	out    %al,(%dx)
f01004eb:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f01004f2:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f01004f6:	8a 45 d0             	mov    -0x30(%ebp),%al
f01004f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01004fc:	ee                   	out    %al,(%dx)
f01004fd:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100504:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100508:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010050b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010050e:	ee                   	out    %al,(%dx)
f010050f:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100516:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f010051a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010051d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100520:	ee                   	out    %al,(%dx)
f0100521:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100528:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010052c:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010052f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100532:	ee                   	out    %al,(%dx)
f0100533:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f010053a:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010053e:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100541:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100544:	ee                   	out    %al,(%dx)
f0100545:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010054c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010054f:	89 c2                	mov    %eax,%edx
f0100551:	ec                   	in     (%dx),%al
f0100552:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100555:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100558:	3c ff                	cmp    $0xff,%al
f010055a:	0f 95 c0             	setne  %al
f010055d:	0f b6 c0             	movzbl %al,%eax
f0100560:	a3 c0 eb 85 f0       	mov    %eax,0xf085ebc0
f0100565:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010056c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010056f:	89 c2                	mov    %eax,%edx
f0100571:	ec                   	in     (%dx),%al
f0100572:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100575:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010057c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010057f:	89 c2                	mov    %eax,%edx
f0100581:	ec                   	in     (%dx),%al
f0100582:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f0100585:	90                   	nop
f0100586:	c9                   	leave  
f0100587:	c3                   	ret    

f0100588 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f0100588:	55                   	push   %ebp
f0100589:	89 e5                	mov    %esp,%ebp
f010058b:	83 ec 20             	sub    $0x20,%esp
f010058e:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100595:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100598:	89 c2                	mov    %eax,%edx
f010059a:	ec                   	in     (%dx),%al
f010059b:	88 45 ec             	mov    %al,-0x14(%ebp)
f010059e:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01005a5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01005a8:	89 c2                	mov    %eax,%edx
f01005aa:	ec                   	in     (%dx),%al
f01005ab:	88 45 ed             	mov    %al,-0x13(%ebp)
f01005ae:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01005b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01005b8:	89 c2                	mov    %eax,%edx
f01005ba:	ec                   	in     (%dx),%al
f01005bb:	88 45 ee             	mov    %al,-0x12(%ebp)
f01005be:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01005c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01005c8:	89 c2                	mov    %eax,%edx
f01005ca:	ec                   	in     (%dx),%al
f01005cb:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01005ce:	90                   	nop
f01005cf:	c9                   	leave  
f01005d0:	c3                   	ret    

f01005d1 <lpt_putc>:

static void
lpt_putc(int c)
{
f01005d1:	55                   	push   %ebp
f01005d2:	89 e5                	mov    %esp,%ebp
f01005d4:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005d7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01005de:	eb 08                	jmp    f01005e8 <lpt_putc+0x17>
		delay();
f01005e0:	e8 a3 ff ff ff       	call   f0100588 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01005e5:	ff 45 fc             	incl   -0x4(%ebp)
f01005e8:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005f2:	89 c2                	mov    %eax,%edx
f01005f4:	ec                   	in     (%dx),%al
f01005f5:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01005f8:	8a 45 eb             	mov    -0x15(%ebp),%al
f01005fb:	84 c0                	test   %al,%al
f01005fd:	78 09                	js     f0100608 <lpt_putc+0x37>
f01005ff:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100606:	7e d8                	jle    f01005e0 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100608:	8b 45 08             	mov    0x8(%ebp),%eax
f010060b:	0f b6 c0             	movzbl %al,%eax
f010060e:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100615:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100618:	8a 45 e8             	mov    -0x18(%ebp),%al
f010061b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010061e:	ee                   	out    %al,(%dx)
f010061f:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100626:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f010062a:	8a 45 e9             	mov    -0x17(%ebp),%al
f010062d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100630:	ee                   	out    %al,(%dx)
f0100631:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100638:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010063c:	8a 45 ea             	mov    -0x16(%ebp),%al
f010063f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100642:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100643:	90                   	nop
f0100644:	c9                   	leave  
f0100645:	c3                   	ret    

f0100646 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100646:	55                   	push   %ebp
f0100647:	89 e5                	mov    %esp,%ebp
f0100649:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010064c:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100653:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100656:	66 8b 00             	mov    (%eax),%ax
f0100659:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010065d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100660:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100665:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100668:	66 8b 00             	mov    (%eax),%ax
f010066b:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010066f:	74 13                	je     f0100684 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100671:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100678:	c7 05 c4 eb 85 f0 b4 	movl   $0x3b4,0xf085ebc4
f010067f:	03 00 00 
f0100682:	eb 14                	jmp    f0100698 <cga_init+0x52>
	} else {
		*cp = was;
f0100684:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100687:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010068b:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f010068e:	c7 05 c4 eb 85 f0 d4 	movl   $0x3d4,0xf085ebc4
f0100695:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f0100698:	a1 c4 eb 85 f0       	mov    0xf085ebc4,%eax
f010069d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01006a0:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01006a4:	8a 45 e0             	mov    -0x20(%ebp),%al
f01006a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006aa:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01006ab:	a1 c4 eb 85 f0       	mov    0xf085ebc4,%eax
f01006b0:	40                   	inc    %eax
f01006b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006b7:	89 c2                	mov    %eax,%edx
f01006b9:	ec                   	in     (%dx),%al
f01006ba:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01006bd:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01006c0:	0f b6 c0             	movzbl %al,%eax
f01006c3:	c1 e0 08             	shl    $0x8,%eax
f01006c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01006c9:	a1 c4 eb 85 f0       	mov    0xf085ebc4,%eax
f01006ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01006d1:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006d5:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01006d8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01006db:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01006dc:	a1 c4 eb 85 f0       	mov    0xf085ebc4,%eax
f01006e1:	40                   	inc    %eax
f01006e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01006e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01006e8:	89 c2                	mov    %eax,%edx
f01006ea:	ec                   	in     (%dx),%al
f01006eb:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01006ee:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01006f1:	0f b6 c0             	movzbl %al,%eax
f01006f4:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01006f7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01006fa:	a3 c8 eb 85 f0       	mov    %eax,0xf085ebc8
	crt_pos = pos;
f01006ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100702:	66 a3 cc eb 85 f0    	mov    %ax,0xf085ebcc
}
f0100708:	90                   	nop
f0100709:	c9                   	leave  
f010070a:	c3                   	ret    

f010070b <cga_putc>:



void
cga_putc(int c)
{
f010070b:	55                   	push   %ebp
f010070c:	89 e5                	mov    %esp,%ebp
f010070e:	53                   	push   %ebx
f010070f:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100712:	8b 45 08             	mov    0x8(%ebp),%eax
f0100715:	b0 00                	mov    $0x0,%al
f0100717:	85 c0                	test   %eax,%eax
f0100719:	75 07                	jne    f0100722 <cga_putc+0x17>
		c |= 0x0700;
f010071b:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100722:	8b 45 08             	mov    0x8(%ebp),%eax
f0100725:	0f b6 c0             	movzbl %al,%eax
f0100728:	83 f8 09             	cmp    $0x9,%eax
f010072b:	0f 84 94 00 00 00    	je     f01007c5 <cga_putc+0xba>
f0100731:	83 f8 09             	cmp    $0x9,%eax
f0100734:	7f 0a                	jg     f0100740 <cga_putc+0x35>
f0100736:	83 f8 08             	cmp    $0x8,%eax
f0100739:	74 14                	je     f010074f <cga_putc+0x44>
f010073b:	e9 c8 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
f0100740:	83 f8 0a             	cmp    $0xa,%eax
f0100743:	74 49                	je     f010078e <cga_putc+0x83>
f0100745:	83 f8 0d             	cmp    $0xd,%eax
f0100748:	74 53                	je     f010079d <cga_putc+0x92>
f010074a:	e9 b9 00 00 00       	jmp    f0100808 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010074f:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f0100755:	66 85 c0             	test   %ax,%ax
f0100758:	0f 84 d0 00 00 00    	je     f010082e <cga_putc+0x123>
			crt_pos--;
f010075e:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f0100764:	48                   	dec    %eax
f0100765:	66 a3 cc eb 85 f0    	mov    %ax,0xf085ebcc
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010076b:	8b 15 c8 eb 85 f0    	mov    0xf085ebc8,%edx
f0100771:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f0100777:	0f b7 c0             	movzwl %ax,%eax
f010077a:	01 c0                	add    %eax,%eax
f010077c:	01 c2                	add    %eax,%edx
f010077e:	8b 45 08             	mov    0x8(%ebp),%eax
f0100781:	b0 00                	mov    $0x0,%al
f0100783:	83 c8 20             	or     $0x20,%eax
f0100786:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100789:	e9 a0 00 00 00       	jmp    f010082e <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f010078e:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f0100794:	83 c0 50             	add    $0x50,%eax
f0100797:	66 a3 cc eb 85 f0    	mov    %ax,0xf085ebcc
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f010079d:	66 8b 0d cc eb 85 f0 	mov    0xf085ebcc,%cx
f01007a4:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f01007aa:	bb 50 00 00 00       	mov    $0x50,%ebx
f01007af:	ba 00 00 00 00       	mov    $0x0,%edx
f01007b4:	66 f7 f3             	div    %bx
f01007b7:	89 d0                	mov    %edx,%eax
f01007b9:	29 c1                	sub    %eax,%ecx
f01007bb:	89 c8                	mov    %ecx,%eax
f01007bd:	66 a3 cc eb 85 f0    	mov    %ax,0xf085ebcc
		break;
f01007c3:	eb 6a                	jmp    f010082f <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01007c5:	83 ec 0c             	sub    $0xc,%esp
f01007c8:	6a 20                	push   $0x20
f01007ca:	e8 69 04 00 00       	call   f0100c38 <cons_putc>
f01007cf:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007d2:	83 ec 0c             	sub    $0xc,%esp
f01007d5:	6a 20                	push   $0x20
f01007d7:	e8 5c 04 00 00       	call   f0100c38 <cons_putc>
f01007dc:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007df:	83 ec 0c             	sub    $0xc,%esp
f01007e2:	6a 20                	push   $0x20
f01007e4:	e8 4f 04 00 00       	call   f0100c38 <cons_putc>
f01007e9:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007ec:	83 ec 0c             	sub    $0xc,%esp
f01007ef:	6a 20                	push   $0x20
f01007f1:	e8 42 04 00 00       	call   f0100c38 <cons_putc>
f01007f6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01007f9:	83 ec 0c             	sub    $0xc,%esp
f01007fc:	6a 20                	push   $0x20
f01007fe:	e8 35 04 00 00       	call   f0100c38 <cons_putc>
f0100803:	83 c4 10             	add    $0x10,%esp
		break;
f0100806:	eb 27                	jmp    f010082f <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100808:	8b 0d c8 eb 85 f0    	mov    0xf085ebc8,%ecx
f010080e:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f0100814:	8d 50 01             	lea    0x1(%eax),%edx
f0100817:	66 89 15 cc eb 85 f0 	mov    %dx,0xf085ebcc
f010081e:	0f b7 c0             	movzwl %ax,%eax
f0100821:	01 c0                	add    %eax,%eax
f0100823:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100826:	8b 45 08             	mov    0x8(%ebp),%eax
f0100829:	66 89 02             	mov    %ax,(%edx)
		break;
f010082c:	eb 01                	jmp    f010082f <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010082e:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010082f:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f0100835:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100839:	76 58                	jbe    f0100893 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010083b:	a1 c8 eb 85 f0       	mov    0xf085ebc8,%eax
f0100840:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100846:	a1 c8 eb 85 f0       	mov    0xf085ebc8,%eax
f010084b:	83 ec 04             	sub    $0x4,%esp
f010084e:	68 00 0f 00 00       	push   $0xf00
f0100853:	52                   	push   %edx
f0100854:	50                   	push   %eax
f0100855:	e8 c9 13 03 00       	call   f0131c23 <memcpy>
f010085a:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010085d:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100864:	eb 15                	jmp    f010087b <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100866:	8b 15 c8 eb 85 f0    	mov    0xf085ebc8,%edx
f010086c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010086f:	01 c0                	add    %eax,%eax
f0100871:	01 d0                	add    %edx,%eax
f0100873:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100878:	ff 45 f4             	incl   -0xc(%ebp)
f010087b:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100882:	7e e2                	jle    f0100866 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f0100884:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f010088a:	83 e8 50             	sub    $0x50,%eax
f010088d:	66 a3 cc eb 85 f0    	mov    %ax,0xf085ebcc
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100893:	a1 c4 eb 85 f0       	mov    0xf085ebc4,%eax
f0100898:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010089b:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010089f:	8a 45 e0             	mov    -0x20(%ebp),%al
f01008a2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01008a5:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01008a6:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f01008ac:	66 c1 e8 08          	shr    $0x8,%ax
f01008b0:	0f b6 c0             	movzbl %al,%eax
f01008b3:	8b 15 c4 eb 85 f0    	mov    0xf085ebc4,%edx
f01008b9:	42                   	inc    %edx
f01008ba:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01008bd:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01008c0:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01008c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01008c6:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01008c7:	a1 c4 eb 85 f0       	mov    0xf085ebc4,%eax
f01008cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01008cf:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01008d3:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01008d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01008d9:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008da:	66 a1 cc eb 85 f0    	mov    0xf085ebcc,%ax
f01008e0:	0f b6 c0             	movzbl %al,%eax
f01008e3:	8b 15 c4 eb 85 f0    	mov    0xf085ebc4,%edx
f01008e9:	42                   	inc    %edx
f01008ea:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008ed:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008f0:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008f3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008f6:	ee                   	out    %al,(%dx)
}
f01008f7:	90                   	nop
f01008f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008fb:	c9                   	leave  
f01008fc:	c3                   	ret    

f01008fd <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008fd:	55                   	push   %ebp
f01008fe:	89 e5                	mov    %esp,%ebp
f0100900:	83 ec 28             	sub    $0x28,%esp
f0100903:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010090a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010090d:	89 c2                	mov    %eax,%edx
f010090f:	ec                   	in     (%dx),%al
f0100910:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100913:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100916:	0f b6 c0             	movzbl %al,%eax
f0100919:	83 e0 01             	and    $0x1,%eax
f010091c:	85 c0                	test   %eax,%eax
f010091e:	75 0a                	jne    f010092a <kbd_proc_data+0x2d>
		return -1;
f0100920:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100925:	e9 54 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
f010092a:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100931:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100934:	89 c2                	mov    %eax,%edx
f0100936:	ec                   	in     (%dx),%al
f0100937:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f010093a:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010093d:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100940:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100944:	75 17                	jne    f010095d <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100946:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f010094b:	83 c8 40             	or     $0x40,%eax
f010094e:	a3 e8 ed 85 f0       	mov    %eax,0xf085ede8
		return 0;
f0100953:	b8 00 00 00 00       	mov    $0x0,%eax
f0100958:	e9 21 01 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010095d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100960:	84 c0                	test   %al,%al
f0100962:	79 44                	jns    f01009a8 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100964:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f0100969:	83 e0 40             	and    $0x40,%eax
f010096c:	85 c0                	test   %eax,%eax
f010096e:	75 08                	jne    f0100978 <kbd_proc_data+0x7b>
f0100970:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100973:	83 e0 7f             	and    $0x7f,%eax
f0100976:	eb 03                	jmp    f010097b <kbd_proc_data+0x7e>
f0100978:	8a 45 f3             	mov    -0xd(%ebp),%al
f010097b:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010097e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100982:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f0100988:	83 c8 40             	or     $0x40,%eax
f010098b:	0f b6 c0             	movzbl %al,%eax
f010098e:	f7 d0                	not    %eax
f0100990:	89 c2                	mov    %eax,%edx
f0100992:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f0100997:	21 d0                	and    %edx,%eax
f0100999:	a3 e8 ed 85 f0       	mov    %eax,0xf085ede8
		return 0;
f010099e:	b8 00 00 00 00       	mov    $0x0,%eax
f01009a3:	e9 d6 00 00 00       	jmp    f0100a7e <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01009a8:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f01009ad:	83 e0 40             	and    $0x40,%eax
f01009b0:	85 c0                	test   %eax,%eax
f01009b2:	74 11                	je     f01009c5 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01009b4:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01009b8:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f01009bd:	83 e0 bf             	and    $0xffffffbf,%eax
f01009c0:	a3 e8 ed 85 f0       	mov    %eax,0xf085ede8
	}

	shift |= shiftcode[data];
f01009c5:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009c9:	8a 80 20 30 19 f0    	mov    -0xfe6cfe0(%eax),%al
f01009cf:	0f b6 d0             	movzbl %al,%edx
f01009d2:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f01009d7:	09 d0                	or     %edx,%eax
f01009d9:	a3 e8 ed 85 f0       	mov    %eax,0xf085ede8
	shift ^= togglecode[data];
f01009de:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009e2:	8a 80 20 31 19 f0    	mov    -0xfe6cee0(%eax),%al
f01009e8:	0f b6 d0             	movzbl %al,%edx
f01009eb:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f01009f0:	31 d0                	xor    %edx,%eax
f01009f2:	a3 e8 ed 85 f0       	mov    %eax,0xf085ede8

	c = charcode[shift & (CTL | SHIFT)][data];
f01009f7:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f01009fc:	83 e0 03             	and    $0x3,%eax
f01009ff:	8b 14 85 20 35 19 f0 	mov    -0xfe6cae0(,%eax,4),%edx
f0100a06:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100a0a:	01 d0                	add    %edx,%eax
f0100a0c:	8a 00                	mov    (%eax),%al
f0100a0e:	0f b6 c0             	movzbl %al,%eax
f0100a11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100a14:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f0100a19:	83 e0 08             	and    $0x8,%eax
f0100a1c:	85 c0                	test   %eax,%eax
f0100a1e:	74 22                	je     f0100a42 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f0100a20:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a24:	7e 0c                	jle    f0100a32 <kbd_proc_data+0x135>
f0100a26:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a2a:	7f 06                	jg     f0100a32 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f0100a2c:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a30:	eb 10                	jmp    f0100a42 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100a32:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100a36:	7e 0a                	jle    f0100a42 <kbd_proc_data+0x145>
f0100a38:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100a3c:	7f 04                	jg     f0100a42 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f0100a3e:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100a42:	a1 e8 ed 85 f0       	mov    0xf085ede8,%eax
f0100a47:	f7 d0                	not    %eax
f0100a49:	83 e0 06             	and    $0x6,%eax
f0100a4c:	85 c0                	test   %eax,%eax
f0100a4e:	75 2b                	jne    f0100a7b <kbd_proc_data+0x17e>
f0100a50:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100a57:	75 22                	jne    f0100a7b <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100a59:	83 ec 0c             	sub    $0xc,%esp
f0100a5c:	68 1d 39 13 f0       	push   $0xf013391d
f0100a61:	e8 a8 02 00 00       	call   f0100d0e <cprintf>
f0100a66:	83 c4 10             	add    $0x10,%esp
f0100a69:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f0100a70:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a74:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a77:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a7a:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100a7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100a7e:	c9                   	leave  
f0100a7f:	c3                   	ret    

f0100a80 <kbd_intr>:

void
kbd_intr(void)
{
f0100a80:	55                   	push   %ebp
f0100a81:	89 e5                	mov    %esp,%ebp
f0100a83:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100a86:	83 ec 0c             	sub    $0xc,%esp
f0100a89:	68 fd 08 10 f0       	push   $0xf01008fd
f0100a8e:	e8 0c 00 00 00       	call   f0100a9f <cons_intr>
f0100a93:	83 c4 10             	add    $0x10,%esp
}
f0100a96:	90                   	nop
f0100a97:	c9                   	leave  
f0100a98:	c3                   	ret    

f0100a99 <kbd_init>:

void
kbd_init(void)
{
f0100a99:	55                   	push   %ebp
f0100a9a:	89 e5                	mov    %esp,%ebp
}
f0100a9c:	90                   	nop
f0100a9d:	5d                   	pop    %ebp
f0100a9e:	c3                   	ret    

f0100a9f <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100a9f:	55                   	push   %ebp
f0100aa0:	89 e5                	mov    %esp,%ebp
f0100aa2:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100aa5:	eb 35                	jmp    f0100adc <cons_intr+0x3d>
		if (c == 0)
f0100aa7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100aab:	75 02                	jne    f0100aaf <cons_intr+0x10>
			continue;
f0100aad:	eb 2d                	jmp    f0100adc <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100aaf:	a1 e4 ed 85 f0       	mov    0xf085ede4,%eax
f0100ab4:	8d 50 01             	lea    0x1(%eax),%edx
f0100ab7:	89 15 e4 ed 85 f0    	mov    %edx,0xf085ede4
f0100abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100ac0:	88 90 e0 eb 85 f0    	mov    %dl,-0xf7a1420(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100ac6:	a1 e4 ed 85 f0       	mov    0xf085ede4,%eax
f0100acb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ad0:	75 0a                	jne    f0100adc <cons_intr+0x3d>
			cons.wpos = 0;
f0100ad2:	c7 05 e4 ed 85 f0 00 	movl   $0x0,0xf085ede4
f0100ad9:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0100adf:	ff d0                	call   *%eax
f0100ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100ae4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100ae8:	75 bd                	jne    f0100aa7 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100aea:	90                   	nop
f0100aeb:	c9                   	leave  
f0100aec:	c3                   	ret    

f0100aed <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100aed:	55                   	push   %ebp
f0100aee:	89 e5                	mov    %esp,%ebp
f0100af0:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100af3:	e8 a7 f9 ff ff       	call   f010049f <serial_intr>
	kbd_intr();
f0100af8:	e8 83 ff ff ff       	call   f0100a80 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100afd:	8b 15 e0 ed 85 f0    	mov    0xf085ede0,%edx
f0100b03:	a1 e4 ed 85 f0       	mov    0xf085ede4,%eax
f0100b08:	39 c2                	cmp    %eax,%edx
f0100b0a:	74 35                	je     f0100b41 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100b0c:	a1 e0 ed 85 f0       	mov    0xf085ede0,%eax
f0100b11:	8d 50 01             	lea    0x1(%eax),%edx
f0100b14:	89 15 e0 ed 85 f0    	mov    %edx,0xf085ede0
f0100b1a:	8a 80 e0 eb 85 f0    	mov    -0xf7a1420(%eax),%al
f0100b20:	0f b6 c0             	movzbl %al,%eax
f0100b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100b26:	a1 e0 ed 85 f0       	mov    0xf085ede0,%eax
f0100b2b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b30:	75 0a                	jne    f0100b3c <cons_getc+0x4f>
			cons.rpos = 0;
f0100b32:	c7 05 e0 ed 85 f0 00 	movl   $0x0,0xf085ede0
f0100b39:	00 00 00 
		return c;
f0100b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100b3f:	eb 05                	jmp    f0100b46 <cons_getc+0x59>
	}
	return 0;
f0100b41:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b46:	c9                   	leave  
f0100b47:	c3                   	ret    

f0100b48 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100b48:	55                   	push   %ebp
f0100b49:	89 e5                	mov    %esp,%ebp
f0100b4b:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100b4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100b55:	a1 c0 eb 85 f0       	mov    0xf085ebc0,%eax
f0100b5a:	85 c0                	test   %eax,%eax
f0100b5c:	74 41                	je     f0100b9f <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100b5e:	e8 fa f8 ff ff       	call   f010045d <serial_proc_data>
f0100b63:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b66:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b6a:	74 33                	je     f0100b9f <cons_getc2+0x57>
				if (c1 == 0)
f0100b6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b70:	74 2d                	je     f0100b9f <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100b72:	a1 e4 ed 85 f0       	mov    0xf085ede4,%eax
f0100b77:	8d 50 01             	lea    0x1(%eax),%edx
f0100b7a:	89 15 e4 ed 85 f0    	mov    %edx,0xf085ede4
f0100b80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b83:	88 90 e0 eb 85 f0    	mov    %dl,-0xf7a1420(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100b89:	a1 e4 ed 85 f0       	mov    0xf085ede4,%eax
f0100b8e:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b93:	75 0a                	jne    f0100b9f <cons_getc2+0x57>
						cons.wpos = 0;
f0100b95:	c7 05 e4 ed 85 f0 00 	movl   $0x0,0xf085ede4
f0100b9c:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100b9f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ba6:	e8 52 fd ff ff       	call   f01008fd <kbd_proc_data>
f0100bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100bae:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100bb2:	74 33                	je     f0100be7 <cons_getc2+0x9f>
			if (c2 == 0)
f0100bb4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100bb8:	74 2d                	je     f0100be7 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100bba:	a1 e4 ed 85 f0       	mov    0xf085ede4,%eax
f0100bbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100bc2:	89 15 e4 ed 85 f0    	mov    %edx,0xf085ede4
f0100bc8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100bcb:	88 90 e0 eb 85 f0    	mov    %dl,-0xf7a1420(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100bd1:	a1 e4 ed 85 f0       	mov    0xf085ede4,%eax
f0100bd6:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bdb:	75 0a                	jne    f0100be7 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100bdd:	c7 05 e4 ed 85 f0 00 	movl   $0x0,0xf085ede4
f0100be4:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100be7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100beb:	7e 44                	jle    f0100c31 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100bed:	8b 15 e0 ed 85 f0    	mov    0xf085ede0,%edx
f0100bf3:	a1 e4 ed 85 f0       	mov    0xf085ede4,%eax
f0100bf8:	39 c2                	cmp    %eax,%edx
f0100bfa:	74 35                	je     f0100c31 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100bfc:	a1 e0 ed 85 f0       	mov    0xf085ede0,%eax
f0100c01:	8d 50 01             	lea    0x1(%eax),%edx
f0100c04:	89 15 e0 ed 85 f0    	mov    %edx,0xf085ede0
f0100c0a:	8a 80 e0 eb 85 f0    	mov    -0xf7a1420(%eax),%al
f0100c10:	0f b6 c0             	movzbl %al,%eax
f0100c13:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100c16:	a1 e0 ed 85 f0       	mov    0xf085ede0,%eax
f0100c1b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c20:	75 0a                	jne    f0100c2c <cons_getc2+0xe4>
				cons.rpos = 0;
f0100c22:	c7 05 e0 ed 85 f0 00 	movl   $0x0,0xf085ede0
f0100c29:	00 00 00 
			return c;
f0100c2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100c2f:	eb 05                	jmp    f0100c36 <cons_getc2+0xee>
		}
	}
	return 0;
f0100c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100c36:	c9                   	leave  
f0100c37:	c3                   	ret    

f0100c38 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100c38:	55                   	push   %ebp
f0100c39:	89 e5                	mov    %esp,%ebp
f0100c3b:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100c3e:	ff 75 08             	pushl  0x8(%ebp)
f0100c41:	e8 8b f9 ff ff       	call   f01005d1 <lpt_putc>
f0100c46:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100c49:	83 ec 0c             	sub    $0xc,%esp
f0100c4c:	ff 75 08             	pushl  0x8(%ebp)
f0100c4f:	e8 b7 fa ff ff       	call   f010070b <cga_putc>
f0100c54:	83 c4 10             	add    $0x10,%esp
}
f0100c57:	90                   	nop
f0100c58:	c9                   	leave  
f0100c59:	c3                   	ret    

f0100c5a <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100c5a:	55                   	push   %ebp
f0100c5b:	89 e5                	mov    %esp,%ebp
f0100c5d:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100c60:	e8 e1 f9 ff ff       	call   f0100646 <cga_init>
	kbd_init();
f0100c65:	e8 2f fe ff ff       	call   f0100a99 <kbd_init>
	serial_init();
f0100c6a:	e8 52 f8 ff ff       	call   f01004c1 <serial_init>

	if (!serial_exists)
f0100c6f:	a1 c0 eb 85 f0       	mov    0xf085ebc0,%eax
f0100c74:	85 c0                	test   %eax,%eax
f0100c76:	75 10                	jne    f0100c88 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100c78:	83 ec 0c             	sub    $0xc,%esp
f0100c7b:	68 29 39 13 f0       	push   $0xf0133929
f0100c80:	e8 89 00 00 00       	call   f0100d0e <cprintf>
f0100c85:	83 c4 10             	add    $0x10,%esp
}
f0100c88:	90                   	nop
f0100c89:	c9                   	leave  
f0100c8a:	c3                   	ret    

f0100c8b <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100c8b:	55                   	push   %ebp
f0100c8c:	89 e5                	mov    %esp,%ebp
f0100c8e:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100c91:	83 ec 0c             	sub    $0xc,%esp
f0100c94:	ff 75 08             	pushl  0x8(%ebp)
f0100c97:	e8 9c ff ff ff       	call   f0100c38 <cons_putc>
f0100c9c:	83 c4 10             	add    $0x10,%esp
}
f0100c9f:	90                   	nop
f0100ca0:	c9                   	leave  
f0100ca1:	c3                   	ret    

f0100ca2 <getchar>:

int
getchar(void)
{
f0100ca2:	55                   	push   %ebp
f0100ca3:	89 e5                	mov    %esp,%ebp
f0100ca5:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100ca8:	e8 40 fe ff ff       	call   f0100aed <cons_getc>
f0100cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100cb4:	74 f2                	je     f0100ca8 <getchar+0x6>
		/* do nothing */;
	return c;
f0100cb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cb9:	c9                   	leave  
f0100cba:	c3                   	ret    

f0100cbb <iscons>:

int
iscons(int fdnum)
{
f0100cbb:	55                   	push   %ebp
f0100cbc:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100cbe:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100cc3:	5d                   	pop    %ebp
f0100cc4:	c3                   	ret    

f0100cc5 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100cc5:	55                   	push   %ebp
f0100cc6:	89 e5                	mov    %esp,%ebp
f0100cc8:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100ccb:	83 ec 0c             	sub    $0xc,%esp
f0100cce:	ff 75 08             	pushl  0x8(%ebp)
f0100cd1:	e8 b5 ff ff ff       	call   f0100c8b <cputchar>
f0100cd6:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100cd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100cdc:	83 c0 04             	add    $0x4,%eax
f0100cdf:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100ce2:	90                   	nop
f0100ce3:	c9                   	leave  
f0100ce4:	c3                   	ret    

f0100ce5 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100ce5:	55                   	push   %ebp
f0100ce6:	89 e5                	mov    %esp,%ebp
f0100ce8:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100ceb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100cf2:	ff 75 0c             	pushl  0xc(%ebp)
f0100cf5:	ff 75 08             	pushl  0x8(%ebp)
f0100cf8:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100cfb:	50                   	push   %eax
f0100cfc:	68 c5 0c 10 f0       	push   $0xf0100cc5
f0100d01:	e8 51 06 03 00       	call   f0131357 <vprintfmt>
f0100d06:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100d09:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d0c:	c9                   	leave  
f0100d0d:	c3                   	ret    

f0100d0e <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100d0e:	55                   	push   %ebp
f0100d0f:	89 e5                	mov    %esp,%ebp
f0100d11:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100d14:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100d1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d1d:	83 ec 08             	sub    $0x8,%esp
f0100d20:	ff 75 f4             	pushl  -0xc(%ebp)
f0100d23:	50                   	push   %eax
f0100d24:	e8 bc ff ff ff       	call   f0100ce5 <vcprintf>
f0100d29:	83 c4 10             	add    $0x10,%esp
f0100d2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100d2f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100d32:	c9                   	leave  
f0100d33:	c3                   	ret    

f0100d34 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100d34:	55                   	push   %ebp
f0100d35:	89 e5                	mov    %esp,%ebp
f0100d37:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100d3d:	83 ec 08             	sub    $0x8,%esp
f0100d40:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d46:	50                   	push   %eax
f0100d47:	68 46 39 13 f0       	push   $0xf0133946
f0100d4c:	e8 ae 0a 03 00       	call   f01317ff <readline>
f0100d51:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100d54:	83 ec 0c             	sub    $0xc,%esp
f0100d57:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100d5d:	50                   	push   %eax
f0100d5e:	e8 0d 00 00 00       	call   f0100d70 <execute_command>
f0100d63:	83 c4 10             	add    $0x10,%esp
f0100d66:	85 c0                	test   %eax,%eax
f0100d68:	78 02                	js     f0100d6c <run_command_prompt+0x38>
				break;
	}
f0100d6a:	eb d1                	jmp    f0100d3d <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100d6c:	90                   	nop
	}
}
f0100d6d:	90                   	nop
f0100d6e:	c9                   	leave  
f0100d6f:	c3                   	ret    

f0100d70 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100d70:	55                   	push   %ebp
f0100d71:	89 e5                	mov    %esp,%ebp
f0100d73:	83 ec 68             	sub    $0x68,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0100d76:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0100d79:	50                   	push   %eax
f0100d7a:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0100d7d:	50                   	push   %eax
f0100d7e:	68 4c 39 13 f0       	push   $0xf013394c
f0100d83:	ff 75 08             	pushl  0x8(%ebp)
f0100d86:	e8 ae 12 03 00       	call   f0132039 <strsplit>
f0100d8b:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100d8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100d91:	85 c0                	test   %eax,%eax
f0100d93:	75 0a                	jne    f0100d9f <execute_command+0x2f>
		return 0;
f0100d95:	b8 00 00 00 00       	mov    $0x0,%eax
f0100d9a:	e9 21 01 00 00       	jmp    f0100ec0 <execute_command+0x150>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100d9f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 str_length=strlen(arguments[0]);//new doaa
f0100da6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100da9:	83 ec 0c             	sub    $0xc,%esp
f0100dac:	50                   	push   %eax
f0100dad:	e8 53 0c 03 00       	call   f0131a05 <strlen>
f0100db2:	83 c4 10             	add    $0x10,%esp
f0100db5:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i ;

	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100db8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100dbf:	e9 88 00 00 00       	jmp    f0100e4c <execute_command+0xdc>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100dc4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100dc7:	89 d0                	mov    %edx,%eax
f0100dc9:	01 c0                	add    %eax,%eax
f0100dcb:	01 d0                	add    %edx,%eax
f0100dcd:	c1 e0 02             	shl    $0x2,%eax
f0100dd0:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100dd5:	8b 10                	mov    (%eax),%edx
f0100dd7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100dda:	83 ec 08             	sub    $0x8,%esp
f0100ddd:	52                   	push   %edx
f0100dde:	50                   	push   %eax
f0100ddf:	e8 2d 0d 03 00       	call   f0131b11 <strcmp>
f0100de4:	83 c4 10             	add    $0x10,%esp
f0100de7:	85 c0                	test   %eax,%eax
f0100de9:	75 09                	jne    f0100df4 <execute_command+0x84>
		{
			command_found = 1;
f0100deb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100df2:	eb 68                	jmp    f0100e5c <execute_command+0xec>
		}

		else if(strncmp(arguments[0], commands[i].name,str_length) == 0){//new doaa
f0100df4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100df7:	89 d0                	mov    %edx,%eax
f0100df9:	01 c0                	add    %eax,%eax
f0100dfb:	01 d0                	add    %edx,%eax
f0100dfd:	c1 e0 02             	shl    $0x2,%eax
f0100e00:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e05:	8b 10                	mov    (%eax),%edx
f0100e07:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100e0a:	83 ec 04             	sub    $0x4,%esp
f0100e0d:	ff 75 ec             	pushl  -0x14(%ebp)
f0100e10:	52                   	push   %edx
f0100e11:	50                   	push   %eax
f0100e12:	e8 32 0d 03 00       	call   f0131b49 <strncmp>
f0100e17:	83 c4 10             	add    $0x10,%esp
f0100e1a:	85 c0                	test   %eax,%eax
f0100e1c:	75 2b                	jne    f0100e49 <execute_command+0xd9>
				command_found = 2;
f0100e1e:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
				cprintf("%s \n",commands[i].name);
f0100e25:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e28:	89 d0                	mov    %edx,%eax
f0100e2a:	01 c0                	add    %eax,%eax
f0100e2c:	01 d0                	add    %edx,%eax
f0100e2e:	c1 e0 02             	shl    $0x2,%eax
f0100e31:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0100e36:	8b 00                	mov    (%eax),%eax
f0100e38:	83 ec 08             	sub    $0x8,%esp
f0100e3b:	50                   	push   %eax
f0100e3c:	68 51 39 13 f0       	push   $0xf0133951
f0100e41:	e8 c8 fe ff ff       	call   f0100d0e <cprintf>
f0100e46:	83 c4 10             	add    $0x10,%esp
	int command_found = 0;
	uint32 str_length=strlen(arguments[0]);//new doaa

	int i ;

	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100e49:	ff 45 f0             	incl   -0x10(%ebp)
f0100e4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e4f:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f0100e54:	39 c2                	cmp    %eax,%edx
f0100e56:	0f 82 68 ff ff ff    	jb     f0100dc4 <execute_command+0x54>
				cprintf("%s \n",commands[i].name);
		}

	}

	if(command_found == 1)//new doaa
f0100e5c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0100e60:	75 2b                	jne    f0100e8d <execute_command+0x11d>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100e62:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e65:	89 d0                	mov    %edx,%eax
f0100e67:	01 c0                	add    %eax,%eax
f0100e69:	01 d0                	add    %edx,%eax
f0100e6b:	c1 e0 02             	shl    $0x2,%eax
f0100e6e:	05 48 35 19 f0       	add    $0xf0193548,%eax
f0100e73:	8b 00                	mov    (%eax),%eax
f0100e75:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100e78:	83 ec 08             	sub    $0x8,%esp
f0100e7b:	8d 4d a4             	lea    -0x5c(%ebp),%ecx
f0100e7e:	51                   	push   %ecx
f0100e7f:	52                   	push   %edx
f0100e80:	ff d0                	call   *%eax
f0100e82:	83 c4 10             	add    $0x10,%esp
f0100e85:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f0100e88:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100e8b:	eb 33                	jmp    f0100ec0 <execute_command+0x150>
	}
	else if (command_found == 2)//new doaa
f0100e8d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0100e91:	75 07                	jne    f0100e9a <execute_command+0x12a>
	{
				return 0;
f0100e93:	b8 00 00 00 00       	mov    $0x0,%eax
f0100e98:	eb 26                	jmp    f0100ec0 <execute_command+0x150>
	}
	else if (command_found == 0)//new doaa
f0100e9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e9e:	75 1b                	jne    f0100ebb <execute_command+0x14b>
	{
		//if not found, then it's unknown command
				cprintf("Unknown command '%s'\n", arguments[0]);
f0100ea0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0100ea3:	83 ec 08             	sub    $0x8,%esp
f0100ea6:	50                   	push   %eax
f0100ea7:	68 56 39 13 f0       	push   $0xf0133956
f0100eac:	e8 5d fe ff ff       	call   f0100d0e <cprintf>
f0100eb1:	83 c4 10             	add    $0x10,%esp
				return 0;
f0100eb4:	b8 00 00 00 00       	mov    $0x0,%eax
f0100eb9:	eb 05                	jmp    f0100ec0 <execute_command+0x150>
	}

	return 0;
f0100ebb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100ec0:	c9                   	leave  
f0100ec1:	c3                   	ret    

f0100ec2 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100ec2:	55                   	push   %ebp
f0100ec3:	89 e5                	mov    %esp,%ebp
f0100ec5:	c7 05 58 f7 85 f0 00 	movl   $0x0,0xf085f758
f0100ecc:	00 00 00 
f0100ecf:	90                   	nop
f0100ed0:	5d                   	pop    %ebp
f0100ed1:	c3                   	ret    

f0100ed2 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100ed2:	55                   	push   %ebp
f0100ed3:	89 e5                	mov    %esp,%ebp
f0100ed5:	c7 05 58 f7 85 f0 01 	movl   $0x1,0xf085f758
f0100edc:	00 00 00 
f0100edf:	90                   	nop
f0100ee0:	5d                   	pop    %ebp
f0100ee1:	c3                   	ret    

f0100ee2 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100ee2:	55                   	push   %ebp
f0100ee3:	89 e5                	mov    %esp,%ebp
f0100ee5:	c7 05 58 f7 85 f0 02 	movl   $0x2,0xf085f758
f0100eec:	00 00 00 
f0100eef:	90                   	nop
f0100ef0:	5d                   	pop    %ebp
f0100ef1:	c3                   	ret    

f0100ef2 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100ef2:	55                   	push   %ebp
f0100ef3:	89 e5                	mov    %esp,%ebp
f0100ef5:	c7 05 58 f7 85 f0 03 	movl   $0x3,0xf085f758
f0100efc:	00 00 00 
f0100eff:	90                   	nop
f0100f00:	5d                   	pop    %ebp
f0100f01:	c3                   	ret    

f0100f02 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100f02:	55                   	push   %ebp
f0100f03:	89 e5                	mov    %esp,%ebp
f0100f05:	c7 05 58 f7 85 f0 04 	movl   $0x4,0xf085f758
f0100f0c:	00 00 00 
f0100f0f:	90                   	nop
f0100f10:	5d                   	pop    %ebp
f0100f11:	c3                   	ret    

f0100f12 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100f12:	55                   	push   %ebp
f0100f13:	89 e5                	mov    %esp,%ebp
f0100f15:	a1 58 f7 85 f0       	mov    0xf085f758,%eax
f0100f1a:	85 c0                	test   %eax,%eax
f0100f1c:	75 04                	jne    f0100f22 <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100f1e:	b0 01                	mov    $0x1,%al
f0100f20:	eb 02                	jmp    f0100f24 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100f22:	b0 00                	mov    $0x0,%al
f0100f24:	5d                   	pop    %ebp
f0100f25:	c3                   	ret    

f0100f26 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100f26:	55                   	push   %ebp
f0100f27:	89 e5                	mov    %esp,%ebp
f0100f29:	a1 58 f7 85 f0       	mov    0xf085f758,%eax
f0100f2e:	83 f8 01             	cmp    $0x1,%eax
f0100f31:	75 04                	jne    f0100f37 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100f33:	b0 01                	mov    $0x1,%al
f0100f35:	eb 02                	jmp    f0100f39 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100f37:	b0 00                	mov    $0x0,%al
f0100f39:	5d                   	pop    %ebp
f0100f3a:	c3                   	ret    

f0100f3b <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100f3b:	55                   	push   %ebp
f0100f3c:	89 e5                	mov    %esp,%ebp
f0100f3e:	a1 58 f7 85 f0       	mov    0xf085f758,%eax
f0100f43:	83 f8 02             	cmp    $0x2,%eax
f0100f46:	75 04                	jne    f0100f4c <isKHeapPlacementStrategyBESTFIT+0x11>
f0100f48:	b0 01                	mov    $0x1,%al
f0100f4a:	eb 02                	jmp    f0100f4e <isKHeapPlacementStrategyBESTFIT+0x13>
f0100f4c:	b0 00                	mov    $0x0,%al
f0100f4e:	5d                   	pop    %ebp
f0100f4f:	c3                   	ret    

f0100f50 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f50:	55                   	push   %ebp
f0100f51:	89 e5                	mov    %esp,%ebp
f0100f53:	a1 58 f7 85 f0       	mov    0xf085f758,%eax
f0100f58:	83 f8 03             	cmp    $0x3,%eax
f0100f5b:	75 04                	jne    f0100f61 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100f5d:	b0 01                	mov    $0x1,%al
f0100f5f:	eb 02                	jmp    f0100f63 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100f61:	b0 00                	mov    $0x0,%al
f0100f63:	5d                   	pop    %ebp
f0100f64:	c3                   	ret    

f0100f65 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f65:	55                   	push   %ebp
f0100f66:	89 e5                	mov    %esp,%ebp
f0100f68:	a1 58 f7 85 f0       	mov    0xf085f758,%eax
f0100f6d:	83 f8 04             	cmp    $0x4,%eax
f0100f70:	75 04                	jne    f0100f76 <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100f72:	b0 01                	mov    $0x1,%al
f0100f74:	eb 02                	jmp    f0100f78 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100f76:	b0 00                	mov    $0x0,%al
f0100f78:	5d                   	pop    %ebp
f0100f79:	c3                   	ret    

f0100f7a <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100f7a:	55                   	push   %ebp
f0100f7b:	89 e5                	mov    %esp,%ebp
f0100f7d:	c7 05 2c f7 85 f0 01 	movl   $0x1,0xf085f72c
f0100f84:	00 00 00 
f0100f87:	90                   	nop
f0100f88:	5d                   	pop    %ebp
f0100f89:	c3                   	ret    

f0100f8a <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100f8a:	55                   	push   %ebp
f0100f8b:	89 e5                	mov    %esp,%ebp
f0100f8d:	c7 05 2c f7 85 f0 02 	movl   $0x2,0xf085f72c
f0100f94:	00 00 00 
f0100f97:	90                   	nop
f0100f98:	5d                   	pop    %ebp
f0100f99:	c3                   	ret    

f0100f9a <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100f9a:	55                   	push   %ebp
f0100f9b:	89 e5                	mov    %esp,%ebp
f0100f9d:	c7 05 2c f7 85 f0 03 	movl   $0x3,0xf085f72c
f0100fa4:	00 00 00 
f0100fa7:	90                   	nop
f0100fa8:	5d                   	pop    %ebp
f0100fa9:	c3                   	ret    

f0100faa <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100faa:	55                   	push   %ebp
f0100fab:	89 e5                	mov    %esp,%ebp
f0100fad:	c7 05 2c f7 85 f0 04 	movl   $0x4,0xf085f72c
f0100fb4:	00 00 00 
f0100fb7:	90                   	nop
f0100fb8:	5d                   	pop    %ebp
f0100fb9:	c3                   	ret    

f0100fba <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100fba:	55                   	push   %ebp
f0100fbb:	89 e5                	mov    %esp,%ebp
f0100fbd:	a1 2c f7 85 f0       	mov    0xf085f72c,%eax
f0100fc2:	83 f8 01             	cmp    $0x1,%eax
f0100fc5:	75 04                	jne    f0100fcb <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100fc7:	b0 01                	mov    $0x1,%al
f0100fc9:	eb 02                	jmp    f0100fcd <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100fcb:	b0 00                	mov    $0x0,%al
f0100fcd:	5d                   	pop    %ebp
f0100fce:	c3                   	ret    

f0100fcf <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100fcf:	55                   	push   %ebp
f0100fd0:	89 e5                	mov    %esp,%ebp
f0100fd2:	a1 2c f7 85 f0       	mov    0xf085f72c,%eax
f0100fd7:	83 f8 02             	cmp    $0x2,%eax
f0100fda:	75 04                	jne    f0100fe0 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100fdc:	b0 01                	mov    $0x1,%al
f0100fde:	eb 02                	jmp    f0100fe2 <isUHeapPlacementStrategyBESTFIT+0x13>
f0100fe0:	b0 00                	mov    $0x0,%al
f0100fe2:	5d                   	pop    %ebp
f0100fe3:	c3                   	ret    

f0100fe4 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100fe4:	55                   	push   %ebp
f0100fe5:	89 e5                	mov    %esp,%ebp
f0100fe7:	a1 2c f7 85 f0       	mov    0xf085f72c,%eax
f0100fec:	83 f8 03             	cmp    $0x3,%eax
f0100fef:	75 04                	jne    f0100ff5 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100ff1:	b0 01                	mov    $0x1,%al
f0100ff3:	eb 02                	jmp    f0100ff7 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100ff5:	b0 00                	mov    $0x0,%al
f0100ff7:	5d                   	pop    %ebp
f0100ff8:	c3                   	ret    

f0100ff9 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100ff9:	55                   	push   %ebp
f0100ffa:	89 e5                	mov    %esp,%ebp
f0100ffc:	a1 2c f7 85 f0       	mov    0xf085f72c,%eax
f0101001:	83 f8 04             	cmp    $0x4,%eax
f0101004:	75 04                	jne    f010100a <isUHeapPlacementStrategyWORSTFIT+0x11>
f0101006:	b0 01                	mov    $0x1,%al
f0101008:	eb 02                	jmp    f010100c <isUHeapPlacementStrategyWORSTFIT+0x13>
f010100a:	b0 00                	mov    $0x0,%al
f010100c:	5d                   	pop    %ebp
f010100d:	c3                   	ret    

f010100e <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010100e:	55                   	push   %ebp
f010100f:	89 e5                	mov    %esp,%ebp
f0101011:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0101014:	8b 45 08             	mov    0x8(%ebp),%eax
f0101017:	c1 e8 0c             	shr    $0xc,%eax
f010101a:	89 c2                	mov    %eax,%edx
f010101c:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f0101021:	39 c2                	cmp    %eax,%edx
f0101023:	72 14                	jb     f0101039 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0101025:	83 ec 04             	sub    $0x4,%esp
f0101028:	68 6c 39 13 f0       	push   $0xf013396c
f010102d:	6a 55                	push   $0x55
f010102f:	68 94 39 13 f0       	push   $0xf0133994
f0101034:	e8 cc f1 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0101039:	8b 15 50 f7 85 f0    	mov    0xf085f750,%edx
f010103f:	8b 45 08             	mov    0x8(%ebp),%eax
f0101042:	c1 e8 0c             	shr    $0xc,%eax
f0101045:	89 c1                	mov    %eax,%ecx
f0101047:	89 c8                	mov    %ecx,%eax
f0101049:	01 c0                	add    %eax,%eax
f010104b:	01 c8                	add    %ecx,%eax
f010104d:	c1 e0 03             	shl    $0x3,%eax
f0101050:	01 d0                	add    %edx,%eax
}
f0101052:	c9                   	leave  
f0101053:	c3                   	ret    

f0101054 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0101054:	55                   	push   %ebp
f0101055:	89 e5                	mov    %esp,%ebp
f0101057:	53                   	push   %ebx
f0101058:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010105b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101062:	eb 3b                	jmp    f010109f <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0101064:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0101067:	89 d0                	mov    %edx,%eax
f0101069:	01 c0                	add    %eax,%eax
f010106b:	01 d0                	add    %edx,%eax
f010106d:	c1 e0 02             	shl    $0x2,%eax
f0101070:	05 44 35 19 f0       	add    $0xf0193544,%eax
f0101075:	8b 10                	mov    (%eax),%edx
f0101077:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010107a:	89 c8                	mov    %ecx,%eax
f010107c:	01 c0                	add    %eax,%eax
f010107e:	01 c8                	add    %ecx,%eax
f0101080:	c1 e0 02             	shl    $0x2,%eax
f0101083:	05 40 35 19 f0       	add    $0xf0193540,%eax
f0101088:	8b 00                	mov    (%eax),%eax
f010108a:	83 ec 04             	sub    $0x4,%esp
f010108d:	52                   	push   %edx
f010108e:	50                   	push   %eax
f010108f:	68 0e 48 13 f0       	push   $0xf013480e
f0101094:	e8 75 fc ff ff       	call   f0100d0e <cprintf>
f0101099:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010109c:	ff 45 f4             	incl   -0xc(%ebp)
f010109f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010a2:	a1 ac 38 19 f0       	mov    0xf01938ac,%eax
f01010a7:	39 c2                	cmp    %eax,%edx
f01010a9:	72 b9                	jb     f0101064 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01010ab:	83 ec 0c             	sub    $0xc,%esp
f01010ae:	68 17 48 13 f0       	push   $0xf0134817
f01010b3:	e8 56 fc ff ff       	call   f0100d0e <cprintf>
f01010b8:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01010bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01010c2:	eb 42                	jmp    f0101106 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01010c4:	8b 0d 14 3d 19 f0    	mov    0xf0193d14,%ecx
f01010ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01010cd:	89 d0                	mov    %edx,%eax
f01010cf:	01 c0                	add    %eax,%eax
f01010d1:	01 d0                	add    %edx,%eax
f01010d3:	c1 e0 02             	shl    $0x2,%eax
f01010d6:	01 c8                	add    %ecx,%eax
f01010d8:	8b 50 04             	mov    0x4(%eax),%edx
f01010db:	8b 1d 14 3d 19 f0    	mov    0xf0193d14,%ebx
f01010e1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01010e4:	89 c8                	mov    %ecx,%eax
f01010e6:	01 c0                	add    %eax,%eax
f01010e8:	01 c8                	add    %ecx,%eax
f01010ea:	c1 e0 02             	shl    $0x2,%eax
f01010ed:	01 d8                	add    %ebx,%eax
f01010ef:	8b 00                	mov    (%eax),%eax
f01010f1:	83 ec 04             	sub    $0x4,%esp
f01010f4:	52                   	push   %edx
f01010f5:	50                   	push   %eax
f01010f6:	68 2c 48 13 f0       	push   $0xf013482c
f01010fb:	e8 0e fc ff ff       	call   f0100d0e <cprintf>
f0101100:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101103:	ff 45 f4             	incl   -0xc(%ebp)
f0101106:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010110b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010110e:	7c b4                	jl     f01010c4 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101110:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101115:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101118:	c9                   	leave  
f0101119:	c3                   	ret    

f010111a <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f010111a:	55                   	push   %ebp
f010111b:	89 e5                	mov    %esp,%ebp
f010111d:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101120:	83 ec 0c             	sub    $0xc,%esp
f0101123:	68 48 48 13 f0       	push   $0xf0134848
f0101128:	e8 e1 fb ff ff       	call   f0100d0e <cprintf>
f010112d:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101130:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0101135:	83 ec 04             	sub    $0x4,%esp
f0101138:	50                   	push   %eax
f0101139:	68 0c 00 10 f0       	push   $0xf010000c
f010113e:	68 64 48 13 f0       	push   $0xf0134864
f0101143:	e8 c6 fb ff ff       	call   f0100d0e <cprintf>
f0101148:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010114b:	b8 81 37 13 00       	mov    $0x133781,%eax
f0101150:	83 ec 04             	sub    $0x4,%esp
f0101153:	50                   	push   %eax
f0101154:	68 81 37 13 f0       	push   $0xf0133781
f0101159:	68 a0 48 13 f0       	push   $0xf01348a0
f010115e:	e8 ab fb ff ff       	call   f0100d0e <cprintf>
f0101163:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0101166:	b8 9c eb 85 00       	mov    $0x85eb9c,%eax
f010116b:	83 ec 04             	sub    $0x4,%esp
f010116e:	50                   	push   %eax
f010116f:	68 9c eb 85 f0       	push   $0xf085eb9c
f0101174:	68 dc 48 13 f0       	push   $0xf01348dc
f0101179:	e8 90 fb ff ff       	call   f0100d0e <cprintf>
f010117e:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101181:	b8 bc f8 85 00       	mov    $0x85f8bc,%eax
f0101186:	83 ec 04             	sub    $0x4,%esp
f0101189:	50                   	push   %eax
f010118a:	68 bc f8 85 f0       	push   $0xf085f8bc
f010118f:	68 24 49 13 f0       	push   $0xf0134924
f0101194:	e8 75 fb ff ff       	call   f0100d0e <cprintf>
f0101199:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f010119c:	b8 bc f8 85 f0       	mov    $0xf085f8bc,%eax
f01011a1:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01011a7:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01011ac:	29 c2                	sub    %eax,%edx
f01011ae:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01011b0:	85 c0                	test   %eax,%eax
f01011b2:	79 05                	jns    f01011b9 <command_kernel_info+0x9f>
f01011b4:	05 ff 03 00 00       	add    $0x3ff,%eax
f01011b9:	c1 f8 0a             	sar    $0xa,%eax
f01011bc:	83 ec 08             	sub    $0x8,%esp
f01011bf:	50                   	push   %eax
f01011c0:	68 60 49 13 f0       	push   $0xf0134960
f01011c5:	e8 44 fb ff ff       	call   f0100d0e <cprintf>
f01011ca:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f01011cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01011d2:	c9                   	leave  
f01011d3:	c3                   	ret    

f01011d4 <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f01011d4:	55                   	push   %ebp
f01011d5:	89 e5                	mov    %esp,%ebp
f01011d7:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011da:	83 ec 04             	sub    $0x4,%esp
f01011dd:	68 8c 49 13 f0       	push   $0xf013498c
f01011e2:	68 b0 00 00 00       	push   $0xb0
f01011e7:	68 ad 49 13 f0       	push   $0xf01349ad
f01011ec:	e8 14 f0 ff ff       	call   f0100205 <_panic>

f01011f1 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f01011f1:	55                   	push   %ebp
f01011f2:	89 e5                	mov    %esp,%ebp
f01011f4:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011f7:	83 ec 04             	sub    $0x4,%esp
f01011fa:	68 8c 49 13 f0       	push   $0xf013498c
f01011ff:	68 ba 00 00 00       	push   $0xba
f0101204:	68 ad 49 13 f0       	push   $0xf01349ad
f0101209:	e8 f7 ef ff ff       	call   f0100205 <_panic>

f010120e <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f010120e:	55                   	push   %ebp
f010120f:	89 e5                	mov    %esp,%ebp
f0101211:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101214:	83 ec 04             	sub    $0x4,%esp
f0101217:	68 8c 49 13 f0       	push   $0xf013498c
f010121c:	68 c3 00 00 00       	push   $0xc3
f0101221:	68 ad 49 13 f0       	push   $0xf01349ad
f0101226:	e8 da ef ff ff       	call   f0100205 <_panic>

f010122b <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f010122b:	55                   	push   %ebp
f010122c:	89 e5                	mov    %esp,%ebp
f010122e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101231:	83 ec 04             	sub    $0x4,%esp
f0101234:	68 8c 49 13 f0       	push   $0xf013498c
f0101239:	68 cf 00 00 00       	push   $0xcf
f010123e:	68 ad 49 13 f0       	push   $0xf01349ad
f0101243:	e8 bd ef ff ff       	call   f0100205 <_panic>

f0101248 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101248:	55                   	push   %ebp
f0101249:	89 e5                	mov    %esp,%ebp
f010124b:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010124e:	83 ec 04             	sub    $0x4,%esp
f0101251:	68 8c 49 13 f0       	push   $0xf013498c
f0101256:	68 d8 00 00 00       	push   $0xd8
f010125b:	68 ad 49 13 f0       	push   $0xf01349ad
f0101260:	e8 a0 ef ff ff       	call   f0100205 <_panic>

f0101265 <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f0101265:	55                   	push   %ebp
f0101266:	89 e5                	mov    %esp,%ebp
f0101268:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f010126b:	83 ec 04             	sub    $0x4,%esp
f010126e:	68 8c 49 13 f0       	push   $0xf013498c
f0101273:	68 e1 00 00 00       	push   $0xe1
f0101278:	68 ad 49 13 f0       	push   $0xf01349ad
f010127d:	e8 83 ef ff ff       	call   f0100205 <_panic>

f0101282 <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f0101282:	55                   	push   %ebp
f0101283:	89 e5                	mov    %esp,%ebp
f0101285:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101288:	83 ec 04             	sub    $0x4,%esp
f010128b:	68 8c 49 13 f0       	push   $0xf013498c
f0101290:	68 ee 00 00 00       	push   $0xee
f0101295:	68 ad 49 13 f0       	push   $0xf01349ad
f010129a:	e8 66 ef ff ff       	call   f0100205 <_panic>

f010129f <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f010129f:	55                   	push   %ebp
f01012a0:	89 e5                	mov    %esp,%ebp
f01012a2:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012a8:	83 c0 04             	add    $0x4,%eax
f01012ab:	8b 00                	mov    (%eax),%eax
f01012ad:	83 ec 04             	sub    $0x4,%esp
f01012b0:	6a 10                	push   $0x10
f01012b2:	6a 00                	push   $0x0
f01012b4:	50                   	push   %eax
f01012b5:	e8 ab 0a 03 00       	call   f0131d65 <strtol>
f01012ba:	83 c4 10             	add    $0x10,%esp
f01012bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f01012c0:	83 ec 0c             	sub    $0xc,%esp
f01012c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01012c6:	50                   	push   %eax
f01012c7:	e8 0d 56 00 00       	call   f01068d9 <allocate_frame>
f01012cc:	83 c4 10             	add    $0x10,%esp
f01012cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f01012d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01012d5:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01012da:	6a 06                	push   $0x6
f01012dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01012df:	52                   	push   %edx
f01012e0:	50                   	push   %eax
f01012e1:	e8 42 5a 00 00       	call   f0106d28 <map_frame>
f01012e6:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f01012e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012ee:	c9                   	leave  
f01012ef:	c3                   	ret    

f01012f0 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f01012f0:	55                   	push   %ebp
f01012f1:	89 e5                	mov    %esp,%ebp
f01012f3:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01012f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012f9:	83 c0 04             	add    $0x4,%eax
f01012fc:	8b 00                	mov    (%eax),%eax
f01012fe:	83 ec 04             	sub    $0x4,%esp
f0101301:	6a 10                	push   $0x10
f0101303:	6a 00                	push   $0x0
f0101305:	50                   	push   %eax
f0101306:	e8 5a 0a 03 00       	call   f0131d65 <strtol>
f010130b:	83 c4 10             	add    $0x10,%esp
f010130e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101311:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0101316:	83 ec 08             	sub    $0x8,%esp
f0101319:	ff 75 f4             	pushl  -0xc(%ebp)
f010131c:	50                   	push   %eax
f010131d:	e8 3b 5b 00 00       	call   f0106e5d <unmap_frame>
f0101322:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101325:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010132a:	c9                   	leave  
f010132b:	c3                   	ret    

f010132c <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f010132c:	55                   	push   %ebp
f010132d:	89 e5                	mov    %esp,%ebp
f010132f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101332:	83 ec 04             	sub    $0x4,%esp
f0101335:	68 8c 49 13 f0       	push   $0xf013498c
f010133a:	68 18 01 00 00       	push   $0x118
f010133f:	68 ad 49 13 f0       	push   $0xf01349ad
f0101344:	e8 bc ee ff ff       	call   f0100205 <_panic>

f0101349 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101349:	55                   	push   %ebp
f010134a:	89 e5                	mov    %esp,%ebp
f010134c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010134f:	83 ec 04             	sub    $0x4,%esp
f0101352:	68 8c 49 13 f0       	push   $0xf013498c
f0101357:	68 23 01 00 00       	push   $0x123
f010135c:	68 ad 49 13 f0       	push   $0xf01349ad
f0101361:	e8 9f ee ff ff       	call   f0100205 <_panic>

f0101366 <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f0101366:	55                   	push   %ebp
f0101367:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f0101369:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010136e:	5d                   	pop    %ebp
f010136f:	c3                   	ret    

f0101370 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101370:	55                   	push   %ebp
f0101371:	89 e5                	mov    %esp,%ebp
f0101373:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f0101376:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010137a:	75 37                	jne    f01013b3 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010137c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010137f:	83 c0 04             	add    $0x4,%eax
f0101382:	8b 00                	mov    (%eax),%eax
f0101384:	83 ec 04             	sub    $0x4,%esp
f0101387:	6a 10                	push   $0x10
f0101389:	6a 00                	push   $0x0
f010138b:	50                   	push   %eax
f010138c:	e8 d4 09 03 00       	call   f0131d65 <strtol>
f0101391:	83 c4 10             	add    $0x10,%esp
f0101394:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f0101397:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010139a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f010139d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013a0:	83 c0 08             	add    $0x8,%eax
f01013a3:	8b 00                	mov    (%eax),%eax
f01013a5:	8a 00                	mov    (%eax),%al
f01013a7:	88 c2                	mov    %al,%dl
f01013a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01013ac:	88 10                	mov    %dl,(%eax)
f01013ae:	e9 b9 00 00 00       	jmp    f010146c <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01013b3:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01013b7:	0f 85 9f 00 00 00    	jne    f010145c <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01013bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013c0:	83 c0 04             	add    $0x4,%eax
f01013c3:	8b 00                	mov    (%eax),%eax
f01013c5:	83 ec 04             	sub    $0x4,%esp
f01013c8:	6a 0a                	push   $0xa
f01013ca:	6a 00                	push   $0x0
f01013cc:	50                   	push   %eax
f01013cd:	e8 93 09 03 00       	call   f0131d65 <strtol>
f01013d2:	83 c4 10             	add    $0x10,%esp
f01013d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01013d8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01013df:	83 ec 04             	sub    $0x4,%esp
f01013e2:	6a 00                	push   $0x0
f01013e4:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01013e7:	50                   	push   %eax
f01013e8:	ff 75 f4             	pushl  -0xc(%ebp)
f01013eb:	e8 2e 8d 00 00       	call   f010a11e <envid2env>
f01013f0:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01013f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013f6:	83 c0 08             	add    $0x8,%eax
f01013f9:	8b 00                	mov    (%eax),%eax
f01013fb:	83 ec 04             	sub    $0x4,%esp
f01013fe:	6a 10                	push   $0x10
f0101400:	6a 00                	push   $0x0
f0101402:	50                   	push   %eax
f0101403:	e8 5d 09 03 00       	call   f0131d65 <strtol>
f0101408:	83 c4 10             	add    $0x10,%esp
f010140b:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010140e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101411:	85 c0                	test   %eax,%eax
f0101413:	75 07                	jne    f010141c <command_writeusermem+0xac>
f0101415:	b8 00 00 00 00       	mov    $0x0,%eax
f010141a:	eb 55                	jmp    f0101471 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010141c:	0f 20 d8             	mov    %cr3,%eax
f010141f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101422:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101425:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101428:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010142b:	8b 40 60             	mov    0x60(%eax),%eax
f010142e:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101431:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101434:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101437:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010143a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f010143d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101440:	83 c0 0c             	add    $0xc,%eax
f0101443:	8b 00                	mov    (%eax),%eax
f0101445:	8a 00                	mov    (%eax),%al
f0101447:	88 c2                	mov    %al,%dl
f0101449:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010144c:	88 10                	mov    %dl,(%eax)
f010144e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101451:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101454:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101457:	0f 22 d8             	mov    %eax,%cr3
f010145a:	eb 10                	jmp    f010146c <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f010145c:	83 ec 0c             	sub    $0xc,%esp
f010145f:	68 c4 49 13 f0       	push   $0xf01349c4
f0101464:	e8 a5 f8 ff ff       	call   f0100d0e <cprintf>
f0101469:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010146c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101471:	c9                   	leave  
f0101472:	c3                   	ret    

f0101473 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101473:	55                   	push   %ebp
f0101474:	89 e5                	mov    %esp,%ebp
f0101476:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101479:	8b 45 0c             	mov    0xc(%ebp),%eax
f010147c:	83 c0 04             	add    $0x4,%eax
f010147f:	8b 00                	mov    (%eax),%eax
f0101481:	83 ec 04             	sub    $0x4,%esp
f0101484:	6a 10                	push   $0x10
f0101486:	6a 00                	push   $0x0
f0101488:	50                   	push   %eax
f0101489:	e8 d7 08 03 00       	call   f0131d65 <strtol>
f010148e:	83 c4 10             	add    $0x10,%esp
f0101491:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101496:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101499:	8b 45 0c             	mov    0xc(%ebp),%eax
f010149c:	83 c0 08             	add    $0x8,%eax
f010149f:	8b 00                	mov    (%eax),%eax
f01014a1:	83 ec 04             	sub    $0x4,%esp
f01014a4:	6a 0a                	push   $0xa
f01014a6:	6a 00                	push   $0x0
f01014a8:	50                   	push   %eax
f01014a9:	e8 b7 08 03 00       	call   f0131d65 <strtol>
f01014ae:	83 c4 10             	add    $0x10,%esp
f01014b1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01014b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01014bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014be:	83 c0 0c             	add    $0xc,%eax
f01014c1:	8b 00                	mov    (%eax),%eax
f01014c3:	83 ec 0c             	sub    $0xc,%esp
f01014c6:	50                   	push   %eax
f01014c7:	e8 39 05 03 00       	call   f0131a05 <strlen>
f01014cc:	83 c4 10             	add    $0x10,%esp
f01014cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f01014d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01014d9:	eb 30                	jmp    f010150b <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f01014db:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01014e2:	eb 1c                	jmp    f0101500 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f01014e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e7:	83 c0 0c             	add    $0xc,%eax
f01014ea:	8b 10                	mov    (%eax),%edx
f01014ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01014ef:	01 d0                	add    %edx,%eax
f01014f1:	8a 00                	mov    (%eax),%al
f01014f3:	88 c2                	mov    %al,%dl
f01014f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01014f8:	88 10                	mov    %dl,(%eax)
			address++;
f01014fa:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f01014fd:	ff 45 ec             	incl   -0x14(%ebp)
f0101500:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101503:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101506:	7c dc                	jl     f01014e4 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101508:	ff 45 f0             	incl   -0x10(%ebp)
f010150b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010150e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101511:	7c c8                	jl     f01014db <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101513:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101518:	c9                   	leave  
f0101519:	c3                   	ret    

f010151a <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010151a:	55                   	push   %ebp
f010151b:	89 e5                	mov    %esp,%ebp
f010151d:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101520:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101524:	75 42                	jne    f0101568 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101526:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101529:	83 c0 04             	add    $0x4,%eax
f010152c:	8b 00                	mov    (%eax),%eax
f010152e:	83 ec 04             	sub    $0x4,%esp
f0101531:	6a 10                	push   $0x10
f0101533:	6a 00                	push   $0x0
f0101535:	50                   	push   %eax
f0101536:	e8 2a 08 03 00       	call   f0131d65 <strtol>
f010153b:	83 c4 10             	add    $0x10,%esp
f010153e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101541:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101544:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101547:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010154a:	8a 00                	mov    (%eax),%al
f010154c:	0f b6 c0             	movzbl %al,%eax
f010154f:	83 ec 04             	sub    $0x4,%esp
f0101552:	50                   	push   %eax
f0101553:	ff 75 d8             	pushl  -0x28(%ebp)
f0101556:	68 ee 49 13 f0       	push   $0xf01349ee
f010155b:	e8 ae f7 ff ff       	call   f0100d0e <cprintf>
f0101560:	83 c4 10             	add    $0x10,%esp
f0101563:	e9 c4 00 00 00       	jmp    f010162c <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f0101568:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010156c:	0f 85 aa 00 00 00    	jne    f010161c <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0101572:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101575:	83 c0 04             	add    $0x4,%eax
f0101578:	8b 00                	mov    (%eax),%eax
f010157a:	83 ec 04             	sub    $0x4,%esp
f010157d:	6a 0a                	push   $0xa
f010157f:	6a 00                	push   $0x0
f0101581:	50                   	push   %eax
f0101582:	e8 de 07 03 00       	call   f0131d65 <strtol>
f0101587:	83 c4 10             	add    $0x10,%esp
f010158a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010158d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0101594:	83 ec 04             	sub    $0x4,%esp
f0101597:	6a 00                	push   $0x0
f0101599:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010159c:	50                   	push   %eax
f010159d:	ff 75 f4             	pushl  -0xc(%ebp)
f01015a0:	e8 79 8b 00 00       	call   f010a11e <envid2env>
f01015a5:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01015a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01015ab:	83 c0 08             	add    $0x8,%eax
f01015ae:	8b 00                	mov    (%eax),%eax
f01015b0:	83 ec 04             	sub    $0x4,%esp
f01015b3:	6a 10                	push   $0x10
f01015b5:	6a 00                	push   $0x0
f01015b7:	50                   	push   %eax
f01015b8:	e8 a8 07 03 00       	call   f0131d65 <strtol>
f01015bd:	83 c4 10             	add    $0x10,%esp
f01015c0:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01015c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015c6:	85 c0                	test   %eax,%eax
f01015c8:	75 07                	jne    f01015d1 <command_readusermem+0xb7>
f01015ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01015cf:	eb 60                	jmp    f0101631 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01015d1:	0f 20 d8             	mov    %cr3,%eax
f01015d4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01015d7:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01015da:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f01015dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01015e0:	8b 40 60             	mov    0x60(%eax),%eax
f01015e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01015e6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01015e9:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01015ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01015ef:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f01015f2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01015f5:	8a 00                	mov    (%eax),%al
f01015f7:	0f b6 c0             	movzbl %al,%eax
f01015fa:	83 ec 04             	sub    $0x4,%esp
f01015fd:	50                   	push   %eax
f01015fe:	ff 75 f0             	pushl  -0x10(%ebp)
f0101601:	68 ee 49 13 f0       	push   $0xf01349ee
f0101606:	e8 03 f7 ff ff       	call   f0100d0e <cprintf>
f010160b:	83 c4 10             	add    $0x10,%esp
f010160e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101611:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101614:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101617:	0f 22 d8             	mov    %eax,%cr3
f010161a:	eb 10                	jmp    f010162c <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f010161c:	83 ec 0c             	sub    $0xc,%esp
f010161f:	68 08 4a 13 f0       	push   $0xf0134a08
f0101624:	e8 e5 f6 ff ff       	call   f0100d0e <cprintf>
f0101629:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010162c:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101631:	c9                   	leave  
f0101632:	c3                   	ret    

f0101633 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101633:	55                   	push   %ebp
f0101634:	89 e5                	mov    %esp,%ebp
f0101636:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101639:	8b 45 0c             	mov    0xc(%ebp),%eax
f010163c:	83 c0 04             	add    $0x4,%eax
f010163f:	8b 00                	mov    (%eax),%eax
f0101641:	83 ec 04             	sub    $0x4,%esp
f0101644:	6a 10                	push   $0x10
f0101646:	6a 00                	push   $0x0
f0101648:	50                   	push   %eax
f0101649:	e8 17 07 03 00       	call   f0131d65 <strtol>
f010164e:	83 c4 10             	add    $0x10,%esp
f0101651:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101656:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101659:	8b 45 0c             	mov    0xc(%ebp),%eax
f010165c:	83 c0 08             	add    $0x8,%eax
f010165f:	8b 00                	mov    (%eax),%eax
f0101661:	83 ec 04             	sub    $0x4,%esp
f0101664:	6a 0a                	push   $0xa
f0101666:	6a 00                	push   $0x0
f0101668:	50                   	push   %eax
f0101669:	e8 f7 06 03 00       	call   f0131d65 <strtol>
f010166e:	83 c4 10             	add    $0x10,%esp
f0101671:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101674:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f010167b:	eb 22                	jmp    f010169f <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f010167d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101680:	8d 50 01             	lea    0x1(%eax),%edx
f0101683:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101686:	8a 00                	mov    (%eax),%al
f0101688:	0f b6 c0             	movzbl %al,%eax
f010168b:	83 ec 08             	sub    $0x8,%esp
f010168e:	50                   	push   %eax
f010168f:	68 32 4a 13 f0       	push   $0xf0134a32
f0101694:	e8 75 f6 ff ff       	call   f0100d0e <cprintf>
f0101699:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f010169c:	ff 45 f0             	incl   -0x10(%ebp)
f010169f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016a2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01016a5:	7c d6                	jl     f010167d <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01016a7:	83 ec 0c             	sub    $0xc,%esp
f01016aa:	68 35 4a 13 f0       	push   $0xf0134a35
f01016af:	e8 5a f6 ff ff       	call   f0100d0e <cprintf>
f01016b4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01016b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016bc:	c9                   	leave  
f01016bd:	c3                   	ret    

f01016be <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01016be:	55                   	push   %ebp
f01016bf:	89 e5                	mov    %esp,%ebp
f01016c1:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016c7:	83 c0 04             	add    $0x4,%eax
f01016ca:	8b 00                	mov    (%eax),%eax
f01016cc:	83 ec 04             	sub    $0x4,%esp
f01016cf:	6a 0a                	push   $0xa
f01016d1:	6a 00                	push   $0x0
f01016d3:	50                   	push   %eax
f01016d4:	e8 8c 06 03 00       	call   f0131d65 <strtol>
f01016d9:	83 c4 10             	add    $0x10,%esp
f01016dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f01016df:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f01016e6:	83 ec 04             	sub    $0x4,%esp
f01016e9:	6a 00                	push   $0x0
f01016eb:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01016ee:	50                   	push   %eax
f01016ef:	ff 75 ec             	pushl  -0x14(%ebp)
f01016f2:	e8 27 8a 00 00       	call   f010a11e <envid2env>
f01016f7:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f01016fa:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016fd:	83 c0 08             	add    $0x8,%eax
f0101700:	8b 00                	mov    (%eax),%eax
f0101702:	83 ec 04             	sub    $0x4,%esp
f0101705:	6a 10                	push   $0x10
f0101707:	6a 00                	push   $0x0
f0101709:	50                   	push   %eax
f010170a:	e8 56 06 03 00       	call   f0131d65 <strtol>
f010170f:	83 c4 10             	add    $0x10,%esp
f0101712:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101715:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101718:	83 c0 0c             	add    $0xc,%eax
f010171b:	8b 00                	mov    (%eax),%eax
f010171d:	83 ec 04             	sub    $0x4,%esp
f0101720:	6a 0a                	push   $0xa
f0101722:	6a 00                	push   $0x0
f0101724:	50                   	push   %eax
f0101725:	e8 3b 06 03 00       	call   f0131d65 <strtol>
f010172a:	83 c4 10             	add    $0x10,%esp
f010172d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101730:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101733:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101736:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101739:	85 c0                	test   %eax,%eax
f010173b:	75 07                	jne    f0101744 <command_readuserblock+0x86>
f010173d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101742:	eb 65                	jmp    f01017a9 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101744:	0f 20 d8             	mov    %cr3,%eax
f0101747:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f010174a:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f010174d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101750:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101753:	8b 40 60             	mov    0x60(%eax),%eax
f0101756:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010175c:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010175f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101766:	eb 28                	jmp    f0101790 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101768:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010176b:	8a 00                	mov    (%eax),%al
f010176d:	0f b6 d0             	movzbl %al,%edx
f0101770:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101773:	8a 00                	mov    (%eax),%al
f0101775:	0f b6 c0             	movzbl %al,%eax
f0101778:	52                   	push   %edx
f0101779:	50                   	push   %eax
f010177a:	ff 75 f4             	pushl  -0xc(%ebp)
f010177d:	68 37 4a 13 f0       	push   $0xf0134a37
f0101782:	e8 87 f5 ff ff       	call   f0100d0e <cprintf>
f0101787:	83 c4 10             	add    $0x10,%esp
		ptr++;
f010178a:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f010178d:	ff 45 f0             	incl   -0x10(%ebp)
f0101790:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101793:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101796:	7c d0                	jl     f0101768 <command_readuserblock+0xaa>
f0101798:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010179b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010179e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01017a1:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01017a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017a9:	c9                   	leave  
f01017aa:	c3                   	ret    

f01017ab <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01017ab:	55                   	push   %ebp
f01017ac:	89 e5                	mov    %esp,%ebp
f01017ae:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01017b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017b4:	83 c0 04             	add    $0x4,%eax
f01017b7:	8b 00                	mov    (%eax),%eax
f01017b9:	83 ec 04             	sub    $0x4,%esp
f01017bc:	6a 0a                	push   $0xa
f01017be:	6a 00                	push   $0x0
f01017c0:	50                   	push   %eax
f01017c1:	e8 9f 05 03 00       	call   f0131d65 <strtol>
f01017c6:	83 c4 10             	add    $0x10,%esp
f01017c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f01017cc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f01017d3:	83 ec 04             	sub    $0x4,%esp
f01017d6:	6a 00                	push   $0x0
f01017d8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01017db:	50                   	push   %eax
f01017dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01017df:	e8 3a 89 00 00       	call   f010a11e <envid2env>
f01017e4:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f01017e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017ea:	85 c0                	test   %eax,%eax
f01017ec:	75 0a                	jne    f01017f8 <command_remove_table+0x4d>
f01017ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01017f3:	e9 c7 00 00 00       	jmp    f01018bf <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f01017f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017fb:	83 c0 08             	add    $0x8,%eax
f01017fe:	8b 00                	mov    (%eax),%eax
f0101800:	83 ec 04             	sub    $0x4,%esp
f0101803:	6a 10                	push   $0x10
f0101805:	6a 00                	push   $0x0
f0101807:	50                   	push   %eax
f0101808:	e8 58 05 03 00       	call   f0131d65 <strtol>
f010180d:	83 c4 10             	add    $0x10,%esp
f0101810:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101813:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101816:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101819:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010181c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010181f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101822:	c1 ea 16             	shr    $0x16,%edx
f0101825:	c1 e2 02             	shl    $0x2,%edx
f0101828:	01 d0                	add    %edx,%eax
f010182a:	8b 00                	mov    (%eax),%eax
f010182c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101831:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f0101834:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101837:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010183c:	77 1c                	ja     f010185a <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f010183e:	83 ec 0c             	sub    $0xc,%esp
f0101841:	ff 75 e8             	pushl  -0x18(%ebp)
f0101844:	e8 66 65 00 00       	call   f0107daf <kheap_virtual_address>
f0101849:	83 c4 10             	add    $0x10,%esp
f010184c:	83 ec 0c             	sub    $0xc,%esp
f010184f:	50                   	push   %eax
f0101850:	e8 17 64 00 00       	call   f0107c6c <kfree>
f0101855:	83 c4 10             	add    $0x10,%esp
f0101858:	eb 28                	jmp    f0101882 <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f010185a:	83 ec 0c             	sub    $0xc,%esp
f010185d:	ff 75 e8             	pushl  -0x18(%ebp)
f0101860:	e8 a9 f7 ff ff       	call   f010100e <to_frame_info>
f0101865:	83 c4 10             	add    $0x10,%esp
f0101868:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f010186b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010186e:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0101874:	83 ec 0c             	sub    $0xc,%esp
f0101877:	ff 75 e4             	pushl  -0x1c(%ebp)
f010187a:	e8 6f 51 00 00       	call   f01069ee <free_frame>
f010187f:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101882:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101885:	c1 e8 16             	shr    $0x16,%eax
f0101888:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f010188b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010188e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101891:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101894:	c1 e2 02             	shl    $0x2,%edx
f0101897:	01 c2                	add    %eax,%edx
f0101899:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010189c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010189f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01018a2:	c1 e1 02             	shl    $0x2,%ecx
f01018a5:	01 c8                	add    %ecx,%eax
f01018a7:	8b 00                	mov    (%eax),%eax
f01018a9:	83 e0 fe             	and    $0xfffffffe,%eax
f01018ac:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01018ae:	0f 20 d8             	mov    %cr3,%eax
f01018b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01018b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018b7:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01018ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01018bf:	c9                   	leave  
f01018c0:	c3                   	ret    

f01018c1 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01018c1:	55                   	push   %ebp
f01018c2:	89 e5                	mov    %esp,%ebp
f01018c4:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01018c7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01018cb:	7e 06                	jle    f01018d3 <command_allocuserpage+0x12>
f01018cd:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018d1:	7e 1a                	jle    f01018ed <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01018d3:	83 ec 0c             	sub    $0xc,%esp
f01018d6:	68 48 4a 13 f0       	push   $0xf0134a48
f01018db:	e8 2e f4 ff ff       	call   f0100d0e <cprintf>
f01018e0:	83 c4 10             	add    $0x10,%esp
		return 0;
f01018e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01018e8:	e9 46 01 00 00       	jmp    f0101a33 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f01018ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f0:	83 c0 04             	add    $0x4,%eax
f01018f3:	8b 00                	mov    (%eax),%eax
f01018f5:	83 ec 04             	sub    $0x4,%esp
f01018f8:	6a 0a                	push   $0xa
f01018fa:	6a 00                	push   $0x0
f01018fc:	50                   	push   %eax
f01018fd:	e8 63 04 03 00       	call   f0131d65 <strtol>
f0101902:	83 c4 10             	add    $0x10,%esp
f0101905:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101908:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f010190f:	83 ec 04             	sub    $0x4,%esp
f0101912:	6a 00                	push   $0x0
f0101914:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101917:	50                   	push   %eax
f0101918:	ff 75 f0             	pushl  -0x10(%ebp)
f010191b:	e8 fe 87 00 00       	call   f010a11e <envid2env>
f0101920:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101923:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101926:	85 c0                	test   %eax,%eax
f0101928:	75 0a                	jne    f0101934 <command_allocuserpage+0x73>
f010192a:	b8 00 00 00 00       	mov    $0x0,%eax
f010192f:	e9 ff 00 00 00       	jmp    f0101a33 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0101934:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101937:	83 c0 08             	add    $0x8,%eax
f010193a:	8b 00                	mov    (%eax),%eax
f010193c:	83 ec 04             	sub    $0x4,%esp
f010193f:	6a 10                	push   $0x10
f0101941:	6a 00                	push   $0x0
f0101943:	50                   	push   %eax
f0101944:	e8 1c 04 03 00       	call   f0131d65 <strtol>
f0101949:	83 c4 10             	add    $0x10,%esp
f010194c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f010194f:	83 ec 0c             	sub    $0xc,%esp
f0101952:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101955:	50                   	push   %eax
f0101956:	e8 7e 4f 00 00       	call   f01068d9 <allocate_frame>
f010195b:	83 c4 10             	add    $0x10,%esp
f010195e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101961:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101965:	75 1a                	jne    f0101981 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101967:	83 ec 0c             	sub    $0xc,%esp
f010196a:	68 72 4a 13 f0       	push   $0xf0134a72
f010196f:	e8 9a f3 ff ff       	call   f0100d0e <cprintf>
f0101974:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101977:	b8 00 00 00 00       	mov    $0x0,%eax
f010197c:	e9 b2 00 00 00       	jmp    f0101a33 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0101981:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0101985:	75 1d                	jne    f01019a4 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0101987:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010198a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010198d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101990:	6a 06                	push   $0x6
f0101992:	ff 75 ec             	pushl  -0x14(%ebp)
f0101995:	52                   	push   %edx
f0101996:	50                   	push   %eax
f0101997:	e8 8c 53 00 00       	call   f0106d28 <map_frame>
f010199c:	83 c4 10             	add    $0x10,%esp
f010199f:	e9 8a 00 00 00       	jmp    f0101a2e <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01019a4:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01019a8:	0f 85 80 00 00 00    	jne    f0101a2e <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01019ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019b1:	83 c0 0c             	add    $0xc,%eax
f01019b4:	8b 00                	mov    (%eax),%eax
f01019b6:	8a 00                	mov    (%eax),%al
f01019b8:	3c 72                	cmp    $0x72,%al
f01019ba:	74 0e                	je     f01019ca <command_allocuserpage+0x109>
f01019bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019bf:	83 c0 0c             	add    $0xc,%eax
f01019c2:	8b 00                	mov    (%eax),%eax
f01019c4:	8a 00                	mov    (%eax),%al
f01019c6:	3c 52                	cmp    $0x52,%al
f01019c8:	75 09                	jne    f01019d3 <command_allocuserpage+0x112>
			rw = 0 ;
f01019ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019d1:	eb 3c                	jmp    f0101a0f <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01019d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019d6:	83 c0 0c             	add    $0xc,%eax
f01019d9:	8b 00                	mov    (%eax),%eax
f01019db:	8a 00                	mov    (%eax),%al
f01019dd:	3c 77                	cmp    $0x77,%al
f01019df:	74 0e                	je     f01019ef <command_allocuserpage+0x12e>
f01019e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019e4:	83 c0 0c             	add    $0xc,%eax
f01019e7:	8b 00                	mov    (%eax),%eax
f01019e9:	8a 00                	mov    (%eax),%al
f01019eb:	3c 57                	cmp    $0x57,%al
f01019ed:	75 09                	jne    f01019f8 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f01019ef:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01019f6:	eb 17                	jmp    f0101a0f <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f01019f8:	83 ec 0c             	sub    $0xc,%esp
f01019fb:	68 8c 4a 13 f0       	push   $0xf0134a8c
f0101a00:	e8 09 f3 ff ff       	call   f0100d0e <cprintf>
f0101a05:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101a08:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a12:	83 c8 04             	or     $0x4,%eax
f0101a15:	89 c1                	mov    %eax,%ecx
f0101a17:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101a1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101a1d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101a20:	51                   	push   %ecx
f0101a21:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a24:	52                   	push   %edx
f0101a25:	50                   	push   %eax
f0101a26:	e8 fd 52 00 00       	call   f0106d28 <map_frame>
f0101a2b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101a2e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a33:	c9                   	leave  
f0101a34:	c3                   	ret    

f0101a35 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0101a35:	55                   	push   %ebp
f0101a36:	89 e5                	mov    %esp,%ebp
f0101a38:	56                   	push   %esi
f0101a39:	53                   	push   %ebx
f0101a3a:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101a3d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101a40:	83 ec 0c             	sub    $0xc,%esp
f0101a43:	50                   	push   %eax
f0101a44:	e8 79 55 00 00       	call   f0106fc2 <calculate_available_frames>
f0101a49:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a4c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101a4f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101a52:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0101a55:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101a58:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101a5b:	01 de                	add    %ebx,%esi
f0101a5d:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101a60:	01 f3                	add    %esi,%ebx
f0101a62:	83 ec 0c             	sub    $0xc,%esp
f0101a65:	51                   	push   %ecx
f0101a66:	52                   	push   %edx
f0101a67:	50                   	push   %eax
f0101a68:	53                   	push   %ebx
f0101a69:	68 d0 4a 13 f0       	push   $0xf0134ad0
f0101a6e:	e8 9b f2 ff ff       	call   f0100d0e <cprintf>
f0101a73:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101a76:	a1 70 f7 85 f0       	mov    0xf085f770,%eax
f0101a7b:	83 ec 08             	sub    $0x8,%esp
f0101a7e:	50                   	push   %eax
f0101a7f:	68 28 4b 13 f0       	push   $0xf0134b28
f0101a84:	e8 85 f2 ff ff       	call   f0100d0e <cprintf>
f0101a89:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101a8c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a91:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101a94:	5b                   	pop    %ebx
f0101a95:	5e                   	pop    %esi
f0101a96:	5d                   	pop    %ebp
f0101a97:	c3                   	ret    

f0101a98 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0101a98:	55                   	push   %ebp
f0101a99:	89 e5                	mov    %esp,%ebp
f0101a9b:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0101a9e:	c7 45 f4 88 13 00 00 	movl   $0x1388,-0xc(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0101aa5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0101aac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
#if USE_KHEAP
	{
		switch (number_of_arguments)
f0101ab3:	8b 45 08             	mov    0x8(%ebp),%eax
f0101ab6:	83 f8 04             	cmp    $0x4,%eax
f0101ab9:	0f 84 94 00 00 00    	je     f0101b53 <CreateEnv+0xbb>
f0101abf:	83 f8 05             	cmp    $0x5,%eax
f0101ac2:	74 0e                	je     f0101ad2 <CreateEnv+0x3a>
f0101ac4:	83 f8 03             	cmp    $0x3,%eax
f0101ac7:	0f 84 ec 00 00 00    	je     f0101bb9 <CreateEnv+0x121>
f0101acd:	e9 2f 01 00 00       	jmp    f0101c01 <CreateEnv+0x169>
		{
		case 5:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101ad2:	83 ec 0c             	sub    $0xc,%esp
f0101ad5:	6a 02                	push   $0x2
f0101ad7:	e8 7b c8 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0101adc:	83 c4 10             	add    $0x10,%esp
f0101adf:	85 c0                	test   %eax,%eax
f0101ae1:	75 1a                	jne    f0101afd <CreateEnv+0x65>
			{
				cprintf("ERROR: Current Replacement is NOT LRU LISTS, invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101ae3:	83 ec 0c             	sub    $0xc,%esp
f0101ae6:	68 64 4b 13 f0       	push   $0xf0134b64
f0101aeb:	e8 1e f2 ff ff       	call   f0100d0e <cprintf>
f0101af0:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101af3:	b8 00 00 00 00       	mov    $0x0,%eax
f0101af8:	e9 d5 01 00 00       	jmp    f0101cd2 <CreateEnv+0x23a>
			}
			percent_WS_pages_to_remove = strtol(arguments[4], NULL, 10);
f0101afd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b00:	83 c0 10             	add    $0x10,%eax
f0101b03:	8b 00                	mov    (%eax),%eax
f0101b05:	83 ec 04             	sub    $0x4,%esp
f0101b08:	6a 0a                	push   $0xa
f0101b0a:	6a 00                	push   $0x0
f0101b0c:	50                   	push   %eax
f0101b0d:	e8 53 02 03 00       	call   f0131d65 <strtol>
f0101b12:	83 c4 10             	add    $0x10,%esp
f0101b15:	89 45 ec             	mov    %eax,-0x14(%ebp)
			LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b1b:	83 c0 0c             	add    $0xc,%eax
f0101b1e:	8b 00                	mov    (%eax),%eax
f0101b20:	83 ec 04             	sub    $0x4,%esp
f0101b23:	6a 0a                	push   $0xa
f0101b25:	6a 00                	push   $0x0
f0101b27:	50                   	push   %eax
f0101b28:	e8 38 02 03 00       	call   f0131d65 <strtol>
f0101b2d:	83 c4 10             	add    $0x10,%esp
f0101b30:	89 45 f0             	mov    %eax,-0x10(%ebp)
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b36:	83 c0 08             	add    $0x8,%eax
f0101b39:	8b 00                	mov    (%eax),%eax
f0101b3b:	83 ec 04             	sub    $0x4,%esp
f0101b3e:	6a 0a                	push   $0xa
f0101b40:	6a 00                	push   $0x0
f0101b42:	50                   	push   %eax
f0101b43:	e8 1d 02 03 00       	call   f0131d65 <strtol>
f0101b48:	83 c4 10             	add    $0x10,%esp
f0101b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101b4e:	e9 c8 00 00 00       	jmp    f0101c1b <CreateEnv+0x183>
		case 4:
			if(!isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101b53:	83 ec 0c             	sub    $0xc,%esp
f0101b56:	6a 02                	push   $0x2
f0101b58:	e8 fa c7 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0101b5d:	83 c4 10             	add    $0x10,%esp
f0101b60:	85 c0                	test   %eax,%eax
f0101b62:	75 1d                	jne    f0101b81 <CreateEnv+0xe9>
			{
				percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f0101b64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b67:	83 c0 0c             	add    $0xc,%eax
f0101b6a:	8b 00                	mov    (%eax),%eax
f0101b6c:	83 ec 04             	sub    $0x4,%esp
f0101b6f:	6a 0a                	push   $0xa
f0101b71:	6a 00                	push   $0x0
f0101b73:	50                   	push   %eax
f0101b74:	e8 ec 01 03 00       	call   f0131d65 <strtol>
f0101b79:	83 c4 10             	add    $0x10,%esp
f0101b7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0101b7f:	eb 1b                	jmp    f0101b9c <CreateEnv+0x104>
			}
			else
			{
				LRUSecondListSize = strtol(arguments[3], NULL, 10);
f0101b81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b84:	83 c0 0c             	add    $0xc,%eax
f0101b87:	8b 00                	mov    (%eax),%eax
f0101b89:	83 ec 04             	sub    $0x4,%esp
f0101b8c:	6a 0a                	push   $0xa
f0101b8e:	6a 00                	push   $0x0
f0101b90:	50                   	push   %eax
f0101b91:	e8 cf 01 03 00       	call   f0131d65 <strtol>
f0101b96:	83 c4 10             	add    $0x10,%esp
f0101b99:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b9f:	83 c0 08             	add    $0x8,%eax
f0101ba2:	8b 00                	mov    (%eax),%eax
f0101ba4:	83 ec 04             	sub    $0x4,%esp
f0101ba7:	6a 0a                	push   $0xa
f0101ba9:	6a 00                	push   $0x0
f0101bab:	50                   	push   %eax
f0101bac:	e8 b4 01 03 00       	call   f0131d65 <strtol>
f0101bb1:	83 c4 10             	add    $0x10,%esp
f0101bb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bb7:	eb 62                	jmp    f0101c1b <CreateEnv+0x183>
		case 3:
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101bb9:	83 ec 0c             	sub    $0xc,%esp
f0101bbc:	6a 02                	push   $0x2
f0101bbe:	e8 94 c7 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0101bc3:	83 c4 10             	add    $0x10,%esp
f0101bc6:	85 c0                	test   %eax,%eax
f0101bc8:	74 1a                	je     f0101be4 <CreateEnv+0x14c>
			{
				cprintf("ERROR: Current Replacement is LRU LISTS, Please specify a working set size in the 3rd arg and LRU second list size in the 4th arg, aborting.\n");
f0101bca:	83 ec 0c             	sub    $0xc,%esp
f0101bcd:	68 24 4c 13 f0       	push   $0xf0134c24
f0101bd2:	e8 37 f1 ff ff       	call   f0100d0e <cprintf>
f0101bd7:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101bda:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bdf:	e9 ee 00 00 00       	jmp    f0101cd2 <CreateEnv+0x23a>
			}
			pageWSSize = strtol(arguments[2], NULL, 10);
f0101be4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101be7:	83 c0 08             	add    $0x8,%eax
f0101bea:	8b 00                	mov    (%eax),%eax
f0101bec:	83 ec 04             	sub    $0x4,%esp
f0101bef:	6a 0a                	push   $0xa
f0101bf1:	6a 00                	push   $0x0
f0101bf3:	50                   	push   %eax
f0101bf4:	e8 6c 01 03 00       	call   f0131d65 <strtol>
f0101bf9:	83 c4 10             	add    $0x10,%esp
f0101bfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0101bff:	eb 1a                	jmp    f0101c1b <CreateEnv+0x183>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> <page_WS_size> [<LRU_second_list_size>] [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0101c01:	83 ec 0c             	sub    $0xc,%esp
f0101c04:	68 b4 4c 13 f0       	push   $0xf0134cb4
f0101c09:	e8 00 f1 ff ff       	call   f0100d0e <cprintf>
f0101c0e:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c11:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c16:	e9 b7 00 00 00       	jmp    f0101cd2 <CreateEnv+0x23a>

			break;
		}
		if(pageWSSize > __PWS_MAX_SIZE)
f0101c1b:	81 7d f4 88 13 00 00 	cmpl   $0x1388,-0xc(%ebp)
f0101c22:	76 1f                	jbe    f0101c43 <CreateEnv+0x1ab>
		{
			cprintf("ERROR: size of WS must be less than or equal to %d... aborting", __PWS_MAX_SIZE);
f0101c24:	83 ec 08             	sub    $0x8,%esp
f0101c27:	68 88 13 00 00       	push   $0x1388
f0101c2c:	68 4c 4d 13 f0       	push   $0xf0134d4c
f0101c31:	e8 d8 f0 ff ff       	call   f0100d0e <cprintf>
f0101c36:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101c39:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c3e:	e9 8f 00 00 00       	jmp    f0101cd2 <CreateEnv+0x23a>
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101c43:	83 ec 0c             	sub    $0xc,%esp
f0101c46:	6a 02                	push   $0x2
f0101c48:	e8 0a c7 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0101c4d:	83 c4 10             	add    $0x10,%esp
f0101c50:	85 c0                	test   %eax,%eax
f0101c52:	74 20                	je     f0101c74 <CreateEnv+0x1dc>
		{
			if (LRUSecondListSize > pageWSSize - 1)
f0101c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101c57:	48                   	dec    %eax
f0101c58:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101c5b:	73 17                	jae    f0101c74 <CreateEnv+0x1dc>
			{
				cprintf("ERROR: size of LRU second list can't equal/exceed the size of the page WS... aborting\n");
f0101c5d:	83 ec 0c             	sub    $0xc,%esp
f0101c60:	68 8c 4d 13 f0       	push   $0xf0134d8c
f0101c65:	e8 a4 f0 ff ff       	call   f0100d0e <cprintf>
f0101c6a:	83 c4 10             	add    $0x10,%esp
				return NULL;
f0101c6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c72:	eb 5e                	jmp    f0101cd2 <CreateEnv+0x23a>
			}
		}
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c74:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c78:	76 19                	jbe    f0101c93 <CreateEnv+0x1fb>
f0101c7a:	68 e4 4d 13 f0       	push   $0xf0134de4
f0101c7f:	68 29 4e 13 f0       	push   $0xf0134e29
f0101c84:	68 5a 02 00 00       	push   $0x25a
f0101c89:	68 ad 49 13 f0       	push   $0xf01349ad
f0101c8e:	e8 72 e5 ff ff       	call   f0100205 <_panic>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101c93:	83 7d ec 64          	cmpl   $0x64,-0x14(%ebp)
f0101c97:	76 19                	jbe    f0101cb2 <CreateEnv+0x21a>
f0101c99:	68 e4 4d 13 f0       	push   $0xf0134de4
f0101c9e:	68 29 4e 13 f0       	push   $0xf0134e29
f0101ca3:	68 71 02 00 00       	push   $0x271
f0101ca8:	68 ad 49 13 f0       	push   $0xf01349ad
f0101cad:	e8 53 e5 ff ff       	call   f0100205 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101cb2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cb5:	83 c0 04             	add    $0x4,%eax
f0101cb8:	8b 00                	mov    (%eax),%eax
f0101cba:	ff 75 ec             	pushl  -0x14(%ebp)
f0101cbd:	ff 75 f0             	pushl  -0x10(%ebp)
f0101cc0:	ff 75 f4             	pushl  -0xc(%ebp)
f0101cc3:	50                   	push   %eax
f0101cc4:	e8 ae 77 00 00       	call   f0109477 <env_create>
f0101cc9:	83 c4 10             	add    $0x10,%esp
f0101ccc:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101ccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101cd2:	c9                   	leave  
f0101cd3:	c3                   	ret    

f0101cd4 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101cd4:	55                   	push   %ebp
f0101cd5:	89 e5                	mov    %esp,%ebp
f0101cd7:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101cda:	83 ec 08             	sub    $0x8,%esp
f0101cdd:	ff 75 0c             	pushl  0xc(%ebp)
f0101ce0:	ff 75 08             	pushl  0x8(%ebp)
f0101ce3:	e8 b0 fd ff ff       	call   f0101a98 <CreateEnv>
f0101ce8:	83 c4 10             	add    $0x10,%esp
f0101ceb:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101cee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101cf2:	75 07                	jne    f0101cfb <command_run_program+0x27>
f0101cf4:	b8 00 00 00 00       	mov    $0x0,%eax
f0101cf9:	eb 46                	jmp    f0101d41 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101cfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101cfe:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d01:	83 ec 08             	sub    $0x8,%esp
f0101d04:	50                   	push   %eax
f0101d05:	68 3e 4e 13 f0       	push   $0xf0134e3e
f0101d0a:	e8 ff ef ff ff       	call   f0100d0e <cprintf>
f0101d0f:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101d12:	c7 05 70 f7 85 f0 00 	movl   $0x0,0xf085f770
f0101d19:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101d1c:	83 ec 0c             	sub    $0xc,%esp
f0101d1f:	ff 75 f4             	pushl  -0xc(%ebp)
f0101d22:	e8 c4 34 00 00       	call   f01051eb <sched_new_env>
f0101d27:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101d2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d2d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101d30:	83 ec 0c             	sub    $0xc,%esp
f0101d33:	50                   	push   %eax
f0101d34:	e8 cf 34 00 00       	call   f0105208 <sched_run_env>
f0101d39:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d41:	c9                   	leave  
f0101d42:	c3                   	ret    

f0101d43 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101d43:	55                   	push   %ebp
f0101d44:	89 e5                	mov    %esp,%ebp
f0101d46:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d49:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d4c:	83 c0 04             	add    $0x4,%eax
f0101d4f:	8b 00                	mov    (%eax),%eax
f0101d51:	83 ec 04             	sub    $0x4,%esp
f0101d54:	6a 0a                	push   $0xa
f0101d56:	6a 00                	push   $0x0
f0101d58:	50                   	push   %eax
f0101d59:	e8 07 00 03 00       	call   f0131d65 <strtol>
f0101d5e:	83 c4 10             	add    $0x10,%esp
f0101d61:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101d64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d67:	83 ec 0c             	sub    $0xc,%esp
f0101d6a:	50                   	push   %eax
f0101d6b:	e8 b6 38 00 00       	call   f0105626 <sched_kill_env>
f0101d70:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101d73:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d78:	c9                   	leave  
f0101d79:	c3                   	ret    

f0101d7a <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101d7a:	55                   	push   %ebp
f0101d7b:	89 e5                	mov    %esp,%ebp
f0101d7d:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101d80:	83 ec 08             	sub    $0x8,%esp
f0101d83:	ff 75 0c             	pushl  0xc(%ebp)
f0101d86:	ff 75 08             	pushl  0x8(%ebp)
f0101d89:	e8 0a fd ff ff       	call   f0101a98 <CreateEnv>
f0101d8e:	83 c4 10             	add    $0x10,%esp
f0101d91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101d94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101d98:	75 07                	jne    f0101da1 <commnad_load_env+0x27>
		return 0 ;
f0101d9a:	b8 00 00 00 00       	mov    $0x0,%eax
f0101d9f:	eb 2a                	jmp    f0101dcb <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101da1:	83 ec 0c             	sub    $0xc,%esp
f0101da4:	ff 75 f4             	pushl  -0xc(%ebp)
f0101da7:	e8 3f 34 00 00       	call   f01051eb <sched_new_env>
f0101dac:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101daf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101db2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101db5:	83 ec 08             	sub    $0x8,%esp
f0101db8:	50                   	push   %eax
f0101db9:	68 3e 4e 13 f0       	push   $0xf0134e3e
f0101dbe:	e8 4b ef ff ff       	call   f0100d0e <cprintf>
f0101dc3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101dc6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101dcb:	c9                   	leave  
f0101dcc:	c3                   	ret    

f0101dcd <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101dcd:	55                   	push   %ebp
f0101dce:	89 e5                	mov    %esp,%ebp
f0101dd0:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101dd3:	c7 05 70 f7 85 f0 00 	movl   $0x0,0xf085f770
f0101dda:	00 00 00 
	sched_run_all();
f0101ddd:	e8 51 30 00 00       	call   f0104e33 <sched_run_all>

	return 0 ;
f0101de2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101de7:	c9                   	leave  
f0101de8:	c3                   	ret    

f0101de9 <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101de9:	55                   	push   %ebp
f0101dea:	89 e5                	mov    %esp,%ebp
f0101dec:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101def:	e8 35 2e 00 00       	call   f0104c29 <sched_print_all>

	return 0 ;
f0101df4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101df9:	c9                   	leave  
f0101dfa:	c3                   	ret    

f0101dfb <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101dfb:	55                   	push   %ebp
f0101dfc:	89 e5                	mov    %esp,%ebp
f0101dfe:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101e01:	e8 a0 30 00 00       	call   f0104ea6 <sched_kill_all>

	return 0 ;
f0101e06:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e0b:	c9                   	leave  
f0101e0c:	c3                   	ret    

f0101e0d <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101e0d:	55                   	push   %ebp
f0101e0e:	89 e5                	mov    %esp,%ebp
f0101e10:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101e13:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101e17:	7f 1a                	jg     f0101e33 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e19:	83 ec 0c             	sub    $0xc,%esp
f0101e1c:	68 54 4e 13 f0       	push   $0xf0134e54
f0101e21:	e8 e8 ee ff ff       	call   f0100d0e <cprintf>
f0101e26:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101e29:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e2e:	e9 83 00 00 00       	jmp    f0101eb6 <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101e33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e36:	83 c0 04             	add    $0x4,%eax
f0101e39:	8b 00                	mov    (%eax),%eax
f0101e3b:	83 ec 04             	sub    $0x4,%esp
f0101e3e:	6a 0a                	push   $0xa
f0101e40:	6a 00                	push   $0x0
f0101e42:	50                   	push   %eax
f0101e43:	e8 1d ff 02 00       	call   f0131d65 <strtol>
f0101e48:	83 c4 10             	add    $0x10,%esp
f0101e4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101e4e:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101e52:	75 20                	jne    f0101e74 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e54:	83 ec 0c             	sub    $0xc,%esp
f0101e57:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e5a:	e8 6d c4 00 00       	call   f010e2cc <setPageReplacmentAlgorithmLRU>
f0101e5f:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101e62:	83 ec 0c             	sub    $0xc,%esp
f0101e65:	68 b4 4e 13 f0       	push   $0xf0134eb4
f0101e6a:	e8 9f ee ff ff       	call   f0100d0e <cprintf>
f0101e6f:	83 c4 10             	add    $0x10,%esp
f0101e72:	eb 3d                	jmp    f0101eb1 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101e74:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101e78:	75 20                	jne    f0101e9a <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101e7a:	83 ec 0c             	sub    $0xc,%esp
f0101e7d:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e80:	e8 47 c4 00 00       	call   f010e2cc <setPageReplacmentAlgorithmLRU>
f0101e85:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101e88:	83 ec 0c             	sub    $0xc,%esp
f0101e8b:	68 f8 4e 13 f0       	push   $0xf0134ef8
f0101e90:	e8 79 ee ff ff       	call   f0100d0e <cprintf>
f0101e95:	83 c4 10             	add    $0x10,%esp
f0101e98:	eb 17                	jmp    f0101eb1 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101e9a:	83 ec 0c             	sub    $0xc,%esp
f0101e9d:	68 38 4f 13 f0       	push   $0xf0134f38
f0101ea2:	e8 67 ee ff ff       	call   f0100d0e <cprintf>
f0101ea7:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101eaa:	b8 00 00 00 00       	mov    $0x0,%eax
f0101eaf:	eb 05                	jmp    f0101eb6 <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101eb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101eb6:	c9                   	leave  
f0101eb7:	c3                   	ret    

f0101eb8 <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101eb8:	55                   	push   %ebp
f0101eb9:	89 e5                	mov    %esp,%ebp
f0101ebb:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101ebe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ec1:	83 c0 04             	add    $0x4,%eax
f0101ec4:	8b 00                	mov    (%eax),%eax
f0101ec6:	83 ec 04             	sub    $0x4,%esp
f0101ec9:	6a 0a                	push   $0xa
f0101ecb:	6a 00                	push   $0x0
f0101ecd:	50                   	push   %eax
f0101ece:	e8 92 fe 02 00       	call   f0131d65 <strtol>
f0101ed3:	83 c4 10             	add    $0x10,%esp
f0101ed6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101ed9:	83 ec 0c             	sub    $0xc,%esp
f0101edc:	ff 75 f4             	pushl  -0xc(%ebp)
f0101edf:	e8 5b c4 00 00       	call   f010e33f <setPageReplacmentAlgorithmNchanceCLOCK>
f0101ee4:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101ee7:	83 ec 0c             	sub    $0xc,%esp
f0101eea:	68 8c 4f 13 f0       	push   $0xf0134f8c
f0101eef:	e8 1a ee ff ff       	call   f0100d0e <cprintf>
f0101ef4:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ef7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101efc:	c9                   	leave  
f0101efd:	c3                   	ret    

f0101efe <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101efe:	55                   	push   %ebp
f0101eff:	89 e5                	mov    %esp,%ebp
f0101f01:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101f04:	e8 f6 c3 00 00       	call   f010e2ff <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101f09:	83 ec 0c             	sub    $0xc,%esp
f0101f0c:	68 c0 4f 13 f0       	push   $0xf0134fc0
f0101f11:	e8 f8 ed ff ff       	call   f0100d0e <cprintf>
f0101f16:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f19:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f1e:	c9                   	leave  
f0101f1f:	c3                   	ret    

f0101f20 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101f20:	55                   	push   %ebp
f0101f21:	89 e5                	mov    %esp,%ebp
f0101f23:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101f26:	e8 e4 c3 00 00       	call   f010e30f <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101f2b:	83 ec 0c             	sub    $0xc,%esp
f0101f2e:	68 ec 4f 13 f0       	push   $0xf0134fec
f0101f33:	e8 d6 ed ff ff       	call   f0100d0e <cprintf>
f0101f38:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f40:	c9                   	leave  
f0101f41:	c3                   	ret    

f0101f42 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101f42:	55                   	push   %ebp
f0101f43:	89 e5                	mov    %esp,%ebp
f0101f45:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101f48:	e8 d2 c3 00 00       	call   f010e31f <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101f4d:	83 ec 0c             	sub    $0xc,%esp
f0101f50:	68 14 50 13 f0       	push   $0xf0135014
f0101f55:	e8 b4 ed ff ff       	call   f0100d0e <cprintf>
f0101f5a:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f62:	c9                   	leave  
f0101f63:	c3                   	ret    

f0101f64 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101f64:	55                   	push   %ebp
f0101f65:	89 e5                	mov    %esp,%ebp
f0101f67:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101f6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f6d:	83 c0 04             	add    $0x4,%eax
f0101f70:	8b 00                	mov    (%eax),%eax
f0101f72:	83 ec 04             	sub    $0x4,%esp
f0101f75:	6a 0a                	push   $0xa
f0101f77:	6a 00                	push   $0x0
f0101f79:	50                   	push   %eax
f0101f7a:	e8 e6 fd 02 00       	call   f0131d65 <strtol>
f0101f7f:	83 c4 10             	add    $0x10,%esp
f0101f82:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101f85:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101f89:	83 ec 0c             	sub    $0xc,%esp
f0101f8c:	50                   	push   %eax
f0101f8d:	e8 67 28 00 00       	call   f01047f9 <sched_init_RR>
f0101f92:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101f95:	a1 28 f7 85 f0       	mov    0xf085f728,%eax
f0101f9a:	8a 00                	mov    (%eax),%al
f0101f9c:	0f b6 c0             	movzbl %al,%eax
f0101f9f:	83 ec 08             	sub    $0x8,%esp
f0101fa2:	50                   	push   %eax
f0101fa3:	68 48 50 13 f0       	push   $0xf0135048
f0101fa8:	e8 61 ed ff ff       	call   f0100d0e <cprintf>
f0101fad:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101fb0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fb5:	c9                   	leave  
f0101fb6:	c3                   	ret    

f0101fb7 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101fb7:	55                   	push   %ebp
f0101fb8:	89 e5                	mov    %esp,%ebp
f0101fba:	53                   	push   %ebx
f0101fbb:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101fbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fc1:	83 c0 04             	add    $0x4,%eax
f0101fc4:	8b 00                	mov    (%eax),%eax
f0101fc6:	83 ec 04             	sub    $0x4,%esp
f0101fc9:	6a 0a                	push   $0xa
f0101fcb:	6a 00                	push   $0x0
f0101fcd:	50                   	push   %eax
f0101fce:	e8 92 fd 02 00       	call   f0131d65 <strtol>
f0101fd3:	83 c4 10             	add    $0x10,%esp
f0101fd6:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101fd9:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101fe0:	eb 2e                	jmp    f0102010 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fe5:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101feb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101ff2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ff5:	01 d0                	add    %edx,%eax
f0101ff7:	8b 00                	mov    (%eax),%eax
f0101ff9:	83 ec 04             	sub    $0x4,%esp
f0101ffc:	6a 0a                	push   $0xa
f0101ffe:	6a 00                	push   $0x0
f0102000:	50                   	push   %eax
f0102001:	e8 5f fd 02 00       	call   f0131d65 <strtol>
f0102006:	83 c4 10             	add    $0x10,%esp
f0102009:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f010200d:	ff 45 f4             	incl   -0xc(%ebp)
f0102010:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102013:	3b 45 08             	cmp    0x8(%ebp),%eax
f0102016:	7c ca                	jl     f0101fe2 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0102018:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010201c:	83 ec 08             	sub    $0x8,%esp
f010201f:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0102022:	52                   	push   %edx
f0102023:	50                   	push   %eax
f0102024:	e8 5b 28 00 00       	call   f0104884 <sched_init_MLFQ>
f0102029:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010202c:	83 ec 0c             	sub    $0xc,%esp
f010202f:	68 80 50 13 f0       	push   $0xf0135080
f0102034:	e8 d5 ec ff ff       	call   f0100d0e <cprintf>
f0102039:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010203c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102043:	eb 24                	jmp    f0102069 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f0102045:	8b 15 28 f7 85 f0    	mov    0xf085f728,%edx
f010204b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010204e:	01 d0                	add    %edx,%eax
f0102050:	8a 00                	mov    (%eax),%al
f0102052:	0f b6 c0             	movzbl %al,%eax
f0102055:	83 ec 08             	sub    $0x8,%esp
f0102058:	50                   	push   %eax
f0102059:	68 ad 50 13 f0       	push   $0xf01350ad
f010205e:	e8 ab ec ff ff       	call   f0100d0e <cprintf>
f0102063:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0102066:	ff 45 f0             	incl   -0x10(%ebp)
f0102069:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f010206e:	0f b6 c0             	movzbl %al,%eax
f0102071:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0102074:	7f cf                	jg     f0102045 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0102076:	83 ec 0c             	sub    $0xc,%esp
f0102079:	68 35 4a 13 f0       	push   $0xf0134a35
f010207e:	e8 8b ec ff ff       	call   f0100d0e <cprintf>
f0102083:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102086:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010208b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010208e:	c9                   	leave  
f010208f:	c3                   	ret    

f0102090 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0102090:	55                   	push   %ebp
f0102091:	89 e5                	mov    %esp,%ebp
f0102093:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0102096:	e8 8d 23 00 00       	call   f0104428 <isSchedMethodMLFQ>
f010209b:	85 c0                	test   %eax,%eax
f010209d:	74 5c                	je     f01020fb <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f010209f:	83 ec 0c             	sub    $0xc,%esp
f01020a2:	68 b4 50 13 f0       	push   $0xf01350b4
f01020a7:	e8 62 ec ff ff       	call   f0100d0e <cprintf>
f01020ac:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01020b6:	eb 24                	jmp    f01020dc <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f01020b8:	8b 15 28 f7 85 f0    	mov    0xf085f728,%edx
f01020be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01020c1:	01 d0                	add    %edx,%eax
f01020c3:	8a 00                	mov    (%eax),%al
f01020c5:	0f b6 c0             	movzbl %al,%eax
f01020c8:	83 ec 08             	sub    $0x8,%esp
f01020cb:	50                   	push   %eax
f01020cc:	68 ad 50 13 f0       	push   $0xf01350ad
f01020d1:	e8 38 ec ff ff       	call   f0100d0e <cprintf>
f01020d6:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f01020d9:	ff 45 f4             	incl   -0xc(%ebp)
f01020dc:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01020e1:	0f b6 c0             	movzbl %al,%eax
f01020e4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01020e7:	7f cf                	jg     f01020b8 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f01020e9:	83 ec 0c             	sub    $0xc,%esp
f01020ec:	68 35 4a 13 f0       	push   $0xf0134a35
f01020f1:	e8 18 ec ff ff       	call   f0100d0e <cprintf>
f01020f6:	83 c4 10             	add    $0x10,%esp
f01020f9:	eb 36                	jmp    f0102131 <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f01020fb:	e8 0e 23 00 00       	call   f010440e <isSchedMethodRR>
f0102100:	85 c0                	test   %eax,%eax
f0102102:	74 1d                	je     f0102121 <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0102104:	a1 28 f7 85 f0       	mov    0xf085f728,%eax
f0102109:	8a 00                	mov    (%eax),%al
f010210b:	0f b6 c0             	movzbl %al,%eax
f010210e:	83 ec 08             	sub    $0x8,%esp
f0102111:	50                   	push   %eax
f0102112:	68 e8 50 13 f0       	push   $0xf01350e8
f0102117:	e8 f2 eb ff ff       	call   f0100d0e <cprintf>
f010211c:	83 c4 10             	add    $0x10,%esp
f010211f:	eb 10                	jmp    f0102131 <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0102121:	83 ec 0c             	sub    $0xc,%esp
f0102124:	68 24 51 13 f0       	push   $0xf0135124
f0102129:	e8 e0 eb ff ff       	call   f0100d0e <cprintf>
f010212e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102131:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102136:	c9                   	leave  
f0102137:	c3                   	ret    

f0102138 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0102138:	55                   	push   %ebp
f0102139:	89 e5                	mov    %esp,%ebp
f010213b:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f010213e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102141:	83 c0 04             	add    $0x4,%eax
f0102144:	8b 00                	mov    (%eax),%eax
f0102146:	83 ec 04             	sub    $0x4,%esp
f0102149:	6a 0a                	push   $0xa
f010214b:	6a 00                	push   $0x0
f010214d:	50                   	push   %eax
f010214e:	e8 12 fc 02 00       	call   f0131d65 <strtol>
f0102153:	83 c4 10             	add    $0x10,%esp
f0102156:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102159:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010215c:	0f b6 c0             	movzbl %al,%eax
f010215f:	83 ec 0c             	sub    $0xc,%esp
f0102162:	50                   	push   %eax
f0102163:	e8 23 eb 02 00       	call   f0130c8b <chksch>
f0102168:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f010216b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010216f:	75 12                	jne    f0102183 <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0102171:	83 ec 0c             	sub    $0xc,%esp
f0102174:	68 4c 51 13 f0       	push   $0xf013514c
f0102179:	e8 90 eb ff ff       	call   f0100d0e <cprintf>
f010217e:	83 c4 10             	add    $0x10,%esp
f0102181:	eb 16                	jmp    f0102199 <command_sch_test+0x61>
	else if (status == 1)
f0102183:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102187:	75 10                	jne    f0102199 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102189:	83 ec 0c             	sub    $0xc,%esp
f010218c:	68 74 51 13 f0       	push   $0xf0135174
f0102191:	e8 78 eb ff ff       	call   f0100d0e <cprintf>
f0102196:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102199:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010219e:	c9                   	leave  
f010219f:	c3                   	ret    

f01021a0 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f01021a0:	55                   	push   %ebp
f01021a1:	89 e5                	mov    %esp,%ebp
f01021a3:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f01021a6:	e8 c2 c1 00 00       	call   f010e36d <isPageReplacmentAlgorithmCLOCK>
f01021ab:	85 c0                	test   %eax,%eax
f01021ad:	74 15                	je     f01021c4 <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f01021af:	83 ec 0c             	sub    $0xc,%esp
f01021b2:	68 98 51 13 f0       	push   $0xf0135198
f01021b7:	e8 52 eb ff ff       	call   f0100d0e <cprintf>
f01021bc:	83 c4 10             	add    $0x10,%esp
f01021bf:	e9 8c 00 00 00       	jmp    f0102250 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01021c4:	83 ec 0c             	sub    $0xc,%esp
f01021c7:	6a 01                	push   $0x1
f01021c9:	e8 89 c1 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f01021ce:	83 c4 10             	add    $0x10,%esp
f01021d1:	85 c0                	test   %eax,%eax
f01021d3:	74 12                	je     f01021e7 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f01021d5:	83 ec 0c             	sub    $0xc,%esp
f01021d8:	68 c0 51 13 f0       	push   $0xf01351c0
f01021dd:	e8 2c eb ff ff       	call   f0100d0e <cprintf>
f01021e2:	83 c4 10             	add    $0x10,%esp
f01021e5:	eb 69                	jmp    f0102250 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01021e7:	83 ec 0c             	sub    $0xc,%esp
f01021ea:	6a 02                	push   $0x2
f01021ec:	e8 66 c1 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f01021f1:	83 c4 10             	add    $0x10,%esp
f01021f4:	85 c0                	test   %eax,%eax
f01021f6:	74 12                	je     f010220a <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f01021f8:	83 ec 0c             	sub    $0xc,%esp
f01021fb:	68 00 52 13 f0       	push   $0xf0135200
f0102200:	e8 09 eb ff ff       	call   f0100d0e <cprintf>
f0102205:	83 c4 10             	add    $0x10,%esp
f0102208:	eb 46                	jmp    f0102250 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f010220a:	e8 79 c1 00 00       	call   f010e388 <isPageReplacmentAlgorithmFIFO>
f010220f:	85 c0                	test   %eax,%eax
f0102211:	74 12                	je     f0102225 <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0102213:	83 ec 0c             	sub    $0xc,%esp
f0102216:	68 3c 52 13 f0       	push   $0xf013523c
f010221b:	e8 ee ea ff ff       	call   f0100d0e <cprintf>
f0102220:	83 c4 10             	add    $0x10,%esp
f0102223:	eb 2b                	jmp    f0102250 <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0102225:	e8 79 c1 00 00       	call   f010e3a3 <isPageReplacmentAlgorithmModifiedCLOCK>
f010222a:	85 c0                	test   %eax,%eax
f010222c:	74 12                	je     f0102240 <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f010222e:	83 ec 0c             	sub    $0xc,%esp
f0102231:	68 60 52 13 f0       	push   $0xf0135260
f0102236:	e8 d3 ea ff ff       	call   f0100d0e <cprintf>
f010223b:	83 c4 10             	add    $0x10,%esp
f010223e:	eb 10                	jmp    f0102250 <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0102240:	83 ec 0c             	sub    $0xc,%esp
f0102243:	68 90 52 13 f0       	push   $0xf0135290
f0102248:	e8 c1 ea ff ff       	call   f0100d0e <cprintf>
f010224d:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102250:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102255:	c9                   	leave  
f0102256:	c3                   	ret    

f0102257 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102257:	55                   	push   %ebp
f0102258:	89 e5                	mov    %esp,%ebp
f010225a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f010225d:	e8 18 ed ff ff       	call   f0100f7a <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0102262:	83 ec 0c             	sub    $0xc,%esp
f0102265:	68 bc 52 13 f0       	push   $0xf01352bc
f010226a:	e8 9f ea ff ff       	call   f0100d0e <cprintf>
f010226f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102272:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102277:	c9                   	leave  
f0102278:	c3                   	ret    

f0102279 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102279:	55                   	push   %ebp
f010227a:	89 e5                	mov    %esp,%ebp
f010227c:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f010227f:	e8 06 ed ff ff       	call   f0100f8a <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f0102284:	83 ec 0c             	sub    $0xc,%esp
f0102287:	68 ec 52 13 f0       	push   $0xf01352ec
f010228c:	e8 7d ea ff ff       	call   f0100d0e <cprintf>
f0102291:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102294:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102299:	c9                   	leave  
f010229a:	c3                   	ret    

f010229b <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f010229b:	55                   	push   %ebp
f010229c:	89 e5                	mov    %esp,%ebp
f010229e:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f01022a1:	e8 f4 ec ff ff       	call   f0100f9a <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f01022a6:	83 ec 0c             	sub    $0xc,%esp
f01022a9:	68 1c 53 13 f0       	push   $0xf013531c
f01022ae:	e8 5b ea ff ff       	call   f0100d0e <cprintf>
f01022b3:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022bb:	c9                   	leave  
f01022bc:	c3                   	ret    

f01022bd <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01022bd:	55                   	push   %ebp
f01022be:	89 e5                	mov    %esp,%ebp
f01022c0:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f01022c3:	e8 e2 ec ff ff       	call   f0100faa <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f01022c8:	83 ec 0c             	sub    $0xc,%esp
f01022cb:	68 4c 53 13 f0       	push   $0xf013534c
f01022d0:	e8 39 ea ff ff       	call   f0100d0e <cprintf>
f01022d5:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022dd:	c9                   	leave  
f01022de:	c3                   	ret    

f01022df <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f01022df:	55                   	push   %ebp
f01022e0:	89 e5                	mov    %esp,%ebp
f01022e2:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f01022e5:	e8 d0 ec ff ff       	call   f0100fba <isUHeapPlacementStrategyFIRSTFIT>
f01022ea:	84 c0                	test   %al,%al
f01022ec:	74 12                	je     f0102300 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f01022ee:	83 ec 0c             	sub    $0xc,%esp
f01022f1:	68 7c 53 13 f0       	push   $0xf013537c
f01022f6:	e8 13 ea ff ff       	call   f0100d0e <cprintf>
f01022fb:	83 c4 10             	add    $0x10,%esp
f01022fe:	eb 61                	jmp    f0102361 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102300:	e8 ca ec ff ff       	call   f0100fcf <isUHeapPlacementStrategyBESTFIT>
f0102305:	84 c0                	test   %al,%al
f0102307:	74 12                	je     f010231b <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102309:	83 ec 0c             	sub    $0xc,%esp
f010230c:	68 a8 53 13 f0       	push   $0xf01353a8
f0102311:	e8 f8 e9 ff ff       	call   f0100d0e <cprintf>
f0102316:	83 c4 10             	add    $0x10,%esp
f0102319:	eb 46                	jmp    f0102361 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f010231b:	e8 c4 ec ff ff       	call   f0100fe4 <isUHeapPlacementStrategyNEXTFIT>
f0102320:	84 c0                	test   %al,%al
f0102322:	74 12                	je     f0102336 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f0102324:	83 ec 0c             	sub    $0xc,%esp
f0102327:	68 d4 53 13 f0       	push   $0xf01353d4
f010232c:	e8 dd e9 ff ff       	call   f0100d0e <cprintf>
f0102331:	83 c4 10             	add    $0x10,%esp
f0102334:	eb 2b                	jmp    f0102361 <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f0102336:	e8 be ec ff ff       	call   f0100ff9 <isUHeapPlacementStrategyWORSTFIT>
f010233b:	84 c0                	test   %al,%al
f010233d:	74 12                	je     f0102351 <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f010233f:	83 ec 0c             	sub    $0xc,%esp
f0102342:	68 00 54 13 f0       	push   $0xf0135400
f0102347:	e8 c2 e9 ff ff       	call   f0100d0e <cprintf>
f010234c:	83 c4 10             	add    $0x10,%esp
f010234f:	eb 10                	jmp    f0102361 <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f0102351:	83 ec 0c             	sub    $0xc,%esp
f0102354:	68 2c 54 13 f0       	push   $0xf013542c
f0102359:	e8 b0 e9 ff ff       	call   f0100d0e <cprintf>
f010235e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102361:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102366:	c9                   	leave  
f0102367:	c3                   	ret    

f0102368 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0102368:	55                   	push   %ebp
f0102369:	89 e5                	mov    %esp,%ebp
f010236b:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f010236e:	e8 4f eb ff ff       	call   f0100ec2 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102373:	83 ec 0c             	sub    $0xc,%esp
f0102376:	68 58 54 13 f0       	push   $0xf0135458
f010237b:	e8 8e e9 ff ff       	call   f0100d0e <cprintf>
f0102380:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102383:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102388:	c9                   	leave  
f0102389:	c3                   	ret    

f010238a <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f010238a:	55                   	push   %ebp
f010238b:	89 e5                	mov    %esp,%ebp
f010238d:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102390:	e8 3d eb ff ff       	call   f0100ed2 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f0102395:	83 ec 0c             	sub    $0xc,%esp
f0102398:	68 58 54 13 f0       	push   $0xf0135458
f010239d:	e8 6c e9 ff ff       	call   f0100d0e <cprintf>
f01023a2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023aa:	c9                   	leave  
f01023ab:	c3                   	ret    

f01023ac <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01023ac:	55                   	push   %ebp
f01023ad:	89 e5                	mov    %esp,%ebp
f01023af:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f01023b2:	e8 2b eb ff ff       	call   f0100ee2 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f01023b7:	83 ec 0c             	sub    $0xc,%esp
f01023ba:	68 8c 54 13 f0       	push   $0xf013548c
f01023bf:	e8 4a e9 ff ff       	call   f0100d0e <cprintf>
f01023c4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023cc:	c9                   	leave  
f01023cd:	c3                   	ret    

f01023ce <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f01023ce:	55                   	push   %ebp
f01023cf:	89 e5                	mov    %esp,%ebp
f01023d1:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f01023d4:	e8 19 eb ff ff       	call   f0100ef2 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f01023d9:	83 ec 0c             	sub    $0xc,%esp
f01023dc:	68 bc 54 13 f0       	push   $0xf01354bc
f01023e1:	e8 28 e9 ff ff       	call   f0100d0e <cprintf>
f01023e6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01023e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01023ee:	c9                   	leave  
f01023ef:	c3                   	ret    

f01023f0 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f01023f0:	55                   	push   %ebp
f01023f1:	89 e5                	mov    %esp,%ebp
f01023f3:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f01023f6:	e8 07 eb ff ff       	call   f0100f02 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f01023fb:	83 ec 0c             	sub    $0xc,%esp
f01023fe:	68 ec 54 13 f0       	push   $0xf01354ec
f0102403:	e8 06 e9 ff ff       	call   f0100d0e <cprintf>
f0102408:	83 c4 10             	add    $0x10,%esp
	return 0;
f010240b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102410:	c9                   	leave  
f0102411:	c3                   	ret    

f0102412 <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f0102412:	55                   	push   %ebp
f0102413:	89 e5                	mov    %esp,%ebp
f0102415:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102418:	e8 f5 ea ff ff       	call   f0100f12 <isKHeapPlacementStrategyCONTALLOC>
f010241d:	84 c0                	test   %al,%al
f010241f:	74 12                	je     f0102433 <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f0102421:	83 ec 0c             	sub    $0xc,%esp
f0102424:	68 20 55 13 f0       	push   $0xf0135520
f0102429:	e8 e0 e8 ff ff       	call   f0100d0e <cprintf>
f010242e:	83 c4 10             	add    $0x10,%esp
f0102431:	eb 7c                	jmp    f01024af <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102433:	e8 ee ea ff ff       	call   f0100f26 <isKHeapPlacementStrategyFIRSTFIT>
f0102438:	84 c0                	test   %al,%al
f010243a:	74 12                	je     f010244e <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010243c:	83 ec 0c             	sub    $0xc,%esp
f010243f:	68 5c 55 13 f0       	push   $0xf013555c
f0102444:	e8 c5 e8 ff ff       	call   f0100d0e <cprintf>
f0102449:	83 c4 10             	add    $0x10,%esp
f010244c:	eb 61                	jmp    f01024af <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f010244e:	e8 e8 ea ff ff       	call   f0100f3b <isKHeapPlacementStrategyBESTFIT>
f0102453:	84 c0                	test   %al,%al
f0102455:	74 12                	je     f0102469 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102457:	83 ec 0c             	sub    $0xc,%esp
f010245a:	68 8c 55 13 f0       	push   $0xf013558c
f010245f:	e8 aa e8 ff ff       	call   f0100d0e <cprintf>
f0102464:	83 c4 10             	add    $0x10,%esp
f0102467:	eb 46                	jmp    f01024af <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102469:	e8 e2 ea ff ff       	call   f0100f50 <isKHeapPlacementStrategyNEXTFIT>
f010246e:	84 c0                	test   %al,%al
f0102470:	74 12                	je     f0102484 <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102472:	83 ec 0c             	sub    $0xc,%esp
f0102475:	68 b8 55 13 f0       	push   $0xf01355b8
f010247a:	e8 8f e8 ff ff       	call   f0100d0e <cprintf>
f010247f:	83 c4 10             	add    $0x10,%esp
f0102482:	eb 2b                	jmp    f01024af <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102484:	e8 dc ea ff ff       	call   f0100f65 <isKHeapPlacementStrategyWORSTFIT>
f0102489:	84 c0                	test   %al,%al
f010248b:	74 12                	je     f010249f <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f010248d:	83 ec 0c             	sub    $0xc,%esp
f0102490:	68 e4 55 13 f0       	push   $0xf01355e4
f0102495:	e8 74 e8 ff ff       	call   f0100d0e <cprintf>
f010249a:	83 c4 10             	add    $0x10,%esp
f010249d:	eb 10                	jmp    f01024af <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f010249f:	83 ec 0c             	sub    $0xc,%esp
f01024a2:	68 14 56 13 f0       	push   $0xf0135614
f01024a7:	e8 62 e8 ff ff       	call   f0100d0e <cprintf>
f01024ac:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024af:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024b4:	c9                   	leave  
f01024b5:	c3                   	ret    

f01024b6 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024b6:	55                   	push   %ebp
f01024b7:	89 e5                	mov    %esp,%ebp
f01024b9:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01024bc:	e8 59 bf 00 00       	call   f010e41a <isBufferingEnabled>
f01024c1:	84 c0                	test   %al,%al
f01024c3:	75 12                	jne    f01024d7 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01024c5:	83 ec 0c             	sub    $0xc,%esp
f01024c8:	68 44 56 13 f0       	push   $0xf0135644
f01024cd:	e8 3c e8 ff ff       	call   f0100d0e <cprintf>
f01024d2:	83 c4 10             	add    $0x10,%esp
f01024d5:	eb 1d                	jmp    f01024f4 <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f01024d7:	83 ec 0c             	sub    $0xc,%esp
f01024da:	6a 00                	push   $0x0
f01024dc:	e8 13 bf 00 00       	call   f010e3f4 <enableModifiedBuffer>
f01024e1:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f01024e4:	83 ec 0c             	sub    $0xc,%esp
f01024e7:	68 80 56 13 f0       	push   $0xf0135680
f01024ec:	e8 1d e8 ff ff       	call   f0100d0e <cprintf>
f01024f1:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01024f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024f9:	c9                   	leave  
f01024fa:	c3                   	ret    

f01024fb <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f01024fb:	55                   	push   %ebp
f01024fc:	89 e5                	mov    %esp,%ebp
f01024fe:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102501:	e8 14 bf 00 00       	call   f010e41a <isBufferingEnabled>
f0102506:	84 c0                	test   %al,%al
f0102508:	75 12                	jne    f010251c <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010250a:	83 ec 0c             	sub    $0xc,%esp
f010250d:	68 44 56 13 f0       	push   $0xf0135644
f0102512:	e8 f7 e7 ff ff       	call   f0100d0e <cprintf>
f0102517:	83 c4 10             	add    $0x10,%esp
f010251a:	eb 1d                	jmp    f0102539 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f010251c:	83 ec 0c             	sub    $0xc,%esp
f010251f:	6a 01                	push   $0x1
f0102521:	e8 ce be 00 00       	call   f010e3f4 <enableModifiedBuffer>
f0102526:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f0102529:	83 ec 0c             	sub    $0xc,%esp
f010252c:	68 a4 56 13 f0       	push   $0xf01356a4
f0102531:	e8 d8 e7 ff ff       	call   f0100d0e <cprintf>
f0102536:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102539:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010253e:	c9                   	leave  
f010253f:	c3                   	ret    

f0102540 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f0102540:	55                   	push   %ebp
f0102541:	89 e5                	mov    %esp,%ebp
f0102543:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f0102546:	83 ec 0c             	sub    $0xc,%esp
f0102549:	6a 00                	push   $0x0
f010254b:	e8 bc be 00 00       	call   f010e40c <enableBuffering>
f0102550:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f0102553:	83 ec 0c             	sub    $0xc,%esp
f0102556:	6a 00                	push   $0x0
f0102558:	e8 97 be 00 00       	call   f010e3f4 <enableModifiedBuffer>
f010255d:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f0102560:	83 ec 0c             	sub    $0xc,%esp
f0102563:	68 c4 56 13 f0       	push   $0xf01356c4
f0102568:	e8 a1 e7 ff ff       	call   f0100d0e <cprintf>
f010256d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102570:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102575:	c9                   	leave  
f0102576:	c3                   	ret    

f0102577 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102577:	55                   	push   %ebp
f0102578:	89 e5                	mov    %esp,%ebp
f010257a:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f010257d:	83 ec 0c             	sub    $0xc,%esp
f0102580:	6a 01                	push   $0x1
f0102582:	e8 85 be 00 00       	call   f010e40c <enableBuffering>
f0102587:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f010258a:	83 ec 0c             	sub    $0xc,%esp
f010258d:	6a 01                	push   $0x1
f010258f:	e8 60 be 00 00       	call   f010e3f4 <enableModifiedBuffer>
f0102594:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102597:	e8 96 be 00 00       	call   f010e432 <getModifiedBufferLength>
f010259c:	85 c0                	test   %eax,%eax
f010259e:	75 59                	jne    f01025f9 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f01025a0:	83 ec 0c             	sub    $0xc,%esp
f01025a3:	68 e0 56 13 f0       	push   $0xf01356e0
f01025a8:	e8 61 e7 ff ff       	call   f0100d0e <cprintf>
f01025ad:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f01025b0:	83 ec 08             	sub    $0x8,%esp
f01025b3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025b6:	50                   	push   %eax
f01025b7:	68 10 57 13 f0       	push   $0xf0135710
f01025bc:	e8 3e f2 02 00       	call   f01317ff <readline>
f01025c1:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f01025c4:	83 ec 04             	sub    $0x4,%esp
f01025c7:	6a 0a                	push   $0xa
f01025c9:	6a 00                	push   $0x0
f01025cb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01025ce:	50                   	push   %eax
f01025cf:	e8 91 f7 02 00       	call   f0131d65 <strtol>
f01025d4:	83 c4 10             	add    $0x10,%esp
f01025d7:	83 ec 0c             	sub    $0xc,%esp
f01025da:	50                   	push   %eax
f01025db:	e8 44 be 00 00       	call   f010e424 <setModifiedBufferLength>
f01025e0:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01025e3:	e8 4a be 00 00       	call   f010e432 <getModifiedBufferLength>
f01025e8:	83 ec 08             	sub    $0x8,%esp
f01025eb:	50                   	push   %eax
f01025ec:	68 3c 57 13 f0       	push   $0xf013573c
f01025f1:	e8 18 e7 ff ff       	call   f0100d0e <cprintf>
f01025f6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f01025f9:	83 ec 0c             	sub    $0xc,%esp
f01025fc:	68 61 57 13 f0       	push   $0xf0135761
f0102601:	e8 08 e7 ff ff       	call   f0100d0e <cprintf>
f0102606:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102609:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010260e:	c9                   	leave  
f010260f:	c3                   	ret    

f0102610 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102610:	55                   	push   %ebp
f0102611:	89 e5                	mov    %esp,%ebp
f0102613:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102616:	e8 ff bd 00 00       	call   f010e41a <isBufferingEnabled>
f010261b:	84 c0                	test   %al,%al
f010261d:	75 12                	jne    f0102631 <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010261f:	83 ec 0c             	sub    $0xc,%esp
f0102622:	68 7c 57 13 f0       	push   $0xf013577c
f0102627:	e8 e2 e6 ff ff       	call   f0100d0e <cprintf>
f010262c:	83 c4 10             	add    $0x10,%esp
f010262f:	eb 19                	jmp    f010264a <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102631:	e8 cc bd 00 00       	call   f010e402 <isModifiedBufferEnabled>
f0102636:	84 c0                	test   %al,%al
f0102638:	75 10                	jne    f010264a <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010263a:	83 ec 0c             	sub    $0xc,%esp
f010263d:	68 cc 57 13 f0       	push   $0xf01357cc
f0102642:	e8 c7 e6 ff ff       	call   f0100d0e <cprintf>
f0102647:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f010264a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010264d:	83 c0 04             	add    $0x4,%eax
f0102650:	8b 00                	mov    (%eax),%eax
f0102652:	83 ec 04             	sub    $0x4,%esp
f0102655:	6a 0a                	push   $0xa
f0102657:	6a 00                	push   $0x0
f0102659:	50                   	push   %eax
f010265a:	e8 06 f7 02 00       	call   f0131d65 <strtol>
f010265f:	83 c4 10             	add    $0x10,%esp
f0102662:	83 ec 0c             	sub    $0xc,%esp
f0102665:	50                   	push   %eax
f0102666:	e8 b9 bd 00 00       	call   f010e424 <setModifiedBufferLength>
f010266b:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010266e:	e8 bf bd 00 00       	call   f010e432 <getModifiedBufferLength>
f0102673:	83 ec 08             	sub    $0x8,%esp
f0102676:	50                   	push   %eax
f0102677:	68 3c 57 13 f0       	push   $0xf013573c
f010267c:	e8 8d e6 ff ff       	call   f0100d0e <cprintf>
f0102681:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102684:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102689:	c9                   	leave  
f010268a:	c3                   	ret    

f010268b <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010268b:	55                   	push   %ebp
f010268c:	89 e5                	mov    %esp,%ebp
f010268e:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102691:	e8 84 bd 00 00       	call   f010e41a <isBufferingEnabled>
f0102696:	84 c0                	test   %al,%al
f0102698:	75 12                	jne    f01026ac <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f010269a:	83 ec 0c             	sub    $0xc,%esp
f010269d:	68 7c 57 13 f0       	push   $0xf013577c
f01026a2:	e8 67 e6 ff ff       	call   f0100d0e <cprintf>
f01026a7:	83 c4 10             	add    $0x10,%esp
f01026aa:	eb 19                	jmp    f01026c5 <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01026ac:	e8 51 bd 00 00       	call   f010e402 <isModifiedBufferEnabled>
f01026b1:	84 c0                	test   %al,%al
f01026b3:	75 10                	jne    f01026c5 <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01026b5:	83 ec 0c             	sub    $0xc,%esp
f01026b8:	68 cc 57 13 f0       	push   $0xf01357cc
f01026bd:	e8 4c e6 ff ff       	call   f0100d0e <cprintf>
f01026c2:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f01026c5:	e8 68 bd 00 00       	call   f010e432 <getModifiedBufferLength>
f01026ca:	83 ec 08             	sub    $0x8,%esp
f01026cd:	50                   	push   %eax
f01026ce:	68 12 58 13 f0       	push   $0xf0135812
f01026d3:	e8 36 e6 ff ff       	call   f0100d0e <cprintf>
f01026d8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026db:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026e0:	c9                   	leave  
f01026e1:	c3                   	ret    

f01026e2 <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f01026e2:	55                   	push   %ebp
f01026e3:	89 e5                	mov    %esp,%ebp
f01026e5:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f01026e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f01026ef:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01026f3:	75 1b                	jne    f0102710 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f01026f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01026f8:	83 c0 04             	add    $0x4,%eax
f01026fb:	8b 00                	mov    (%eax),%eax
f01026fd:	83 ec 04             	sub    $0x4,%esp
f0102700:	6a 0a                	push   $0xa
f0102702:	6a 00                	push   $0x0
f0102704:	50                   	push   %eax
f0102705:	e8 5b f6 02 00       	call   f0131d65 <strtol>
f010270a:	83 c4 10             	add    $0x10,%esp
f010270d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f0102710:	e8 fd e7 ff ff       	call   f0100f12 <isKHeapPlacementStrategyCONTALLOC>
f0102715:	84 c0                	test   %al,%al
f0102717:	74 0a                	je     f0102723 <command_test_kmalloc+0x41>
		test_kmalloc();
f0102719:	e8 d6 57 01 00       	call   f0117ef4 <test_kmalloc>
f010271e:	e9 e8 00 00 00       	jmp    f010280b <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102723:	e8 fe e7 ff ff       	call   f0100f26 <isKHeapPlacementStrategyFIRSTFIT>
f0102728:	84 c0                	test   %al,%al
f010272a:	74 44                	je     f0102770 <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f010272c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102730:	75 1a                	jne    f010274c <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102732:	83 ec 0c             	sub    $0xc,%esp
f0102735:	68 30 58 13 f0       	push   $0xf0135830
f010273a:	e8 cf e5 ff ff       	call   f0100d0e <cprintf>
f010273f:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102742:	b8 00 00 00 00       	mov    $0x0,%eax
f0102747:	e9 c4 00 00 00       	jmp    f0102810 <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f010274c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102750:	75 0a                	jne    f010275c <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f0102752:	e8 26 a6 01 00       	call   f011cd7d <test_kmalloc_firstfit1>
f0102757:	e9 af 00 00 00       	jmp    f010280b <command_test_kmalloc+0x129>
		else if (testNum == 2)
f010275c:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102760:	0f 85 a5 00 00 00    	jne    f010280b <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f0102766:	e8 b4 b9 01 00       	call   f011e11f <test_kmalloc_firstfit2>
f010276b:	e9 9b 00 00 00       	jmp    f010280b <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102770:	e8 c6 e7 ff ff       	call   f0100f3b <isKHeapPlacementStrategyBESTFIT>
f0102775:	84 c0                	test   %al,%al
f0102777:	74 44                	je     f01027bd <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102779:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010277d:	75 17                	jne    f0102796 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010277f:	83 ec 0c             	sub    $0xc,%esp
f0102782:	68 80 58 13 f0       	push   $0xf0135880
f0102787:	e8 82 e5 ff ff       	call   f0100d0e <cprintf>
f010278c:	83 c4 10             	add    $0x10,%esp
			return 0;
f010278f:	b8 00 00 00 00       	mov    $0x0,%eax
f0102794:	eb 7a                	jmp    f0102810 <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102796:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010279a:	75 07                	jne    f01027a3 <command_test_kmalloc+0xc1>
			test_kmalloc();
f010279c:	e8 53 57 01 00       	call   f0117ef4 <test_kmalloc>
f01027a1:	eb 68                	jmp    f010280b <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01027a3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027a7:	75 07                	jne    f01027b0 <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f01027a9:	e8 99 80 01 00       	call   f011a847 <test_kmalloc_bestfit1>
f01027ae:	eb 5b                	jmp    f010280b <command_test_kmalloc+0x129>
		else if (testNum == 3)
f01027b0:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f01027b4:	75 55                	jne    f010280b <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f01027b6:	e8 e2 92 01 00       	call   f011ba9d <test_kmalloc_bestfit2>
f01027bb:	eb 4e                	jmp    f010280b <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027bd:	e8 8e e7 ff ff       	call   f0100f50 <isKHeapPlacementStrategyNEXTFIT>
f01027c2:	84 c0                	test   %al,%al
f01027c4:	74 37                	je     f01027fd <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f01027c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01027ca:	75 17                	jne    f01027e3 <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f01027cc:	83 ec 0c             	sub    $0xc,%esp
f01027cf:	68 d0 58 13 f0       	push   $0xf01358d0
f01027d4:	e8 35 e5 ff ff       	call   f0100d0e <cprintf>
f01027d9:	83 c4 10             	add    $0x10,%esp
			return 0;
f01027dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01027e1:	eb 2d                	jmp    f0102810 <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f01027e3:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01027e7:	75 07                	jne    f01027f0 <command_test_kmalloc+0x10e>
			test_kmalloc();
f01027e9:	e8 06 57 01 00       	call   f0117ef4 <test_kmalloc>
f01027ee:	eb 1b                	jmp    f010280b <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f01027f0:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01027f4:	75 15                	jne    f010280b <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f01027f6:	e8 57 69 01 00       	call   f0119152 <test_kmalloc_nextfit>
f01027fb:	eb 0e                	jmp    f010280b <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f01027fd:	e8 63 e7 ff ff       	call   f0100f65 <isKHeapPlacementStrategyWORSTFIT>
f0102802:	84 c0                	test   %al,%al
f0102804:	74 05                	je     f010280b <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102806:	e8 a9 c7 01 00       	call   f011efb4 <test_kmalloc_worstfit>
	return 0;
f010280b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102810:	c9                   	leave  
f0102811:	c3                   	ret    

f0102812 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102812:	55                   	push   %ebp
f0102813:	89 e5                	mov    %esp,%ebp
f0102815:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102818:	e8 1e e7 ff ff       	call   f0100f3b <isKHeapPlacementStrategyBESTFIT>
f010281d:	84 c0                	test   %al,%al
f010281f:	75 09                	jne    f010282a <command_test_kfree+0x18>
f0102821:	e8 00 e7 ff ff       	call   f0100f26 <isKHeapPlacementStrategyFIRSTFIT>
f0102826:	84 c0                	test   %al,%al
f0102828:	74 07                	je     f0102831 <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f010282a:	e8 27 ff 01 00       	call   f0122756 <test_kfree_bestfirstfit>
f010282f:	eb 05                	jmp    f0102836 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f0102831:	e8 ce dd 01 00       	call   f0120604 <test_kfree>
	}
	return 0;
f0102836:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010283b:	c9                   	leave  
f010283c:	c3                   	ret    

f010283d <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f010283d:	55                   	push   %ebp
f010283e:	89 e5                	mov    %esp,%ebp
f0102840:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102843:	e8 0a 19 02 00       	call   f0124152 <test_kheap_phys_addr>
	return 0;
f0102848:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010284d:	c9                   	leave  
f010284e:	c3                   	ret    

f010284f <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f010284f:	55                   	push   %ebp
f0102850:	89 e5                	mov    %esp,%ebp
f0102852:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102855:	e8 c8 2d 02 00       	call   f0125622 <test_kheap_virt_addr>
	return 0;
f010285a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010285f:	c9                   	leave  
f0102860:	c3                   	ret    

f0102861 <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102861:	55                   	push   %ebp
f0102862:	89 e5                	mov    %esp,%ebp
f0102864:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102867:	e8 93 42 02 00       	call   f0126aff <test_three_creation_functions>
	return 0;
f010286c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102871:	c9                   	leave  
f0102872:	c3                   	ret    

f0102873 <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f0102873:	55                   	push   %ebp
f0102874:	89 e5                	mov    %esp,%ebp
f0102876:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102879:	e8 d2 e6 ff ff       	call   f0100f50 <isKHeapPlacementStrategyNEXTFIT>
f010287e:	84 c0                	test   %al,%al
f0102880:	74 07                	je     f0102889 <command_test_krealloc+0x16>
		test_krealloc();
f0102882:	e8 8f 9c 02 00       	call   f012c516 <test_krealloc>
f0102887:	eb 0e                	jmp    f0102897 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102889:	e8 ad e6 ff ff       	call   f0100f3b <isKHeapPlacementStrategyBESTFIT>
f010288e:	84 c0                	test   %al,%al
f0102890:	74 05                	je     f0102897 <command_test_krealloc+0x24>
		test_krealloc_BF();
f0102892:	e8 2f bc 02 00       	call   f012e4c6 <test_krealloc_BF>
	return 0;
f0102897:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010289c:	c9                   	leave  
f010289d:	c3                   	ret    

f010289e <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f010289e:	55                   	push   %ebp
f010289f:	89 e5                	mov    %esp,%ebp
f01028a1:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f01028a4:	e8 60 42 01 00       	call   f0116b09 <test_priority_normal_and_higher>
	return 0;
f01028a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028ae:	c9                   	leave  
f01028af:	c3                   	ret    

f01028b0 <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f01028b0:	55                   	push   %ebp
f01028b1:	89 e5                	mov    %esp,%ebp
f01028b3:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f01028b6:	e8 34 4c 01 00       	call   f01174ef <test_priority_normal_and_lower>
	return 0;
f01028bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028c0:	c9                   	leave  
f01028c1:	c3                   	ret    

f01028c2 <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f01028c2:	55                   	push   %ebp
f01028c3:	89 e5                	mov    %esp,%ebp
f01028c5:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f01028c8:	e8 6c 44 02 00       	call   f0126d39 <test_kfreeall>
	return 0;
f01028cd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028d2:	c9                   	leave  
f01028d3:	c3                   	ret    

f01028d4 <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f01028d4:	55                   	push   %ebp
f01028d5:	89 e5                	mov    %esp,%ebp
f01028d7:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f01028da:	e8 46 5b 02 00       	call   f0128425 <test_kexpand>
	return 0;
f01028df:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028e4:	c9                   	leave  
f01028e5:	c3                   	ret    

f01028e6 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f01028e6:	55                   	push   %ebp
f01028e7:	89 e5                	mov    %esp,%ebp
f01028e9:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f01028ec:	e8 b5 68 02 00       	call   f01291a6 <test_kshrink>
	return 0;
f01028f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028f6:	c9                   	leave  
f01028f7:	c3                   	ret    

f01028f8 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f01028f8:	55                   	push   %ebp
f01028f9:	89 e5                	mov    %esp,%ebp
f01028fb:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f01028fe:	e8 90 77 02 00       	call   f012a093 <test_kfreelast>
	return 0;
f0102903:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102908:	c9                   	leave  
f0102909:	c3                   	ret    

f010290a <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010290a:	55                   	push   %ebp
f010290b:	89 e5                	mov    %esp,%ebp
f010290d:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f0102910:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102913:	83 c0 04             	add    $0x4,%eax
f0102916:	8b 00                	mov    (%eax),%eax
f0102918:	83 ec 04             	sub    $0x4,%esp
f010291b:	6a 0a                	push   $0xa
f010291d:	6a 00                	push   $0x0
f010291f:	50                   	push   %eax
f0102920:	e8 40 f4 02 00       	call   f0131d65 <strtol>
f0102925:	83 c4 10             	add    $0x10,%esp
f0102928:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010292b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f0102932:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102939:	a1 f0 f6 85 f0       	mov    0xf085f6f0,%eax
f010293e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102941:	eb 3d                	jmp    f0102980 <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f0102943:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102946:	05 5c 05 00 00       	add    $0x55c,%eax
f010294b:	83 ec 08             	sub    $0x8,%esp
f010294e:	68 1e 59 13 f0       	push   $0xf013591e
f0102953:	50                   	push   %eax
f0102954:	e8 b8 f1 02 00       	call   f0131b11 <strcmp>
f0102959:	83 c4 10             	add    $0x10,%esp
f010295c:	85 c0                	test   %eax,%eax
f010295e:	75 12                	jne    f0102972 <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f0102960:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102964:	74 07                	je     f010296d <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f0102966:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f010296d:	ff 45 f4             	incl   -0xc(%ebp)
f0102970:	eb 06                	jmp    f0102978 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f0102972:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102976:	74 31                	je     f01029a9 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102978:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f010297d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102980:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0102984:	74 08                	je     f010298e <command_test_sc_MLFQ+0x84>
f0102986:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102989:	8b 40 44             	mov    0x44(%eax),%eax
f010298c:	eb 05                	jmp    f0102993 <command_test_sc_MLFQ+0x89>
f010298e:	b8 00 00 00 00       	mov    $0x0,%eax
f0102993:	a3 f8 f6 85 f0       	mov    %eax,0xf085f6f8
f0102998:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f010299d:	85 c0                	test   %eax,%eax
f010299f:	75 a2                	jne    f0102943 <command_test_sc_MLFQ+0x39>
f01029a1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01029a5:	75 9c                	jne    f0102943 <command_test_sc_MLFQ+0x39>
f01029a7:	eb 01                	jmp    f01029aa <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f01029a9:	90                   	nop
	}
	if(cnt == numOfSlave2)
f01029aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01029ad:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01029b0:	75 12                	jne    f01029c4 <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f01029b2:	83 ec 0c             	sub    $0xc,%esp
f01029b5:	68 28 59 13 f0       	push   $0xf0135928
f01029ba:	e8 4f e3 ff ff       	call   f0100d0e <cprintf>
f01029bf:	83 c4 10             	add    $0x10,%esp
f01029c2:	eb 17                	jmp    f01029db <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f01029c4:	83 ec 04             	sub    $0x4,%esp
f01029c7:	68 61 59 13 f0       	push   $0xf0135961
f01029cc:	68 8b 04 00 00       	push   $0x48b
f01029d1:	68 ad 49 13 f0       	push   $0xf01349ad
f01029d6:	e8 2a d8 ff ff       	call   f0100205 <_panic>
	}
	return 0;
f01029db:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029e0:	c9                   	leave  
f01029e1:	c3                   	ret    

f01029e2 <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f01029e2:	55                   	push   %ebp
f01029e3:	89 e5                	mov    %esp,%ebp
f01029e5:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f01029e8:	e8 18 ee 00 00       	call   f0111805 <TestAutoCompleteCommand>
f01029ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f01029f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01029f5:	c9                   	leave  
f01029f6:	c3                   	ret    

f01029f7 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f01029f7:	55                   	push   %ebp
f01029f8:	89 e5                	mov    %esp,%ebp
f01029fa:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f01029fd:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a01:	74 1a                	je     f0102a1d <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f0102a03:	83 ec 0c             	sub    $0xc,%esp
f0102a06:	68 78 59 13 f0       	push   $0xf0135978
f0102a0b:	e8 fe e2 ff ff       	call   f0100d0e <cprintf>
f0102a10:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a13:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a18:	e9 82 01 00 00       	jmp    f0102b9f <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f0102a1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a20:	83 c0 04             	add    $0x4,%eax
f0102a23:	8b 00                	mov    (%eax),%eax
f0102a25:	83 ec 08             	sub    $0x8,%esp
f0102a28:	68 b0 59 13 f0       	push   $0xf01359b0
f0102a2d:	50                   	push   %eax
f0102a2e:	e8 de f0 02 00       	call   f0131b11 <strcmp>
f0102a33:	83 c4 10             	add    $0x10,%esp
f0102a36:	85 c0                	test   %eax,%eax
f0102a38:	75 0a                	jne    f0102a44 <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f0102a3a:	e8 70 c3 00 00       	call   f010edaf <test_initialize_MemBlocksList>
f0102a3f:	e9 56 01 00 00       	jmp    f0102b9a <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f0102a44:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a47:	83 c0 04             	add    $0x4,%eax
f0102a4a:	8b 00                	mov    (%eax),%eax
f0102a4c:	83 ec 08             	sub    $0x8,%esp
f0102a4f:	68 b5 59 13 f0       	push   $0xf01359b5
f0102a54:	50                   	push   %eax
f0102a55:	e8 b7 f0 02 00       	call   f0131b11 <strcmp>
f0102a5a:	83 c4 10             	add    $0x10,%esp
f0102a5d:	85 c0                	test   %eax,%eax
f0102a5f:	75 0a                	jne    f0102a6b <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f0102a61:	e8 5d c4 00 00       	call   f010eec3 <test_insert_sorted_allocList>
f0102a66:	e9 2f 01 00 00       	jmp    f0102b9a <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f0102a6b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a6e:	83 c0 04             	add    $0x4,%eax
f0102a71:	8b 00                	mov    (%eax),%eax
f0102a73:	83 ec 08             	sub    $0x8,%esp
f0102a76:	68 bb 59 13 f0       	push   $0xf01359bb
f0102a7b:	50                   	push   %eax
f0102a7c:	e8 90 f0 02 00       	call   f0131b11 <strcmp>
f0102a81:	83 c4 10             	add    $0x10,%esp
f0102a84:	85 c0                	test   %eax,%eax
f0102a86:	75 0a                	jne    f0102a92 <command_test_lists+0x9b>
	{
		test_find_block();
f0102a88:	e8 f4 c8 00 00       	call   f010f381 <test_find_block>
f0102a8d:	e9 08 01 00 00       	jmp    f0102b9a <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102a92:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a95:	83 c0 04             	add    $0x4,%eax
f0102a98:	8b 00                	mov    (%eax),%eax
f0102a9a:	83 ec 08             	sub    $0x8,%esp
f0102a9d:	68 c0 59 13 f0       	push   $0xf01359c0
f0102aa2:	50                   	push   %eax
f0102aa3:	e8 69 f0 02 00       	call   f0131b11 <strcmp>
f0102aa8:	83 c4 10             	add    $0x10,%esp
f0102aab:	85 c0                	test   %eax,%eax
f0102aad:	74 1d                	je     f0102acc <command_test_lists+0xd5>
f0102aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ab2:	83 c0 04             	add    $0x4,%eax
f0102ab5:	8b 00                	mov    (%eax),%eax
f0102ab7:	83 ec 08             	sub    $0x8,%esp
f0102aba:	68 c3 59 13 f0       	push   $0xf01359c3
f0102abf:	50                   	push   %eax
f0102ac0:	e8 4c f0 02 00       	call   f0131b11 <strcmp>
f0102ac5:	83 c4 10             	add    $0x10,%esp
f0102ac8:	85 c0                	test   %eax,%eax
f0102aca:	75 0a                	jne    f0102ad6 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102acc:	e8 0b cc 00 00       	call   f010f6dc <test_alloc_block_FF>
f0102ad1:	e9 c4 00 00 00       	jmp    f0102b9a <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102ad6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ad9:	83 c0 04             	add    $0x4,%eax
f0102adc:	8b 00                	mov    (%eax),%eax
f0102ade:	83 ec 08             	sub    $0x8,%esp
f0102ae1:	68 c6 59 13 f0       	push   $0xf01359c6
f0102ae6:	50                   	push   %eax
f0102ae7:	e8 25 f0 02 00       	call   f0131b11 <strcmp>
f0102aec:	83 c4 10             	add    $0x10,%esp
f0102aef:	85 c0                	test   %eax,%eax
f0102af1:	74 1d                	je     f0102b10 <command_test_lists+0x119>
f0102af3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af6:	83 c0 04             	add    $0x4,%eax
f0102af9:	8b 00                	mov    (%eax),%eax
f0102afb:	83 ec 08             	sub    $0x8,%esp
f0102afe:	68 c9 59 13 f0       	push   $0xf01359c9
f0102b03:	50                   	push   %eax
f0102b04:	e8 08 f0 02 00       	call   f0131b11 <strcmp>
f0102b09:	83 c4 10             	add    $0x10,%esp
f0102b0c:	85 c0                	test   %eax,%eax
f0102b0e:	75 0a                	jne    f0102b1a <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f0102b10:	e8 45 d0 00 00       	call   f010fb5a <test_alloc_block_BF>
f0102b15:	e9 80 00 00 00       	jmp    f0102b9a <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102b1a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b1d:	83 c0 04             	add    $0x4,%eax
f0102b20:	8b 00                	mov    (%eax),%eax
f0102b22:	83 ec 08             	sub    $0x8,%esp
f0102b25:	68 cc 59 13 f0       	push   $0xf01359cc
f0102b2a:	50                   	push   %eax
f0102b2b:	e8 e1 ef 02 00       	call   f0131b11 <strcmp>
f0102b30:	83 c4 10             	add    $0x10,%esp
f0102b33:	85 c0                	test   %eax,%eax
f0102b35:	74 1d                	je     f0102b54 <command_test_lists+0x15d>
f0102b37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b3a:	83 c0 04             	add    $0x4,%eax
f0102b3d:	8b 00                	mov    (%eax),%eax
f0102b3f:	83 ec 08             	sub    $0x8,%esp
f0102b42:	68 cf 59 13 f0       	push   $0xf01359cf
f0102b47:	50                   	push   %eax
f0102b48:	e8 c4 ef 02 00       	call   f0131b11 <strcmp>
f0102b4d:	83 c4 10             	add    $0x10,%esp
f0102b50:	85 c0                	test   %eax,%eax
f0102b52:	75 07                	jne    f0102b5b <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f0102b54:	e8 88 d6 00 00       	call   f01101e1 <test_alloc_block_NF>
f0102b59:	eb 3f                	jmp    f0102b9a <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f0102b5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b5e:	83 c0 04             	add    $0x4,%eax
f0102b61:	8b 00                	mov    (%eax),%eax
f0102b63:	83 ec 08             	sub    $0x8,%esp
f0102b66:	68 d2 59 13 f0       	push   $0xf01359d2
f0102b6b:	50                   	push   %eax
f0102b6c:	e8 a0 ef 02 00       	call   f0131b11 <strcmp>
f0102b71:	83 c4 10             	add    $0x10,%esp
f0102b74:	85 c0                	test   %eax,%eax
f0102b76:	74 1d                	je     f0102b95 <command_test_lists+0x19e>
f0102b78:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b7b:	83 c0 04             	add    $0x4,%eax
f0102b7e:	8b 00                	mov    (%eax),%eax
f0102b80:	83 ec 08             	sub    $0x8,%esp
f0102b83:	68 d8 59 13 f0       	push   $0xf01359d8
f0102b88:	50                   	push   %eax
f0102b89:	e8 83 ef 02 00       	call   f0131b11 <strcmp>
f0102b8e:	83 c4 10             	add    $0x10,%esp
f0102b91:	85 c0                	test   %eax,%eax
f0102b93:	75 05                	jne    f0102b9a <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f0102b95:	e8 d5 de 00 00       	call   f0110a6f <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102b9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b9f:	c9                   	leave  
f0102ba0:	c3                   	ret    

f0102ba1 <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f0102ba1:	55                   	push   %ebp
f0102ba2:	89 e5                	mov    %esp,%ebp
f0102ba4:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102ba7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102bab:	74 1a                	je     f0102bc7 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102bad:	83 ec 0c             	sub    $0xc,%esp
f0102bb0:	68 e0 59 13 f0       	push   $0xf01359e0
f0102bb5:	e8 54 e1 ff ff       	call   f0100d0e <cprintf>
f0102bba:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bc2:	e9 e1 00 00 00       	jmp    f0102ca8 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102bc7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bca:	83 c0 04             	add    $0x4,%eax
f0102bcd:	8b 00                	mov    (%eax),%eax
f0102bcf:	83 ec 08             	sub    $0x8,%esp
f0102bd2:	68 19 5a 13 f0       	push   $0xf0135a19
f0102bd7:	50                   	push   %eax
f0102bd8:	e8 34 ef 02 00       	call   f0131b11 <strcmp>
f0102bdd:	83 c4 10             	add    $0x10,%esp
f0102be0:	85 c0                	test   %eax,%eax
f0102be2:	75 0a                	jne    f0102bee <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f0102be4:	e8 b0 f6 00 00       	call   f0112299 <test_cut_paste_pages>
f0102be9:	e9 b5 00 00 00       	jmp    f0102ca3 <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102bee:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bf1:	83 c0 04             	add    $0x4,%eax
f0102bf4:	8b 00                	mov    (%eax),%eax
f0102bf6:	83 ec 08             	sub    $0x8,%esp
f0102bf9:	68 22 5a 13 f0       	push   $0xf0135a22
f0102bfe:	50                   	push   %eax
f0102bff:	e8 0d ef 02 00       	call   f0131b11 <strcmp>
f0102c04:	83 c4 10             	add    $0x10,%esp
f0102c07:	85 c0                	test   %eax,%eax
f0102c09:	75 0a                	jne    f0102c15 <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102c0b:	e8 d4 00 01 00       	call   f0112ce4 <test_copy_paste_chunk>
f0102c10:	e9 8e 00 00 00       	jmp    f0102ca3 <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f0102c15:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c18:	83 c0 04             	add    $0x4,%eax
f0102c1b:	8b 00                	mov    (%eax),%eax
f0102c1d:	83 ec 08             	sub    $0x8,%esp
f0102c20:	68 2c 5a 13 f0       	push   $0xf0135a2c
f0102c25:	50                   	push   %eax
f0102c26:	e8 e6 ee 02 00       	call   f0131b11 <strcmp>
f0102c2b:	83 c4 10             	add    $0x10,%esp
f0102c2e:	85 c0                	test   %eax,%eax
f0102c30:	75 07                	jne    f0102c39 <command_test_chunks+0x98>
	{
		test_share_chunk();
f0102c32:	e8 ab 11 01 00       	call   f0113de2 <test_share_chunk>
f0102c37:	eb 6a                	jmp    f0102ca3 <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f0102c39:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c3c:	83 c0 04             	add    $0x4,%eax
f0102c3f:	8b 00                	mov    (%eax),%eax
f0102c41:	83 ec 08             	sub    $0x8,%esp
f0102c44:	68 32 5a 13 f0       	push   $0xf0135a32
f0102c49:	50                   	push   %eax
f0102c4a:	e8 c2 ee 02 00       	call   f0131b11 <strcmp>
f0102c4f:	83 c4 10             	add    $0x10,%esp
f0102c52:	85 c0                	test   %eax,%eax
f0102c54:	75 07                	jne    f0102c5d <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f0102c56:	e8 af 1b 01 00       	call   f011480a <test_allocate_chunk>
f0102c5b:	eb 46                	jmp    f0102ca3 <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f0102c5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c60:	83 c0 04             	add    $0x4,%eax
f0102c63:	8b 00                	mov    (%eax),%eax
f0102c65:	83 ec 08             	sub    $0x8,%esp
f0102c68:	68 3b 5a 13 f0       	push   $0xf0135a3b
f0102c6d:	50                   	push   %eax
f0102c6e:	e8 9e ee 02 00       	call   f0131b11 <strcmp>
f0102c73:	83 c4 10             	add    $0x10,%esp
f0102c76:	85 c0                	test   %eax,%eax
f0102c78:	75 07                	jne    f0102c81 <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102c7a:	e8 3a 24 01 00       	call   f01150b9 <test_calculate_required_frames>
f0102c7f:	eb 22                	jmp    f0102ca3 <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102c81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c84:	83 c0 04             	add    $0x4,%eax
f0102c87:	8b 00                	mov    (%eax),%eax
f0102c89:	83 ec 08             	sub    $0x8,%esp
f0102c8c:	68 4a 5a 13 f0       	push   $0xf0135a4a
f0102c91:	50                   	push   %eax
f0102c92:	e8 7a ee 02 00       	call   f0131b11 <strcmp>
f0102c97:	83 c4 10             	add    $0x10,%esp
f0102c9a:	85 c0                	test   %eax,%eax
f0102c9c:	75 05                	jne    f0102ca3 <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102c9e:	e8 8a 2c 01 00       	call   f011592d <test_calculate_allocated_space>
	}
	return 0;
f0102ca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ca8:	c9                   	leave  
f0102ca9:	c3                   	ret    

f0102caa <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102caa:	55                   	push   %ebp
f0102cab:	89 e5                	mov    %esp,%ebp
f0102cad:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102cb0:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102cb4:	74 1a                	je     f0102cd0 <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102cb6:	83 ec 0c             	sub    $0xc,%esp
f0102cb9:	68 5c 5a 13 f0       	push   $0xf0135a5c
f0102cbe:	e8 4b e0 ff ff       	call   f0100d0e <cprintf>
f0102cc3:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102cc6:	b8 00 00 00 00       	mov    $0x0,%eax
f0102ccb:	e9 e1 00 00 00       	jmp    f0102db1 <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cd3:	83 c0 04             	add    $0x4,%eax
f0102cd6:	8b 00                	mov    (%eax),%eax
f0102cd8:	83 ec 08             	sub    $0x8,%esp
f0102cdb:	68 92 5a 13 f0       	push   $0xf0135a92
f0102ce0:	50                   	push   %eax
f0102ce1:	e8 2b ee 02 00       	call   f0131b11 <strcmp>
f0102ce6:	83 c4 10             	add    $0x10,%esp
f0102ce9:	85 c0                	test   %eax,%eax
f0102ceb:	75 0a                	jne    f0102cf7 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102ced:	e8 98 ec 00 00       	call   f011198a <test_pt_set_page_permissions>
f0102cf2:	e9 b5 00 00 00       	jmp    f0102dac <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102cf7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cfa:	83 c0 04             	add    $0x4,%eax
f0102cfd:	8b 00                	mov    (%eax),%eax
f0102cff:	83 ec 08             	sub    $0x8,%esp
f0102d02:	68 9a 5a 13 f0       	push   $0xf0135a9a
f0102d07:	50                   	push   %eax
f0102d08:	e8 04 ee 02 00       	call   f0131b11 <strcmp>
f0102d0d:	83 c4 10             	add    $0x10,%esp
f0102d10:	85 c0                	test   %eax,%eax
f0102d12:	75 0a                	jne    f0102d1e <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102d14:	e8 d4 ee 00 00       	call   f0111bed <test_pt_set_page_permissions_invalid_va>
f0102d19:	e9 8e 00 00 00       	jmp    f0102dac <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102d1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d21:	83 c0 04             	add    $0x4,%eax
f0102d24:	8b 00                	mov    (%eax),%eax
f0102d26:	83 ec 08             	sub    $0x8,%esp
f0102d29:	68 a2 5a 13 f0       	push   $0xf0135aa2
f0102d2e:	50                   	push   %eax
f0102d2f:	e8 dd ed 02 00       	call   f0131b11 <strcmp>
f0102d34:	83 c4 10             	add    $0x10,%esp
f0102d37:	85 c0                	test   %eax,%eax
f0102d39:	75 07                	jne    f0102d42 <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102d3b:	e8 f6 ee 00 00       	call   f0111c36 <test_pt_get_page_permissions>
f0102d40:	eb 6a                	jmp    f0102dac <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102d42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d45:	83 c0 04             	add    $0x4,%eax
f0102d48:	8b 00                	mov    (%eax),%eax
f0102d4a:	83 ec 08             	sub    $0x8,%esp
f0102d4d:	68 aa 5a 13 f0       	push   $0xf0135aaa
f0102d52:	50                   	push   %eax
f0102d53:	e8 b9 ed 02 00       	call   f0131b11 <strcmp>
f0102d58:	83 c4 10             	add    $0x10,%esp
f0102d5b:	85 c0                	test   %eax,%eax
f0102d5d:	75 07                	jne    f0102d66 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102d5f:	e8 16 f0 00 00       	call   f0111d7a <test_pt_clear_page_table_entry>
f0102d64:	eb 46                	jmp    f0102dac <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102d66:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d69:	83 c0 04             	add    $0x4,%eax
f0102d6c:	8b 00                	mov    (%eax),%eax
f0102d6e:	83 ec 08             	sub    $0x8,%esp
f0102d71:	68 b1 5a 13 f0       	push   $0xf0135ab1
f0102d76:	50                   	push   %eax
f0102d77:	e8 95 ed 02 00       	call   f0131b11 <strcmp>
f0102d7c:	83 c4 10             	add    $0x10,%esp
f0102d7f:	85 c0                	test   %eax,%eax
f0102d81:	75 07                	jne    f0102d8a <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102d83:	e8 4b f1 00 00       	call   f0111ed3 <test_pt_clear_page_table_entry_invalid_va>
f0102d88:	eb 22                	jmp    f0102dac <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102d8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d8d:	83 c0 04             	add    $0x4,%eax
f0102d90:	8b 00                	mov    (%eax),%eax
f0102d92:	83 ec 08             	sub    $0x8,%esp
f0102d95:	68 b8 5a 13 f0       	push   $0xf0135ab8
f0102d9a:	50                   	push   %eax
f0102d9b:	e8 71 ed 02 00       	call   f0131b11 <strcmp>
f0102da0:	83 c4 10             	add    $0x10,%esp
f0102da3:	85 c0                	test   %eax,%eax
f0102da5:	75 05                	jne    f0102dac <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102da7:	e8 5f f1 00 00       	call   f0111f0b <test_virtual_to_physical>
	}
	return 0;
f0102dac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102db1:	c9                   	leave  
f0102db2:	c3                   	ret    

f0102db3 <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102db3:	55                   	push   %ebp
f0102db4:	89 e5                	mov    %esp,%ebp
f0102db6:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102db9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dbc:	83 c0 08             	add    $0x8,%eax
f0102dbf:	8b 00                	mov    (%eax),%eax
f0102dc1:	83 ec 08             	sub    $0x8,%esp
f0102dc4:	68 bc 5a 13 f0       	push   $0xf0135abc
f0102dc9:	50                   	push   %eax
f0102dca:	e8 42 ed 02 00       	call   f0131b11 <strcmp>
f0102dcf:	83 c4 10             	add    $0x10,%esp
f0102dd2:	85 c0                	test   %eax,%eax
f0102dd4:	75 20                	jne    f0102df6 <command_test_kheap+0x43>
f0102dd6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102dda:	74 1a                	je     f0102df6 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102ddc:	83 ec 0c             	sub    $0xc,%esp
f0102ddf:	68 c4 5a 13 f0       	push   $0xf0135ac4
f0102de4:	e8 25 df ff ff       	call   f0100d0e <cprintf>
f0102de9:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102dec:	b8 00 00 00 00       	mov    $0x0,%eax
f0102df1:	e9 33 03 00 00       	jmp    f0103129 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102df6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102df9:	83 c0 08             	add    $0x8,%eax
f0102dfc:	8b 00                	mov    (%eax),%eax
f0102dfe:	83 ec 08             	sub    $0x8,%esp
f0102e01:	68 bc 5a 13 f0       	push   $0xf0135abc
f0102e06:	50                   	push   %eax
f0102e07:	e8 05 ed 02 00       	call   f0131b11 <strcmp>
f0102e0c:	83 c4 10             	add    $0x10,%esp
f0102e0f:	85 c0                	test   %eax,%eax
f0102e11:	74 20                	je     f0102e33 <command_test_kheap+0x80>
f0102e13:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102e17:	74 1a                	je     f0102e33 <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102e19:	83 ec 0c             	sub    $0xc,%esp
f0102e1c:	68 14 5b 13 f0       	push   $0xf0135b14
f0102e21:	e8 e8 de ff ff       	call   f0100d0e <cprintf>
f0102e26:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102e29:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e2e:	e9 f6 02 00 00       	jmp    f0103129 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102e33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e36:	83 c0 04             	add    $0x4,%eax
f0102e39:	8b 00                	mov    (%eax),%eax
f0102e3b:	83 ec 08             	sub    $0x8,%esp
f0102e3e:	68 c0 59 13 f0       	push   $0xf01359c0
f0102e43:	50                   	push   %eax
f0102e44:	e8 c8 ec 02 00       	call   f0131b11 <strcmp>
f0102e49:	83 c4 10             	add    $0x10,%esp
f0102e4c:	85 c0                	test   %eax,%eax
f0102e4e:	74 1d                	je     f0102e6d <command_test_kheap+0xba>
f0102e50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e53:	83 c0 04             	add    $0x4,%eax
f0102e56:	8b 00                	mov    (%eax),%eax
f0102e58:	83 ec 08             	sub    $0x8,%esp
f0102e5b:	68 c3 59 13 f0       	push   $0xf01359c3
f0102e60:	50                   	push   %eax
f0102e61:	e8 ab ec 02 00       	call   f0131b11 <strcmp>
f0102e66:	83 c4 10             	add    $0x10,%esp
f0102e69:	85 c0                	test   %eax,%eax
f0102e6b:	75 1a                	jne    f0102e87 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102e6d:	e8 60 e0 ff ff       	call   f0100ed2 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102e72:	83 ec 0c             	sub    $0xc,%esp
f0102e75:	68 5c 55 13 f0       	push   $0xf013555c
f0102e7a:	e8 8f de ff ff       	call   f0100d0e <cprintf>
f0102e7f:	83 c4 10             	add    $0x10,%esp
f0102e82:	e9 a0 00 00 00       	jmp    f0102f27 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102e87:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e8a:	83 c0 04             	add    $0x4,%eax
f0102e8d:	8b 00                	mov    (%eax),%eax
f0102e8f:	83 ec 08             	sub    $0x8,%esp
f0102e92:	68 c6 59 13 f0       	push   $0xf01359c6
f0102e97:	50                   	push   %eax
f0102e98:	e8 74 ec 02 00       	call   f0131b11 <strcmp>
f0102e9d:	83 c4 10             	add    $0x10,%esp
f0102ea0:	85 c0                	test   %eax,%eax
f0102ea2:	74 1d                	je     f0102ec1 <command_test_kheap+0x10e>
f0102ea4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ea7:	83 c0 04             	add    $0x4,%eax
f0102eaa:	8b 00                	mov    (%eax),%eax
f0102eac:	83 ec 08             	sub    $0x8,%esp
f0102eaf:	68 c9 59 13 f0       	push   $0xf01359c9
f0102eb4:	50                   	push   %eax
f0102eb5:	e8 57 ec 02 00       	call   f0131b11 <strcmp>
f0102eba:	83 c4 10             	add    $0x10,%esp
f0102ebd:	85 c0                	test   %eax,%eax
f0102ebf:	75 17                	jne    f0102ed8 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102ec1:	e8 1c e0 ff ff       	call   f0100ee2 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102ec6:	83 ec 0c             	sub    $0xc,%esp
f0102ec9:	68 8c 55 13 f0       	push   $0xf013558c
f0102ece:	e8 3b de ff ff       	call   f0100d0e <cprintf>
f0102ed3:	83 c4 10             	add    $0x10,%esp
f0102ed6:	eb 4f                	jmp    f0102f27 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102ed8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102edb:	83 c0 04             	add    $0x4,%eax
f0102ede:	8b 00                	mov    (%eax),%eax
f0102ee0:	83 ec 08             	sub    $0x8,%esp
f0102ee3:	68 cc 59 13 f0       	push   $0xf01359cc
f0102ee8:	50                   	push   %eax
f0102ee9:	e8 23 ec 02 00       	call   f0131b11 <strcmp>
f0102eee:	83 c4 10             	add    $0x10,%esp
f0102ef1:	85 c0                	test   %eax,%eax
f0102ef3:	74 1d                	je     f0102f12 <command_test_kheap+0x15f>
f0102ef5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ef8:	83 c0 04             	add    $0x4,%eax
f0102efb:	8b 00                	mov    (%eax),%eax
f0102efd:	83 ec 08             	sub    $0x8,%esp
f0102f00:	68 cf 59 13 f0       	push   $0xf01359cf
f0102f05:	50                   	push   %eax
f0102f06:	e8 06 ec 02 00       	call   f0131b11 <strcmp>
f0102f0b:	83 c4 10             	add    $0x10,%esp
f0102f0e:	85 c0                	test   %eax,%eax
f0102f10:	75 15                	jne    f0102f27 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102f12:	e8 db df ff ff       	call   f0100ef2 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102f17:	83 ec 0c             	sub    $0xc,%esp
f0102f1a:	68 b8 55 13 f0       	push   $0xf01355b8
f0102f1f:	e8 ea dd ff ff       	call   f0100d0e <cprintf>
f0102f24:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102f27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f2a:	83 c0 08             	add    $0x8,%eax
f0102f2d:	8b 00                	mov    (%eax),%eax
f0102f2f:	83 ec 08             	sub    $0x8,%esp
f0102f32:	68 bc 5a 13 f0       	push   $0xf0135abc
f0102f37:	50                   	push   %eax
f0102f38:	e8 d4 eb 02 00       	call   f0131b11 <strcmp>
f0102f3d:	83 c4 10             	add    $0x10,%esp
f0102f40:	85 c0                	test   %eax,%eax
f0102f42:	0f 85 13 01 00 00    	jne    f010305b <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102f48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f4b:	83 c0 0c             	add    $0xc,%eax
f0102f4e:	8b 00                	mov    (%eax),%eax
f0102f50:	83 ec 04             	sub    $0x4,%esp
f0102f53:	6a 0a                	push   $0xa
f0102f55:	6a 00                	push   $0x0
f0102f57:	50                   	push   %eax
f0102f58:	e8 08 ee 02 00       	call   f0131d65 <strtol>
f0102f5d:	83 c4 10             	add    $0x10,%esp
f0102f60:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102f63:	e8 be df ff ff       	call   f0100f26 <isKHeapPlacementStrategyFIRSTFIT>
f0102f68:	84 c0                	test   %al,%al
f0102f6a:	74 54                	je     f0102fc0 <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102f6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102f70:	75 1a                	jne    f0102f8c <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102f72:	83 ec 0c             	sub    $0xc,%esp
f0102f75:	68 30 58 13 f0       	push   $0xf0135830
f0102f7a:	e8 8f dd ff ff       	call   f0100d0e <cprintf>
f0102f7f:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102f82:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f87:	e9 9d 01 00 00       	jmp    f0103129 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102f8c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102f90:	75 0a                	jne    f0102f9c <command_test_kheap+0x1e9>
				test_kmalloc();
f0102f92:	e8 5d 4f 01 00       	call   f0117ef4 <test_kmalloc>
f0102f97:	e9 b5 00 00 00       	jmp    f0103051 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102f9c:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102fa0:	75 0a                	jne    f0102fac <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102fa2:	e8 d6 9d 01 00       	call   f011cd7d <test_kmalloc_firstfit1>
f0102fa7:	e9 a5 00 00 00       	jmp    f0103051 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102fac:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102fb0:	0f 85 9b 00 00 00    	jne    f0103051 <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102fb6:	e8 64 b1 01 00       	call   f011e11f <test_kmalloc_firstfit2>
f0102fbb:	e9 91 00 00 00       	jmp    f0103051 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102fc0:	e8 76 df ff ff       	call   f0100f3b <isKHeapPlacementStrategyBESTFIT>
f0102fc5:	84 c0                	test   %al,%al
f0102fc7:	74 47                	je     f0103010 <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102fc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fcd:	75 1a                	jne    f0102fe9 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102fcf:	83 ec 0c             	sub    $0xc,%esp
f0102fd2:	68 80 58 13 f0       	push   $0xf0135880
f0102fd7:	e8 32 dd ff ff       	call   f0100d0e <cprintf>
f0102fdc:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102fdf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fe4:	e9 40 01 00 00       	jmp    f0103129 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102fe9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102fed:	75 07                	jne    f0102ff6 <command_test_kheap+0x243>
				test_kmalloc();
f0102fef:	e8 00 4f 01 00       	call   f0117ef4 <test_kmalloc>
f0102ff4:	eb 5b                	jmp    f0103051 <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102ff6:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102ffa:	75 07                	jne    f0103003 <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102ffc:	e8 46 78 01 00       	call   f011a847 <test_kmalloc_bestfit1>
f0103001:	eb 4e                	jmp    f0103051 <command_test_kheap+0x29e>
			else if (testNum == 3)
f0103003:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0103007:	75 48                	jne    f0103051 <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0103009:	e8 8f 8a 01 00       	call   f011ba9d <test_kmalloc_bestfit2>
f010300e:	eb 41                	jmp    f0103051 <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0103010:	e8 3b df ff ff       	call   f0100f50 <isKHeapPlacementStrategyNEXTFIT>
f0103015:	84 c0                	test   %al,%al
f0103017:	74 38                	je     f0103051 <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0103019:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010301d:	75 1a                	jne    f0103039 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010301f:	83 ec 0c             	sub    $0xc,%esp
f0103022:	68 d0 58 13 f0       	push   $0xf01358d0
f0103027:	e8 e2 dc ff ff       	call   f0100d0e <cprintf>
f010302c:	83 c4 10             	add    $0x10,%esp
				return 0;
f010302f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103034:	e9 f0 00 00 00       	jmp    f0103129 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0103039:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010303d:	75 07                	jne    f0103046 <command_test_kheap+0x293>
				test_kmalloc();
f010303f:	e8 b0 4e 01 00       	call   f0117ef4 <test_kmalloc>
f0103044:	eb 0b                	jmp    f0103051 <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0103046:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010304a:	75 05                	jne    f0103051 <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f010304c:	e8 01 61 01 00       	call   f0119152 <test_kmalloc_nextfit>
		}
		return 0;
f0103051:	b8 00 00 00 00       	mov    $0x0,%eax
f0103056:	e9 ce 00 00 00       	jmp    f0103129 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010305b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010305e:	83 c0 08             	add    $0x8,%eax
f0103061:	8b 00                	mov    (%eax),%eax
f0103063:	83 ec 08             	sub    $0x8,%esp
f0103066:	68 58 5b 13 f0       	push   $0xf0135b58
f010306b:	50                   	push   %eax
f010306c:	e8 a0 ea 02 00       	call   f0131b11 <strcmp>
f0103071:	83 c4 10             	add    $0x10,%esp
f0103074:	85 c0                	test   %eax,%eax
f0103076:	75 28                	jne    f01030a0 <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0103078:	e8 be de ff ff       	call   f0100f3b <isKHeapPlacementStrategyBESTFIT>
f010307d:	84 c0                	test   %al,%al
f010307f:	75 09                	jne    f010308a <command_test_kheap+0x2d7>
f0103081:	e8 a0 de ff ff       	call   f0100f26 <isKHeapPlacementStrategyFIRSTFIT>
f0103086:	84 c0                	test   %al,%al
f0103088:	74 07                	je     f0103091 <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f010308a:	e8 c7 f6 01 00       	call   f0122756 <test_kfree_bestfirstfit>
f010308f:	eb 05                	jmp    f0103096 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0103091:	e8 6e d5 01 00       	call   f0120604 <test_kfree>
		}
		return 0;
f0103096:	b8 00 00 00 00       	mov    $0x0,%eax
f010309b:	e9 89 00 00 00       	jmp    f0103129 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f01030a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030a3:	83 c0 08             	add    $0x8,%eax
f01030a6:	8b 00                	mov    (%eax),%eax
f01030a8:	83 ec 08             	sub    $0x8,%esp
f01030ab:	68 5e 5b 13 f0       	push   $0xf0135b5e
f01030b0:	50                   	push   %eax
f01030b1:	e8 5b ea 02 00       	call   f0131b11 <strcmp>
f01030b6:	83 c4 10             	add    $0x10,%esp
f01030b9:	85 c0                	test   %eax,%eax
f01030bb:	75 0c                	jne    f01030c9 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f01030bd:	e8 90 10 02 00       	call   f0124152 <test_kheap_phys_addr>
		return 0;
f01030c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01030c7:	eb 60                	jmp    f0103129 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f01030c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030cc:	83 c0 08             	add    $0x8,%eax
f01030cf:	8b 00                	mov    (%eax),%eax
f01030d1:	83 ec 08             	sub    $0x8,%esp
f01030d4:	68 68 5b 13 f0       	push   $0xf0135b68
f01030d9:	50                   	push   %eax
f01030da:	e8 32 ea 02 00       	call   f0131b11 <strcmp>
f01030df:	83 c4 10             	add    $0x10,%esp
f01030e2:	85 c0                	test   %eax,%eax
f01030e4:	75 0c                	jne    f01030f2 <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f01030e6:	e8 37 25 02 00       	call   f0125622 <test_kheap_virt_addr>
		return 0;
f01030eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01030f0:	eb 37                	jmp    f0103129 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f01030f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01030f5:	83 c0 08             	add    $0x8,%eax
f01030f8:	8b 00                	mov    (%eax),%eax
f01030fa:	83 ec 08             	sub    $0x8,%esp
f01030fd:	68 72 5b 13 f0       	push   $0xf0135b72
f0103102:	50                   	push   %eax
f0103103:	e8 09 ea 02 00       	call   f0131b11 <strcmp>
f0103108:	83 c4 10             	add    $0x10,%esp
f010310b:	85 c0                	test   %eax,%eax
f010310d:	75 15                	jne    f0103124 <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f010310f:	e8 27 de ff ff       	call   f0100f3b <isKHeapPlacementStrategyBESTFIT>
f0103114:	84 c0                	test   %al,%al
f0103116:	74 05                	je     f010311d <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0103118:	e8 a9 b3 02 00       	call   f012e4c6 <test_krealloc_BF>
		}
		return 0;
f010311d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103122:	eb 05                	jmp    f0103129 <command_test_kheap+0x376>
	}
	return 0;
f0103124:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103129:	c9                   	leave  
f010312a:	c3                   	ret    

f010312b <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010312b:	55                   	push   %ebp
f010312c:	89 e5                	mov    %esp,%ebp
f010312e:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103131:	8b 45 08             	mov    0x8(%ebp),%eax
f0103134:	05 00 14 00 00       	add    $0x1400,%eax
f0103139:	c1 e0 03             	shl    $0x3,%eax
f010313c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010313f:	83 ec 04             	sub    $0x4,%esp
f0103142:	6a 08                	push   $0x8
f0103144:	ff 75 0c             	pushl  0xc(%ebp)
f0103147:	ff 75 f4             	pushl  -0xc(%ebp)
f010314a:	e8 09 f0 02 00       	call   f0132158 <ide_read>
f010314f:	83 c4 10             	add    $0x10,%esp
f0103152:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103155:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103158:	c9                   	leave  
f0103159:	c3                   	ret    

f010315a <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010315a:	55                   	push   %ebp
f010315b:	89 e5                	mov    %esp,%ebp
f010315d:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103160:	8b 45 08             	mov    0x8(%ebp),%eax
f0103163:	05 00 14 00 00       	add    $0x1400,%eax
f0103168:	c1 e0 03             	shl    $0x3,%eax
f010316b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010316e:	83 ec 04             	sub    $0x4,%esp
f0103171:	6a 08                	push   $0x8
f0103173:	ff 75 0c             	pushl  0xc(%ebp)
f0103176:	ff 75 f4             	pushl  -0xc(%ebp)
f0103179:	e8 1a f1 02 00       	call   f0132298 <ide_write>
f010317e:	83 c4 10             	add    $0x10,%esp
f0103181:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103184:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103188:	74 14                	je     f010319e <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010318a:	83 ec 04             	sub    $0x4,%esp
f010318d:	68 7c 5b 13 f0       	push   $0xf0135b7c
f0103192:	6a 2e                	push   $0x2e
f0103194:	68 93 5b 13 f0       	push   $0xf0135b93
f0103199:	e8 67 d0 ff ff       	call   f0100205 <_panic>
	return success;
f010319e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01031a1:	c9                   	leave  
f01031a2:	c3                   	ret    

f01031a3 <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f01031a3:	55                   	push   %ebp
f01031a4:	89 e5                	mov    %esp,%ebp
f01031a6:	53                   	push   %ebx
f01031a7:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f01031aa:	c7 05 b4 f7 85 f0 00 	movl   $0x0,0xf085f7b4
f01031b1:	00 00 00 
f01031b4:	c7 05 b8 f7 85 f0 00 	movl   $0x0,0xf085f7b8
f01031bb:	00 00 00 
f01031be:	c7 05 c0 f7 85 f0 00 	movl   $0x0,0xf085f7c0
f01031c5:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01031c8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f01031cf:	e9 e8 00 00 00       	jmp    f01032bc <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f01031d4:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f01031da:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031dd:	89 d0                	mov    %edx,%eax
f01031df:	01 c0                	add    %eax,%eax
f01031e1:	01 d0                	add    %edx,%eax
f01031e3:	c1 e0 03             	shl    $0x3,%eax
f01031e6:	01 c8                	add    %ecx,%eax
f01031e8:	83 ec 0c             	sub    $0xc,%esp
f01031eb:	50                   	push   %eax
f01031ec:	e8 cd 36 00 00       	call   f01068be <initialize_frame_info>
f01031f1:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f01031f4:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f01031fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01031fd:	89 d0                	mov    %edx,%eax
f01031ff:	01 c0                	add    %eax,%eax
f0103201:	01 d0                	add    %edx,%eax
f0103203:	c1 e0 03             	shl    $0x3,%eax
f0103206:	01 c8                	add    %ecx,%eax
f0103208:	85 c0                	test   %eax,%eax
f010320a:	75 14                	jne    f0103220 <initialize_disk_page_file+0x7d>
f010320c:	83 ec 04             	sub    $0x4,%esp
f010320f:	68 b0 5b 13 f0       	push   $0xf0135bb0
f0103214:	6a 59                	push   $0x59
f0103216:	68 93 5b 13 f0       	push   $0xf0135b93
f010321b:	e8 e5 cf ff ff       	call   f0100205 <_panic>
f0103220:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f0103226:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103229:	89 d0                	mov    %edx,%eax
f010322b:	01 c0                	add    %eax,%eax
f010322d:	01 d0                	add    %edx,%eax
f010322f:	c1 e0 03             	shl    $0x3,%eax
f0103232:	01 c8                	add    %ecx,%eax
f0103234:	8b 15 b4 f7 85 f0    	mov    0xf085f7b4,%edx
f010323a:	89 10                	mov    %edx,(%eax)
f010323c:	8b 00                	mov    (%eax),%eax
f010323e:	85 c0                	test   %eax,%eax
f0103240:	74 1f                	je     f0103261 <initialize_disk_page_file+0xbe>
f0103242:	8b 15 b4 f7 85 f0    	mov    0xf085f7b4,%edx
f0103248:	8b 1d d8 f6 85 f0    	mov    0xf085f6d8,%ebx
f010324e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103251:	89 c8                	mov    %ecx,%eax
f0103253:	01 c0                	add    %eax,%eax
f0103255:	01 c8                	add    %ecx,%eax
f0103257:	c1 e0 03             	shl    $0x3,%eax
f010325a:	01 d8                	add    %ebx,%eax
f010325c:	89 42 04             	mov    %eax,0x4(%edx)
f010325f:	eb 19                	jmp    f010327a <initialize_disk_page_file+0xd7>
f0103261:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f0103267:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010326a:	89 d0                	mov    %edx,%eax
f010326c:	01 c0                	add    %eax,%eax
f010326e:	01 d0                	add    %edx,%eax
f0103270:	c1 e0 03             	shl    $0x3,%eax
f0103273:	01 c8                	add    %ecx,%eax
f0103275:	a3 b8 f7 85 f0       	mov    %eax,0xf085f7b8
f010327a:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f0103280:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103283:	89 d0                	mov    %edx,%eax
f0103285:	01 c0                	add    %eax,%eax
f0103287:	01 d0                	add    %edx,%eax
f0103289:	c1 e0 03             	shl    $0x3,%eax
f010328c:	01 c8                	add    %ecx,%eax
f010328e:	a3 b4 f7 85 f0       	mov    %eax,0xf085f7b4
f0103293:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f0103299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010329c:	89 d0                	mov    %edx,%eax
f010329e:	01 c0                	add    %eax,%eax
f01032a0:	01 d0                	add    %edx,%eax
f01032a2:	c1 e0 03             	shl    $0x3,%eax
f01032a5:	01 c8                	add    %ecx,%eax
f01032a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032ae:	a1 c0 f7 85 f0       	mov    0xf085f7c0,%eax
f01032b3:	40                   	inc    %eax
f01032b4:	a3 c0 f7 85 f0       	mov    %eax,0xf085f7c0
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01032b9:	ff 45 f4             	incl   -0xc(%ebp)
f01032bc:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01032c3:	0f 8e 0b ff ff ff    	jle    f01031d4 <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01032c9:	90                   	nop
f01032ca:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032cd:	c9                   	leave  
f01032ce:	c3                   	ret    

f01032cf <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01032cf:	55                   	push   %ebp
f01032d0:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01032d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01032d5:	8b 15 d8 f6 85 f0    	mov    0xf085f6d8,%edx
f01032db:	29 d0                	sub    %edx,%eax
f01032dd:	c1 f8 03             	sar    $0x3,%eax
f01032e0:	89 c2                	mov    %eax,%edx
f01032e2:	89 d0                	mov    %edx,%eax
f01032e4:	c1 e0 02             	shl    $0x2,%eax
f01032e7:	01 d0                	add    %edx,%eax
f01032e9:	c1 e0 02             	shl    $0x2,%eax
f01032ec:	01 d0                	add    %edx,%eax
f01032ee:	c1 e0 02             	shl    $0x2,%eax
f01032f1:	01 d0                	add    %edx,%eax
f01032f3:	89 c1                	mov    %eax,%ecx
f01032f5:	c1 e1 08             	shl    $0x8,%ecx
f01032f8:	01 c8                	add    %ecx,%eax
f01032fa:	89 c1                	mov    %eax,%ecx
f01032fc:	c1 e1 10             	shl    $0x10,%ecx
f01032ff:	01 c8                	add    %ecx,%eax
f0103301:	01 c0                	add    %eax,%eax
f0103303:	01 d0                	add    %edx,%eax
}
f0103305:	5d                   	pop    %ebp
f0103306:	c3                   	ret    

f0103307 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103307:	55                   	push   %ebp
f0103308:	89 e5                	mov    %esp,%ebp
f010330a:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010330d:	a1 b4 f7 85 f0       	mov    0xf085f7b4,%eax
f0103312:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103315:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103319:	75 0a                	jne    f0103325 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010331b:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103320:	e9 a7 00 00 00       	jmp    f01033cc <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103325:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103329:	75 14                	jne    f010333f <allocate_disk_frame+0x38>
f010332b:	83 ec 04             	sub    $0x4,%esp
f010332e:	68 d3 5b 13 f0       	push   $0xf0135bd3
f0103333:	6a 78                	push   $0x78
f0103335:	68 93 5b 13 f0       	push   $0xf0135b93
f010333a:	e8 c6 ce ff ff       	call   f0100205 <_panic>
f010333f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103342:	8b 00                	mov    (%eax),%eax
f0103344:	85 c0                	test   %eax,%eax
f0103346:	74 10                	je     f0103358 <allocate_disk_frame+0x51>
f0103348:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010334b:	8b 00                	mov    (%eax),%eax
f010334d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103350:	8b 52 04             	mov    0x4(%edx),%edx
f0103353:	89 50 04             	mov    %edx,0x4(%eax)
f0103356:	eb 0b                	jmp    f0103363 <allocate_disk_frame+0x5c>
f0103358:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010335b:	8b 40 04             	mov    0x4(%eax),%eax
f010335e:	a3 b8 f7 85 f0       	mov    %eax,0xf085f7b8
f0103363:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103366:	8b 40 04             	mov    0x4(%eax),%eax
f0103369:	85 c0                	test   %eax,%eax
f010336b:	74 0f                	je     f010337c <allocate_disk_frame+0x75>
f010336d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103370:	8b 40 04             	mov    0x4(%eax),%eax
f0103373:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103376:	8b 12                	mov    (%edx),%edx
f0103378:	89 10                	mov    %edx,(%eax)
f010337a:	eb 0a                	jmp    f0103386 <allocate_disk_frame+0x7f>
f010337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010337f:	8b 00                	mov    (%eax),%eax
f0103381:	a3 b4 f7 85 f0       	mov    %eax,0xf085f7b4
f0103386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103389:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010338f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103392:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103399:	a1 c0 f7 85 f0       	mov    0xf085f7c0,%eax
f010339e:	48                   	dec    %eax
f010339f:	a3 c0 f7 85 f0       	mov    %eax,0xf085f7c0
	initialize_frame_info(ptr_frame_info);
f01033a4:	83 ec 0c             	sub    $0xc,%esp
f01033a7:	ff 75 f4             	pushl  -0xc(%ebp)
f01033aa:	e8 0f 35 00 00       	call   f01068be <initialize_frame_info>
f01033af:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01033b2:	83 ec 0c             	sub    $0xc,%esp
f01033b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01033b8:	e8 12 ff ff ff       	call   f01032cf <to_disk_frame_number>
f01033bd:	83 c4 10             	add    $0x10,%esp
f01033c0:	89 c2                	mov    %eax,%edx
f01033c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01033c5:	89 10                	mov    %edx,(%eax)
	return 0;
f01033c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033cc:	c9                   	leave  
f01033cd:	c3                   	ret    

f01033ce <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01033ce:	55                   	push   %ebp
f01033cf:	89 e5                	mov    %esp,%ebp
f01033d1:	53                   	push   %ebx
f01033d2:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01033d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01033d9:	0f 84 ca 00 00 00    	je     f01034a9 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01033df:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f01033e5:	8b 55 08             	mov    0x8(%ebp),%edx
f01033e8:	89 d0                	mov    %edx,%eax
f01033ea:	01 c0                	add    %eax,%eax
f01033ec:	01 d0                	add    %edx,%eax
f01033ee:	c1 e0 03             	shl    $0x3,%eax
f01033f1:	01 c8                	add    %ecx,%eax
f01033f3:	85 c0                	test   %eax,%eax
f01033f5:	75 17                	jne    f010340e <free_disk_frame+0x40>
f01033f7:	83 ec 04             	sub    $0x4,%esp
f01033fa:	68 b0 5b 13 f0       	push   $0xf0135bb0
f01033ff:	68 85 00 00 00       	push   $0x85
f0103404:	68 93 5b 13 f0       	push   $0xf0135b93
f0103409:	e8 f7 cd ff ff       	call   f0100205 <_panic>
f010340e:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f0103414:	8b 55 08             	mov    0x8(%ebp),%edx
f0103417:	89 d0                	mov    %edx,%eax
f0103419:	01 c0                	add    %eax,%eax
f010341b:	01 d0                	add    %edx,%eax
f010341d:	c1 e0 03             	shl    $0x3,%eax
f0103420:	01 c8                	add    %ecx,%eax
f0103422:	8b 15 b4 f7 85 f0    	mov    0xf085f7b4,%edx
f0103428:	89 10                	mov    %edx,(%eax)
f010342a:	8b 00                	mov    (%eax),%eax
f010342c:	85 c0                	test   %eax,%eax
f010342e:	74 1f                	je     f010344f <free_disk_frame+0x81>
f0103430:	8b 15 b4 f7 85 f0    	mov    0xf085f7b4,%edx
f0103436:	8b 1d d8 f6 85 f0    	mov    0xf085f6d8,%ebx
f010343c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010343f:	89 c8                	mov    %ecx,%eax
f0103441:	01 c0                	add    %eax,%eax
f0103443:	01 c8                	add    %ecx,%eax
f0103445:	c1 e0 03             	shl    $0x3,%eax
f0103448:	01 d8                	add    %ebx,%eax
f010344a:	89 42 04             	mov    %eax,0x4(%edx)
f010344d:	eb 19                	jmp    f0103468 <free_disk_frame+0x9a>
f010344f:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f0103455:	8b 55 08             	mov    0x8(%ebp),%edx
f0103458:	89 d0                	mov    %edx,%eax
f010345a:	01 c0                	add    %eax,%eax
f010345c:	01 d0                	add    %edx,%eax
f010345e:	c1 e0 03             	shl    $0x3,%eax
f0103461:	01 c8                	add    %ecx,%eax
f0103463:	a3 b8 f7 85 f0       	mov    %eax,0xf085f7b8
f0103468:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f010346e:	8b 55 08             	mov    0x8(%ebp),%edx
f0103471:	89 d0                	mov    %edx,%eax
f0103473:	01 c0                	add    %eax,%eax
f0103475:	01 d0                	add    %edx,%eax
f0103477:	c1 e0 03             	shl    $0x3,%eax
f010347a:	01 c8                	add    %ecx,%eax
f010347c:	a3 b4 f7 85 f0       	mov    %eax,0xf085f7b4
f0103481:	8b 0d d8 f6 85 f0    	mov    0xf085f6d8,%ecx
f0103487:	8b 55 08             	mov    0x8(%ebp),%edx
f010348a:	89 d0                	mov    %edx,%eax
f010348c:	01 c0                	add    %eax,%eax
f010348e:	01 d0                	add    %edx,%eax
f0103490:	c1 e0 03             	shl    $0x3,%eax
f0103493:	01 c8                	add    %ecx,%eax
f0103495:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010349c:	a1 c0 f7 85 f0       	mov    0xf085f7c0,%eax
f01034a1:	40                   	inc    %eax
f01034a2:	a3 c0 f7 85 f0       	mov    %eax,0xf085f7c0
f01034a7:	eb 01                	jmp    f01034aa <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01034a9:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01034aa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01034ad:	c9                   	leave  
f01034ae:	c3                   	ret    

f01034af <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01034af:	55                   	push   %ebp
f01034b0:	89 e5                	mov    %esp,%ebp
f01034b2:	53                   	push   %ebx
f01034b3:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01034b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034b9:	c1 e8 16             	shr    $0x16,%eax
f01034bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01034c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01034c6:	01 d0                	add    %edx,%eax
f01034c8:	8b 00                	mov    (%eax),%eax
f01034ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01034cd:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01034d4:	77 1d                	ja     f01034f3 <get_disk_page_table+0x44>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f01034d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034d9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034de:	83 ec 0c             	sub    $0xc,%esp
f01034e1:	50                   	push   %eax
f01034e2:	e8 c8 48 00 00       	call   f0107daf <kheap_virtual_address>
f01034e7:	83 c4 10             	add    $0x10,%esp
f01034ea:	89 c2                	mov    %eax,%edx
f01034ec:	8b 45 14             	mov    0x14(%ebp),%eax
f01034ef:	89 10                	mov    %edx,(%eax)
f01034f1:	eb 44                	jmp    f0103537 <get_disk_page_table+0x88>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01034f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01034fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01034fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103501:	c1 e8 0c             	shr    $0xc,%eax
f0103504:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103507:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f010350c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010350f:	72 17                	jb     f0103528 <get_disk_page_table+0x79>
f0103511:	ff 75 f0             	pushl  -0x10(%ebp)
f0103514:	68 f4 5b 13 f0       	push   $0xf0135bf4
f0103519:	68 92 00 00 00       	push   $0x92
f010351e:	68 93 5b 13 f0       	push   $0xf0135b93
f0103523:	e8 dd cc ff ff       	call   f0100205 <_panic>
f0103528:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010352b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103530:	89 c2                	mov    %eax,%edx
f0103532:	8b 45 14             	mov    0x14(%ebp),%eax
f0103535:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103537:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010353b:	0f 85 80 00 00 00    	jne    f01035c1 <get_disk_page_table+0x112>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103541:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103545:	74 6a                	je     f01035b1 <get_disk_page_table+0x102>
		{

#if USE_KHEAP
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f0103547:	83 ec 0c             	sub    $0xc,%esp
f010354a:	68 00 10 00 00       	push   $0x1000
f010354f:	e8 10 46 00 00       	call   f0107b64 <kmalloc>
f0103554:	83 c4 10             	add    $0x10,%esp
f0103557:	89 c2                	mov    %eax,%edx
f0103559:	8b 45 14             	mov    0x14(%ebp),%eax
f010355c:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f010355e:	8b 45 14             	mov    0x14(%ebp),%eax
f0103561:	8b 00                	mov    (%eax),%eax
f0103563:	85 c0                	test   %eax,%eax
f0103565:	75 07                	jne    f010356e <get_disk_page_table+0xbf>
				{
					return E_NO_VM;
f0103567:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010356c:	eb 58                	jmp    f01035c6 <get_disk_page_table+0x117>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f010356e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103571:	c1 e8 16             	shr    $0x16,%eax
f0103574:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010357b:	8b 45 08             	mov    0x8(%ebp),%eax
f010357e:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0103581:	8b 45 14             	mov    0x14(%ebp),%eax
f0103584:	8b 00                	mov    (%eax),%eax
f0103586:	83 ec 0c             	sub    $0xc,%esp
f0103589:	50                   	push   %eax
f010358a:	e8 61 48 00 00       	call   f0107df0 <kheap_physical_address>
f010358f:	83 c4 10             	add    $0x10,%esp
f0103592:	83 c8 01             	or     $0x1,%eax
f0103595:	89 03                	mov    %eax,(%ebx)
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103597:	8b 45 14             	mov    0x14(%ebp),%eax
f010359a:	8b 00                	mov    (%eax),%eax
f010359c:	83 ec 04             	sub    $0x4,%esp
f010359f:	68 00 10 00 00       	push   $0x1000
f01035a4:	6a 00                	push   $0x0
f01035a6:	50                   	push   %eax
f01035a7:	e8 47 e6 02 00       	call   f0131bf3 <memset>
f01035ac:	83 c4 10             	add    $0x10,%esp
f01035af:	eb 10                	jmp    f01035c1 <get_disk_page_table+0x112>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01035b1:	8b 45 14             	mov    0x14(%ebp),%eax
f01035b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01035ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01035bf:	eb 05                	jmp    f01035c6 <get_disk_page_table+0x117>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01035c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035c6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01035c9:	c9                   	leave  
f01035ca:	c3                   	ret    

f01035cb <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01035cb:	55                   	push   %ebp
f01035cc:	89 e5                	mov    %esp,%ebp
f01035ce:	83 ec 28             	sub    $0x28,%esp
f01035d1:	8b 45 10             	mov    0x10(%ebp),%eax
f01035d4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01035d7:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f01035db:	74 75                	je     f0103652 <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f01035dd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f01035e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01035e7:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01035ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01035ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01035f7:	f7 75 f4             	divl   -0xc(%ebp)
f01035fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035fd:	29 d0                	sub    %edx,%eax
f01035ff:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103602:	73 32                	jae    f0103636 <pf_add_empty_env_page+0x6b>
f0103604:	8b 45 08             	mov    0x8(%ebp),%eax
f0103607:	8b 90 58 05 00 00    	mov    0x558(%eax),%edx
f010360d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103612:	29 d0                	sub    %edx,%eax
f0103614:	c1 e0 0c             	shl    $0xc,%eax
f0103617:	2d 00 20 40 11       	sub    $0x11402000,%eax
f010361c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010361f:	76 15                	jbe    f0103636 <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103621:	8b 45 08             	mov    0x8(%ebp),%eax
f0103624:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f010362a:	8d 50 01             	lea    0x1(%eax),%edx
f010362d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103630:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0103636:	a1 5c f7 85 f0       	mov    0xf085f75c,%eax
f010363b:	83 ec 04             	sub    $0x4,%esp
f010363e:	50                   	push   %eax
f010363f:	ff 75 0c             	pushl  0xc(%ebp)
f0103642:	ff 75 08             	pushl  0x8(%ebp)
f0103645:	e8 b2 00 00 00       	call   f01036fc <pf_add_env_page>
f010364a:	83 c4 10             	add    $0x10,%esp
f010364d:	e9 a8 00 00 00       	jmp    f01036fa <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103652:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103659:	76 19                	jbe    f0103674 <pf_add_empty_env_page+0xa9>
f010365b:	68 24 5c 13 f0       	push   $0xf0135c24
f0103660:	68 4a 5c 13 f0       	push   $0xf0135c4a
f0103665:	68 d1 00 00 00       	push   $0xd1
f010366a:	68 93 5b 13 f0       	push   $0xf0135b93
f010366f:	e8 91 cb ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103674:	8b 45 08             	mov    0x8(%ebp),%eax
f0103677:	83 c0 64             	add    $0x64,%eax
f010367a:	83 ec 08             	sub    $0x8,%esp
f010367d:	50                   	push   %eax
f010367e:	ff 75 08             	pushl  0x8(%ebp)
f0103681:	e8 10 06 00 00       	call   f0103c96 <get_disk_page_directory>
f0103686:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103689:	8b 45 08             	mov    0x8(%ebp),%eax
f010368c:	8b 40 64             	mov    0x64(%eax),%eax
f010368f:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0103692:	52                   	push   %edx
f0103693:	6a 01                	push   $0x1
f0103695:	ff 75 0c             	pushl  0xc(%ebp)
f0103698:	50                   	push   %eax
f0103699:	e8 11 fe ff ff       	call   f01034af <get_disk_page_table>
f010369e:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01036a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036a4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036a7:	c1 ea 0c             	shr    $0xc,%edx
f01036aa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036b0:	c1 e2 02             	shl    $0x2,%edx
f01036b3:	01 d0                	add    %edx,%eax
f01036b5:	8b 00                	mov    (%eax),%eax
f01036b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01036ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036bd:	85 c0                	test   %eax,%eax
f01036bf:	75 34                	jne    f01036f5 <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01036c1:	83 ec 0c             	sub    $0xc,%esp
f01036c4:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01036c7:	50                   	push   %eax
f01036c8:	e8 3a fc ff ff       	call   f0103307 <allocate_disk_frame>
f01036cd:	83 c4 10             	add    $0x10,%esp
f01036d0:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01036d3:	75 07                	jne    f01036dc <pf_add_empty_env_page+0x111>
f01036d5:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01036da:	eb 1e                	jmp    f01036fa <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01036dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01036e2:	c1 ea 0c             	shr    $0xc,%edx
f01036e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01036eb:	c1 e2 02             	shl    $0x2,%edx
f01036ee:	01 c2                	add    %eax,%edx
f01036f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036f3:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f01036f5:	b8 00 00 00 00       	mov    $0x0,%eax

}
f01036fa:	c9                   	leave  
f01036fb:	c3                   	ret    

f01036fc <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f01036fc:	55                   	push   %ebp
f01036fd:	89 e5                	mov    %esp,%ebp
f01036ff:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f0103702:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103709:	76 19                	jbe    f0103724 <pf_add_env_page+0x28>
f010370b:	68 24 5c 13 f0       	push   $0xf0135c24
f0103710:	68 4a 5c 13 f0       	push   $0xf0135c4a
f0103715:	68 e6 00 00 00       	push   $0xe6
f010371a:	68 93 5b 13 f0       	push   $0xf0135b93
f010371f:	e8 e1 ca ff ff       	call   f0100205 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0103724:	8b 45 08             	mov    0x8(%ebp),%eax
f0103727:	83 c0 64             	add    $0x64,%eax
f010372a:	83 ec 08             	sub    $0x8,%esp
f010372d:	50                   	push   %eax
f010372e:	ff 75 08             	pushl  0x8(%ebp)
f0103731:	e8 60 05 00 00       	call   f0103c96 <get_disk_page_directory>
f0103736:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103739:	8b 45 08             	mov    0x8(%ebp),%eax
f010373c:	8b 40 64             	mov    0x64(%eax),%eax
f010373f:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103742:	52                   	push   %edx
f0103743:	6a 01                	push   $0x1
f0103745:	ff 75 0c             	pushl  0xc(%ebp)
f0103748:	50                   	push   %eax
f0103749:	e8 61 fd ff ff       	call   f01034af <get_disk_page_table>
f010374e:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103751:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103754:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103757:	c1 ea 0c             	shr    $0xc,%edx
f010375a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103760:	c1 e2 02             	shl    $0x2,%edx
f0103763:	01 d0                	add    %edx,%eax
f0103765:	8b 00                	mov    (%eax),%eax
f0103767:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010376a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010376d:	85 c0                	test   %eax,%eax
f010376f:	75 34                	jne    f01037a5 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103771:	83 ec 0c             	sub    $0xc,%esp
f0103774:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103777:	50                   	push   %eax
f0103778:	e8 8a fb ff ff       	call   f0103307 <allocate_disk_frame>
f010377d:	83 c4 10             	add    $0x10,%esp
f0103780:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103783:	75 07                	jne    f010378c <pf_add_env_page+0x90>
f0103785:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010378a:	eb 31                	jmp    f01037bd <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010378c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010378f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103792:	c1 ea 0c             	shr    $0xc,%edx
f0103795:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010379b:	c1 e2 02             	shl    $0x2,%edx
f010379e:	01 c2                	add    %eax,%edx
f01037a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037a3:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01037a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037a8:	83 ec 08             	sub    $0x8,%esp
f01037ab:	ff 75 10             	pushl  0x10(%ebp)
f01037ae:	50                   	push   %eax
f01037af:	e8 a6 f9 ff ff       	call   f010315a <write_disk_page>
f01037b4:	83 c4 10             	add    $0x10,%esp
f01037b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01037ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01037bd:	c9                   	leave  
f01037be:	c3                   	ret    

f01037bf <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01037bf:	55                   	push   %ebp
f01037c0:	89 e5                	mov    %esp,%ebp
f01037c2:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01037c5:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01037cc:	76 19                	jbe    f01037e7 <pf_update_env_page+0x28>
f01037ce:	68 24 5c 13 f0       	push   $0xf0135c24
f01037d3:	68 4a 5c 13 f0       	push   $0xf0135c4a
f01037d8:	68 08 01 00 00       	push   $0x108
f01037dd:	68 93 5b 13 f0       	push   $0xf0135b93
f01037e2:	e8 1e ca ff ff       	call   f0100205 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01037e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01037ea:	83 c0 64             	add    $0x64,%eax
f01037ed:	83 ec 08             	sub    $0x8,%esp
f01037f0:	50                   	push   %eax
f01037f1:	ff 75 08             	pushl  0x8(%ebp)
f01037f4:	e8 9d 04 00 00       	call   f0103c96 <get_disk_page_directory>
f01037f9:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01037fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01037ff:	8b 40 64             	mov    0x64(%eax),%eax
f0103802:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0103805:	52                   	push   %edx
f0103806:	6a 00                	push   $0x0
f0103808:	ff 75 0c             	pushl  0xc(%ebp)
f010380b:	50                   	push   %eax
f010380c:	e8 9e fc ff ff       	call   f01034af <get_disk_page_table>
f0103811:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0103814:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103817:	85 c0                	test   %eax,%eax
f0103819:	74 29                	je     f0103844 <pf_update_env_page+0x85>
f010381b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010381e:	85 c0                	test   %eax,%eax
f0103820:	0f 84 43 01 00 00    	je     f0103969 <pf_update_env_page+0x1aa>
f0103826:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103829:	8b 55 0c             	mov    0xc(%ebp),%edx
f010382c:	c1 ea 0c             	shr    $0xc,%edx
f010382f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103835:	c1 e2 02             	shl    $0x2,%edx
f0103838:	01 d0                	add    %edx,%eax
f010383a:	8b 00                	mov    (%eax),%eax
f010383c:	85 c0                	test   %eax,%eax
f010383e:	0f 85 25 01 00 00    	jne    f0103969 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f0103844:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103847:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f010384a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010384d:	85 c0                	test   %eax,%eax
f010384f:	79 09                	jns    f010385a <pf_update_env_page+0x9b>
f0103851:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103858:	76 38                	jbe    f0103892 <pf_update_env_page+0xd3>
f010385a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103861:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103864:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103869:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010386c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010386f:	ba 00 00 00 00       	mov    $0x0,%edx
f0103874:	f7 75 f0             	divl   -0x10(%ebp)
f0103877:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010387a:	29 d0                	sub    %edx,%eax
f010387c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010387f:	0f 87 cd 00 00 00    	ja     f0103952 <pf_update_env_page+0x193>
f0103885:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f010388c:	0f 87 c0 00 00 00    	ja     f0103952 <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f0103892:	8b 45 08             	mov    0x8(%ebp),%eax
f0103895:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103898:	83 ec 04             	sub    $0x4,%esp
f010389b:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f010389e:	52                   	push   %edx
f010389f:	ff 75 0c             	pushl  0xc(%ebp)
f01038a2:	50                   	push   %eax
f01038a3:	e8 45 35 00 00       	call   f0106ded <get_frame_info>
f01038a8:	83 c4 10             	add    $0x10,%esp
f01038ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01038ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01038b1:	3b 45 10             	cmp    0x10(%ebp),%eax
f01038b4:	75 52                	jne    f0103908 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01038b6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01038b9:	83 ec 04             	sub    $0x4,%esp
f01038bc:	50                   	push   %eax
f01038bd:	ff 75 f4             	pushl  -0xc(%ebp)
f01038c0:	ff 75 08             	pushl  0x8(%ebp)
f01038c3:	e8 34 fe ff ff       	call   f01036fc <pf_add_env_page>
f01038c8:	83 c4 10             	add    $0x10,%esp
f01038cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01038ce:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01038d2:	75 17                	jne    f01038eb <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01038d4:	83 ec 04             	sub    $0x4,%esp
f01038d7:	68 60 5c 13 f0       	push   $0xf0135c60
f01038dc:	68 1d 01 00 00       	push   $0x11d
f01038e1:	68 93 5b 13 f0       	push   $0xf0135b93
f01038e6:	e8 1a c9 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f01038eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01038ee:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f01038f4:	8d 50 01             	lea    0x1(%eax),%edx
f01038f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01038fa:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
				return ret ;
f0103900:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103903:	e9 17 01 00 00       	jmp    f0103a1f <pf_update_env_page+0x260>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103908:	83 ec 04             	sub    $0x4,%esp
f010390b:	6a 00                	push   $0x0
f010390d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103910:	ff 75 08             	pushl  0x8(%ebp)
f0103913:	e8 b3 fc ff ff       	call   f01035cb <pf_add_empty_env_page>
f0103918:	83 c4 10             	add    $0x10,%esp
f010391b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f010391e:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f0103922:	75 17                	jne    f010393b <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f0103924:	83 ec 04             	sub    $0x4,%esp
f0103927:	68 8c 5c 13 f0       	push   $0xf0135c8c
f010392c:	68 28 01 00 00       	push   $0x128
f0103931:	68 93 5b 13 f0       	push   $0xf0135b93
f0103936:	e8 ca c8 ff ff       	call   f0100205 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f010393b:	8b 45 08             	mov    0x8(%ebp),%eax
f010393e:	8b 80 54 05 00 00    	mov    0x554(%eax),%eax
f0103944:	8d 50 01             	lea    0x1(%eax),%edx
f0103947:	8b 45 08             	mov    0x8(%ebp),%eax
f010394a:	89 90 54 05 00 00    	mov    %edx,0x554(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103950:	eb 17                	jmp    f0103969 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0103952:	83 ec 04             	sub    $0x4,%esp
f0103955:	68 d8 5c 13 f0       	push   $0xf0135cd8
f010395a:	68 2f 01 00 00       	push   $0x12f
f010395f:	68 93 5b 13 f0       	push   $0xf0135b93
f0103964:	e8 9c c8 ff ff       	call   f0100205 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103969:	8b 45 08             	mov    0x8(%ebp),%eax
f010396c:	8b 40 64             	mov    0x64(%eax),%eax
f010396f:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0103972:	52                   	push   %edx
f0103973:	6a 00                	push   $0x0
f0103975:	ff 75 0c             	pushl  0xc(%ebp)
f0103978:	50                   	push   %eax
f0103979:	e8 31 fb ff ff       	call   f01034af <get_disk_page_table>
f010397e:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103981:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103984:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103987:	c1 ea 0c             	shr    $0xc,%edx
f010398a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103990:	c1 e2 02             	shl    $0x2,%edx
f0103993:	01 d0                	add    %edx,%eax
f0103995:	8b 00                	mov    (%eax),%eax
f0103997:	89 45 e0             	mov    %eax,-0x20(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, USER_LIMIT, 0);
f010399a:	8b 45 08             	mov    0x8(%ebp),%eax
f010399d:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039a0:	6a 00                	push   $0x0
f01039a2:	68 00 00 80 ef       	push   $0xef800000
f01039a7:	ff 75 10             	pushl  0x10(%ebp)
f01039aa:	50                   	push   %eax
f01039ab:	e8 78 33 00 00       	call   f0106d28 <map_frame>
f01039b0:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f01039b3:	c7 45 dc 00 00 80 ef 	movl   $0xef800000,-0x24(%ebp)
f01039ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01039bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039c2:	83 ec 08             	sub    $0x8,%esp
f01039c5:	50                   	push   %eax
f01039c6:	ff 75 e0             	pushl  -0x20(%ebp)
f01039c9:	e8 8c f7 ff ff       	call   f010315a <write_disk_page>
f01039ce:	83 c4 10             	add    $0x10,%esp
f01039d1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f01039d4:	8b 45 10             	mov    0x10(%ebp),%eax
f01039d7:	8b 40 08             	mov    0x8(%eax),%eax
f01039da:	40                   	inc    %eax
f01039db:	8b 55 10             	mov    0x10(%ebp),%edx
f01039de:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, USER_LIMIT);
f01039e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01039e5:	8b 40 5c             	mov    0x5c(%eax),%eax
f01039e8:	83 ec 08             	sub    $0x8,%esp
f01039eb:	68 00 00 80 ef       	push   $0xef800000
f01039f0:	50                   	push   %eax
f01039f1:	e8 67 34 00 00       	call   f0106e5d <unmap_frame>
f01039f6:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f01039f9:	8b 45 10             	mov    0x10(%ebp),%eax
f01039fc:	8b 40 08             	mov    0x8(%eax),%eax
f01039ff:	48                   	dec    %eax
f0103a00:	8b 55 10             	mov    0x10(%ebp),%edx
f0103a03:	66 89 42 08          	mov    %ax,0x8(%edx)
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103a07:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a0a:	8b 80 50 05 00 00    	mov    0x550(%eax),%eax
f0103a10:	8d 50 01             	lea    0x1(%eax),%edx
f0103a13:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a16:	89 90 50 05 00 00    	mov    %edx,0x550(%eax)
	//======================

	return ret;
f0103a1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0103a1f:	c9                   	leave  
f0103a20:	c3                   	ret    

f0103a21 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103a21:	55                   	push   %ebp
f0103a22:	89 e5                	mov    %esp,%ebp
f0103a24:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103a27:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103a2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103a30:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103a35:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a38:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a3b:	8b 40 64             	mov    0x64(%eax),%eax
f0103a3e:	85 c0                	test   %eax,%eax
f0103a40:	75 0a                	jne    f0103a4c <pf_read_env_page+0x2b>
f0103a42:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a47:	e9 90 00 00 00       	jmp    f0103adc <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0103a4c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a52:	8b 40 64             	mov    0x64(%eax),%eax
f0103a55:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103a58:	51                   	push   %ecx
f0103a59:	6a 00                	push   $0x0
f0103a5b:	52                   	push   %edx
f0103a5c:	50                   	push   %eax
f0103a5d:	e8 4d fa ff ff       	call   f01034af <get_disk_page_table>
f0103a62:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a65:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a68:	85 c0                	test   %eax,%eax
f0103a6a:	75 07                	jne    f0103a73 <pf_read_env_page+0x52>
f0103a6c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a71:	eb 69                	jmp    f0103adc <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103a76:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103a79:	c1 ea 0c             	shr    $0xc,%edx
f0103a7c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103a82:	c1 e2 02             	shl    $0x2,%edx
f0103a85:	01 d0                	add    %edx,%eax
f0103a87:	8b 00                	mov    (%eax),%eax
f0103a89:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103a8c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103a90:	75 07                	jne    f0103a99 <pf_read_env_page+0x78>
f0103a92:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103a97:	eb 43                	jmp    f0103adc <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f0103a99:	83 ec 08             	sub    $0x8,%esp
f0103a9c:	ff 75 0c             	pushl  0xc(%ebp)
f0103a9f:	ff 75 f0             	pushl  -0x10(%ebp)
f0103aa2:	e8 84 f6 ff ff       	call   f010312b <read_disk_page>
f0103aa7:	83 c4 10             	add    $0x10,%esp
f0103aaa:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0103aad:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ab0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ab3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0103ab6:	6a 40                	push   $0x40
f0103ab8:	6a 00                	push   $0x0
f0103aba:	52                   	push   %edx
f0103abb:	50                   	push   %eax
f0103abc:	e8 c5 43 00 00       	call   f0107e86 <pt_set_page_permissions>
f0103ac1:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f0103ac4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac7:	8b 80 4c 05 00 00    	mov    0x54c(%eax),%eax
f0103acd:	8d 50 01             	lea    0x1(%eax),%edx
f0103ad0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ad3:	89 90 4c 05 00 00    	mov    %edx,0x54c(%eax)
	//======================

	return disk_read_error;
f0103ad9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0103adc:	c9                   	leave  
f0103add:	c3                   	ret    

f0103ade <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0103ade:	55                   	push   %ebp
f0103adf:	89 e5                	mov    %esp,%ebp
f0103ae1:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103ae4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae7:	8b 40 64             	mov    0x64(%eax),%eax
f0103aea:	85 c0                	test   %eax,%eax
f0103aec:	74 62                	je     f0103b50 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103aee:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af1:	8b 40 64             	mov    0x64(%eax),%eax
f0103af4:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103af7:	52                   	push   %edx
f0103af8:	6a 00                	push   $0x0
f0103afa:	ff 75 0c             	pushl  0xc(%ebp)
f0103afd:	50                   	push   %eax
f0103afe:	e8 ac f9 ff ff       	call   f01034af <get_disk_page_table>
f0103b03:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103b06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b09:	85 c0                	test   %eax,%eax
f0103b0b:	74 46                	je     f0103b53 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103b0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b10:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b13:	c1 ea 0c             	shr    $0xc,%edx
f0103b16:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b1c:	c1 e2 02             	shl    $0x2,%edx
f0103b1f:	01 d0                	add    %edx,%eax
f0103b21:	8b 00                	mov    (%eax),%eax
f0103b23:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b29:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103b2c:	c1 ea 0c             	shr    $0xc,%edx
f0103b2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103b35:	c1 e2 02             	shl    $0x2,%edx
f0103b38:	01 d0                	add    %edx,%eax
f0103b3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103b40:	83 ec 0c             	sub    $0xc,%esp
f0103b43:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b46:	e8 83 f8 ff ff       	call   f01033ce <free_disk_frame>
f0103b4b:	83 c4 10             	add    $0x10,%esp
f0103b4e:	eb 04                	jmp    f0103b54 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103b50:	90                   	nop
f0103b51:	eb 01                	jmp    f0103b54 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103b53:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103b54:	c9                   	leave  
f0103b55:	c3                   	ret    

f0103b56 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103b56:	55                   	push   %ebp
f0103b57:	89 e5                	mov    %esp,%ebp
f0103b59:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103b5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103b63:	e9 b8 00 00 00       	jmp    f0103c20 <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103b68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b6b:	8b 40 64             	mov    0x64(%eax),%eax
f0103b6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b71:	c1 e2 02             	shl    $0x2,%edx
f0103b74:	01 d0                	add    %edx,%eax
f0103b76:	8b 00                	mov    (%eax),%eax
f0103b78:	83 e0 01             	and    $0x1,%eax
f0103b7b:	85 c0                	test   %eax,%eax
f0103b7d:	0f 84 99 00 00 00    	je     f0103c1c <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103b83:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b86:	8b 40 64             	mov    0x64(%eax),%eax
f0103b89:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103b8c:	c1 e2 02             	shl    $0x2,%edx
f0103b8f:	01 d0                	add    %edx,%eax
f0103b91:	8b 00                	mov    (%eax),%eax
f0103b93:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103b98:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103b9b:	83 ec 0c             	sub    $0xc,%esp
f0103b9e:	ff 75 ec             	pushl  -0x14(%ebp)
f0103ba1:	e8 09 42 00 00       	call   f0107daf <kheap_virtual_address>
f0103ba6:	83 c4 10             	add    $0x10,%esp
f0103ba9:	89 45 e8             	mov    %eax,-0x18(%ebp)
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103bb3:	eb 3a                	jmp    f0103bef <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0103bb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bb8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bc2:	01 d0                	add    %edx,%eax
f0103bc4:	8b 00                	mov    (%eax),%eax
f0103bc6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f0103bc9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103bcc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bd3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103bd6:	01 d0                	add    %edx,%eax
f0103bd8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103bde:	83 ec 0c             	sub    $0xc,%esp
f0103be1:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103be4:	e8 e5 f7 ff ff       	call   f01033ce <free_disk_frame>
f0103be9:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103bec:	ff 45 f0             	incl   -0x10(%ebp)
f0103bef:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103bf6:	76 bd                	jbe    f0103bb5 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103bf8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bfb:	8b 40 64             	mov    0x64(%eax),%eax
f0103bfe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c01:	c1 e2 02             	shl    $0x2,%edx
f0103c04:	01 d0                	add    %edx,%eax
f0103c06:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#if USE_KHEAP
		{
			kfree(pt);
f0103c0c:	83 ec 0c             	sub    $0xc,%esp
f0103c0f:	ff 75 e8             	pushl  -0x18(%ebp)
f0103c12:	e8 55 40 00 00       	call   f0107c6c <kfree>
f0103c17:	83 c4 10             	add    $0x10,%esp
f0103c1a:	eb 01                	jmp    f0103c1d <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103c1c:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103c1d:	ff 45 f4             	incl   -0xc(%ebp)
f0103c20:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c27:	0f 86 3b ff ff ff    	jbe    f0103b68 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_pgdir);
f0103c2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c30:	8b 40 64             	mov    0x64(%eax),%eax
f0103c33:	83 ec 0c             	sub    $0xc,%esp
f0103c36:	50                   	push   %eax
f0103c37:	e8 30 40 00 00       	call   f0107c6c <kfree>
f0103c3c:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103c3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c42:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103c49:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c4c:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103c53:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c56:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c59:	85 c0                	test   %eax,%eax
f0103c5b:	74 36                	je     f0103c93 <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103c5d:	83 ec 0c             	sub    $0xc,%esp
f0103c60:	ff 75 08             	pushl  0x8(%ebp)
f0103c63:	e8 05 03 00 00       	call   f0103f6d <__pf_remove_env_all_tables>
f0103c68:	83 c4 10             	add    $0x10,%esp


#if USE_KHEAP
	{
		kfree(ptr_env->disk_env_tabledir);
f0103c6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c6e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103c71:	83 ec 0c             	sub    $0xc,%esp
f0103c74:	50                   	push   %eax
f0103c75:	e8 f2 3f 00 00       	call   f0107c6c <kfree>
f0103c7a:	83 c4 10             	add    $0x10,%esp
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103c7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c80:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103c87:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c8a:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103c91:	eb 01                	jmp    f0103c94 <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103c93:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103c94:	c9                   	leave  
f0103c95:	c3                   	ret    

f0103c96 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103c96:	55                   	push   %ebp
f0103c97:	89 e5                	mov    %esp,%ebp
f0103c99:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103c9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103c9f:	8b 50 64             	mov    0x64(%eax),%edx
f0103ca2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ca5:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103ca7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103caa:	8b 00                	mov    (%eax),%eax
f0103cac:	85 c0                	test   %eax,%eax
f0103cae:	75 58                	jne    f0103d08 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f0103cb0:	83 ec 0c             	sub    $0xc,%esp
f0103cb3:	68 00 10 00 00       	push   $0x1000
f0103cb8:	e8 a7 3e 00 00       	call   f0107b64 <kmalloc>
f0103cbd:	83 c4 10             	add    $0x10,%esp
f0103cc0:	89 c2                	mov    %eax,%edx
f0103cc2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cc5:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f0103cc7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cca:	8b 00                	mov    (%eax),%eax
f0103ccc:	85 c0                	test   %eax,%eax
f0103cce:	75 07                	jne    f0103cd7 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f0103cd0:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103cd5:	eb 36                	jmp    f0103d0d <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f0103cd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cda:	8b 00                	mov    (%eax),%eax
f0103cdc:	83 ec 0c             	sub    $0xc,%esp
f0103cdf:	50                   	push   %eax
f0103ce0:	e8 0b 41 00 00       	call   f0107df0 <kheap_physical_address>
f0103ce5:	83 c4 10             	add    $0x10,%esp
f0103ce8:	89 c2                	mov    %eax,%edx
f0103cea:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ced:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf3:	8b 00                	mov    (%eax),%eax
f0103cf5:	83 ec 04             	sub    $0x4,%esp
f0103cf8:	68 00 10 00 00       	push   $0x1000
f0103cfd:	6a 00                	push   $0x0
f0103cff:	50                   	push   %eax
f0103d00:	e8 ee de 02 00       	call   f0131bf3 <memset>
f0103d05:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103d08:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103d0d:	c9                   	leave  
f0103d0e:	c3                   	ret    

f0103d0f <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103d0f:	55                   	push   %ebp
f0103d10:	89 e5                	mov    %esp,%ebp
f0103d12:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103d15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103d23:	eb 78                	jmp    f0103d9d <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103d25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d28:	8b 40 64             	mov    0x64(%eax),%eax
f0103d2b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d2e:	c1 e2 02             	shl    $0x2,%edx
f0103d31:	01 d0                	add    %edx,%eax
f0103d33:	8b 00                	mov    (%eax),%eax
f0103d35:	83 e0 01             	and    $0x1,%eax
f0103d38:	85 c0                	test   %eax,%eax
f0103d3a:	74 5d                	je     f0103d99 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103d3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d3f:	8b 40 64             	mov    0x64(%eax),%eax
f0103d42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103d45:	c1 e2 02             	shl    $0x2,%edx
f0103d48:	01 d0                	add    %edx,%eax
f0103d4a:	8b 00                	mov    (%eax),%eax
f0103d4c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103d51:	89 45 e8             	mov    %eax,-0x18(%ebp)
#if USE_KHEAP
		{
			pt = (uint32*) kheap_virtual_address(pa);
f0103d54:	83 ec 0c             	sub    $0xc,%esp
f0103d57:	ff 75 e8             	pushl  -0x18(%ebp)
f0103d5a:	e8 50 40 00 00       	call   f0107daf <kheap_virtual_address>
f0103d5f:	83 c4 10             	add    $0x10,%esp
f0103d62:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d65:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103d6c:	eb 20                	jmp    f0103d8e <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103d6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103d71:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103d7b:	01 d0                	add    %edx,%eax
f0103d7d:	8b 00                	mov    (%eax),%eax
f0103d7f:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f0103d82:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0103d86:	74 03                	je     f0103d8b <pf_calculate_allocated_pages+0x7c>
				counter ++;
f0103d88:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103d8b:	ff 45 ec             	incl   -0x14(%ebp)
f0103d8e:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103d95:	76 d7                	jbe    f0103d6e <pf_calculate_allocated_pages+0x5f>
f0103d97:	eb 01                	jmp    f0103d9a <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103d99:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103d9a:	ff 45 f4             	incl   -0xc(%ebp)
f0103d9d:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103da4:	0f 86 7b ff ff ff    	jbe    f0103d25 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103daa:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103dad:	c9                   	leave  
f0103dae:	c3                   	ret    

f0103daf <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103daf:	55                   	push   %ebp
f0103db0:	89 e5                	mov    %esp,%ebp
f0103db2:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103db5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dbc:	a1 b4 f7 85 f0       	mov    0xf085f7b4,%eax
f0103dc1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dc4:	eb 0b                	jmp    f0103dd1 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103dc6:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103dc9:	a1 bc f7 85 f0       	mov    0xf085f7bc,%eax
f0103dce:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103dd1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103dd5:	74 07                	je     f0103dde <pf_calculate_free_frames+0x2f>
f0103dd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103dda:	8b 00                	mov    (%eax),%eax
f0103ddc:	eb 05                	jmp    f0103de3 <pf_calculate_free_frames+0x34>
f0103dde:	b8 00 00 00 00       	mov    $0x0,%eax
f0103de3:	a3 bc f7 85 f0       	mov    %eax,0xf085f7bc
f0103de8:	a1 bc f7 85 f0       	mov    0xf085f7bc,%eax
f0103ded:	85 c0                	test   %eax,%eax
f0103def:	75 d5                	jne    f0103dc6 <pf_calculate_free_frames+0x17>
f0103df1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103df5:	75 cf                	jne    f0103dc6 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103df7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103dfa:	c9                   	leave  
f0103dfb:	c3                   	ret    

f0103dfc <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103dfc:	55                   	push   %ebp
f0103dfd:	89 e5                	mov    %esp,%ebp
f0103dff:	83 ec 08             	sub    $0x8,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e05:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103e08:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e0b:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103e0d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e10:	8b 00                	mov    (%eax),%eax
f0103e12:	85 c0                	test   %eax,%eax
f0103e14:	75 58                	jne    f0103e6e <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
#if USE_KHEAP
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f0103e16:	83 ec 0c             	sub    $0xc,%esp
f0103e19:	68 00 10 00 00       	push   $0x1000
f0103e1e:	e8 41 3d 00 00       	call   f0107b64 <kmalloc>
f0103e23:	83 c4 10             	add    $0x10,%esp
f0103e26:	89 c2                	mov    %eax,%edx
f0103e28:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e2b:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f0103e2d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e30:	8b 00                	mov    (%eax),%eax
f0103e32:	85 c0                	test   %eax,%eax
f0103e34:	75 07                	jne    f0103e3d <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f0103e36:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f0103e3b:	eb 36                	jmp    f0103e73 <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f0103e3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e40:	8b 00                	mov    (%eax),%eax
f0103e42:	83 ec 0c             	sub    $0xc,%esp
f0103e45:	50                   	push   %eax
f0103e46:	e8 a5 3f 00 00       	call   f0107df0 <kheap_physical_address>
f0103e4b:	83 c4 10             	add    $0x10,%esp
f0103e4e:	89 c2                	mov    %eax,%edx
f0103e50:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e53:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103e56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e59:	8b 00                	mov    (%eax),%eax
f0103e5b:	83 ec 04             	sub    $0x4,%esp
f0103e5e:	68 00 10 00 00       	push   $0x1000
f0103e63:	6a 00                	push   $0x0
f0103e65:	50                   	push   %eax
f0103e66:	e8 88 dd 02 00       	call   f0131bf3 <memset>
f0103e6b:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103e6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103e73:	c9                   	leave  
f0103e74:	c3                   	ret    

f0103e75 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e75:	55                   	push   %ebp
f0103e76:	89 e5                	mov    %esp,%ebp
f0103e78:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103e7b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103e82:	76 19                	jbe    f0103e9d <__pf_write_env_table+0x28>
f0103e84:	68 24 5c 13 f0       	push   $0xf0135c24
f0103e89:	68 4a 5c 13 f0       	push   $0xf0135c4a
f0103e8e:	68 5a 02 00 00       	push   $0x25a
f0103e93:	68 93 5b 13 f0       	push   $0xf0135b93
f0103e98:	e8 68 c3 ff ff       	call   f0100205 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103e9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ea0:	83 c0 6c             	add    $0x6c,%eax
f0103ea3:	83 ec 08             	sub    $0x8,%esp
f0103ea6:	50                   	push   %eax
f0103ea7:	ff 75 08             	pushl  0x8(%ebp)
f0103eaa:	e8 4d ff ff ff       	call   f0103dfc <get_disk_table_directory>
f0103eaf:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103eb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eb8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ebb:	c1 ea 16             	shr    $0x16,%edx
f0103ebe:	c1 e2 02             	shl    $0x2,%edx
f0103ec1:	01 d0                	add    %edx,%eax
f0103ec3:	8b 00                	mov    (%eax),%eax
f0103ec5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103ec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103ecb:	85 c0                	test   %eax,%eax
f0103ecd:	75 31                	jne    f0103f00 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103ecf:	83 ec 0c             	sub    $0xc,%esp
f0103ed2:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103ed5:	50                   	push   %eax
f0103ed6:	e8 2c f4 ff ff       	call   f0103307 <allocate_disk_frame>
f0103edb:	83 c4 10             	add    $0x10,%esp
f0103ede:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103ee1:	75 07                	jne    f0103eea <__pf_write_env_table+0x75>
f0103ee3:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103ee8:	eb 2e                	jmp    f0103f18 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103eea:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eed:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ef0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ef3:	c1 ea 16             	shr    $0x16,%edx
f0103ef6:	c1 e2 02             	shl    $0x2,%edx
f0103ef9:	01 c2                	add    %eax,%edx
f0103efb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103efe:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f03:	83 ec 08             	sub    $0x8,%esp
f0103f06:	ff 75 10             	pushl  0x10(%ebp)
f0103f09:	50                   	push   %eax
f0103f0a:	e8 4b f2 ff ff       	call   f010315a <write_disk_page>
f0103f0f:	83 c4 10             	add    $0x10,%esp
f0103f12:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103f18:	c9                   	leave  
f0103f19:	c3                   	ret    

f0103f1a <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103f1a:	55                   	push   %ebp
f0103f1b:	89 e5                	mov    %esp,%ebp
f0103f1d:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f20:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f23:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f26:	85 c0                	test   %eax,%eax
f0103f28:	75 07                	jne    f0103f31 <__pf_read_env_table+0x17>
f0103f2a:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f2f:	eb 3a                	jmp    f0103f6b <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f31:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f34:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f37:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f3a:	c1 ea 16             	shr    $0x16,%edx
f0103f3d:	c1 e2 02             	shl    $0x2,%edx
f0103f40:	01 d0                	add    %edx,%eax
f0103f42:	8b 00                	mov    (%eax),%eax
f0103f44:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103f47:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f4b:	75 07                	jne    f0103f54 <__pf_read_env_table+0x3a>
f0103f4d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103f52:	eb 17                	jmp    f0103f6b <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103f54:	83 ec 08             	sub    $0x8,%esp
f0103f57:	ff 75 10             	pushl  0x10(%ebp)
f0103f5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f5d:	e8 c9 f1 ff ff       	call   f010312b <read_disk_page>
f0103f62:	83 c4 10             	add    $0x10,%esp
f0103f65:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103f68:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103f6b:	c9                   	leave  
f0103f6c:	c3                   	ret    

f0103f6d <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103f6d:	55                   	push   %ebp
f0103f6e:	89 e5                	mov    %esp,%ebp
f0103f70:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f76:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f79:	85 c0                	test   %eax,%eax
f0103f7b:	74 4c                	je     f0103fc9 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103f7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103f84:	eb 38                	jmp    f0103fbe <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103f86:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f89:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103f8f:	c1 e2 02             	shl    $0x2,%edx
f0103f92:	01 d0                	add    %edx,%eax
f0103f94:	8b 00                	mov    (%eax),%eax
f0103f96:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103f99:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f9c:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103fa2:	c1 e2 02             	shl    $0x2,%edx
f0103fa5:	01 d0                	add    %edx,%eax
f0103fa7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103fad:	83 ec 0c             	sub    $0xc,%esp
f0103fb0:	ff 75 f0             	pushl  -0x10(%ebp)
f0103fb3:	e8 16 f4 ff ff       	call   f01033ce <free_disk_frame>
f0103fb8:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103fbb:	ff 45 f4             	incl   -0xc(%ebp)
f0103fbe:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103fc5:	76 bf                	jbe    f0103f86 <__pf_remove_env_all_tables+0x19>
f0103fc7:	eb 01                	jmp    f0103fca <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fc9:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103fca:	c9                   	leave  
f0103fcb:	c3                   	ret    

f0103fcc <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103fcc:	55                   	push   %ebp
f0103fcd:	89 e5                	mov    %esp,%ebp
f0103fcf:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103fd2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103fd6:	75 10                	jne    f0103fe8 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103fd8:	83 ec 0c             	sub    $0xc,%esp
f0103fdb:	68 54 5d 13 f0       	push   $0xf0135d54
f0103fe0:	e8 29 cd ff ff       	call   f0100d0e <cprintf>
f0103fe5:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103fe8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103feb:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103fee:	85 c0                	test   %eax,%eax
f0103ff0:	74 3d                	je     f010402f <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ff2:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ff5:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ff8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103ffb:	c1 ea 16             	shr    $0x16,%edx
f0103ffe:	c1 e2 02             	shl    $0x2,%edx
f0104001:	01 d0                	add    %edx,%eax
f0104003:	8b 00                	mov    (%eax),%eax
f0104005:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104008:	8b 45 08             	mov    0x8(%ebp),%eax
f010400b:	8b 40 6c             	mov    0x6c(%eax),%eax
f010400e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104011:	c1 ea 16             	shr    $0x16,%edx
f0104014:	c1 e2 02             	shl    $0x2,%edx
f0104017:	01 d0                	add    %edx,%eax
f0104019:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010401f:	83 ec 0c             	sub    $0xc,%esp
f0104022:	ff 75 f4             	pushl  -0xc(%ebp)
f0104025:	e8 a4 f3 ff ff       	call   f01033ce <free_disk_frame>
f010402a:	83 c4 10             	add    $0x10,%esp
f010402d:	eb 01                	jmp    f0104030 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f010402f:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104030:	c9                   	leave  
f0104031:	c3                   	ret    

f0104032 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104032:	55                   	push   %ebp
f0104033:	89 e5                	mov    %esp,%ebp
f0104035:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104038:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f010403f:	eb 1f                	jmp    f0104060 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104041:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104044:	83 ec 04             	sub    $0x4,%esp
f0104047:	6a 08                	push   $0x8
f0104049:	ff 75 08             	pushl  0x8(%ebp)
f010404c:	50                   	push   %eax
f010404d:	e8 46 e2 02 00       	call   f0132298 <ide_write>
f0104052:	83 c4 10             	add    $0x10,%esp
f0104055:	85 c0                	test   %eax,%eax
f0104057:	75 12                	jne    f010406b <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104059:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104060:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104067:	7e d8                	jle    f0104041 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104069:	eb 01                	jmp    f010406c <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010406b:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010406c:	90                   	nop
f010406d:	c9                   	leave  
f010406e:	c3                   	ret    

f010406f <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f010406f:	55                   	push   %ebp
f0104070:	89 e5                	mov    %esp,%ebp
f0104072:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104075:	8b 45 08             	mov    0x8(%ebp),%eax
f0104078:	0f b6 c0             	movzbl %al,%eax
f010407b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104082:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104085:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104088:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010408b:	ee                   	out    %al,(%dx)
f010408c:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104093:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104096:	89 c2                	mov    %eax,%edx
f0104098:	ec                   	in     (%dx),%al
f0104099:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010409c:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f010409f:	0f b6 c0             	movzbl %al,%eax
}
f01040a2:	c9                   	leave  
f01040a3:	c3                   	ret    

f01040a4 <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f01040a4:	55                   	push   %ebp
f01040a5:	89 e5                	mov    %esp,%ebp
f01040a7:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f01040aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01040ad:	0f b6 c0             	movzbl %al,%eax
f01040b0:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f01040b7:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01040ba:	8a 45 f6             	mov    -0xa(%ebp),%al
f01040bd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01040c0:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f01040c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01040c4:	0f b6 c0             	movzbl %al,%eax
f01040c7:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f01040ce:	88 45 f7             	mov    %al,-0x9(%ebp)
f01040d1:	8a 45 f7             	mov    -0x9(%ebp),%al
f01040d4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01040d7:	ee                   	out    %al,(%dx)
}
f01040d8:	90                   	nop
f01040d9:	c9                   	leave  
f01040da:	c3                   	ret    

f01040db <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f01040db:	55                   	push   %ebp
f01040dc:	89 e5                	mov    %esp,%ebp
f01040de:	53                   	push   %ebx
f01040df:	83 ec 24             	sub    $0x24,%esp
f01040e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01040e5:	88 45 e4             	mov    %al,-0x1c(%ebp)
f01040e8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01040ef:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01040f3:	8a 45 ef             	mov    -0x11(%ebp),%al
f01040f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01040f9:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01040fa:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01040fe:	77 48                	ja     f0104148 <kclock_start+0x6d>
f0104100:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104107:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f010410b:	8a 45 ee             	mov    -0x12(%ebp),%al
f010410e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104111:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104112:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104116:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010411b:	99                   	cltd   
f010411c:	f7 fb                	idiv   %ebx
f010411e:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104124:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104128:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f010412d:	99                   	cltd   
f010412e:	f7 fb                	idiv   %ebx
f0104130:	89 c3                	mov    %eax,%ebx
f0104132:	89 c8                	mov    %ecx,%eax
f0104134:	99                   	cltd   
f0104135:	f7 fb                	idiv   %ebx
f0104137:	0f b7 c0             	movzwl %ax,%eax
f010413a:	83 ec 0c             	sub    $0xc,%esp
f010413d:	50                   	push   %eax
f010413e:	e8 b8 01 00 00       	call   f01042fb <kclock_write_cnt0_LSB_first>
f0104143:	83 c4 10             	add    $0x10,%esp
f0104146:	eb 13                	jmp    f010415b <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104148:	6a 35                	push   $0x35
f010414a:	68 78 5d 13 f0       	push   $0xf0135d78
f010414f:	6a 33                	push   $0x33
f0104151:	68 d4 5d 13 f0       	push   $0xf0135dd4
f0104156:	e8 aa c0 ff ff       	call   f0100205 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010415b:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0104161:	0f b7 c0             	movzwl %ax,%eax
f0104164:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104169:	83 ec 0c             	sub    $0xc,%esp
f010416c:	50                   	push   %eax
f010416d:	e8 bc 1b 00 00       	call   f0105d2e <irq_setmask_8259A>
f0104172:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104175:	90                   	nop
f0104176:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104179:	c9                   	leave  
f010417a:	c3                   	ret    

f010417b <kclock_stop>:

void
kclock_stop(void)
{
f010417b:	55                   	push   %ebp
f010417c:	89 e5                	mov    %esp,%ebp
f010417e:	83 ec 18             	sub    $0x18,%esp
f0104181:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104188:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f010418c:	8a 45 f3             	mov    -0xd(%ebp),%al
f010418f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104192:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0104193:	83 ec 0c             	sub    $0xc,%esp
f0104196:	68 ff ff 00 00       	push   $0xffff
f010419b:	e8 8e 1b 00 00       	call   f0105d2e <irq_setmask_8259A>
f01041a0:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01041a3:	90                   	nop
f01041a4:	c9                   	leave  
f01041a5:	c3                   	ret    

f01041a6 <kclock_resume>:

void
kclock_resume(void)
{
f01041a6:	55                   	push   %ebp
f01041a7:	89 e5                	mov    %esp,%ebp
f01041a9:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01041ac:	e8 8c 01 00 00       	call   f010433d <kclock_read_cnt0>
f01041b1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01041b5:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01041ba:	77 06                	ja     f01041c2 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01041bc:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01041c2:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041c6:	83 e0 01             	and    $0x1,%eax
f01041c9:	66 85 c0             	test   %ax,%ax
f01041cc:	74 09                	je     f01041d7 <kclock_resume+0x31>
		cnt0++;
f01041ce:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f01041d2:	40                   	inc    %eax
f01041d3:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f01041d7:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041de:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041e2:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01041e8:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f01041e9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f01041ed:	83 ec 0c             	sub    $0xc,%esp
f01041f0:	50                   	push   %eax
f01041f1:	e8 05 01 00 00       	call   f01042fb <kclock_write_cnt0_LSB_first>
f01041f6:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f01041f9:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f01041ff:	0f b7 c0             	movzwl %ax,%eax
f0104202:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104207:	83 ec 0c             	sub    $0xc,%esp
f010420a:	50                   	push   %eax
f010420b:	e8 1e 1b 00 00       	call   f0105d2e <irq_setmask_8259A>
f0104210:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104213:	90                   	nop
f0104214:	c9                   	leave  
f0104215:	c3                   	ret    

f0104216 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104216:	55                   	push   %ebp
f0104217:	89 e5                	mov    %esp,%ebp
f0104219:	83 ec 28             	sub    $0x28,%esp
f010421c:	8b 45 08             	mov    0x8(%ebp),%eax
f010421f:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104222:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104229:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f010422d:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104230:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104233:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104234:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104238:	83 ec 0c             	sub    $0xc,%esp
f010423b:	50                   	push   %eax
f010423c:	e8 ba 00 00 00       	call   f01042fb <kclock_write_cnt0_LSB_first>
f0104241:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104244:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f010424a:	0f b7 c0             	movzwl %ax,%eax
f010424d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104252:	83 ec 0c             	sub    $0xc,%esp
f0104255:	50                   	push   %eax
f0104256:	e8 d3 1a 00 00       	call   f0105d2e <irq_setmask_8259A>
f010425b:	83 c4 10             	add    $0x10,%esp

}
f010425e:	90                   	nop
f010425f:	c9                   	leave  
f0104260:	c3                   	ret    

f0104261 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104261:	55                   	push   %ebp
f0104262:	89 e5                	mov    %esp,%ebp
f0104264:	53                   	push   %ebx
f0104265:	83 ec 24             	sub    $0x24,%esp
f0104268:	8b 45 08             	mov    0x8(%ebp),%eax
f010426b:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f010426e:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104272:	77 6c                	ja     f01042e0 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f0104274:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104278:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f010427d:	99                   	cltd   
f010427e:	f7 fb                	idiv   %ebx
f0104280:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104286:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f010428a:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f010428f:	99                   	cltd   
f0104290:	f7 fb                	idiv   %ebx
f0104292:	89 c3                	mov    %eax,%ebx
f0104294:	89 c8                	mov    %ecx,%eax
f0104296:	99                   	cltd   
f0104297:	f7 fb                	idiv   %ebx
f0104299:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f010429c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010429f:	25 01 00 00 80       	and    $0x80000001,%eax
f01042a4:	85 c0                	test   %eax,%eax
f01042a6:	79 05                	jns    f01042ad <kclock_set_quantum+0x4c>
f01042a8:	48                   	dec    %eax
f01042a9:	83 c8 fe             	or     $0xfffffffe,%eax
f01042ac:	40                   	inc    %eax
f01042ad:	83 f8 01             	cmp    $0x1,%eax
f01042b0:	75 03                	jne    f01042b5 <kclock_set_quantum+0x54>
			cnt++;
f01042b2:	ff 45 f4             	incl   -0xc(%ebp)
f01042b5:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01042bc:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01042c0:	8a 45 ef             	mov    -0x11(%ebp),%al
f01042c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042c6:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f01042c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042ca:	0f b7 c0             	movzwl %ax,%eax
f01042cd:	83 ec 0c             	sub    $0xc,%esp
f01042d0:	50                   	push   %eax
f01042d1:	e8 25 00 00 00       	call   f01042fb <kclock_write_cnt0_LSB_first>
f01042d6:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f01042d9:	e8 9d fe ff ff       	call   f010417b <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f01042de:	eb 16                	jmp    f01042f6 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f01042e0:	6a 35                	push   $0x35
f01042e2:	68 78 5d 13 f0       	push   $0xf0135d78
f01042e7:	68 c9 00 00 00       	push   $0xc9
f01042ec:	68 d4 5d 13 f0       	push   $0xf0135dd4
f01042f1:	e8 0f bf ff ff       	call   f0100205 <_panic>
	}
}
f01042f6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01042f9:	c9                   	leave  
f01042fa:	c3                   	ret    

f01042fb <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f01042fb:	55                   	push   %ebp
f01042fc:	89 e5                	mov    %esp,%ebp
f01042fe:	83 ec 14             	sub    $0x14,%esp
f0104301:	8b 45 08             	mov    0x8(%ebp),%eax
f0104304:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104308:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010430b:	0f b6 c0             	movzbl %al,%eax
f010430e:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104315:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104318:	8a 45 f6             	mov    -0xa(%ebp),%al
f010431b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010431e:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f010431f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104322:	66 c1 e8 08          	shr    $0x8,%ax
f0104326:	0f b6 c0             	movzbl %al,%eax
f0104329:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0104330:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104333:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104336:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104339:	ee                   	out    %al,(%dx)
}
f010433a:	90                   	nop
f010433b:	c9                   	leave  
f010433c:	c3                   	ret    

f010433d <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f010433d:	55                   	push   %ebp
f010433e:	89 e5                	mov    %esp,%ebp
f0104340:	83 ec 20             	sub    $0x20,%esp
f0104343:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010434a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010434d:	89 c2                	mov    %eax,%edx
f010434f:	ec                   	in     (%dx),%al
f0104350:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0104353:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104356:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104359:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104360:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104363:	89 c2                	mov    %eax,%edx
f0104365:	ec                   	in     (%dx),%al
f0104366:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0104369:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f010436c:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010436f:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104373:	c1 e0 08             	shl    $0x8,%eax
f0104376:	89 c2                	mov    %eax,%edx
f0104378:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010437c:	09 d0                	or     %edx,%eax
f010437e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0104382:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104385:	c9                   	leave  
f0104386:	c3                   	ret    

f0104387 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0104387:	55                   	push   %ebp
f0104388:	89 e5                	mov    %esp,%ebp
f010438a:	83 ec 30             	sub    $0x30,%esp
f010438d:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104394:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104397:	89 c2                	mov    %eax,%edx
f0104399:	ec                   	in     (%dx),%al
f010439a:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f010439d:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01043a0:	88 45 ff             	mov    %al,-0x1(%ebp)
f01043a3:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01043aa:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01043ae:	8a 45 dc             	mov    -0x24(%ebp),%al
f01043b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01043b4:	ee                   	out    %al,(%dx)
f01043b5:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043bf:	89 c2                	mov    %eax,%edx
f01043c1:	ec                   	in     (%dx),%al
f01043c2:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f01043c5:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f01043c8:	88 45 f3             	mov    %al,-0xd(%ebp)
f01043cb:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01043d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01043d5:	89 c2                	mov    %eax,%edx
f01043d7:	ec                   	in     (%dx),%al
f01043d8:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f01043db:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01043de:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01043e1:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f01043e5:	c1 e0 08             	shl    $0x8,%eax
f01043e8:	89 c2                	mov    %eax,%edx
f01043ea:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01043ee:	09 d0                	or     %edx,%eax
f01043f0:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f01043f4:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01043f8:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f01043ff:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104402:	8a 45 df             	mov    -0x21(%ebp),%al
f0104405:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104408:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104409:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f010440c:	c9                   	leave  
f010440d:	c3                   	ret    

f010440e <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f010440e:	55                   	push   %ebp
f010440f:	89 e5                	mov    %esp,%ebp
f0104411:	a1 48 f7 85 f0       	mov    0xf085f748,%eax
f0104416:	85 c0                	test   %eax,%eax
f0104418:	75 07                	jne    f0104421 <isSchedMethodRR+0x13>
f010441a:	b8 01 00 00 00       	mov    $0x1,%eax
f010441f:	eb 05                	jmp    f0104426 <isSchedMethodRR+0x18>
f0104421:	b8 00 00 00 00       	mov    $0x0,%eax
f0104426:	5d                   	pop    %ebp
f0104427:	c3                   	ret    

f0104428 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104428:	55                   	push   %ebp
f0104429:	89 e5                	mov    %esp,%ebp
f010442b:	a1 48 f7 85 f0       	mov    0xf085f748,%eax
f0104430:	83 f8 01             	cmp    $0x1,%eax
f0104433:	75 07                	jne    f010443c <isSchedMethodMLFQ+0x14>
f0104435:	b8 01 00 00 00       	mov    $0x1,%eax
f010443a:	eb 05                	jmp    f0104441 <isSchedMethodMLFQ+0x19>
f010443c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104441:	5d                   	pop    %ebp
f0104442:	c3                   	ret    

f0104443 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0104443:	55                   	push   %ebp
f0104444:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104446:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010444a:	74 1d                	je     f0104469 <init_queue+0x26>
	{
		LIST_INIT(queue);
f010444c:	8b 45 08             	mov    0x8(%ebp),%eax
f010444f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104455:	8b 45 08             	mov    0x8(%ebp),%eax
f0104458:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010445f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104462:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104469:	90                   	nop
f010446a:	5d                   	pop    %ebp
f010446b:	c3                   	ret    

f010446c <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f010446c:	55                   	push   %ebp
f010446d:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010446f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104473:	74 08                	je     f010447d <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104475:	8b 45 08             	mov    0x8(%ebp),%eax
f0104478:	8b 40 0c             	mov    0xc(%eax),%eax
f010447b:	eb 05                	jmp    f0104482 <queue_size+0x16>
	}
	else
	{
		return 0;
f010447d:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104482:	5d                   	pop    %ebp
f0104483:	c3                   	ret    

f0104484 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104484:	55                   	push   %ebp
f0104485:	89 e5                	mov    %esp,%ebp
f0104487:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f010448a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010448e:	75 16                	jne    f01044a6 <enqueue+0x22>
f0104490:	68 e8 5d 13 f0       	push   $0xf0135de8
f0104495:	68 f6 5d 13 f0       	push   $0xf0135df6
f010449a:	6a 2d                	push   $0x2d
f010449c:	68 0b 5e 13 f0       	push   $0xf0135e0b
f01044a1:	e8 5f bd ff ff       	call   f0100205 <_panic>
	if(env != NULL)
f01044a6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044aa:	74 66                	je     f0104512 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f01044ac:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044b0:	75 14                	jne    f01044c6 <enqueue+0x42>
f01044b2:	83 ec 04             	sub    $0x4,%esp
f01044b5:	68 1c 5e 13 f0       	push   $0xf0135e1c
f01044ba:	6a 30                	push   $0x30
f01044bc:	68 0b 5e 13 f0       	push   $0xf0135e0b
f01044c1:	e8 3f bd ff ff       	call   f0100205 <_panic>
f01044c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01044c9:	8b 10                	mov    (%eax),%edx
f01044cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044ce:	89 50 44             	mov    %edx,0x44(%eax)
f01044d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044d4:	8b 40 44             	mov    0x44(%eax),%eax
f01044d7:	85 c0                	test   %eax,%eax
f01044d9:	74 0d                	je     f01044e8 <enqueue+0x64>
f01044db:	8b 45 08             	mov    0x8(%ebp),%eax
f01044de:	8b 00                	mov    (%eax),%eax
f01044e0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044e3:	89 50 48             	mov    %edx,0x48(%eax)
f01044e6:	eb 09                	jmp    f01044f1 <enqueue+0x6d>
f01044e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01044eb:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044ee:	89 50 04             	mov    %edx,0x4(%eax)
f01044f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01044f4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044f7:	89 10                	mov    %edx,(%eax)
f01044f9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01044fc:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104503:	8b 45 08             	mov    0x8(%ebp),%eax
f0104506:	8b 40 0c             	mov    0xc(%eax),%eax
f0104509:	8d 50 01             	lea    0x1(%eax),%edx
f010450c:	8b 45 08             	mov    0x8(%ebp),%eax
f010450f:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104512:	90                   	nop
f0104513:	c9                   	leave  
f0104514:	c3                   	ret    

f0104515 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0104515:	55                   	push   %ebp
f0104516:	89 e5                	mov    %esp,%ebp
f0104518:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f010451b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010451f:	75 0a                	jne    f010452b <dequeue+0x16>
f0104521:	b8 00 00 00 00       	mov    $0x0,%eax
f0104526:	e9 a0 00 00 00       	jmp    f01045cb <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f010452b:	8b 45 08             	mov    0x8(%ebp),%eax
f010452e:	8b 40 04             	mov    0x4(%eax),%eax
f0104531:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104534:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104538:	0f 84 8a 00 00 00    	je     f01045c8 <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f010453e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104542:	75 14                	jne    f0104558 <dequeue+0x43>
f0104544:	83 ec 04             	sub    $0x4,%esp
f0104547:	68 3f 5e 13 f0       	push   $0xf0135e3f
f010454c:	6a 3a                	push   $0x3a
f010454e:	68 0b 5e 13 f0       	push   $0xf0135e0b
f0104553:	e8 ad bc ff ff       	call   f0100205 <_panic>
f0104558:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010455b:	8b 40 44             	mov    0x44(%eax),%eax
f010455e:	85 c0                	test   %eax,%eax
f0104560:	74 11                	je     f0104573 <dequeue+0x5e>
f0104562:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104565:	8b 40 44             	mov    0x44(%eax),%eax
f0104568:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010456b:	8b 52 48             	mov    0x48(%edx),%edx
f010456e:	89 50 48             	mov    %edx,0x48(%eax)
f0104571:	eb 0c                	jmp    f010457f <dequeue+0x6a>
f0104573:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104576:	8b 50 48             	mov    0x48(%eax),%edx
f0104579:	8b 45 08             	mov    0x8(%ebp),%eax
f010457c:	89 50 04             	mov    %edx,0x4(%eax)
f010457f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104582:	8b 40 48             	mov    0x48(%eax),%eax
f0104585:	85 c0                	test   %eax,%eax
f0104587:	74 11                	je     f010459a <dequeue+0x85>
f0104589:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010458c:	8b 40 48             	mov    0x48(%eax),%eax
f010458f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104592:	8b 52 44             	mov    0x44(%edx),%edx
f0104595:	89 50 44             	mov    %edx,0x44(%eax)
f0104598:	eb 0b                	jmp    f01045a5 <dequeue+0x90>
f010459a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010459d:	8b 50 44             	mov    0x44(%eax),%edx
f01045a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045a3:	89 10                	mov    %edx,(%eax)
f01045a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045a8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01045af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01045b2:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01045b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01045bc:	8b 40 0c             	mov    0xc(%eax),%eax
f01045bf:	8d 50 ff             	lea    -0x1(%eax),%edx
f01045c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01045c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01045cb:	c9                   	leave  
f01045cc:	c3                   	ret    

f01045cd <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01045cd:	55                   	push   %ebp
f01045ce:	89 e5                	mov    %esp,%ebp
f01045d0:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01045d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01045d7:	75 16                	jne    f01045ef <remove_from_queue+0x22>
f01045d9:	68 e8 5d 13 f0       	push   $0xf0135de8
f01045de:	68 f6 5d 13 f0       	push   $0xf0135df6
f01045e3:	6a 41                	push   $0x41
f01045e5:	68 0b 5e 13 f0       	push   $0xf0135e0b
f01045ea:	e8 16 bc ff ff       	call   f0100205 <_panic>

	if (e != NULL)
f01045ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01045f3:	0f 84 8a 00 00 00    	je     f0104683 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f01045f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01045fd:	75 14                	jne    f0104613 <remove_from_queue+0x46>
f01045ff:	83 ec 04             	sub    $0x4,%esp
f0104602:	68 3f 5e 13 f0       	push   $0xf0135e3f
f0104607:	6a 45                	push   $0x45
f0104609:	68 0b 5e 13 f0       	push   $0xf0135e0b
f010460e:	e8 f2 bb ff ff       	call   f0100205 <_panic>
f0104613:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104616:	8b 40 44             	mov    0x44(%eax),%eax
f0104619:	85 c0                	test   %eax,%eax
f010461b:	74 11                	je     f010462e <remove_from_queue+0x61>
f010461d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104620:	8b 40 44             	mov    0x44(%eax),%eax
f0104623:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104626:	8b 52 48             	mov    0x48(%edx),%edx
f0104629:	89 50 48             	mov    %edx,0x48(%eax)
f010462c:	eb 0c                	jmp    f010463a <remove_from_queue+0x6d>
f010462e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104631:	8b 50 48             	mov    0x48(%eax),%edx
f0104634:	8b 45 08             	mov    0x8(%ebp),%eax
f0104637:	89 50 04             	mov    %edx,0x4(%eax)
f010463a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010463d:	8b 40 48             	mov    0x48(%eax),%eax
f0104640:	85 c0                	test   %eax,%eax
f0104642:	74 11                	je     f0104655 <remove_from_queue+0x88>
f0104644:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104647:	8b 40 48             	mov    0x48(%eax),%eax
f010464a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010464d:	8b 52 44             	mov    0x44(%edx),%edx
f0104650:	89 50 44             	mov    %edx,0x44(%eax)
f0104653:	eb 0b                	jmp    f0104660 <remove_from_queue+0x93>
f0104655:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104658:	8b 50 44             	mov    0x44(%eax),%edx
f010465b:	8b 45 08             	mov    0x8(%ebp),%eax
f010465e:	89 10                	mov    %edx,(%eax)
f0104660:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104663:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010466a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010466d:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104674:	8b 45 08             	mov    0x8(%ebp),%eax
f0104677:	8b 40 0c             	mov    0xc(%eax),%eax
f010467a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010467d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104680:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104683:	90                   	nop
f0104684:	c9                   	leave  
f0104685:	c3                   	ret    

f0104686 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104686:	55                   	push   %ebp
f0104687:	89 e5                	mov    %esp,%ebp
f0104689:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f010468c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104690:	75 07                	jne    f0104699 <find_env_in_queue+0x13>
f0104692:	b8 00 00 00 00       	mov    $0x0,%eax
f0104697:	eb 58                	jmp    f01046f1 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f0104699:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01046a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01046a3:	8b 00                	mov    (%eax),%eax
f01046a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046a8:	eb 19                	jmp    f01046c3 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f01046aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046ad:	8b 40 4c             	mov    0x4c(%eax),%eax
f01046b0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01046b3:	75 05                	jne    f01046ba <find_env_in_queue+0x34>
		{
			return ptr_env;
f01046b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046b8:	eb 37                	jmp    f01046f1 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01046ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01046bd:	8b 40 08             	mov    0x8(%eax),%eax
f01046c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01046c3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046c7:	74 08                	je     f01046d1 <find_env_in_queue+0x4b>
f01046c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01046cc:	8b 40 44             	mov    0x44(%eax),%eax
f01046cf:	eb 05                	jmp    f01046d6 <find_env_in_queue+0x50>
f01046d1:	b8 00 00 00 00       	mov    $0x0,%eax
f01046d6:	8b 55 08             	mov    0x8(%ebp),%edx
f01046d9:	89 42 08             	mov    %eax,0x8(%edx)
f01046dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01046df:	8b 40 08             	mov    0x8(%eax),%eax
f01046e2:	85 c0                	test   %eax,%eax
f01046e4:	75 c4                	jne    f01046aa <find_env_in_queue+0x24>
f01046e6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01046ea:	75 be                	jne    f01046aa <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01046ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01046f1:	c9                   	leave  
f01046f2:	c3                   	ret    

f01046f3 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f01046f3:	55                   	push   %ebp
f01046f4:	89 e5                	mov    %esp,%ebp
f01046f6:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f01046f9:	83 ec 04             	sub    $0x4,%esp
f01046fc:	68 60 5e 13 f0       	push   $0xf0135e60
f0104701:	6a 5e                	push   $0x5e
f0104703:	68 0b 5e 13 f0       	push   $0xf0135e0b
f0104708:	e8 f8 ba ff ff       	call   f0100205 <_panic>

f010470d <fos_scheduler>:

}

void
fos_scheduler(void)
{
f010470d:	55                   	push   %ebp
f010470e:	89 e5                	mov    %esp,%ebp
f0104710:	83 ec 18             	sub    $0x18,%esp
	chk1();
f0104713:	e8 ac c5 02 00       	call   f0130cc4 <chk1>
	scheduler_status = SCH_STARTED;
f0104718:	c7 05 54 f7 85 f0 01 	movl   $0x1,0xf085f754
f010471f:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104722:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0104729:	a1 48 f7 85 f0       	mov    0xf085f748,%eax
f010472e:	85 c0                	test   %eax,%eax
f0104730:	75 4d                	jne    f010477f <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104732:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0104737:	85 c0                	test   %eax,%eax
f0104739:	74 18                	je     f0104753 <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f010473b:	8b 15 f4 ed 85 f0    	mov    0xf085edf4,%edx
f0104741:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104746:	83 ec 08             	sub    $0x8,%esp
f0104749:	52                   	push   %edx
f010474a:	50                   	push   %eax
f010474b:	e8 34 fd ff ff       	call   f0104484 <enqueue>
f0104750:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0104753:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104758:	83 ec 0c             	sub    $0xc,%esp
f010475b:	50                   	push   %eax
f010475c:	e8 b4 fd ff ff       	call   f0104515 <dequeue>
f0104761:	83 c4 10             	add    $0x10,%esp
f0104764:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f0104767:	a1 28 f7 85 f0       	mov    0xf085f728,%eax
f010476c:	8a 00                	mov    (%eax),%al
f010476e:	0f b6 c0             	movzbl %al,%eax
f0104771:	83 ec 0c             	sub    $0xc,%esp
f0104774:	50                   	push   %eax
f0104775:	e8 e7 fa ff ff       	call   f0104261 <kclock_set_quantum>
f010477a:	83 c4 10             	add    $0x10,%esp
f010477d:	eb 12                	jmp    f0104791 <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f010477f:	a1 48 f7 85 f0       	mov    0xf085f748,%eax
f0104784:	83 f8 01             	cmp    $0x1,%eax
f0104787:	75 08                	jne    f0104791 <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f0104789:	e8 65 ff ff ff       	call   f01046f3 <fos_scheduler_MLFQ>
f010478e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0104791:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0104796:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f0104799:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010479c:	a3 f4 ed 85 f0       	mov    %eax,0xf085edf4
	chk2(next_env) ;
f01047a1:	83 ec 0c             	sub    $0xc,%esp
f01047a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01047a7:	e8 55 c5 02 00       	call   f0130d01 <chk2>
f01047ac:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01047af:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01047b2:	a3 f4 ed 85 f0       	mov    %eax,0xf085edf4

	//sched_print_all();

	if(next_env != NULL)
f01047b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01047bb:	74 0b                	je     f01047c8 <fos_scheduler+0xbb>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f01047bd:	83 ec 0c             	sub    $0xc,%esp
f01047c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01047c3:	e8 b8 58 00 00       	call   f010a080 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01047c8:	c7 05 f4 ed 85 f0 00 	movl   $0x0,0xf085edf4
f01047cf:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01047d2:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f01047d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01047da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01047dd:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01047e0:	c7 05 54 f7 85 f0 00 	movl   $0x0,0xf085f754
f01047e7:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01047ea:	83 ec 0c             	sub    $0xc,%esp
f01047ed:	6a 00                	push   $0x0
f01047ef:	e8 40 c5 ff ff       	call   f0100d34 <run_command_prompt>
f01047f4:	83 c4 10             	add    $0x10,%esp
f01047f7:	eb f1                	jmp    f01047ea <fos_scheduler+0xdd>

f01047f9 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01047f9:	55                   	push   %ebp
f01047fa:	89 e5                	mov    %esp,%ebp
f01047fc:	83 ec 18             	sub    $0x18,%esp
f01047ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0104802:	88 45 f4             	mov    %al,-0xc(%ebp)


	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f0104805:	c6 05 7c f7 85 f0 01 	movb   $0x1,0xf085f77c
#if USE_KHEAP
	sched_delete_ready_queues();
f010480c:	e8 e5 00 00 00       	call   f01048f6 <sched_delete_ready_queues>
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f0104811:	83 ec 0c             	sub    $0xc,%esp
f0104814:	6a 10                	push   $0x10
f0104816:	e8 49 33 00 00       	call   f0107b64 <kmalloc>
f010481b:	83 c4 10             	add    $0x10,%esp
f010481e:	a3 e4 f6 85 f0       	mov    %eax,0xf085f6e4
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f0104823:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0104828:	0f b6 c0             	movzbl %al,%eax
f010482b:	83 ec 0c             	sub    $0xc,%esp
f010482e:	50                   	push   %eax
f010482f:	e8 30 33 00 00       	call   f0107b64 <kmalloc>
f0104834:	83 c4 10             	add    $0x10,%esp
f0104837:	a3 28 f7 85 f0       	mov    %eax,0xf085f728
#endif
	quantums[0] = quantum;
f010483c:	a1 28 f7 85 f0       	mov    0xf085f728,%eax
f0104841:	8a 55 f4             	mov    -0xc(%ebp),%dl
f0104844:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f0104846:	a1 28 f7 85 f0       	mov    0xf085f728,%eax
f010484b:	8a 00                	mov    (%eax),%al
f010484d:	0f b6 c0             	movzbl %al,%eax
f0104850:	83 ec 0c             	sub    $0xc,%esp
f0104853:	50                   	push   %eax
f0104854:	e8 08 fa ff ff       	call   f0104261 <kclock_set_quantum>
f0104859:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f010485c:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104861:	83 ec 0c             	sub    $0xc,%esp
f0104864:	50                   	push   %eax
f0104865:	e8 d9 fb ff ff       	call   f0104443 <init_queue>
f010486a:	83 c4 10             	add    $0x10,%esp

	//=========================================
	//DON'T CHANGE THESE LINES=================
	scheduler_status = SCH_STOPPED;
f010486d:	c7 05 54 f7 85 f0 00 	movl   $0x0,0xf085f754
f0104874:	00 00 00 
	scheduler_method = SCH_RR;
f0104877:	c7 05 48 f7 85 f0 00 	movl   $0x0,0xf085f748
f010487e:	00 00 00 
	//=========================================
	//=========================================
}
f0104881:	90                   	nop
f0104882:	c9                   	leave  
f0104883:	c3                   	ret    

f0104884 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0104884:	55                   	push   %ebp
f0104885:	89 e5                	mov    %esp,%ebp
f0104887:	83 ec 18             	sub    $0x18,%esp
f010488a:	8b 45 08             	mov    0x8(%ebp),%eax
f010488d:	88 45 f4             	mov    %al,-0xc(%ebp)
#if USE_KHEAP
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0104890:	e8 61 00 00 00       	call   f01048f6 <sched_delete_ready_queues>

	//=========================================
	//=========================================
	// your code is here, remove the panic and write your code
	panic("sched_init_MLFQ() is not implemented yet...!!");
f0104895:	83 ec 04             	sub    $0x4,%esp
f0104898:	68 94 5e 13 f0       	push   $0xf0135e94
f010489d:	68 d1 00 00 00       	push   $0xd1
f01048a2:	68 0b 5e 13 f0       	push   $0xf0135e0b
f01048a7:	e8 59 b9 ff ff       	call   f0100205 <_panic>

f01048ac <sched_init>:

}


void sched_init()
{
f01048ac:	55                   	push   %ebp
f01048ad:	89 e5                	mov    %esp,%ebp
f01048af:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01048b2:	c7 05 04 f7 85 f0 00 	movl   $0x0,0xf085f704
f01048b9:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01048bc:	83 ec 0c             	sub    $0xc,%esp
f01048bf:	6a 0a                	push   $0xa
f01048c1:	e8 33 ff ff ff       	call   f01047f9 <sched_init_RR>
f01048c6:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01048c9:	83 ec 0c             	sub    $0xc,%esp
f01048cc:	68 38 f7 85 f0       	push   $0xf085f738
f01048d1:	e8 6d fb ff ff       	call   f0104443 <init_queue>
f01048d6:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01048d9:	83 ec 0c             	sub    $0xc,%esp
f01048dc:	68 f0 f6 85 f0       	push   $0xf085f6f0
f01048e1:	e8 5d fb ff ff       	call   f0104443 <init_queue>
f01048e6:	83 c4 10             	add    $0x10,%esp
	scheduler_status = SCH_STOPPED;
f01048e9:	c7 05 54 f7 85 f0 00 	movl   $0x0,0xf085f754
f01048f0:	00 00 00 
}
f01048f3:	90                   	nop
f01048f4:	c9                   	leave  
f01048f5:	c3                   	ret    

f01048f6 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f01048f6:	55                   	push   %ebp
f01048f7:	89 e5                	mov    %esp,%ebp
f01048f9:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	if (env_ready_queues != NULL)
f01048fc:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104901:	85 c0                	test   %eax,%eax
f0104903:	74 11                	je     f0104916 <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0104905:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010490a:	83 ec 0c             	sub    $0xc,%esp
f010490d:	50                   	push   %eax
f010490e:	e8 59 33 00 00       	call   f0107c6c <kfree>
f0104913:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f0104916:	a1 28 f7 85 f0       	mov    0xf085f728,%eax
f010491b:	85 c0                	test   %eax,%eax
f010491d:	74 11                	je     f0104930 <sched_delete_ready_queues+0x3a>
		kfree(quantums);
f010491f:	a1 28 f7 85 f0       	mov    0xf085f728,%eax
f0104924:	83 ec 0c             	sub    $0xc,%esp
f0104927:	50                   	push   %eax
f0104928:	e8 3f 33 00 00       	call   f0107c6c <kfree>
f010492d:	83 c4 10             	add    $0x10,%esp
#endif
}
f0104930:	90                   	nop
f0104931:	c9                   	leave  
f0104932:	c3                   	ret    

f0104933 <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f0104933:	55                   	push   %ebp
f0104934:	89 e5                	mov    %esp,%ebp
f0104936:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104939:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010493d:	74 1e                	je     f010495d <sched_insert_ready+0x2a>
	{
		env->env_status = ENV_READY ;
f010493f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104942:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0104949:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010494e:	83 ec 08             	sub    $0x8,%esp
f0104951:	ff 75 08             	pushl  0x8(%ebp)
f0104954:	50                   	push   %eax
f0104955:	e8 2a fb ff ff       	call   f0104484 <enqueue>
f010495a:	83 c4 10             	add    $0x10,%esp
	}
}
f010495d:	90                   	nop
f010495e:	c9                   	leave  
f010495f:	c3                   	ret    

f0104960 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0104960:	55                   	push   %ebp
f0104961:	89 e5                	mov    %esp,%ebp
f0104963:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f0104966:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010496a:	0f 84 fe 00 00 00    	je     f0104a6e <sched_remove_ready+0x10e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104970:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104977:	e9 e1 00 00 00       	jmp    f0104a5d <sched_remove_ready+0xfd>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f010497c:	8b 45 08             	mov    0x8(%ebp),%eax
f010497f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104982:	89 c2                	mov    %eax,%edx
f0104984:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104989:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010498c:	c1 e1 04             	shl    $0x4,%ecx
f010498f:	01 c8                	add    %ecx,%eax
f0104991:	52                   	push   %edx
f0104992:	50                   	push   %eax
f0104993:	e8 ee fc ff ff       	call   f0104686 <find_env_in_queue>
f0104998:	83 c4 08             	add    $0x8,%esp
f010499b:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f010499e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01049a2:	0f 84 b2 00 00 00    	je     f0104a5a <sched_remove_ready+0xfa>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01049a8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049ac:	75 17                	jne    f01049c5 <sched_remove_ready+0x65>
f01049ae:	83 ec 04             	sub    $0x4,%esp
f01049b1:	68 3f 5e 13 f0       	push   $0xf0135e3f
f01049b6:	68 0b 01 00 00       	push   $0x10b
f01049bb:	68 0b 5e 13 f0       	push   $0xf0135e0b
f01049c0:	e8 40 b8 ff ff       	call   f0100205 <_panic>
f01049c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c8:	8b 40 44             	mov    0x44(%eax),%eax
f01049cb:	85 c0                	test   %eax,%eax
f01049cd:	74 11                	je     f01049e0 <sched_remove_ready+0x80>
f01049cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01049d2:	8b 40 44             	mov    0x44(%eax),%eax
f01049d5:	8b 55 08             	mov    0x8(%ebp),%edx
f01049d8:	8b 52 48             	mov    0x48(%edx),%edx
f01049db:	89 50 48             	mov    %edx,0x48(%eax)
f01049de:	eb 16                	jmp    f01049f6 <sched_remove_ready+0x96>
f01049e0:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01049e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01049e8:	c1 e2 04             	shl    $0x4,%edx
f01049eb:	01 c2                	add    %eax,%edx
f01049ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f0:	8b 40 48             	mov    0x48(%eax),%eax
f01049f3:	89 42 04             	mov    %eax,0x4(%edx)
f01049f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f9:	8b 40 48             	mov    0x48(%eax),%eax
f01049fc:	85 c0                	test   %eax,%eax
f01049fe:	74 11                	je     f0104a11 <sched_remove_ready+0xb1>
f0104a00:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a03:	8b 40 48             	mov    0x48(%eax),%eax
f0104a06:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a09:	8b 52 44             	mov    0x44(%edx),%edx
f0104a0c:	89 50 44             	mov    %edx,0x44(%eax)
f0104a0f:	eb 15                	jmp    f0104a26 <sched_remove_ready+0xc6>
f0104a11:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104a16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a19:	c1 e2 04             	shl    $0x4,%edx
f0104a1c:	01 c2                	add    %eax,%edx
f0104a1e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a21:	8b 40 44             	mov    0x44(%eax),%eax
f0104a24:	89 02                	mov    %eax,(%edx)
f0104a26:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a29:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a30:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a33:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a3a:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104a3f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a42:	c1 e2 04             	shl    $0x4,%edx
f0104a45:	01 d0                	add    %edx,%eax
f0104a47:	8b 50 0c             	mov    0xc(%eax),%edx
f0104a4a:	4a                   	dec    %edx
f0104a4b:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0104a4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a51:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0104a58:	eb 14                	jmp    f0104a6e <sched_remove_ready+0x10e>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104a5a:	ff 45 f4             	incl   -0xc(%ebp)
f0104a5d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0104a62:	0f b6 c0             	movzbl %al,%eax
f0104a65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a68:	0f 8f 0e ff ff ff    	jg     f010497c <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0104a6e:	c9                   	leave  
f0104a6f:	c3                   	ret    

f0104a70 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0104a70:	55                   	push   %ebp
f0104a71:	89 e5                	mov    %esp,%ebp
f0104a73:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a76:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a7a:	74 1d                	je     f0104a99 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a7f:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104a86:	83 ec 08             	sub    $0x8,%esp
f0104a89:	ff 75 08             	pushl  0x8(%ebp)
f0104a8c:	68 38 f7 85 f0       	push   $0xf085f738
f0104a91:	e8 ee f9 ff ff       	call   f0104484 <enqueue>
f0104a96:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a99:	90                   	nop
f0104a9a:	c9                   	leave  
f0104a9b:	c3                   	ret    

f0104a9c <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104a9c:	55                   	push   %ebp
f0104a9d:	89 e5                	mov    %esp,%ebp
f0104a9f:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104aa2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104aa6:	0f 84 92 00 00 00    	je     f0104b3e <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104aac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104ab0:	75 17                	jne    f0104ac9 <sched_remove_new+0x2d>
f0104ab2:	83 ec 04             	sub    $0x4,%esp
f0104ab5:	68 3f 5e 13 f0       	push   $0xf0135e3f
f0104aba:	68 1f 01 00 00       	push   $0x11f
f0104abf:	68 0b 5e 13 f0       	push   $0xf0135e0b
f0104ac4:	e8 3c b7 ff ff       	call   f0100205 <_panic>
f0104ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104acc:	8b 40 44             	mov    0x44(%eax),%eax
f0104acf:	85 c0                	test   %eax,%eax
f0104ad1:	74 11                	je     f0104ae4 <sched_remove_new+0x48>
f0104ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ad6:	8b 40 44             	mov    0x44(%eax),%eax
f0104ad9:	8b 55 08             	mov    0x8(%ebp),%edx
f0104adc:	8b 52 48             	mov    0x48(%edx),%edx
f0104adf:	89 50 48             	mov    %edx,0x48(%eax)
f0104ae2:	eb 0b                	jmp    f0104aef <sched_remove_new+0x53>
f0104ae4:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ae7:	8b 40 48             	mov    0x48(%eax),%eax
f0104aea:	a3 3c f7 85 f0       	mov    %eax,0xf085f73c
f0104aef:	8b 45 08             	mov    0x8(%ebp),%eax
f0104af2:	8b 40 48             	mov    0x48(%eax),%eax
f0104af5:	85 c0                	test   %eax,%eax
f0104af7:	74 11                	je     f0104b0a <sched_remove_new+0x6e>
f0104af9:	8b 45 08             	mov    0x8(%ebp),%eax
f0104afc:	8b 40 48             	mov    0x48(%eax),%eax
f0104aff:	8b 55 08             	mov    0x8(%ebp),%edx
f0104b02:	8b 52 44             	mov    0x44(%edx),%edx
f0104b05:	89 50 44             	mov    %edx,0x44(%eax)
f0104b08:	eb 0b                	jmp    f0104b15 <sched_remove_new+0x79>
f0104b0a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b0d:	8b 40 44             	mov    0x44(%eax),%eax
f0104b10:	a3 38 f7 85 f0       	mov    %eax,0xf085f738
f0104b15:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b18:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104b1f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b22:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104b29:	a1 44 f7 85 f0       	mov    0xf085f744,%eax
f0104b2e:	48                   	dec    %eax
f0104b2f:	a3 44 f7 85 f0       	mov    %eax,0xf085f744
		env->env_status = ENV_UNKNOWN;
f0104b34:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b37:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104b3e:	90                   	nop
f0104b3f:	c9                   	leave  
f0104b40:	c3                   	ret    

f0104b41 <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f0104b41:	55                   	push   %ebp
f0104b42:	89 e5                	mov    %esp,%ebp
f0104b44:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b4b:	74 34                	je     f0104b81 <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f0104b4d:	e8 c8 98 00 00       	call   f010e41a <isBufferingEnabled>
f0104b52:	84 c0                	test   %al,%al
f0104b54:	74 0e                	je     f0104b64 <sched_insert_exit+0x23>
f0104b56:	83 ec 0c             	sub    $0xc,%esp
f0104b59:	ff 75 08             	pushl  0x8(%ebp)
f0104b5c:	e8 8d 69 00 00       	call   f010b4ee <cleanup_buffers>
f0104b61:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0104b64:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b67:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f0104b6e:	83 ec 08             	sub    $0x8,%esp
f0104b71:	ff 75 08             	pushl  0x8(%ebp)
f0104b74:	68 f0 f6 85 f0       	push   $0xf085f6f0
f0104b79:	e8 06 f9 ff ff       	call   f0104484 <enqueue>
f0104b7e:	83 c4 10             	add    $0x10,%esp
	}
}
f0104b81:	90                   	nop
f0104b82:	c9                   	leave  
f0104b83:	c3                   	ret    

f0104b84 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104b84:	55                   	push   %ebp
f0104b85:	89 e5                	mov    %esp,%ebp
f0104b87:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104b8a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b8e:	0f 84 92 00 00 00    	je     f0104c26 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104b94:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104b98:	75 17                	jne    f0104bb1 <sched_remove_exit+0x2d>
f0104b9a:	83 ec 04             	sub    $0x4,%esp
f0104b9d:	68 3f 5e 13 f0       	push   $0xf0135e3f
f0104ba2:	68 31 01 00 00       	push   $0x131
f0104ba7:	68 0b 5e 13 f0       	push   $0xf0135e0b
f0104bac:	e8 54 b6 ff ff       	call   f0100205 <_panic>
f0104bb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bb4:	8b 40 44             	mov    0x44(%eax),%eax
f0104bb7:	85 c0                	test   %eax,%eax
f0104bb9:	74 11                	je     f0104bcc <sched_remove_exit+0x48>
f0104bbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bbe:	8b 40 44             	mov    0x44(%eax),%eax
f0104bc1:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bc4:	8b 52 48             	mov    0x48(%edx),%edx
f0104bc7:	89 50 48             	mov    %edx,0x48(%eax)
f0104bca:	eb 0b                	jmp    f0104bd7 <sched_remove_exit+0x53>
f0104bcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bcf:	8b 40 48             	mov    0x48(%eax),%eax
f0104bd2:	a3 f4 f6 85 f0       	mov    %eax,0xf085f6f4
f0104bd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bda:	8b 40 48             	mov    0x48(%eax),%eax
f0104bdd:	85 c0                	test   %eax,%eax
f0104bdf:	74 11                	je     f0104bf2 <sched_remove_exit+0x6e>
f0104be1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104be4:	8b 40 48             	mov    0x48(%eax),%eax
f0104be7:	8b 55 08             	mov    0x8(%ebp),%edx
f0104bea:	8b 52 44             	mov    0x44(%edx),%edx
f0104bed:	89 50 44             	mov    %edx,0x44(%eax)
f0104bf0:	eb 0b                	jmp    f0104bfd <sched_remove_exit+0x79>
f0104bf2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bf5:	8b 40 44             	mov    0x44(%eax),%eax
f0104bf8:	a3 f0 f6 85 f0       	mov    %eax,0xf085f6f0
f0104bfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c00:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104c07:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c0a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104c11:	a1 fc f6 85 f0       	mov    0xf085f6fc,%eax
f0104c16:	48                   	dec    %eax
f0104c17:	a3 fc f6 85 f0       	mov    %eax,0xf085f6fc
		env->env_status = ENV_UNKNOWN;
f0104c1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104c1f:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104c26:	90                   	nop
f0104c27:	c9                   	leave  
f0104c28:	c3                   	ret    

f0104c29 <sched_print_all>:

void sched_print_all()
{
f0104c29:	55                   	push   %ebp
f0104c2a:	89 e5                	mov    %esp,%ebp
f0104c2c:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104c2f:	a1 38 f7 85 f0       	mov    0xf085f738,%eax
f0104c34:	85 c0                	test   %eax,%eax
f0104c36:	74 6c                	je     f0104ca4 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104c38:	83 ec 0c             	sub    $0xc,%esp
f0104c3b:	68 c4 5e 13 f0       	push   $0xf0135ec4
f0104c40:	e8 c9 c0 ff ff       	call   f0100d0e <cprintf>
f0104c45:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c48:	a1 38 f7 85 f0       	mov    0xf085f738,%eax
f0104c4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c50:	eb 29                	jmp    f0104c7b <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c52:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c55:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c61:	83 ec 04             	sub    $0x4,%esp
f0104c64:	52                   	push   %edx
f0104c65:	50                   	push   %eax
f0104c66:	68 e6 5e 13 f0       	push   $0xf0135ee6
f0104c6b:	e8 9e c0 ff ff       	call   f0100d0e <cprintf>
f0104c70:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104c73:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f0104c78:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c7f:	74 08                	je     f0104c89 <sched_print_all+0x60>
f0104c81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c84:	8b 40 44             	mov    0x44(%eax),%eax
f0104c87:	eb 05                	jmp    f0104c8e <sched_print_all+0x65>
f0104c89:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c8e:	a3 40 f7 85 f0       	mov    %eax,0xf085f740
f0104c93:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f0104c98:	85 c0                	test   %eax,%eax
f0104c9a:	75 b6                	jne    f0104c52 <sched_print_all+0x29>
f0104c9c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ca0:	75 b0                	jne    f0104c52 <sched_print_all+0x29>
f0104ca2:	eb 10                	jmp    f0104cb4 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104ca4:	83 ec 0c             	sub    $0xc,%esp
f0104ca7:	68 f0 5e 13 f0       	push   $0xf0135ef0
f0104cac:	e8 5d c0 ff ff       	call   f0100d0e <cprintf>
f0104cb1:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104cb4:	83 ec 0c             	sub    $0xc,%esp
f0104cb7:	68 0c 5f 13 f0       	push   $0xf0135f0c
f0104cbc:	e8 4d c0 ff ff       	call   f0100d0e <cprintf>
f0104cc1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104cc4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104ccb:	e9 ca 00 00 00       	jmp    f0104d9a <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104cd0:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104cd5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cd8:	c1 e2 04             	shl    $0x4,%edx
f0104cdb:	01 d0                	add    %edx,%eax
f0104cdd:	8b 00                	mov    (%eax),%eax
f0104cdf:	85 c0                	test   %eax,%eax
f0104ce1:	0f 84 8d 00 00 00    	je     f0104d74 <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104ce7:	83 ec 08             	sub    $0x8,%esp
f0104cea:	ff 75 f0             	pushl  -0x10(%ebp)
f0104ced:	68 40 5f 13 f0       	push   $0xf0135f40
f0104cf2:	e8 17 c0 ff ff       	call   f0100d0e <cprintf>
f0104cf7:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104cfa:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104cff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d02:	c1 e2 04             	shl    $0x4,%edx
f0104d05:	01 d0                	add    %edx,%eax
f0104d07:	8b 00                	mov    (%eax),%eax
f0104d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d0c:	eb 34                	jmp    f0104d42 <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104d0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d11:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104d17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d1a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d1d:	83 ec 04             	sub    $0x4,%esp
f0104d20:	52                   	push   %edx
f0104d21:	50                   	push   %eax
f0104d22:	68 e6 5e 13 f0       	push   $0xf0135ee6
f0104d27:	e8 e2 bf ff ff       	call   f0100d0e <cprintf>
f0104d2c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104d2f:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104d34:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d37:	c1 e2 04             	shl    $0x4,%edx
f0104d3a:	01 d0                	add    %edx,%eax
f0104d3c:	8b 40 08             	mov    0x8(%eax),%eax
f0104d3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d42:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104d47:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104d4a:	c1 e2 04             	shl    $0x4,%edx
f0104d4d:	01 d0                	add    %edx,%eax
f0104d4f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d53:	74 08                	je     f0104d5d <sched_print_all+0x134>
f0104d55:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d58:	8b 52 44             	mov    0x44(%edx),%edx
f0104d5b:	eb 05                	jmp    f0104d62 <sched_print_all+0x139>
f0104d5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0104d62:	89 50 08             	mov    %edx,0x8(%eax)
f0104d65:	8b 40 08             	mov    0x8(%eax),%eax
f0104d68:	85 c0                	test   %eax,%eax
f0104d6a:	75 a2                	jne    f0104d0e <sched_print_all+0xe5>
f0104d6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d70:	75 9c                	jne    f0104d0e <sched_print_all+0xe5>
f0104d72:	eb 13                	jmp    f0104d87 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104d74:	83 ec 08             	sub    $0x8,%esp
f0104d77:	ff 75 f0             	pushl  -0x10(%ebp)
f0104d7a:	68 68 5f 13 f0       	push   $0xf0135f68
f0104d7f:	e8 8a bf ff ff       	call   f0100d0e <cprintf>
f0104d84:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104d87:	83 ec 0c             	sub    $0xc,%esp
f0104d8a:	68 0c 5f 13 f0       	push   $0xf0135f0c
f0104d8f:	e8 7a bf ff ff       	call   f0100d0e <cprintf>
f0104d94:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104d97:	ff 45 f0             	incl   -0x10(%ebp)
f0104d9a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0104d9f:	0f b6 c0             	movzbl %al,%eax
f0104da2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104da5:	0f 8f 25 ff ff ff    	jg     f0104cd0 <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104dab:	a1 f0 f6 85 f0       	mov    0xf085f6f0,%eax
f0104db0:	85 c0                	test   %eax,%eax
f0104db2:	74 6c                	je     f0104e20 <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104db4:	83 ec 0c             	sub    $0xc,%esp
f0104db7:	68 8c 5f 13 f0       	push   $0xf0135f8c
f0104dbc:	e8 4d bf ff ff       	call   f0100d0e <cprintf>
f0104dc1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104dc4:	a1 f0 f6 85 f0       	mov    0xf085f6f0,%eax
f0104dc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dcc:	eb 29                	jmp    f0104df7 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104dce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dd1:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104dd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dda:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ddd:	83 ec 04             	sub    $0x4,%esp
f0104de0:	52                   	push   %edx
f0104de1:	50                   	push   %eax
f0104de2:	68 e6 5e 13 f0       	push   $0xf0135ee6
f0104de7:	e8 22 bf ff ff       	call   f0100d0e <cprintf>
f0104dec:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104def:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f0104df4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104df7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dfb:	74 08                	je     f0104e05 <sched_print_all+0x1dc>
f0104dfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e00:	8b 40 44             	mov    0x44(%eax),%eax
f0104e03:	eb 05                	jmp    f0104e0a <sched_print_all+0x1e1>
f0104e05:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e0a:	a3 f8 f6 85 f0       	mov    %eax,0xf085f6f8
f0104e0f:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f0104e14:	85 c0                	test   %eax,%eax
f0104e16:	75 b6                	jne    f0104dce <sched_print_all+0x1a5>
f0104e18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e1c:	75 b0                	jne    f0104dce <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104e1e:	eb 10                	jmp    f0104e30 <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104e20:	83 ec 0c             	sub    $0xc,%esp
f0104e23:	68 ae 5f 13 f0       	push   $0xf0135fae
f0104e28:	e8 e1 be ff ff       	call   f0100d0e <cprintf>
f0104e2d:	83 c4 10             	add    $0x10,%esp
	}
}
f0104e30:	90                   	nop
f0104e31:	c9                   	leave  
f0104e32:	c3                   	ret    

f0104e33 <sched_run_all>:

void sched_run_all()
{
f0104e33:	55                   	push   %ebp
f0104e34:	89 e5                	mov    %esp,%ebp
f0104e36:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104e39:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e40:	a1 38 f7 85 f0       	mov    0xf085f738,%eax
f0104e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e48:	eb 24                	jmp    f0104e6e <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104e4a:	83 ec 0c             	sub    $0xc,%esp
f0104e4d:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e50:	e8 47 fc ff ff       	call   f0104a9c <sched_remove_new>
f0104e55:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104e58:	83 ec 0c             	sub    $0xc,%esp
f0104e5b:	ff 75 f4             	pushl  -0xc(%ebp)
f0104e5e:	e8 d0 fa ff ff       	call   f0104933 <sched_insert_ready>
f0104e63:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104e66:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f0104e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e72:	74 08                	je     f0104e7c <sched_run_all+0x49>
f0104e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e77:	8b 40 44             	mov    0x44(%eax),%eax
f0104e7a:	eb 05                	jmp    f0104e81 <sched_run_all+0x4e>
f0104e7c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104e81:	a3 40 f7 85 f0       	mov    %eax,0xf085f740
f0104e86:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f0104e8b:	85 c0                	test   %eax,%eax
f0104e8d:	75 bb                	jne    f0104e4a <sched_run_all+0x17>
f0104e8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e93:	75 b5                	jne    f0104e4a <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104e95:	a1 54 f7 85 f0       	mov    0xf085f754,%eax
f0104e9a:	85 c0                	test   %eax,%eax
f0104e9c:	75 05                	jne    f0104ea3 <sched_run_all+0x70>
		fos_scheduler();
f0104e9e:	e8 6a f8 ff ff       	call   f010470d <fos_scheduler>
}
f0104ea3:	90                   	nop
f0104ea4:	c9                   	leave  
f0104ea5:	c3                   	ret    

f0104ea6 <sched_kill_all>:

void sched_kill_all()
{
f0104ea6:	55                   	push   %ebp
f0104ea7:	89 e5                	mov    %esp,%ebp
f0104ea9:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104eac:	a1 38 f7 85 f0       	mov    0xf085f738,%eax
f0104eb1:	85 c0                	test   %eax,%eax
f0104eb3:	0f 84 98 00 00 00    	je     f0104f51 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104eb9:	83 ec 0c             	sub    $0xc,%esp
f0104ebc:	68 cc 5f 13 f0       	push   $0xf0135fcc
f0104ec1:	e8 48 be ff ff       	call   f0100d0e <cprintf>
f0104ec6:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ec9:	a1 38 f7 85 f0       	mov    0xf085f738,%eax
f0104ece:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104ed1:	eb 55                	jmp    f0104f28 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ed6:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104edc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104edf:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ee2:	83 ec 04             	sub    $0x4,%esp
f0104ee5:	52                   	push   %edx
f0104ee6:	50                   	push   %eax
f0104ee7:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0104eec:	e8 1d be ff ff       	call   f0100d0e <cprintf>
f0104ef1:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104ef4:	83 ec 0c             	sub    $0xc,%esp
f0104ef7:	ff 75 f4             	pushl  -0xc(%ebp)
f0104efa:	e8 9d fb ff ff       	call   f0104a9c <sched_remove_new>
f0104eff:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104f02:	83 ec 0c             	sub    $0xc,%esp
f0104f05:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f08:	e8 c7 51 00 00       	call   f010a0d4 <env_free>
f0104f0d:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104f10:	83 ec 0c             	sub    $0xc,%esp
f0104f13:	68 0b 60 13 f0       	push   $0xf013600b
f0104f18:	e8 f1 bd ff ff       	call   f0100d0e <cprintf>
f0104f1d:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104f20:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f0104f25:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f2c:	74 08                	je     f0104f36 <sched_kill_all+0x90>
f0104f2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f31:	8b 40 44             	mov    0x44(%eax),%eax
f0104f34:	eb 05                	jmp    f0104f3b <sched_kill_all+0x95>
f0104f36:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f3b:	a3 40 f7 85 f0       	mov    %eax,0xf085f740
f0104f40:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f0104f45:	85 c0                	test   %eax,%eax
f0104f47:	75 8a                	jne    f0104ed3 <sched_kill_all+0x2d>
f0104f49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f4d:	75 84                	jne    f0104ed3 <sched_kill_all+0x2d>
f0104f4f:	eb 10                	jmp    f0104f61 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104f51:	83 ec 0c             	sub    $0xc,%esp
f0104f54:	68 11 60 13 f0       	push   $0xf0136011
f0104f59:	e8 b0 bd ff ff       	call   f0100d0e <cprintf>
f0104f5e:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104f61:	83 ec 0c             	sub    $0xc,%esp
f0104f64:	68 0c 5f 13 f0       	push   $0xf0135f0c
f0104f69:	e8 a0 bd ff ff       	call   f0100d0e <cprintf>
f0104f6e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104f71:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104f78:	e9 99 01 00 00       	jmp    f0105116 <sched_kill_all+0x270>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104f7d:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104f82:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f85:	c1 e2 04             	shl    $0x4,%edx
f0104f88:	01 d0                	add    %edx,%eax
f0104f8a:	8b 00                	mov    (%eax),%eax
f0104f8c:	85 c0                	test   %eax,%eax
f0104f8e:	0f 84 5c 01 00 00    	je     f01050f0 <sched_kill_all+0x24a>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104f94:	83 ec 08             	sub    $0x8,%esp
f0104f97:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f9a:	68 2c 60 13 f0       	push   $0xf013602c
f0104f9f:	e8 6a bd ff ff       	call   f0100d0e <cprintf>
f0104fa4:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104fa7:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0104fac:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104faf:	c1 e2 04             	shl    $0x4,%edx
f0104fb2:	01 d0                	add    %edx,%eax
f0104fb4:	8b 00                	mov    (%eax),%eax
f0104fb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fb9:	e9 f8 00 00 00       	jmp    f01050b6 <sched_kill_all+0x210>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fc1:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0104fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fca:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104fcd:	83 ec 04             	sub    $0x4,%esp
f0104fd0:	52                   	push   %edx
f0104fd1:	50                   	push   %eax
f0104fd2:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0104fd7:	e8 32 bd ff ff       	call   f0100d0e <cprintf>
f0104fdc:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104fdf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104fe3:	75 17                	jne    f0104ffc <sched_kill_all+0x156>
f0104fe5:	83 ec 04             	sub    $0x4,%esp
f0104fe8:	68 3f 5e 13 f0       	push   $0xf0135e3f
f0104fed:	68 8c 01 00 00       	push   $0x18c
f0104ff2:	68 0b 5e 13 f0       	push   $0xf0135e0b
f0104ff7:	e8 09 b2 ff ff       	call   f0100205 <_panic>
f0104ffc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fff:	8b 40 44             	mov    0x44(%eax),%eax
f0105002:	85 c0                	test   %eax,%eax
f0105004:	74 11                	je     f0105017 <sched_kill_all+0x171>
f0105006:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105009:	8b 40 44             	mov    0x44(%eax),%eax
f010500c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010500f:	8b 52 48             	mov    0x48(%edx),%edx
f0105012:	89 50 48             	mov    %edx,0x48(%eax)
f0105015:	eb 16                	jmp    f010502d <sched_kill_all+0x187>
f0105017:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010501c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010501f:	c1 e2 04             	shl    $0x4,%edx
f0105022:	01 c2                	add    %eax,%edx
f0105024:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105027:	8b 40 48             	mov    0x48(%eax),%eax
f010502a:	89 42 04             	mov    %eax,0x4(%edx)
f010502d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105030:	8b 40 48             	mov    0x48(%eax),%eax
f0105033:	85 c0                	test   %eax,%eax
f0105035:	74 11                	je     f0105048 <sched_kill_all+0x1a2>
f0105037:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010503a:	8b 40 48             	mov    0x48(%eax),%eax
f010503d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105040:	8b 52 44             	mov    0x44(%edx),%edx
f0105043:	89 50 44             	mov    %edx,0x44(%eax)
f0105046:	eb 15                	jmp    f010505d <sched_kill_all+0x1b7>
f0105048:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010504d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105050:	c1 e2 04             	shl    $0x4,%edx
f0105053:	01 c2                	add    %eax,%edx
f0105055:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105058:	8b 40 44             	mov    0x44(%eax),%eax
f010505b:	89 02                	mov    %eax,(%edx)
f010505d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105060:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506a:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105071:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0105076:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105079:	c1 e2 04             	shl    $0x4,%edx
f010507c:	01 d0                	add    %edx,%eax
f010507e:	8b 50 0c             	mov    0xc(%eax),%edx
f0105081:	4a                   	dec    %edx
f0105082:	89 50 0c             	mov    %edx,0xc(%eax)
				env_free(ptr_env);
f0105085:	83 ec 0c             	sub    $0xc,%esp
f0105088:	ff 75 f4             	pushl  -0xc(%ebp)
f010508b:	e8 44 50 00 00       	call   f010a0d4 <env_free>
f0105090:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105093:	83 ec 0c             	sub    $0xc,%esp
f0105096:	68 0b 60 13 f0       	push   $0xf013600b
f010509b:	e8 6e bc ff ff       	call   f0100d0e <cprintf>
f01050a0:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01050a3:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01050a8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050ab:	c1 e2 04             	shl    $0x4,%edx
f01050ae:	01 d0                	add    %edx,%eax
f01050b0:	8b 40 08             	mov    0x8(%eax),%eax
f01050b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050b6:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01050bb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01050be:	c1 e2 04             	shl    $0x4,%edx
f01050c1:	01 d0                	add    %edx,%eax
f01050c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050c7:	74 08                	je     f01050d1 <sched_kill_all+0x22b>
f01050c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01050cc:	8b 52 44             	mov    0x44(%edx),%edx
f01050cf:	eb 05                	jmp    f01050d6 <sched_kill_all+0x230>
f01050d1:	ba 00 00 00 00       	mov    $0x0,%edx
f01050d6:	89 50 08             	mov    %edx,0x8(%eax)
f01050d9:	8b 40 08             	mov    0x8(%eax),%eax
f01050dc:	85 c0                	test   %eax,%eax
f01050de:	0f 85 da fe ff ff    	jne    f0104fbe <sched_kill_all+0x118>
f01050e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050e8:	0f 85 d0 fe ff ff    	jne    f0104fbe <sched_kill_all+0x118>
f01050ee:	eb 13                	jmp    f0105103 <sched_kill_all+0x25d>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f01050f0:	83 ec 08             	sub    $0x8,%esp
f01050f3:	ff 75 f0             	pushl  -0x10(%ebp)
f01050f6:	68 68 5f 13 f0       	push   $0xf0135f68
f01050fb:	e8 0e bc ff ff       	call   f0100d0e <cprintf>
f0105100:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105103:	83 ec 0c             	sub    $0xc,%esp
f0105106:	68 0c 5f 13 f0       	push   $0xf0135f0c
f010510b:	e8 fe bb ff ff       	call   f0100d0e <cprintf>
f0105110:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105113:	ff 45 f0             	incl   -0x10(%ebp)
f0105116:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f010511b:	0f b6 c0             	movzbl %al,%eax
f010511e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105121:	0f 8f 56 fe ff ff    	jg     f0104f7d <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0105127:	a1 f0 f6 85 f0       	mov    0xf085f6f0,%eax
f010512c:	85 c0                	test   %eax,%eax
f010512e:	0f 84 98 00 00 00    	je     f01051cc <sched_kill_all+0x326>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0105134:	83 ec 0c             	sub    $0xc,%esp
f0105137:	68 60 60 13 f0       	push   $0xf0136060
f010513c:	e8 cd bb ff ff       	call   f0100d0e <cprintf>
f0105141:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0105144:	a1 f0 f6 85 f0       	mov    0xf085f6f0,%eax
f0105149:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010514c:	eb 55                	jmp    f01051a3 <sched_kill_all+0x2fd>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010514e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105151:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105157:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010515a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010515d:	83 ec 04             	sub    $0x4,%esp
f0105160:	52                   	push   %edx
f0105161:	50                   	push   %eax
f0105162:	68 f8 5f 13 f0       	push   $0xf0135ff8
f0105167:	e8 a2 bb ff ff       	call   f0100d0e <cprintf>
f010516c:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f010516f:	83 ec 0c             	sub    $0xc,%esp
f0105172:	ff 75 f4             	pushl  -0xc(%ebp)
f0105175:	e8 0a fa ff ff       	call   f0104b84 <sched_remove_exit>
f010517a:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f010517d:	83 ec 0c             	sub    $0xc,%esp
f0105180:	ff 75 f4             	pushl  -0xc(%ebp)
f0105183:	e8 4c 4f 00 00       	call   f010a0d4 <env_free>
f0105188:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010518b:	83 ec 0c             	sub    $0xc,%esp
f010518e:	68 0b 60 13 f0       	push   $0xf013600b
f0105193:	e8 76 bb ff ff       	call   f0100d0e <cprintf>
f0105198:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010519b:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f01051a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051a7:	74 08                	je     f01051b1 <sched_kill_all+0x30b>
f01051a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051ac:	8b 40 44             	mov    0x44(%eax),%eax
f01051af:	eb 05                	jmp    f01051b6 <sched_kill_all+0x310>
f01051b1:	b8 00 00 00 00       	mov    $0x0,%eax
f01051b6:	a3 f8 f6 85 f0       	mov    %eax,0xf085f6f8
f01051bb:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f01051c0:	85 c0                	test   %eax,%eax
f01051c2:	75 8a                	jne    f010514e <sched_kill_all+0x2a8>
f01051c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051c8:	75 84                	jne    f010514e <sched_kill_all+0x2a8>
f01051ca:	eb 10                	jmp    f01051dc <sched_kill_all+0x336>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01051cc:	83 ec 0c             	sub    $0xc,%esp
f01051cf:	68 ae 5f 13 f0       	push   $0xf0135fae
f01051d4:	e8 35 bb ff ff       	call   f0100d0e <cprintf>
f01051d9:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f01051dc:	c7 05 f4 ed 85 f0 00 	movl   $0x0,0xf085edf4
f01051e3:	00 00 00 
	fos_scheduler();
f01051e6:	e8 22 f5 ff ff       	call   f010470d <fos_scheduler>

f01051eb <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f01051eb:	55                   	push   %ebp
f01051ec:	89 e5                	mov    %esp,%ebp
f01051ee:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f01051f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01051f5:	74 0e                	je     f0105205 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f01051f7:	83 ec 0c             	sub    $0xc,%esp
f01051fa:	ff 75 08             	pushl  0x8(%ebp)
f01051fd:	e8 6e f8 ff ff       	call   f0104a70 <sched_insert_new>
f0105202:	83 c4 10             	add    $0x10,%esp
	}
}
f0105205:	90                   	nop
f0105206:	c9                   	leave  
f0105207:	c3                   	ret    

f0105208 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0105208:	55                   	push   %ebp
f0105209:	89 e5                	mov    %esp,%ebp
f010520b:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010520e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105215:	a1 38 f7 85 f0       	mov    0xf085f738,%eax
f010521a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010521d:	eb 3d                	jmp    f010525c <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f010521f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105222:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105225:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105228:	75 2a                	jne    f0105254 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f010522a:	83 ec 0c             	sub    $0xc,%esp
f010522d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105230:	e8 67 f8 ff ff       	call   f0104a9c <sched_remove_new>
f0105235:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f0105238:	83 ec 0c             	sub    $0xc,%esp
f010523b:	ff 75 f4             	pushl  -0xc(%ebp)
f010523e:	e8 f0 f6 ff ff       	call   f0104933 <sched_insert_ready>
f0105243:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0105246:	a1 54 f7 85 f0       	mov    0xf085f754,%eax
f010524b:	85 c0                	test   %eax,%eax
f010524d:	75 36                	jne    f0105285 <sched_run_env+0x7d>
			{
				fos_scheduler();
f010524f:	e8 b9 f4 ff ff       	call   f010470d <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0105254:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f0105259:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010525c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105260:	74 08                	je     f010526a <sched_run_env+0x62>
f0105262:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105265:	8b 40 44             	mov    0x44(%eax),%eax
f0105268:	eb 05                	jmp    f010526f <sched_run_env+0x67>
f010526a:	b8 00 00 00 00       	mov    $0x0,%eax
f010526f:	a3 40 f7 85 f0       	mov    %eax,0xf085f740
f0105274:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f0105279:	85 c0                	test   %eax,%eax
f010527b:	75 a2                	jne    f010521f <sched_run_env+0x17>
f010527d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105281:	75 9c                	jne    f010521f <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105283:	eb 01                	jmp    f0105286 <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105285:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105286:	90                   	nop
f0105287:	c9                   	leave  
f0105288:	c3                   	ret    

f0105289 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0105289:	55                   	push   %ebp
f010528a:	89 e5                	mov    %esp,%ebp
f010528c:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010528f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105296:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010529d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052a1:	75 59                	jne    f01052fc <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052a3:	a1 38 f7 85 f0       	mov    0xf085f738,%eax
f01052a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ab:	eb 28                	jmp    f01052d5 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f01052ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052b0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01052b3:	3b 45 08             	cmp    0x8(%ebp),%eax
f01052b6:	75 15                	jne    f01052cd <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f01052b8:	83 ec 0c             	sub    $0xc,%esp
f01052bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01052be:	e8 d9 f7 ff ff       	call   f0104a9c <sched_remove_new>
f01052c3:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01052c6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01052cd:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f01052d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052d9:	74 08                	je     f01052e3 <sched_exit_env+0x5a>
f01052db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052de:	8b 40 44             	mov    0x44(%eax),%eax
f01052e1:	eb 05                	jmp    f01052e8 <sched_exit_env+0x5f>
f01052e3:	b8 00 00 00 00       	mov    $0x0,%eax
f01052e8:	a3 40 f7 85 f0       	mov    %eax,0xf085f740
f01052ed:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f01052f2:	85 c0                	test   %eax,%eax
f01052f4:	75 b7                	jne    f01052ad <sched_exit_env+0x24>
f01052f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052fa:	75 b1                	jne    f01052ad <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f01052fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105300:	0f 85 67 01 00 00    	jne    f010546d <sched_exit_env+0x1e4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105306:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010530d:	e9 47 01 00 00       	jmp    f0105459 <sched_exit_env+0x1d0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105312:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0105317:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010531a:	c1 e2 04             	shl    $0x4,%edx
f010531d:	01 d0                	add    %edx,%eax
f010531f:	8b 00                	mov    (%eax),%eax
f0105321:	85 c0                	test   %eax,%eax
f0105323:	0f 84 27 01 00 00    	je     f0105450 <sched_exit_env+0x1c7>
			{
				ptr_env=NULL;
f0105329:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105330:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0105335:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105338:	c1 e2 04             	shl    $0x4,%edx
f010533b:	01 d0                	add    %edx,%eax
f010533d:	8b 00                	mov    (%eax),%eax
f010533f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105342:	e9 d1 00 00 00       	jmp    f0105418 <sched_exit_env+0x18f>
				{
					if(ptr_env->env_id == envId)
f0105347:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010534a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010534d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105350:	0f 85 af 00 00 00    	jne    f0105405 <sched_exit_env+0x17c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105356:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010535a:	75 17                	jne    f0105373 <sched_exit_env+0xea>
f010535c:	83 ec 04             	sub    $0x4,%esp
f010535f:	68 3f 5e 13 f0       	push   $0xf0135e3f
f0105364:	68 f7 01 00 00       	push   $0x1f7
f0105369:	68 0b 5e 13 f0       	push   $0xf0135e0b
f010536e:	e8 92 ae ff ff       	call   f0100205 <_panic>
f0105373:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105376:	8b 40 44             	mov    0x44(%eax),%eax
f0105379:	85 c0                	test   %eax,%eax
f010537b:	74 11                	je     f010538e <sched_exit_env+0x105>
f010537d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105380:	8b 40 44             	mov    0x44(%eax),%eax
f0105383:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105386:	8b 52 48             	mov    0x48(%edx),%edx
f0105389:	89 50 48             	mov    %edx,0x48(%eax)
f010538c:	eb 16                	jmp    f01053a4 <sched_exit_env+0x11b>
f010538e:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0105393:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105396:	c1 e2 04             	shl    $0x4,%edx
f0105399:	01 c2                	add    %eax,%edx
f010539b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539e:	8b 40 48             	mov    0x48(%eax),%eax
f01053a1:	89 42 04             	mov    %eax,0x4(%edx)
f01053a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053a7:	8b 40 48             	mov    0x48(%eax),%eax
f01053aa:	85 c0                	test   %eax,%eax
f01053ac:	74 11                	je     f01053bf <sched_exit_env+0x136>
f01053ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053b1:	8b 40 48             	mov    0x48(%eax),%eax
f01053b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053b7:	8b 52 44             	mov    0x44(%edx),%edx
f01053ba:	89 50 44             	mov    %edx,0x44(%eax)
f01053bd:	eb 15                	jmp    f01053d4 <sched_exit_env+0x14b>
f01053bf:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01053c4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053c7:	c1 e2 04             	shl    $0x4,%edx
f01053ca:	01 c2                	add    %eax,%edx
f01053cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053cf:	8b 40 44             	mov    0x44(%eax),%eax
f01053d2:	89 02                	mov    %eax,(%edx)
f01053d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053d7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01053de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01053e8:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01053ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01053f0:	c1 e2 04             	shl    $0x4,%edx
f01053f3:	01 d0                	add    %edx,%eax
f01053f5:	8b 50 0c             	mov    0xc(%eax),%edx
f01053f8:	4a                   	dec    %edx
f01053f9:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f01053fc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105403:	eb 4b                	jmp    f0105450 <sched_exit_env+0x1c7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105405:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010540a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010540d:	c1 e2 04             	shl    $0x4,%edx
f0105410:	01 d0                	add    %edx,%eax
f0105412:	8b 40 08             	mov    0x8(%eax),%eax
f0105415:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105418:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010541d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105420:	c1 e2 04             	shl    $0x4,%edx
f0105423:	01 d0                	add    %edx,%eax
f0105425:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105429:	74 08                	je     f0105433 <sched_exit_env+0x1aa>
f010542b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010542e:	8b 52 44             	mov    0x44(%edx),%edx
f0105431:	eb 05                	jmp    f0105438 <sched_exit_env+0x1af>
f0105433:	ba 00 00 00 00       	mov    $0x0,%edx
f0105438:	89 50 08             	mov    %edx,0x8(%eax)
f010543b:	8b 40 08             	mov    0x8(%eax),%eax
f010543e:	85 c0                	test   %eax,%eax
f0105440:	0f 85 01 ff ff ff    	jne    f0105347 <sched_exit_env+0xbe>
f0105446:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010544a:	0f 85 f7 fe ff ff    	jne    f0105347 <sched_exit_env+0xbe>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105450:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105454:	75 16                	jne    f010546c <sched_exit_env+0x1e3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105456:	ff 45 ec             	incl   -0x14(%ebp)
f0105459:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f010545e:	0f b6 c0             	movzbl %al,%eax
f0105461:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105464:	0f 8f a8 fe ff ff    	jg     f0105312 <sched_exit_env+0x89>
f010546a:	eb 01                	jmp    f010546d <sched_exit_env+0x1e4>
						break;
					}
				}
			}
			if (found)
				break;
f010546c:	90                   	nop
		}
	}
	if (!found)
f010546d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105471:	75 1c                	jne    f010548f <sched_exit_env+0x206>
	{
		if (curenv->env_id == envId)
f0105473:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0105478:	8b 40 4c             	mov    0x4c(%eax),%eax
f010547b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010547e:	75 0f                	jne    f010548f <sched_exit_env+0x206>
		{
			ptr_env = curenv;
f0105480:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0105485:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105488:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f010548f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105493:	74 2a                	je     f01054bf <sched_exit_env+0x236>
	{
		sched_insert_exit(ptr_env);
f0105495:	83 ec 0c             	sub    $0xc,%esp
f0105498:	ff 75 f4             	pushl  -0xc(%ebp)
f010549b:	e8 a1 f6 ff ff       	call   f0104b41 <sched_insert_exit>
f01054a0:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f01054a3:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f01054a8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054ab:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054ae:	75 0f                	jne    f01054bf <sched_exit_env+0x236>
		{
			curenv = NULL;
f01054b0:	c7 05 f4 ed 85 f0 00 	movl   $0x0,0xf085edf4
f01054b7:	00 00 00 
			fos_scheduler();
f01054ba:	e8 4e f2 ff ff       	call   f010470d <fos_scheduler>
		}
	}
}
f01054bf:	90                   	nop
f01054c0:	c9                   	leave  
f01054c1:	c3                   	ret    

f01054c2 <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f01054c2:	55                   	push   %ebp
f01054c3:	89 e5                	mov    %esp,%ebp
f01054c5:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054cf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01054d6:	e9 37 01 00 00       	jmp    f0105612 <sched_exit_all_ready_envs+0x150>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f01054db:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01054e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01054e3:	c1 e2 04             	shl    $0x4,%edx
f01054e6:	01 d0                	add    %edx,%eax
f01054e8:	8b 00                	mov    (%eax),%eax
f01054ea:	85 c0                	test   %eax,%eax
f01054ec:	0f 84 1d 01 00 00    	je     f010560f <sched_exit_all_ready_envs+0x14d>
		{
			ptr_env=NULL;
f01054f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01054f9:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01054fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105501:	c1 e2 04             	shl    $0x4,%edx
f0105504:	01 d0                	add    %edx,%eax
f0105506:	8b 00                	mov    (%eax),%eax
f0105508:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010550b:	e9 c7 00 00 00       	jmp    f01055d7 <sched_exit_all_ready_envs+0x115>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0105510:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105514:	75 17                	jne    f010552d <sched_exit_all_ready_envs+0x6b>
f0105516:	83 ec 04             	sub    $0x4,%esp
f0105519:	68 3f 5e 13 f0       	push   $0xf0135e3f
f010551e:	68 22 02 00 00       	push   $0x222
f0105523:	68 0b 5e 13 f0       	push   $0xf0135e0b
f0105528:	e8 d8 ac ff ff       	call   f0100205 <_panic>
f010552d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105530:	8b 40 44             	mov    0x44(%eax),%eax
f0105533:	85 c0                	test   %eax,%eax
f0105535:	74 11                	je     f0105548 <sched_exit_all_ready_envs+0x86>
f0105537:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010553a:	8b 40 44             	mov    0x44(%eax),%eax
f010553d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105540:	8b 52 48             	mov    0x48(%edx),%edx
f0105543:	89 50 48             	mov    %edx,0x48(%eax)
f0105546:	eb 16                	jmp    f010555e <sched_exit_all_ready_envs+0x9c>
f0105548:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010554d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105550:	c1 e2 04             	shl    $0x4,%edx
f0105553:	01 c2                	add    %eax,%edx
f0105555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105558:	8b 40 48             	mov    0x48(%eax),%eax
f010555b:	89 42 04             	mov    %eax,0x4(%edx)
f010555e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105561:	8b 40 48             	mov    0x48(%eax),%eax
f0105564:	85 c0                	test   %eax,%eax
f0105566:	74 11                	je     f0105579 <sched_exit_all_ready_envs+0xb7>
f0105568:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010556b:	8b 40 48             	mov    0x48(%eax),%eax
f010556e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105571:	8b 52 44             	mov    0x44(%edx),%edx
f0105574:	89 50 44             	mov    %edx,0x44(%eax)
f0105577:	eb 15                	jmp    f010558e <sched_exit_all_ready_envs+0xcc>
f0105579:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010557e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105581:	c1 e2 04             	shl    $0x4,%edx
f0105584:	01 c2                	add    %eax,%edx
f0105586:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105589:	8b 40 44             	mov    0x44(%eax),%eax
f010558c:	89 02                	mov    %eax,(%edx)
f010558e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105591:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105598:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010559b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01055a2:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01055a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055aa:	c1 e2 04             	shl    $0x4,%edx
f01055ad:	01 d0                	add    %edx,%eax
f01055af:	8b 50 0c             	mov    0xc(%eax),%edx
f01055b2:	4a                   	dec    %edx
f01055b3:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f01055b6:	83 ec 0c             	sub    $0xc,%esp
f01055b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01055bc:	e8 80 f5 ff ff       	call   f0104b41 <sched_insert_exit>
f01055c1:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055c4:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01055c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055cc:	c1 e2 04             	shl    $0x4,%edx
f01055cf:	01 d0                	add    %edx,%eax
f01055d1:	8b 40 08             	mov    0x8(%eax),%eax
f01055d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055d7:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01055dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01055df:	c1 e2 04             	shl    $0x4,%edx
f01055e2:	01 d0                	add    %edx,%eax
f01055e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01055e8:	74 08                	je     f01055f2 <sched_exit_all_ready_envs+0x130>
f01055ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01055ed:	8b 52 44             	mov    0x44(%edx),%edx
f01055f0:	eb 05                	jmp    f01055f7 <sched_exit_all_ready_envs+0x135>
f01055f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01055f7:	89 50 08             	mov    %edx,0x8(%eax)
f01055fa:	8b 40 08             	mov    0x8(%eax),%eax
f01055fd:	85 c0                	test   %eax,%eax
f01055ff:	0f 85 0b ff ff ff    	jne    f0105510 <sched_exit_all_ready_envs+0x4e>
f0105605:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105609:	0f 85 01 ff ff ff    	jne    f0105510 <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010560f:	ff 45 f0             	incl   -0x10(%ebp)
f0105612:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0105617:	0f b6 c0             	movzbl %al,%eax
f010561a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010561d:	0f 8f b8 fe ff ff    	jg     f01054db <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f0105623:	90                   	nop
f0105624:	c9                   	leave  
f0105625:	c3                   	ret    

f0105626 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f0105626:	55                   	push   %ebp
f0105627:	89 e5                	mov    %esp,%ebp
f0105629:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010562c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105633:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010563a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010563e:	0f 85 a0 00 00 00    	jne    f01056e4 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105644:	a1 38 f7 85 f0       	mov    0xf085f738,%eax
f0105649:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010564c:	eb 67                	jmp    f01056b5 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f010564e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105651:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105654:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105657:	75 54                	jne    f01056ad <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105659:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010565c:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105662:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105665:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105668:	83 ec 04             	sub    $0x4,%esp
f010566b:	52                   	push   %edx
f010566c:	50                   	push   %eax
f010566d:	68 8c 60 13 f0       	push   $0xf013608c
f0105672:	e8 97 b6 ff ff       	call   f0100d0e <cprintf>
f0105677:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f010567a:	83 ec 0c             	sub    $0xc,%esp
f010567d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105680:	e8 17 f4 ff ff       	call   f0104a9c <sched_remove_new>
f0105685:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105688:	83 ec 0c             	sub    $0xc,%esp
f010568b:	ff 75 f4             	pushl  -0xc(%ebp)
f010568e:	e8 41 4a 00 00       	call   f010a0d4 <env_free>
f0105693:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105696:	83 ec 0c             	sub    $0xc,%esp
f0105699:	68 0b 60 13 f0       	push   $0xf013600b
f010569e:	e8 6b b6 ff ff       	call   f0100d0e <cprintf>
f01056a3:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01056a6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01056ad:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f01056b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056b9:	74 08                	je     f01056c3 <sched_kill_env+0x9d>
f01056bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056be:	8b 40 44             	mov    0x44(%eax),%eax
f01056c1:	eb 05                	jmp    f01056c8 <sched_kill_env+0xa2>
f01056c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01056c8:	a3 40 f7 85 f0       	mov    %eax,0xf085f740
f01056cd:	a1 40 f7 85 f0       	mov    0xf085f740,%eax
f01056d2:	85 c0                	test   %eax,%eax
f01056d4:	0f 85 74 ff ff ff    	jne    f010564e <sched_kill_env+0x28>
f01056da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056de:	0f 85 6a ff ff ff    	jne    f010564e <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f01056e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01056e8:	0f 85 a6 01 00 00    	jne    f0105894 <sched_kill_env+0x26e>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01056ee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01056f5:	e9 86 01 00 00       	jmp    f0105880 <sched_kill_env+0x25a>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01056fa:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01056ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105702:	c1 e2 04             	shl    $0x4,%edx
f0105705:	01 d0                	add    %edx,%eax
f0105707:	8b 00                	mov    (%eax),%eax
f0105709:	85 c0                	test   %eax,%eax
f010570b:	0f 84 66 01 00 00    	je     f0105877 <sched_kill_env+0x251>
			{
				ptr_env=NULL;
f0105711:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105718:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010571d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105720:	c1 e2 04             	shl    $0x4,%edx
f0105723:	01 d0                	add    %edx,%eax
f0105725:	8b 00                	mov    (%eax),%eax
f0105727:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010572a:	e9 10 01 00 00       	jmp    f010583f <sched_kill_env+0x219>
				{
					if(ptr_env->env_id == envId)
f010572f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105732:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105735:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105738:	0f 85 ee 00 00 00    	jne    f010582c <sched_kill_env+0x206>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f010573e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105741:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105747:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010574a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010574d:	ff 75 ec             	pushl  -0x14(%ebp)
f0105750:	52                   	push   %edx
f0105751:	50                   	push   %eax
f0105752:	68 b4 60 13 f0       	push   $0xf01360b4
f0105757:	e8 b2 b5 ff ff       	call   f0100d0e <cprintf>
f010575c:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010575f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105763:	75 17                	jne    f010577c <sched_kill_env+0x156>
f0105765:	83 ec 04             	sub    $0x4,%esp
f0105768:	68 3f 5e 13 f0       	push   $0xf0135e3f
f010576d:	68 49 02 00 00       	push   $0x249
f0105772:	68 0b 5e 13 f0       	push   $0xf0135e0b
f0105777:	e8 89 aa ff ff       	call   f0100205 <_panic>
f010577c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577f:	8b 40 44             	mov    0x44(%eax),%eax
f0105782:	85 c0                	test   %eax,%eax
f0105784:	74 11                	je     f0105797 <sched_kill_env+0x171>
f0105786:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105789:	8b 40 44             	mov    0x44(%eax),%eax
f010578c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010578f:	8b 52 48             	mov    0x48(%edx),%edx
f0105792:	89 50 48             	mov    %edx,0x48(%eax)
f0105795:	eb 16                	jmp    f01057ad <sched_kill_env+0x187>
f0105797:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f010579c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010579f:	c1 e2 04             	shl    $0x4,%edx
f01057a2:	01 c2                	add    %eax,%edx
f01057a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057a7:	8b 40 48             	mov    0x48(%eax),%eax
f01057aa:	89 42 04             	mov    %eax,0x4(%edx)
f01057ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057b0:	8b 40 48             	mov    0x48(%eax),%eax
f01057b3:	85 c0                	test   %eax,%eax
f01057b5:	74 11                	je     f01057c8 <sched_kill_env+0x1a2>
f01057b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ba:	8b 40 48             	mov    0x48(%eax),%eax
f01057bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01057c0:	8b 52 44             	mov    0x44(%edx),%edx
f01057c3:	89 50 44             	mov    %edx,0x44(%eax)
f01057c6:	eb 15                	jmp    f01057dd <sched_kill_env+0x1b7>
f01057c8:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01057cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057d0:	c1 e2 04             	shl    $0x4,%edx
f01057d3:	01 c2                	add    %eax,%edx
f01057d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057d8:	8b 40 44             	mov    0x44(%eax),%eax
f01057db:	89 02                	mov    %eax,(%edx)
f01057dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057e0:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01057e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057ea:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01057f1:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01057f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01057f9:	c1 e2 04             	shl    $0x4,%edx
f01057fc:	01 d0                	add    %edx,%eax
f01057fe:	8b 50 0c             	mov    0xc(%eax),%edx
f0105801:	4a                   	dec    %edx
f0105802:	89 50 0c             	mov    %edx,0xc(%eax)
						env_free(ptr_env);
f0105805:	83 ec 0c             	sub    $0xc,%esp
f0105808:	ff 75 f4             	pushl  -0xc(%ebp)
f010580b:	e8 c4 48 00 00       	call   f010a0d4 <env_free>
f0105810:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f0105813:	83 ec 0c             	sub    $0xc,%esp
f0105816:	68 0b 60 13 f0       	push   $0xf013600b
f010581b:	e8 ee b4 ff ff       	call   f0100d0e <cprintf>
f0105820:	83 c4 10             	add    $0x10,%esp
						found = 1;
f0105823:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010582a:	eb 4b                	jmp    f0105877 <sched_kill_env+0x251>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010582c:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0105831:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105834:	c1 e2 04             	shl    $0x4,%edx
f0105837:	01 d0                	add    %edx,%eax
f0105839:	8b 40 08             	mov    0x8(%eax),%eax
f010583c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010583f:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0105844:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105847:	c1 e2 04             	shl    $0x4,%edx
f010584a:	01 d0                	add    %edx,%eax
f010584c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105850:	74 08                	je     f010585a <sched_kill_env+0x234>
f0105852:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105855:	8b 52 44             	mov    0x44(%edx),%edx
f0105858:	eb 05                	jmp    f010585f <sched_kill_env+0x239>
f010585a:	ba 00 00 00 00       	mov    $0x0,%edx
f010585f:	89 50 08             	mov    %edx,0x8(%eax)
f0105862:	8b 40 08             	mov    0x8(%eax),%eax
f0105865:	85 c0                	test   %eax,%eax
f0105867:	0f 85 c2 fe ff ff    	jne    f010572f <sched_kill_env+0x109>
f010586d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105871:	0f 85 b8 fe ff ff    	jne    f010572f <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f0105877:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010587b:	75 16                	jne    f0105893 <sched_kill_env+0x26d>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010587d:	ff 45 ec             	incl   -0x14(%ebp)
f0105880:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0105885:	0f b6 c0             	movzbl %al,%eax
f0105888:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010588b:	0f 8f 69 fe ff ff    	jg     f01056fa <sched_kill_env+0xd4>
f0105891:	eb 01                	jmp    f0105894 <sched_kill_env+0x26e>
						//return;
					}
				}
			}
			if (found)
				break;
f0105893:	90                   	nop
		}
	}
	if (!found)
f0105894:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105898:	0f 85 a7 00 00 00    	jne    f0105945 <sched_kill_env+0x31f>
	{
		ptr_env=NULL;
f010589e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01058a5:	a1 f0 f6 85 f0       	mov    0xf085f6f0,%eax
f01058aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01058ad:	eb 67                	jmp    f0105916 <sched_kill_env+0x2f0>
		{
			if(ptr_env->env_id == envId)
f01058af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058b2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058b5:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058b8:	75 54                	jne    f010590e <sched_kill_env+0x2e8>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f01058ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058bd:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f01058c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058c6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01058c9:	83 ec 04             	sub    $0x4,%esp
f01058cc:	52                   	push   %edx
f01058cd:	50                   	push   %eax
f01058ce:	68 e0 60 13 f0       	push   $0xf01360e0
f01058d3:	e8 36 b4 ff ff       	call   f0100d0e <cprintf>
f01058d8:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f01058db:	83 ec 0c             	sub    $0xc,%esp
f01058de:	ff 75 f4             	pushl  -0xc(%ebp)
f01058e1:	e8 9e f2 ff ff       	call   f0104b84 <sched_remove_exit>
f01058e6:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f01058e9:	83 ec 0c             	sub    $0xc,%esp
f01058ec:	ff 75 f4             	pushl  -0xc(%ebp)
f01058ef:	e8 e0 47 00 00       	call   f010a0d4 <env_free>
f01058f4:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01058f7:	83 ec 0c             	sub    $0xc,%esp
f01058fa:	68 0b 60 13 f0       	push   $0xf013600b
f01058ff:	e8 0a b4 ff ff       	call   f0100d0e <cprintf>
f0105904:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105907:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010590e:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f0105913:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105916:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010591a:	74 08                	je     f0105924 <sched_kill_env+0x2fe>
f010591c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010591f:	8b 40 44             	mov    0x44(%eax),%eax
f0105922:	eb 05                	jmp    f0105929 <sched_kill_env+0x303>
f0105924:	b8 00 00 00 00       	mov    $0x0,%eax
f0105929:	a3 f8 f6 85 f0       	mov    %eax,0xf085f6f8
f010592e:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f0105933:	85 c0                	test   %eax,%eax
f0105935:	0f 85 74 ff ff ff    	jne    f01058af <sched_kill_env+0x289>
f010593b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010593f:	0f 85 6a ff ff ff    	jne    f01058af <sched_kill_env+0x289>
				//return;
			}
		}
	}

	if (!found)
f0105945:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105949:	0f 85 a0 00 00 00    	jne    f01059ef <sched_kill_env+0x3c9>
	{
		if (curenv->env_id == envId)
f010594f:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0105954:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105957:	3b 45 08             	cmp    0x8(%ebp),%eax
f010595a:	0f 85 8f 00 00 00    	jne    f01059ef <sched_kill_env+0x3c9>
		{
			ptr_env = curenv;
f0105960:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0105965:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105968:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010596b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010596e:	83 f8 02             	cmp    $0x2,%eax
f0105971:	74 19                	je     f010598c <sched_kill_env+0x366>
f0105973:	68 08 61 13 f0       	push   $0xf0136108
f0105978:	68 f6 5d 13 f0       	push   $0xf0135df6
f010597d:	68 6c 02 00 00       	push   $0x26c
f0105982:	68 0b 5e 13 f0       	push   $0xf0135e0b
f0105987:	e8 79 a8 ff ff       	call   f0100205 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010598c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010598f:	8d 90 5c 05 00 00    	lea    0x55c(%eax),%edx
f0105995:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105998:	8b 40 4c             	mov    0x4c(%eax),%eax
f010599b:	83 ec 04             	sub    $0x4,%esp
f010599e:	52                   	push   %edx
f010599f:	50                   	push   %eax
f01059a0:	68 28 61 13 f0       	push   $0xf0136128
f01059a5:	e8 64 b3 ff ff       	call   f0100d0e <cprintf>
f01059aa:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01059ad:	83 ec 0c             	sub    $0xc,%esp
f01059b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01059b3:	e8 1c 47 00 00       	call   f010a0d4 <env_free>
f01059b8:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01059bb:	83 ec 0c             	sub    $0xc,%esp
f01059be:	68 0b 60 13 f0       	push   $0xf013600b
f01059c3:	e8 46 b3 ff ff       	call   f0100d0e <cprintf>
f01059c8:	83 c4 10             	add    $0x10,%esp
			found = 1;
f01059cb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f01059d2:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f01059d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01059da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01059dd:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f01059e0:	c7 05 f4 ed 85 f0 00 	movl   $0x0,0xf085edf4
f01059e7:	00 00 00 
			fos_scheduler();
f01059ea:	e8 1e ed ff ff       	call   f010470d <fos_scheduler>
		}
	}
}
f01059ef:	90                   	nop
f01059f0:	c9                   	leave  
f01059f1:	c3                   	ret    

f01059f2 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f01059f2:	55                   	push   %ebp
f01059f3:	89 e5                	mov    %esp,%ebp
f01059f5:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01059f8:	83 ec 0c             	sub    $0xc,%esp
f01059fb:	6a 01                	push   $0x1
f01059fd:	e8 55 89 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0105a02:	83 c4 10             	add    $0x10,%esp
f0105a05:	85 c0                	test   %eax,%eax
f0105a07:	74 05                	je     f0105a0e <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f0105a09:	e8 05 00 00 00       	call   f0105a13 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f0105a0e:	e8 fa ec ff ff       	call   f010470d <fos_scheduler>

f0105a13 <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f0105a13:	55                   	push   %ebp
f0105a14:	89 e5                	mov    %esp,%ebp
f0105a16:	53                   	push   %ebx
f0105a17:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f0105a1a:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0105a1f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0105a22:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105a26:	0f 84 cc 01 00 00    	je     f0105bf8 <update_WS_time_stamps+0x1e5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105a2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105a33:	e9 cf 00 00 00       	jmp    f0105b07 <update_WS_time_stamps+0xf4>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f0105a38:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a3b:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a41:	89 d0                	mov    %edx,%eax
f0105a43:	01 c0                	add    %eax,%eax
f0105a45:	01 d0                	add    %edx,%eax
f0105a47:	c1 e0 03             	shl    $0x3,%eax
f0105a4a:	01 c8                	add    %ecx,%eax
f0105a4c:	8a 40 04             	mov    0x4(%eax),%al
f0105a4f:	3c 01                	cmp    $0x1,%al
f0105a51:	0f 84 ad 00 00 00    	je     f0105b04 <update_WS_time_stamps+0xf1>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f0105a57:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a5a:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a5d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a60:	89 d0                	mov    %edx,%eax
f0105a62:	01 c0                	add    %eax,%eax
f0105a64:	01 d0                	add    %edx,%eax
f0105a66:	c1 e0 03             	shl    $0x3,%eax
f0105a69:	01 c8                	add    %ecx,%eax
f0105a6b:	8b 00                	mov    (%eax),%eax
f0105a6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a73:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a76:	83 ec 08             	sub    $0x8,%esp
f0105a79:	ff 75 e8             	pushl  -0x18(%ebp)
f0105a7c:	50                   	push   %eax
f0105a7d:	e8 51 25 00 00       	call   f0107fd3 <pt_get_page_permissions>
f0105a82:	83 c4 10             	add    $0x10,%esp
f0105a85:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105a88:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a8b:	8b 48 78             	mov    0x78(%eax),%ecx
f0105a8e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105a91:	89 d0                	mov    %edx,%eax
f0105a93:	01 c0                	add    %eax,%eax
f0105a95:	01 d0                	add    %edx,%eax
f0105a97:	c1 e0 03             	shl    $0x3,%eax
f0105a9a:	01 c8                	add    %ecx,%eax
f0105a9c:	8b 40 08             	mov    0x8(%eax),%eax
f0105a9f:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105aa2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105aa5:	83 e0 20             	and    $0x20,%eax
f0105aa8:	85 c0                	test   %eax,%eax
f0105aaa:	74 3b                	je     f0105ae7 <update_WS_time_stamps+0xd4>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105aac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aaf:	8b 48 78             	mov    0x78(%eax),%ecx
f0105ab2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105ab5:	89 d0                	mov    %edx,%eax
f0105ab7:	01 c0                	add    %eax,%eax
f0105ab9:	01 d0                	add    %edx,%eax
f0105abb:	c1 e0 03             	shl    $0x3,%eax
f0105abe:	01 c8                	add    %ecx,%eax
f0105ac0:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105ac3:	c1 ea 02             	shr    $0x2,%edx
f0105ac6:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f0105acc:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105acf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105ad2:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105ad5:	6a 20                	push   $0x20
f0105ad7:	6a 00                	push   $0x0
f0105ad9:	ff 75 e8             	pushl  -0x18(%ebp)
f0105adc:	50                   	push   %eax
f0105add:	e8 a4 23 00 00       	call   f0107e86 <pt_set_page_permissions>
f0105ae2:	83 c4 10             	add    $0x10,%esp
f0105ae5:	eb 1d                	jmp    f0105b04 <update_WS_time_stamps+0xf1>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f0105ae7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105aea:	8b 48 78             	mov    0x78(%eax),%ecx
f0105aed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105af0:	89 d0                	mov    %edx,%eax
f0105af2:	01 c0                	add    %eax,%eax
f0105af4:	01 d0                	add    %edx,%eax
f0105af6:	c1 e0 03             	shl    $0x3,%eax
f0105af9:	01 c8                	add    %ecx,%eax
f0105afb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105afe:	c1 ea 02             	shr    $0x2,%edx
f0105b01:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0105b04:	ff 45 f4             	incl   -0xc(%ebp)
f0105b07:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b0a:	8b 50 74             	mov    0x74(%eax),%edx
f0105b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b10:	39 c2                	cmp    %eax,%edx
f0105b12:	0f 87 20 ff ff ff    	ja     f0105a38 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105b18:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105b1f:	e9 ca 00 00 00       	jmp    f0105bee <update_WS_time_stamps+0x1db>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0105b24:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b27:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b2a:	89 d0                	mov    %edx,%eax
f0105b2c:	01 c0                	add    %eax,%eax
f0105b2e:	01 d0                	add    %edx,%eax
f0105b30:	c1 e0 03             	shl    $0x3,%eax
f0105b33:	01 c8                	add    %ecx,%eax
f0105b35:	83 e8 80             	sub    $0xffffff80,%eax
f0105b38:	8a 00                	mov    (%eax),%al
f0105b3a:	3c 01                	cmp    $0x1,%al
f0105b3c:	0f 84 a9 00 00 00    	je     f0105beb <update_WS_time_stamps+0x1d8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0105b42:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b45:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b48:	89 d0                	mov    %edx,%eax
f0105b4a:	01 c0                	add    %eax,%eax
f0105b4c:	01 d0                	add    %edx,%eax
f0105b4e:	c1 e0 03             	shl    $0x3,%eax
f0105b51:	01 c8                	add    %ecx,%eax
f0105b53:	83 c0 7c             	add    $0x7c,%eax
f0105b56:	8b 00                	mov    (%eax),%eax
f0105b58:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105b5b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105b5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105b61:	89 d0                	mov    %edx,%eax
f0105b63:	01 c0                	add    %eax,%eax
f0105b65:	01 d0                	add    %edx,%eax
f0105b67:	c1 e0 03             	shl    $0x3,%eax
f0105b6a:	01 c8                	add    %ecx,%eax
f0105b6c:	05 84 00 00 00       	add    $0x84,%eax
f0105b71:	8b 00                	mov    (%eax),%eax
f0105b73:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105b76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b79:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b7c:	83 ec 08             	sub    $0x8,%esp
f0105b7f:	ff 75 dc             	pushl  -0x24(%ebp)
f0105b82:	50                   	push   %eax
f0105b83:	e8 73 25 00 00       	call   f01080fb <pd_is_table_used>
f0105b88:	83 c4 10             	add    $0x10,%esp
f0105b8b:	85 c0                	test   %eax,%eax
f0105b8d:	74 3c                	je     f0105bcb <update_WS_time_stamps+0x1b8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105b8f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105b92:	c1 e8 02             	shr    $0x2,%eax
f0105b95:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105b9a:	89 c1                	mov    %eax,%ecx
f0105b9c:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105b9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105ba2:	89 d0                	mov    %edx,%eax
f0105ba4:	01 c0                	add    %eax,%eax
f0105ba6:	01 d0                	add    %edx,%eax
f0105ba8:	c1 e0 03             	shl    $0x3,%eax
f0105bab:	01 d8                	add    %ebx,%eax
f0105bad:	05 84 00 00 00       	add    $0x84,%eax
f0105bb2:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105bb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bb7:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105bba:	83 ec 08             	sub    $0x8,%esp
f0105bbd:	ff 75 dc             	pushl  -0x24(%ebp)
f0105bc0:	50                   	push   %eax
f0105bc1:	e8 59 25 00 00       	call   f010811f <pd_set_table_unused>
f0105bc6:	83 c4 10             	add    $0x10,%esp
f0105bc9:	eb 20                	jmp    f0105beb <update_WS_time_stamps+0x1d8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105bcb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105bce:	c1 e8 02             	shr    $0x2,%eax
f0105bd1:	89 c1                	mov    %eax,%ecx
f0105bd3:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105bd6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105bd9:	89 d0                	mov    %edx,%eax
f0105bdb:	01 c0                	add    %eax,%eax
f0105bdd:	01 d0                	add    %edx,%eax
f0105bdf:	c1 e0 03             	shl    $0x3,%eax
f0105be2:	01 d8                	add    %ebx,%eax
f0105be4:	05 84 00 00 00       	add    $0x84,%eax
f0105be9:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105beb:	ff 45 f0             	incl   -0x10(%ebp)
f0105bee:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105bf2:	0f 8e 2c ff ff ff    	jle    f0105b24 <update_WS_time_stamps+0x111>
					}
				}
			}
		}
	}
}
f0105bf8:	90                   	nop
f0105bf9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105bfc:	c9                   	leave  
f0105bfd:	c3                   	ret    

f0105bfe <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105bfe:	55                   	push   %ebp
f0105bff:	89 e5                	mov    %esp,%ebp
f0105c01:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105c04:	c7 05 ec ed 85 f0 01 	movl   $0x1,0xf085edec
f0105c0b:	00 00 00 
f0105c0e:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105c15:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105c19:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105c1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105c1f:	ee                   	out    %al,(%dx)
f0105c20:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105c27:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105c2b:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105c2e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105c31:	ee                   	out    %al,(%dx)
f0105c32:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105c39:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105c3d:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105c40:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c43:	ee                   	out    %al,(%dx)
f0105c44:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105c4b:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105c4f:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105c52:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105c55:	ee                   	out    %al,(%dx)
f0105c56:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105c5d:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105c61:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105c64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105c67:	ee                   	out    %al,(%dx)
f0105c68:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105c6f:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105c73:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105c76:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105c79:	ee                   	out    %al,(%dx)
f0105c7a:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105c81:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105c85:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105c88:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105c8b:	ee                   	out    %al,(%dx)
f0105c8c:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105c93:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105c97:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105c9a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105c9d:	ee                   	out    %al,(%dx)
f0105c9e:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105ca5:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105ca9:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105cac:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105caf:	ee                   	out    %al,(%dx)
f0105cb0:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105cb7:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105cbb:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105cbe:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105cc1:	ee                   	out    %al,(%dx)
f0105cc2:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105cc9:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105ccd:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105cd0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105cd3:	ee                   	out    %al,(%dx)
f0105cd4:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105cdb:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105cdf:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105ce2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105ce5:	ee                   	out    %al,(%dx)
f0105ce6:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105ced:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105cf1:	8a 45 be             	mov    -0x42(%ebp),%al
f0105cf4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105cf7:	ee                   	out    %al,(%dx)
f0105cf8:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105cff:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105d03:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105d06:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105d09:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105d0a:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d10:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105d14:	74 15                	je     f0105d2b <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105d16:	66 a1 b0 38 19 f0    	mov    0xf01938b0,%ax
f0105d1c:	0f b7 c0             	movzwl %ax,%eax
f0105d1f:	83 ec 0c             	sub    $0xc,%esp
f0105d22:	50                   	push   %eax
f0105d23:	e8 06 00 00 00       	call   f0105d2e <irq_setmask_8259A>
f0105d28:	83 c4 10             	add    $0x10,%esp
}
f0105d2b:	90                   	nop
f0105d2c:	c9                   	leave  
f0105d2d:	c3                   	ret    

f0105d2e <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105d2e:	55                   	push   %ebp
f0105d2f:	89 e5                	mov    %esp,%ebp
f0105d31:	83 ec 14             	sub    $0x14,%esp
f0105d34:	8b 45 08             	mov    0x8(%ebp),%eax
f0105d37:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105d3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d3e:	66 a3 b0 38 19 f0    	mov    %ax,0xf01938b0
	if (!didinit)
f0105d44:	a1 ec ed 85 f0       	mov    0xf085edec,%eax
f0105d49:	85 c0                	test   %eax,%eax
f0105d4b:	74 34                	je     f0105d81 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105d4d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d50:	0f b6 c0             	movzbl %al,%eax
f0105d53:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105d5a:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105d5d:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105d60:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105d63:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105d64:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105d67:	66 c1 e8 08          	shr    $0x8,%ax
f0105d6b:	0f b6 c0             	movzbl %al,%eax
f0105d6e:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105d75:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105d78:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105d7b:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105d7e:	ee                   	out    %al,(%dx)
f0105d7f:	eb 01                	jmp    f0105d82 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105d81:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105d82:	c9                   	leave  
f0105d83:	c3                   	ret    

f0105d84 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105d84:	55                   	push   %ebp
f0105d85:	89 e5                	mov    %esp,%ebp
f0105d87:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105d8a:	83 ec 08             	sub    $0x8,%esp
f0105d8d:	68 00 10 00 00       	push   $0x1000
f0105d92:	68 00 10 00 00       	push   $0x1000
f0105d97:	e8 6a 02 00 00       	call   f0106006 <boot_allocate_space>
f0105d9c:	83 c4 10             	add    $0x10,%esp
f0105d9f:	a3 78 f7 85 f0       	mov    %eax,0xf085f778
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105da4:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0105da9:	83 ec 04             	sub    $0x4,%esp
f0105dac:	68 00 10 00 00       	push   $0x1000
f0105db1:	6a 00                	push   $0x0
f0105db3:	50                   	push   %eax
f0105db4:	e8 3a be 02 00       	call   f0131bf3 <memset>
f0105db9:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105dbc:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0105dc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105dc4:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105dcb:	77 14                	ja     f0105de1 <initialize_kernel_VM+0x5d>
f0105dcd:	ff 75 e8             	pushl  -0x18(%ebp)
f0105dd0:	68 54 61 13 f0       	push   $0xf0136154
f0105dd5:	6a 45                	push   $0x45
f0105dd7:	68 88 61 13 f0       	push   $0xf0136188
f0105ddc:	e8 24 a4 ff ff       	call   f0100205 <_panic>
f0105de1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105de4:	05 00 00 00 10       	add    $0x10000000,%eax
f0105de9:	a3 a8 f7 85 f0       	mov    %eax,0xf085f7a8
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105dee:	c7 45 e4 00 b0 18 f0 	movl   $0xf018b000,-0x1c(%ebp)
f0105df5:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105dfc:	77 14                	ja     f0105e12 <initialize_kernel_VM+0x8e>
f0105dfe:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105e01:	68 54 61 13 f0       	push   $0xf0136154
f0105e06:	6a 4d                	push   $0x4d
f0105e08:	68 88 61 13 f0       	push   $0xf0136188
f0105e0d:	e8 f3 a3 ff ff       	call   f0100205 <_panic>
f0105e12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105e15:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105e1b:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0105e20:	83 ec 0c             	sub    $0xc,%esp
f0105e23:	6a 02                	push   $0x2
f0105e25:	52                   	push   %edx
f0105e26:	68 00 80 00 00       	push   $0x8000
f0105e2b:	68 00 80 bf ef       	push   $0xefbf8000
f0105e30:	50                   	push   %eax
f0105e31:	e8 31 02 00 00       	call   f0106067 <boot_map_range>
f0105e36:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105e39:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105e40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105e47:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e4e:	eb 25                	jmp    f0105e75 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105e50:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105e53:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105e56:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0105e5b:	83 ec 04             	sub    $0x4,%esp
f0105e5e:	6a 01                	push   $0x1
f0105e60:	52                   	push   %edx
f0105e61:	50                   	push   %eax
f0105e62:	e8 74 02 00 00       	call   f01060db <boot_get_page_table>
f0105e67:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105e6a:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105e71:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105e75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e79:	72 d5                	jb     f0105e50 <initialize_kernel_VM+0xcc>
f0105e7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e7f:	77 06                	ja     f0105e87 <initialize_kernel_VM+0x103>
f0105e81:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105e85:	76 c9                	jbe    f0105e50 <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105e87:	8b 15 0c f7 85 f0    	mov    0xf085f70c,%edx
f0105e8d:	89 d0                	mov    %edx,%eax
f0105e8f:	01 c0                	add    %eax,%eax
f0105e91:	01 d0                	add    %edx,%eax
f0105e93:	c1 e0 03             	shl    $0x3,%eax
f0105e96:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105e99:	83 ec 08             	sub    $0x8,%esp
f0105e9c:	68 00 10 00 00       	push   $0x1000
f0105ea1:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ea4:	e8 5d 01 00 00       	call   f0106006 <boot_allocate_space>
f0105ea9:	83 c4 10             	add    $0x10,%esp
f0105eac:	a3 50 f7 85 f0       	mov    %eax,0xf085f750
	memset(frames_info, 0, array_size);
f0105eb1:	a1 50 f7 85 f0       	mov    0xf085f750,%eax
f0105eb6:	83 ec 04             	sub    $0x4,%esp
f0105eb9:	ff 75 e0             	pushl  -0x20(%ebp)
f0105ebc:	6a 00                	push   $0x0
f0105ebe:	50                   	push   %eax
f0105ebf:	e8 2f bd 02 00       	call   f0131bf3 <memset>
f0105ec4:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105ec7:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105ece:	83 ec 08             	sub    $0x8,%esp
f0105ed1:	68 00 10 00 00       	push   $0x1000
f0105ed6:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ed9:	e8 28 01 00 00       	call   f0106006 <boot_allocate_space>
f0105ede:	83 c4 10             	add    $0x10,%esp
f0105ee1:	a3 d8 f6 85 f0       	mov    %eax,0xf085f6d8
	memset(disk_frames_info , 0, disk_array_size);
f0105ee6:	a1 d8 f6 85 f0       	mov    0xf085f6d8,%eax
f0105eeb:	83 ec 04             	sub    $0x4,%esp
f0105eee:	ff 75 dc             	pushl  -0x24(%ebp)
f0105ef1:	6a 00                	push   $0x0
f0105ef3:	50                   	push   %eax
f0105ef4:	e8 fa bc 02 00       	call   f0131bf3 <memset>
f0105ef9:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105efc:	e8 d5 04 00 00       	call   f01063d6 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105f01:	83 ec 0c             	sub    $0xc,%esp
f0105f04:	68 b1 02 00 00       	push   $0x2b1
f0105f09:	e8 69 a8 02 00       	call   f0130777 <nearest_pow2_ceil>
f0105f0e:	83 c4 10             	add    $0x10,%esp
f0105f11:	83 ec 04             	sub    $0x4,%esp
f0105f14:	50                   	push   %eax
f0105f15:	68 b1 02 00 00       	push   $0x2b1
f0105f1a:	68 a8 61 13 f0       	push   $0xf01361a8
f0105f1f:	e8 ea ad ff ff       	call   f0100d0e <cprintf>
f0105f24:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105f27:	c7 45 d8 f0 fa 0f 00 	movl   $0xffaf0,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105f2e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105f31:	83 ec 08             	sub    $0x8,%esp
f0105f34:	68 00 10 00 00       	push   $0x1000
f0105f39:	50                   	push   %eax
f0105f3a:	e8 c7 00 00 00       	call   f0106006 <boot_allocate_space>
f0105f3f:	83 c4 10             	add    $0x10,%esp
f0105f42:	a3 f0 ed 85 f0       	mov    %eax,0xf085edf0
	memset(envs , 0, envs_size);
f0105f47:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f4a:	a1 f0 ed 85 f0       	mov    0xf085edf0,%eax
f0105f4f:	83 ec 04             	sub    $0x4,%esp
f0105f52:	52                   	push   %edx
f0105f53:	6a 00                	push   $0x0
f0105f55:	50                   	push   %eax
f0105f56:	e8 98 bc 02 00       	call   f0131bf3 <memset>
f0105f5b:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105f5e:	a1 f0 ed 85 f0       	mov    0xf085edf0,%eax
f0105f63:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105f66:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105f6d:	77 17                	ja     f0105f86 <initialize_kernel_VM+0x202>
f0105f6f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105f72:	68 54 61 13 f0       	push   $0xf0136154
f0105f77:	68 96 00 00 00       	push   $0x96
f0105f7c:	68 88 61 13 f0       	push   $0xf0136188
f0105f81:	e8 7f a2 ff ff       	call   f0100205 <_panic>
f0105f86:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105f89:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105f8f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105f92:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0105f97:	83 ec 0c             	sub    $0xc,%esp
f0105f9a:	6a 04                	push   $0x4
f0105f9c:	51                   	push   %ecx
f0105f9d:	52                   	push   %edx
f0105f9e:	68 00 00 c0 ee       	push   $0xeec00000
f0105fa3:	50                   	push   %eax
f0105fa4:	e8 be 00 00 00       	call   f0106067 <boot_map_range>
f0105fa9:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105fac:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0105fb1:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105fb6:	8b 15 78 f7 85 f0    	mov    0xf085f778,%edx
f0105fbc:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105fc2:	8b 12                	mov    (%edx),%edx
f0105fc4:	83 ca 05             	or     $0x5,%edx
f0105fc7:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	{
		// MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		// calls are fininshed, and no remaining data to be allocated for the kernel
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105fc9:	a1 74 f7 85 f0       	mov    0xf085f774,%eax
f0105fce:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105fd4:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0105fd9:	83 ec 0c             	sub    $0xc,%esp
f0105fdc:	6a 02                	push   $0x2
f0105fde:	6a 00                	push   $0x0
f0105fe0:	52                   	push   %edx
f0105fe1:	68 00 00 00 f0       	push   $0xf0000000
f0105fe6:	50                   	push   %eax
f0105fe7:	e8 7b 00 00 00       	call   f0106067 <boot_map_range>
f0105fec:	83 c4 20             	add    $0x20,%esp
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105fef:	e8 6a af 02 00       	call   f0130f5e <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105ff4:	c7 05 ec f6 85 f0 19 	movl   $0x19,0xf085f6ec
f0105ffb:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105ffe:	e8 d3 02 00 00       	call   f01062d6 <turn_on_paging>
}
f0106003:	90                   	nop
f0106004:	c9                   	leave  
f0106005:	c3                   	ret    

f0106006 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0106006:	55                   	push   %ebp
f0106007:	89 e5                	mov    %esp,%ebp
f0106009:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010600c:	a1 74 f7 85 f0       	mov    0xf085f774,%eax
f0106011:	85 c0                	test   %eax,%eax
f0106013:	75 0a                	jne    f010601f <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0106015:	c7 05 74 f7 85 f0 bc 	movl   $0xf085f8bc,0xf085f774
f010601c:	f8 85 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f010601f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106022:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0106025:	a1 74 f7 85 f0       	mov    0xf085f774,%eax
f010602a:	89 c2                	mov    %eax,%edx
f010602c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010602f:	01 d0                	add    %edx,%eax
f0106031:	48                   	dec    %eax
f0106032:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0106035:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106038:	ba 00 00 00 00       	mov    $0x0,%edx
f010603d:	f7 75 fc             	divl   -0x4(%ebp)
f0106040:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106043:	29 d0                	sub    %edx,%eax
f0106045:	a3 74 f7 85 f0       	mov    %eax,0xf085f774

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f010604a:	a1 74 f7 85 f0       	mov    0xf085f774,%eax
f010604f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0106052:	8b 15 74 f7 85 f0    	mov    0xf085f774,%edx
f0106058:	8b 45 08             	mov    0x8(%ebp),%eax
f010605b:	01 d0                	add    %edx,%eax
f010605d:	a3 74 f7 85 f0       	mov    %eax,0xf085f774

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0106062:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0106065:	c9                   	leave  
f0106066:	c3                   	ret    

f0106067 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0106067:	55                   	push   %ebp
f0106068:	89 e5                	mov    %esp,%ebp
f010606a:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f010606d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0106074:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010607b:	eb 53                	jmp    f01060d0 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f010607d:	83 ec 04             	sub    $0x4,%esp
f0106080:	6a 01                	push   $0x1
f0106082:	ff 75 0c             	pushl  0xc(%ebp)
f0106085:	ff 75 08             	pushl  0x8(%ebp)
f0106088:	e8 4e 00 00 00       	call   f01060db <boot_get_page_table>
f010608d:	83 c4 10             	add    $0x10,%esp
f0106090:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0106093:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106096:	c1 e8 0c             	shr    $0xc,%eax
f0106099:	25 ff 03 00 00       	and    $0x3ff,%eax
f010609e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f01060a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060a4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01060ae:	01 c2                	add    %eax,%edx
f01060b0:	8b 45 18             	mov    0x18(%ebp),%eax
f01060b3:	0b 45 14             	or     0x14(%ebp),%eax
f01060b6:	83 c8 01             	or     $0x1,%eax
f01060b9:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f01060bb:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f01060c2:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01060c9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01060d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060d3:	3b 45 10             	cmp    0x10(%ebp),%eax
f01060d6:	72 a5                	jb     f010607d <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f01060d8:	90                   	nop
f01060d9:	c9                   	leave  
f01060da:	c3                   	ret    

f01060db <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f01060db:	55                   	push   %ebp
f01060dc:	89 e5                	mov    %esp,%ebp
f01060de:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f01060e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01060e4:	c1 e8 16             	shr    $0x16,%eax
f01060e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f01060ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060ed:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01060f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01060f7:	01 d0                	add    %edx,%eax
f01060f9:	8b 00                	mov    (%eax),%eax
f01060fb:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f01060fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106101:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106106:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0106109:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010610c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010610f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106112:	c1 e8 0c             	shr    $0xc,%eax
f0106115:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106118:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f010611d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106120:	72 17                	jb     f0106139 <boot_get_page_table+0x5e>
f0106122:	ff 75 e8             	pushl  -0x18(%ebp)
f0106125:	68 d0 61 13 f0       	push   $0xf01361d0
f010612a:	68 15 01 00 00       	push   $0x115
f010612f:	68 88 61 13 f0       	push   $0xf0136188
f0106134:	e8 cc a0 ff ff       	call   f0100205 <_panic>
f0106139:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010613c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106141:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0106144:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106148:	75 72                	jne    f01061bc <boot_get_page_table+0xe1>
	{
		if (create)
f010614a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010614e:	74 65                	je     f01061b5 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0106150:	83 ec 08             	sub    $0x8,%esp
f0106153:	68 00 10 00 00       	push   $0x1000
f0106158:	68 00 10 00 00       	push   $0x1000
f010615d:	e8 a4 fe ff ff       	call   f0106006 <boot_allocate_space>
f0106162:	83 c4 10             	add    $0x10,%esp
f0106165:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106168:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010616b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010616e:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106175:	77 17                	ja     f010618e <boot_get_page_table+0xb3>
f0106177:	ff 75 dc             	pushl  -0x24(%ebp)
f010617a:	68 54 61 13 f0       	push   $0xf0136154
f010617f:	68 1b 01 00 00       	push   $0x11b
f0106184:	68 88 61 13 f0       	push   $0xf0136188
f0106189:	e8 77 a0 ff ff       	call   f0100205 <_panic>
f010618e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106191:	05 00 00 00 10       	add    $0x10000000,%eax
f0106196:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106199:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010619c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01061a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01061a6:	01 d0                	add    %edx,%eax
f01061a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01061ab:	83 ca 03             	or     $0x3,%edx
f01061ae:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f01061b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01061b3:	eb 0a                	jmp    f01061bf <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f01061b5:	b8 00 00 00 00       	mov    $0x0,%eax
f01061ba:	eb 03                	jmp    f01061bf <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f01061bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f01061bf:	c9                   	leave  
f01061c0:	c3                   	ret    

f01061c1 <nvram_read>:


int nvram_read(int r)
{
f01061c1:	55                   	push   %ebp
f01061c2:	89 e5                	mov    %esp,%ebp
f01061c4:	53                   	push   %ebx
f01061c5:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f01061c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01061cb:	83 ec 0c             	sub    $0xc,%esp
f01061ce:	50                   	push   %eax
f01061cf:	e8 9b de ff ff       	call   f010406f <mc146818_read>
f01061d4:	83 c4 10             	add    $0x10,%esp
f01061d7:	89 c3                	mov    %eax,%ebx
f01061d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01061dc:	40                   	inc    %eax
f01061dd:	83 ec 0c             	sub    $0xc,%esp
f01061e0:	50                   	push   %eax
f01061e1:	e8 89 de ff ff       	call   f010406f <mc146818_read>
f01061e6:	83 c4 10             	add    $0x10,%esp
f01061e9:	c1 e0 08             	shl    $0x8,%eax
f01061ec:	09 d8                	or     %ebx,%eax
}
f01061ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01061f1:	c9                   	leave  
f01061f2:	c3                   	ret    

f01061f3 <detect_memory>:

void detect_memory()
{
f01061f3:	55                   	push   %ebp
f01061f4:	89 e5                	mov    %esp,%ebp
f01061f6:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f01061f9:	83 ec 0c             	sub    $0xc,%esp
f01061fc:	6a 15                	push   $0x15
f01061fe:	e8 be ff ff ff       	call   f01061c1 <nvram_read>
f0106203:	83 c4 10             	add    $0x10,%esp
f0106206:	c1 e0 0a             	shl    $0xa,%eax
f0106209:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010620c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010620f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106214:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0106217:	83 ec 0c             	sub    $0xc,%esp
f010621a:	6a 17                	push   $0x17
f010621c:	e8 a0 ff ff ff       	call   f01061c1 <nvram_read>
f0106221:	83 c4 10             	add    $0x10,%esp
f0106224:	c1 e0 0a             	shl    $0xa,%eax
f0106227:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010622a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010622d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106232:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0106235:	83 ec 0c             	sub    $0xc,%esp
f0106238:	6a 34                	push   $0x34
f010623a:	e8 82 ff ff ff       	call   f01061c1 <nvram_read>
f010623f:	83 c4 10             	add    $0x10,%esp
f0106242:	c1 e0 10             	shl    $0x10,%eax
f0106245:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106248:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010624b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106250:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0106253:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0106257:	74 18                	je     f0106271 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0106259:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010625c:	05 00 00 00 01       	add    $0x1000000,%eax
f0106261:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106264:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106267:	2d 00 00 10 00       	sub    $0x100000,%eax
f010626c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010626f:	eb 19                	jmp    f010628a <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106271:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106275:	74 0d                	je     f0106284 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106277:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010627a:	05 00 00 10 00       	add    $0x100000,%eax
f010627f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106282:	eb 06                	jmp    f010628a <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106284:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106287:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f010628a:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0106291:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106294:	c1 e8 0c             	shr    $0xc,%eax
f0106297:	a3 0c f7 85 f0       	mov    %eax,0xf085f70c

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f010629c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010629f:	c1 e8 0a             	shr    $0xa,%eax
f01062a2:	83 ec 08             	sub    $0x8,%esp
f01062a5:	50                   	push   %eax
f01062a6:	68 00 62 13 f0       	push   $0xf0136200
f01062ab:	e8 5e aa ff ff       	call   f0100d0e <cprintf>
f01062b0:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f01062b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062b6:	c1 e8 0a             	shr    $0xa,%eax
f01062b9:	89 c2                	mov    %eax,%edx
f01062bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01062be:	c1 e8 0a             	shr    $0xa,%eax
f01062c1:	83 ec 04             	sub    $0x4,%esp
f01062c4:	52                   	push   %edx
f01062c5:	50                   	push   %eax
f01062c6:	68 21 62 13 f0       	push   $0xf0136221
f01062cb:	e8 3e aa ff ff       	call   f0100d0e <cprintf>
f01062d0:	83 c4 10             	add    $0x10,%esp
}
f01062d3:	90                   	nop
f01062d4:	c9                   	leave  
f01062d5:	c3                   	ret    

f01062d6 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01062d6:	55                   	push   %ebp
f01062d7:	89 e5                	mov    %esp,%ebp
f01062d9:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01062dc:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01062e3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01062ea:	eb 24                	jmp    f0106310 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01062ec:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01062f1:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01062f4:	c1 e2 02             	shl    $0x2,%edx
f01062f7:	01 c2                	add    %eax,%edx
f01062f9:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01062fe:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0106301:	c1 e1 02             	shl    $0x2,%ecx
f0106304:	01 c8                	add    %ecx,%eax
f0106306:	8b 00                	mov    (%eax),%eax
f0106308:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f010630a:	ff 45 fc             	incl   -0x4(%ebp)
f010630d:	ff 45 f8             	incl   -0x8(%ebp)
f0106310:	a1 74 f7 85 f0       	mov    0xf085f774,%eax
f0106315:	c1 e8 16             	shr    $0x16,%eax
f0106318:	89 c2                	mov    %eax,%edx
f010631a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010631d:	39 c2                	cmp    %eax,%edx
f010631f:	77 cb                	ja     f01062ec <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0106321:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f0106326:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106329:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010632c:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f010632f:	0f 20 c0             	mov    %cr0,%eax
f0106332:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f0106335:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106338:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f010633b:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0106342:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f0106346:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106349:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f010634c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010634f:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0106352:	0f 01 15 f0 38 19 f0 	lgdtl  0xf01938f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106359:	b8 23 00 00 00       	mov    $0x23,%eax
f010635e:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106360:	b8 23 00 00 00       	mov    $0x23,%eax
f0106365:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106367:	b8 10 00 00 00       	mov    $0x10,%eax
f010636c:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f010636e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106373:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0106375:	b8 10 00 00 00       	mov    $0x10,%eax
f010637a:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f010637c:	ea 83 63 10 f0 08 00 	ljmp   $0x8,$0xf0106383
	asm volatile("lldt %%ax" :: "a" (0));
f0106383:	b8 00 00 00 00       	mov    $0x0,%eax
f0106388:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f010638b:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0106392:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106399:	eb 19                	jmp    f01063b4 <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f010639b:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01063a0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01063a3:	c1 e2 02             	shl    $0x2,%edx
f01063a6:	01 d0                	add    %edx,%eax
f01063a8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01063ae:	ff 45 f4             	incl   -0xc(%ebp)
f01063b1:	ff 45 f0             	incl   -0x10(%ebp)
f01063b4:	a1 74 f7 85 f0       	mov    0xf085f774,%eax
f01063b9:	c1 e8 16             	shr    $0x16,%eax
f01063bc:	89 c2                	mov    %eax,%edx
f01063be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063c1:	39 c2                	cmp    %eax,%edx
f01063c3:	77 d6                	ja     f010639b <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01063c5:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f01063ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01063cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01063d0:	0f 22 d8             	mov    %eax,%cr3
}
f01063d3:	90                   	nop
f01063d4:	c9                   	leave  
f01063d5:	c3                   	ret    

f01063d6 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01063d6:	55                   	push   %ebp
f01063d7:	89 e5                	mov    %esp,%ebp
f01063d9:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01063dc:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01063e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063e4:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01063eb:	77 17                	ja     f0106404 <setup_listing_to_all_page_tables_entries+0x2e>
f01063ed:	ff 75 f4             	pushl  -0xc(%ebp)
f01063f0:	68 54 61 13 f0       	push   $0xf0136154
f01063f5:	68 ab 01 00 00       	push   $0x1ab
f01063fa:	68 88 61 13 f0       	push   $0xf0136188
f01063ff:	e8 01 9e ff ff       	call   f0100205 <_panic>
f0106404:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106407:	05 00 00 00 10       	add    $0x10000000,%eax
f010640c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f010640f:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0106414:	05 fc 0e 00 00       	add    $0xefc,%eax
f0106419:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010641c:	83 ca 03             	or     $0x3,%edx
f010641f:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0106421:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0106426:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010642c:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0106431:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106434:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f010643b:	77 17                	ja     f0106454 <setup_listing_to_all_page_tables_entries+0x7e>
f010643d:	ff 75 ec             	pushl  -0x14(%ebp)
f0106440:	68 54 61 13 f0       	push   $0xf0136154
f0106445:	68 b0 01 00 00       	push   $0x1b0
f010644a:	68 88 61 13 f0       	push   $0xf0136188
f010644f:	e8 b1 9d ff ff       	call   f0100205 <_panic>
f0106454:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106457:	05 00 00 00 10       	add    $0x10000000,%eax
f010645c:	83 c8 05             	or     $0x5,%eax
f010645f:	89 02                	mov    %eax,(%edx)

}
f0106461:	90                   	nop
f0106462:	c9                   	leave  
f0106463:	c3                   	ret    

f0106464 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106464:	55                   	push   %ebp
f0106465:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106467:	8b 45 08             	mov    0x8(%ebp),%eax
f010646a:	8b 15 50 f7 85 f0    	mov    0xf085f750,%edx
f0106470:	29 d0                	sub    %edx,%eax
f0106472:	c1 f8 03             	sar    $0x3,%eax
f0106475:	89 c2                	mov    %eax,%edx
f0106477:	89 d0                	mov    %edx,%eax
f0106479:	c1 e0 02             	shl    $0x2,%eax
f010647c:	01 d0                	add    %edx,%eax
f010647e:	c1 e0 02             	shl    $0x2,%eax
f0106481:	01 d0                	add    %edx,%eax
f0106483:	c1 e0 02             	shl    $0x2,%eax
f0106486:	01 d0                	add    %edx,%eax
f0106488:	89 c1                	mov    %eax,%ecx
f010648a:	c1 e1 08             	shl    $0x8,%ecx
f010648d:	01 c8                	add    %ecx,%eax
f010648f:	89 c1                	mov    %eax,%ecx
f0106491:	c1 e1 10             	shl    $0x10,%ecx
f0106494:	01 c8                	add    %ecx,%eax
f0106496:	01 c0                	add    %eax,%eax
f0106498:	01 d0                	add    %edx,%eax
}
f010649a:	5d                   	pop    %ebp
f010649b:	c3                   	ret    

f010649c <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010649c:	55                   	push   %ebp
f010649d:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010649f:	ff 75 08             	pushl  0x8(%ebp)
f01064a2:	e8 bd ff ff ff       	call   f0106464 <to_frame_number>
f01064a7:	83 c4 04             	add    $0x4,%esp
f01064aa:	c1 e0 0c             	shl    $0xc,%eax
}
f01064ad:	c9                   	leave  
f01064ae:	c3                   	ret    

f01064af <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f01064af:	55                   	push   %ebp
f01064b0:	89 e5                	mov    %esp,%ebp
f01064b2:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f01064b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01064b8:	c1 e8 0c             	shr    $0xc,%eax
f01064bb:	89 c2                	mov    %eax,%edx
f01064bd:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f01064c2:	39 c2                	cmp    %eax,%edx
f01064c4:	72 14                	jb     f01064da <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f01064c6:	83 ec 04             	sub    $0x4,%esp
f01064c9:	68 40 62 13 f0       	push   $0xf0136240
f01064ce:	6a 55                	push   $0x55
f01064d0:	68 65 62 13 f0       	push   $0xf0136265
f01064d5:	e8 2b 9d ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f01064da:	8b 15 50 f7 85 f0    	mov    0xf085f750,%edx
f01064e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01064e3:	c1 e8 0c             	shr    $0xc,%eax
f01064e6:	89 c1                	mov    %eax,%ecx
f01064e8:	89 c8                	mov    %ecx,%eax
f01064ea:	01 c0                	add    %eax,%eax
f01064ec:	01 c8                	add    %ecx,%eax
f01064ee:	c1 e0 03             	shl    $0x3,%eax
f01064f1:	01 d0                	add    %edx,%eax
}
f01064f3:	c9                   	leave  
f01064f4:	c3                   	ret    

f01064f5 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f01064f5:	55                   	push   %ebp
f01064f6:	89 e5                	mov    %esp,%ebp
f01064f8:	83 ec 10             	sub    $0x10,%esp
f01064fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01064fe:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0106501:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0106504:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0106507:	90                   	nop
f0106508:	c9                   	leave  
f0106509:	c3                   	ret    

f010650a <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f010650a:	55                   	push   %ebp
f010650b:	89 e5                	mov    %esp,%ebp
f010650d:	53                   	push   %ebx
f010650e:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f0106511:	c7 05 14 f7 85 f0 00 	movl   $0x0,0xf085f714
f0106518:	00 00 00 
f010651b:	c7 05 18 f7 85 f0 00 	movl   $0x0,0xf085f718
f0106522:	00 00 00 
f0106525:	c7 05 20 f7 85 f0 00 	movl   $0x0,0xf085f720
f010652c:	00 00 00 
	LIST_INIT(&modified_frame_list);
f010652f:	c7 05 b4 f6 85 f0 00 	movl   $0x0,0xf085f6b4
f0106536:	00 00 00 
f0106539:	c7 05 b8 f6 85 f0 00 	movl   $0x0,0xf085f6b8
f0106540:	00 00 00 
f0106543:	c7 05 c0 f6 85 f0 00 	movl   $0x0,0xf085f6c0
f010654a:	00 00 00 

	frames_info[0].references = 1;
f010654d:	a1 50 f7 85 f0       	mov    0xf085f750,%eax
f0106552:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106558:	a1 50 f7 85 f0       	mov    0xf085f750,%eax
f010655d:	83 c0 18             	add    $0x18,%eax
f0106560:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0106566:	a1 50 f7 85 f0       	mov    0xf085f750,%eax
f010656b:	83 c0 30             	add    $0x30,%eax
f010656e:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0106574:	c7 05 5c f7 85 f0 00 	movl   $0xf0001000,0xf085f75c
f010657b:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f010657e:	c7 05 80 f7 85 f0 00 	movl   $0xf0002000,0xf085f780
f0106585:	20 00 f0 
	i =0;
f0106588:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f010658f:	eb 1f                	jmp    f01065b0 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f0106591:	8b 15 5c f7 85 f0    	mov    0xf085f75c,%edx
f0106597:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010659a:	01 d0                	add    %edx,%eax
f010659c:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f010659f:	8b 15 80 f7 85 f0    	mov    0xf085f780,%edx
f01065a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065a8:	01 d0                	add    %edx,%eax
f01065aa:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f01065ad:	ff 45 f4             	incl   -0xc(%ebp)
f01065b0:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f01065b7:	7e d8                	jle    f0106591 <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f01065b9:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01065c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065c3:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01065c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01065cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01065d3:	f7 75 f0             	divl   -0x10(%ebp)
f01065d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01065d9:	29 d0                	sub    %edx,%eax
f01065db:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065de:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01065e5:	e9 e8 00 00 00       	jmp    f01066d2 <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f01065ea:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f01065f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065f3:	89 d0                	mov    %edx,%eax
f01065f5:	01 c0                	add    %eax,%eax
f01065f7:	01 d0                	add    %edx,%eax
f01065f9:	c1 e0 03             	shl    $0x3,%eax
f01065fc:	01 c8                	add    %ecx,%eax
f01065fe:	83 ec 0c             	sub    $0xc,%esp
f0106601:	50                   	push   %eax
f0106602:	e8 b7 02 00 00       	call   f01068be <initialize_frame_info>
f0106607:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010660a:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f0106610:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106613:	89 d0                	mov    %edx,%eax
f0106615:	01 c0                	add    %eax,%eax
f0106617:	01 d0                	add    %edx,%eax
f0106619:	c1 e0 03             	shl    $0x3,%eax
f010661c:	01 c8                	add    %ecx,%eax
f010661e:	85 c0                	test   %eax,%eax
f0106620:	75 14                	jne    f0106636 <initialize_paging+0x12c>
f0106622:	83 ec 04             	sub    $0x4,%esp
f0106625:	68 80 62 13 f0       	push   $0xf0136280
f010662a:	6a 5c                	push   $0x5c
f010662c:	68 a3 62 13 f0       	push   $0xf01362a3
f0106631:	e8 cf 9b ff ff       	call   f0100205 <_panic>
f0106636:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f010663c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010663f:	89 d0                	mov    %edx,%eax
f0106641:	01 c0                	add    %eax,%eax
f0106643:	01 d0                	add    %edx,%eax
f0106645:	c1 e0 03             	shl    $0x3,%eax
f0106648:	01 c8                	add    %ecx,%eax
f010664a:	8b 15 14 f7 85 f0    	mov    0xf085f714,%edx
f0106650:	89 10                	mov    %edx,(%eax)
f0106652:	8b 00                	mov    (%eax),%eax
f0106654:	85 c0                	test   %eax,%eax
f0106656:	74 1f                	je     f0106677 <initialize_paging+0x16d>
f0106658:	8b 15 14 f7 85 f0    	mov    0xf085f714,%edx
f010665e:	8b 1d 50 f7 85 f0    	mov    0xf085f750,%ebx
f0106664:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106667:	89 c8                	mov    %ecx,%eax
f0106669:	01 c0                	add    %eax,%eax
f010666b:	01 c8                	add    %ecx,%eax
f010666d:	c1 e0 03             	shl    $0x3,%eax
f0106670:	01 d8                	add    %ebx,%eax
f0106672:	89 42 04             	mov    %eax,0x4(%edx)
f0106675:	eb 19                	jmp    f0106690 <initialize_paging+0x186>
f0106677:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f010667d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106680:	89 d0                	mov    %edx,%eax
f0106682:	01 c0                	add    %eax,%eax
f0106684:	01 d0                	add    %edx,%eax
f0106686:	c1 e0 03             	shl    $0x3,%eax
f0106689:	01 c8                	add    %ecx,%eax
f010668b:	a3 18 f7 85 f0       	mov    %eax,0xf085f718
f0106690:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f0106696:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106699:	89 d0                	mov    %edx,%eax
f010669b:	01 c0                	add    %eax,%eax
f010669d:	01 d0                	add    %edx,%eax
f010669f:	c1 e0 03             	shl    $0x3,%eax
f01066a2:	01 c8                	add    %ecx,%eax
f01066a4:	a3 14 f7 85 f0       	mov    %eax,0xf085f714
f01066a9:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f01066af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066b2:	89 d0                	mov    %edx,%eax
f01066b4:	01 c0                	add    %eax,%eax
f01066b6:	01 d0                	add    %edx,%eax
f01066b8:	c1 e0 03             	shl    $0x3,%eax
f01066bb:	01 c8                	add    %ecx,%eax
f01066bd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01066c4:	a1 20 f7 85 f0       	mov    0xf085f720,%eax
f01066c9:	40                   	inc    %eax
f01066ca:	a3 20 f7 85 f0       	mov    %eax,0xf085f720
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01066cf:	ff 45 f4             	incl   -0xc(%ebp)
f01066d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01066d5:	85 c0                	test   %eax,%eax
f01066d7:	79 05                	jns    f01066de <initialize_paging+0x1d4>
f01066d9:	05 ff 0f 00 00       	add    $0xfff,%eax
f01066de:	c1 f8 0c             	sar    $0xc,%eax
f01066e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01066e4:	0f 8f 00 ff ff ff    	jg     f01065ea <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01066ea:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01066f1:	eb 1d                	jmp    f0106710 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f01066f3:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f01066f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066fc:	89 d0                	mov    %edx,%eax
f01066fe:	01 c0                	add    %eax,%eax
f0106700:	01 d0                	add    %edx,%eax
f0106702:	c1 e0 03             	shl    $0x3,%eax
f0106705:	01 c8                	add    %ecx,%eax
f0106707:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f010670d:	ff 45 f4             	incl   -0xc(%ebp)
f0106710:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0106717:	7e da                	jle    f01066f3 <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0106719:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0106720:	a1 74 f7 85 f0       	mov    0xf085f774,%eax
f0106725:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106728:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f010672f:	77 14                	ja     f0106745 <initialize_paging+0x23b>
f0106731:	ff 75 e0             	pushl  -0x20(%ebp)
f0106734:	68 c0 62 13 f0       	push   $0xf01362c0
f0106739:	6a 64                	push   $0x64
f010673b:	68 a3 62 13 f0       	push   $0xf01362a3
f0106740:	e8 c0 9a ff ff       	call   f0100205 <_panic>
f0106745:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106748:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010674e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106751:	01 d0                	add    %edx,%eax
f0106753:	48                   	dec    %eax
f0106754:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106757:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010675a:	ba 00 00 00 00       	mov    $0x0,%edx
f010675f:	f7 75 e4             	divl   -0x1c(%ebp)
f0106762:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106765:	29 d0                	sub    %edx,%eax
f0106767:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010676a:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0106771:	eb 1d                	jmp    f0106790 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f0106773:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f0106779:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010677c:	89 d0                	mov    %edx,%eax
f010677e:	01 c0                	add    %eax,%eax
f0106780:	01 d0                	add    %edx,%eax
f0106782:	c1 e0 03             	shl    $0x3,%eax
f0106785:	01 c8                	add    %ecx,%eax
f0106787:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f010678d:	ff 45 f4             	incl   -0xc(%ebp)
f0106790:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106793:	85 c0                	test   %eax,%eax
f0106795:	79 05                	jns    f010679c <initialize_paging+0x292>
f0106797:	05 ff 0f 00 00       	add    $0xfff,%eax
f010679c:	c1 f8 0c             	sar    $0xc,%eax
f010679f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01067a2:	7f cf                	jg     f0106773 <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01067a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01067a7:	85 c0                	test   %eax,%eax
f01067a9:	79 05                	jns    f01067b0 <initialize_paging+0x2a6>
f01067ab:	05 ff 0f 00 00       	add    $0xfff,%eax
f01067b0:	c1 f8 0c             	sar    $0xc,%eax
f01067b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01067b6:	e9 e8 00 00 00       	jmp    f01068a3 <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f01067bb:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f01067c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067c4:	89 d0                	mov    %edx,%eax
f01067c6:	01 c0                	add    %eax,%eax
f01067c8:	01 d0                	add    %edx,%eax
f01067ca:	c1 e0 03             	shl    $0x3,%eax
f01067cd:	01 c8                	add    %ecx,%eax
f01067cf:	83 ec 0c             	sub    $0xc,%esp
f01067d2:	50                   	push   %eax
f01067d3:	e8 e6 00 00 00       	call   f01068be <initialize_frame_info>
f01067d8:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01067db:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f01067e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01067e4:	89 d0                	mov    %edx,%eax
f01067e6:	01 c0                	add    %eax,%eax
f01067e8:	01 d0                	add    %edx,%eax
f01067ea:	c1 e0 03             	shl    $0x3,%eax
f01067ed:	01 c8                	add    %ecx,%eax
f01067ef:	85 c0                	test   %eax,%eax
f01067f1:	75 14                	jne    f0106807 <initialize_paging+0x2fd>
f01067f3:	83 ec 04             	sub    $0x4,%esp
f01067f6:	68 80 62 13 f0       	push   $0xf0136280
f01067fb:	6a 70                	push   $0x70
f01067fd:	68 a3 62 13 f0       	push   $0xf01362a3
f0106802:	e8 fe 99 ff ff       	call   f0100205 <_panic>
f0106807:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f010680d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106810:	89 d0                	mov    %edx,%eax
f0106812:	01 c0                	add    %eax,%eax
f0106814:	01 d0                	add    %edx,%eax
f0106816:	c1 e0 03             	shl    $0x3,%eax
f0106819:	01 c8                	add    %ecx,%eax
f010681b:	8b 15 14 f7 85 f0    	mov    0xf085f714,%edx
f0106821:	89 10                	mov    %edx,(%eax)
f0106823:	8b 00                	mov    (%eax),%eax
f0106825:	85 c0                	test   %eax,%eax
f0106827:	74 1f                	je     f0106848 <initialize_paging+0x33e>
f0106829:	8b 15 14 f7 85 f0    	mov    0xf085f714,%edx
f010682f:	8b 1d 50 f7 85 f0    	mov    0xf085f750,%ebx
f0106835:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106838:	89 c8                	mov    %ecx,%eax
f010683a:	01 c0                	add    %eax,%eax
f010683c:	01 c8                	add    %ecx,%eax
f010683e:	c1 e0 03             	shl    $0x3,%eax
f0106841:	01 d8                	add    %ebx,%eax
f0106843:	89 42 04             	mov    %eax,0x4(%edx)
f0106846:	eb 19                	jmp    f0106861 <initialize_paging+0x357>
f0106848:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f010684e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106851:	89 d0                	mov    %edx,%eax
f0106853:	01 c0                	add    %eax,%eax
f0106855:	01 d0                	add    %edx,%eax
f0106857:	c1 e0 03             	shl    $0x3,%eax
f010685a:	01 c8                	add    %ecx,%eax
f010685c:	a3 18 f7 85 f0       	mov    %eax,0xf085f718
f0106861:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f0106867:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010686a:	89 d0                	mov    %edx,%eax
f010686c:	01 c0                	add    %eax,%eax
f010686e:	01 d0                	add    %edx,%eax
f0106870:	c1 e0 03             	shl    $0x3,%eax
f0106873:	01 c8                	add    %ecx,%eax
f0106875:	a3 14 f7 85 f0       	mov    %eax,0xf085f714
f010687a:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f0106880:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106883:	89 d0                	mov    %edx,%eax
f0106885:	01 c0                	add    %eax,%eax
f0106887:	01 d0                	add    %edx,%eax
f0106889:	c1 e0 03             	shl    $0x3,%eax
f010688c:	01 c8                	add    %ecx,%eax
f010688e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106895:	a1 20 f7 85 f0       	mov    0xf085f720,%eax
f010689a:	40                   	inc    %eax
f010689b:	a3 20 f7 85 f0       	mov    %eax,0xf085f720
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f01068a0:	ff 45 f4             	incl   -0xc(%ebp)
f01068a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01068a6:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f01068ab:	39 c2                	cmp    %eax,%edx
f01068ad:	0f 82 08 ff ff ff    	jb     f01067bb <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01068b3:	e8 eb c8 ff ff       	call   f01031a3 <initialize_disk_page_file>
}
f01068b8:	90                   	nop
f01068b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01068bc:	c9                   	leave  
f01068bd:	c3                   	ret    

f01068be <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01068be:	55                   	push   %ebp
f01068bf:	89 e5                	mov    %esp,%ebp
f01068c1:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01068c4:	83 ec 04             	sub    $0x4,%esp
f01068c7:	6a 18                	push   $0x18
f01068c9:	6a 00                	push   $0x0
f01068cb:	ff 75 08             	pushl  0x8(%ebp)
f01068ce:	e8 20 b3 02 00       	call   f0131bf3 <memset>
f01068d3:	83 c4 10             	add    $0x10,%esp
}
f01068d6:	90                   	nop
f01068d7:	c9                   	leave  
f01068d8:	c3                   	ret    

f01068d9 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01068d9:	55                   	push   %ebp
f01068da:	89 e5                	mov    %esp,%ebp
f01068dc:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01068df:	8b 15 14 f7 85 f0    	mov    0xf085f714,%edx
f01068e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01068e8:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01068ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01068f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01068f4:	8b 00                	mov    (%eax),%eax
f01068f6:	85 c0                	test   %eax,%eax
f01068f8:	75 17                	jne    f0106911 <allocate_frame+0x38>
	{
		//[KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01068fa:	83 ec 04             	sub    $0x4,%esp
f01068fd:	68 f4 62 13 f0       	push   $0xf01362f4
f0106902:	68 99 00 00 00       	push   $0x99
f0106907:	68 a3 62 13 f0       	push   $0xf01362a3
f010690c:	e8 f4 98 ff ff       	call   f0100205 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f0106911:	8b 45 08             	mov    0x8(%ebp),%eax
f0106914:	8b 00                	mov    (%eax),%eax
f0106916:	85 c0                	test   %eax,%eax
f0106918:	75 17                	jne    f0106931 <allocate_frame+0x58>
f010691a:	83 ec 04             	sub    $0x4,%esp
f010691d:	68 41 63 13 f0       	push   $0xf0136341
f0106922:	68 9c 00 00 00       	push   $0x9c
f0106927:	68 a3 62 13 f0       	push   $0xf01362a3
f010692c:	e8 d4 98 ff ff       	call   f0100205 <_panic>
f0106931:	8b 45 08             	mov    0x8(%ebp),%eax
f0106934:	8b 00                	mov    (%eax),%eax
f0106936:	8b 00                	mov    (%eax),%eax
f0106938:	85 c0                	test   %eax,%eax
f010693a:	74 14                	je     f0106950 <allocate_frame+0x77>
f010693c:	8b 45 08             	mov    0x8(%ebp),%eax
f010693f:	8b 00                	mov    (%eax),%eax
f0106941:	8b 00                	mov    (%eax),%eax
f0106943:	8b 55 08             	mov    0x8(%ebp),%edx
f0106946:	8b 12                	mov    (%edx),%edx
f0106948:	8b 52 04             	mov    0x4(%edx),%edx
f010694b:	89 50 04             	mov    %edx,0x4(%eax)
f010694e:	eb 0d                	jmp    f010695d <allocate_frame+0x84>
f0106950:	8b 45 08             	mov    0x8(%ebp),%eax
f0106953:	8b 00                	mov    (%eax),%eax
f0106955:	8b 40 04             	mov    0x4(%eax),%eax
f0106958:	a3 18 f7 85 f0       	mov    %eax,0xf085f718
f010695d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106960:	8b 00                	mov    (%eax),%eax
f0106962:	8b 40 04             	mov    0x4(%eax),%eax
f0106965:	85 c0                	test   %eax,%eax
f0106967:	74 13                	je     f010697c <allocate_frame+0xa3>
f0106969:	8b 45 08             	mov    0x8(%ebp),%eax
f010696c:	8b 00                	mov    (%eax),%eax
f010696e:	8b 40 04             	mov    0x4(%eax),%eax
f0106971:	8b 55 08             	mov    0x8(%ebp),%edx
f0106974:	8b 12                	mov    (%edx),%edx
f0106976:	8b 12                	mov    (%edx),%edx
f0106978:	89 10                	mov    %edx,(%eax)
f010697a:	eb 0c                	jmp    f0106988 <allocate_frame+0xaf>
f010697c:	8b 45 08             	mov    0x8(%ebp),%eax
f010697f:	8b 00                	mov    (%eax),%eax
f0106981:	8b 00                	mov    (%eax),%eax
f0106983:	a3 14 f7 85 f0       	mov    %eax,0xf085f714
f0106988:	8b 45 08             	mov    0x8(%ebp),%eax
f010698b:	8b 00                	mov    (%eax),%eax
f010698d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0106993:	8b 45 08             	mov    0x8(%ebp),%eax
f0106996:	8b 00                	mov    (%eax),%eax
f0106998:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010699f:	a1 20 f7 85 f0       	mov    0xf085f720,%eax
f01069a4:	48                   	dec    %eax
f01069a5:	a3 20 f7 85 f0       	mov    %eax,0xf085f720

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f01069aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01069ad:	8b 00                	mov    (%eax),%eax
f01069af:	8a 40 14             	mov    0x14(%eax),%al
f01069b2:	84 c0                	test   %al,%al
f01069b4:	74 20                	je     f01069d6 <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f01069b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01069b9:	8b 00                	mov    (%eax),%eax
f01069bb:	8b 50 0c             	mov    0xc(%eax),%edx
f01069be:	8b 45 08             	mov    0x8(%ebp),%eax
f01069c1:	8b 00                	mov    (%eax),%eax
f01069c3:	8b 40 10             	mov    0x10(%eax),%eax
f01069c6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01069c9:	83 ec 08             	sub    $0x8,%esp
f01069cc:	52                   	push   %edx
f01069cd:	50                   	push   %eax
f01069ce:	e8 5a 16 00 00       	call   f010802d <pt_clear_page_table_entry>
f01069d3:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01069d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01069d9:	8b 00                	mov    (%eax),%eax
f01069db:	83 ec 0c             	sub    $0xc,%esp
f01069de:	50                   	push   %eax
f01069df:	e8 da fe ff ff       	call   f01068be <initialize_frame_info>
f01069e4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01069e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01069ec:	c9                   	leave  
f01069ed:	c3                   	ret    

f01069ee <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01069ee:	55                   	push   %ebp
f01069ef:	89 e5                	mov    %esp,%ebp
f01069f1:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01069f4:	83 ec 0c             	sub    $0xc,%esp
f01069f7:	ff 75 08             	pushl  0x8(%ebp)
f01069fa:	e8 bf fe ff ff       	call   f01068be <initialize_frame_info>
f01069ff:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0106a02:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0106a06:	75 17                	jne    f0106a1f <free_frame+0x31>
f0106a08:	83 ec 04             	sub    $0x4,%esp
f0106a0b:	68 80 62 13 f0       	push   $0xf0136280
f0106a10:	68 b9 00 00 00       	push   $0xb9
f0106a15:	68 a3 62 13 f0       	push   $0xf01362a3
f0106a1a:	e8 e6 97 ff ff       	call   f0100205 <_panic>
f0106a1f:	8b 15 14 f7 85 f0    	mov    0xf085f714,%edx
f0106a25:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a28:	89 10                	mov    %edx,(%eax)
f0106a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a2d:	8b 00                	mov    (%eax),%eax
f0106a2f:	85 c0                	test   %eax,%eax
f0106a31:	74 0d                	je     f0106a40 <free_frame+0x52>
f0106a33:	a1 14 f7 85 f0       	mov    0xf085f714,%eax
f0106a38:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a3b:	89 50 04             	mov    %edx,0x4(%eax)
f0106a3e:	eb 08                	jmp    f0106a48 <free_frame+0x5a>
f0106a40:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a43:	a3 18 f7 85 f0       	mov    %eax,0xf085f718
f0106a48:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a4b:	a3 14 f7 85 f0       	mov    %eax,0xf085f714
f0106a50:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a53:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106a5a:	a1 20 f7 85 f0       	mov    0xf085f720,%eax
f0106a5f:	40                   	inc    %eax
f0106a60:	a3 20 f7 85 f0       	mov    %eax,0xf085f720
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f0106a65:	90                   	nop
f0106a66:	c9                   	leave  
f0106a67:	c3                   	ret    

f0106a68 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106a68:	55                   	push   %ebp
f0106a69:	89 e5                	mov    %esp,%ebp
f0106a6b:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106a6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a71:	8b 40 08             	mov    0x8(%eax),%eax
f0106a74:	48                   	dec    %eax
f0106a75:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a78:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106a7c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a7f:	8b 40 08             	mov    0x8(%eax),%eax
f0106a82:	66 85 c0             	test   %ax,%ax
f0106a85:	75 0e                	jne    f0106a95 <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106a87:	83 ec 0c             	sub    $0xc,%esp
f0106a8a:	ff 75 08             	pushl  0x8(%ebp)
f0106a8d:	e8 5c ff ff ff       	call   f01069ee <free_frame>
f0106a92:	83 c4 10             	add    $0x10,%esp
}
f0106a95:	90                   	nop
f0106a96:	c9                   	leave  
f0106a97:	c3                   	ret    

f0106a98 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a98:	55                   	push   %ebp
f0106a99:	89 e5                	mov    %esp,%ebp
f0106a9b:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106a9e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106aa1:	c1 e8 16             	shr    $0x16,%eax
f0106aa4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106aab:	8b 45 08             	mov    0x8(%ebp),%eax
f0106aae:	01 d0                	add    %edx,%eax
f0106ab0:	8b 00                	mov    (%eax),%eax
f0106ab2:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ab8:	83 e0 01             	and    $0x1,%eax
f0106abb:	85 c0                	test   %eax,%eax
f0106abd:	74 74                	je     f0106b33 <get_page_table+0x9b>
	{
		//	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106abf:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106ac6:	77 1d                	ja     f0106ae5 <get_page_table+0x4d>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ac8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106acb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106ad0:	83 ec 0c             	sub    $0xc,%esp
f0106ad3:	50                   	push   %eax
f0106ad4:	e8 d6 12 00 00       	call   f0107daf <kheap_virtual_address>
f0106ad9:	83 c4 10             	add    $0x10,%esp
f0106adc:	89 c2                	mov    %eax,%edx
f0106ade:	8b 45 10             	mov    0x10(%ebp),%eax
f0106ae1:	89 10                	mov    %edx,(%eax)
f0106ae3:	eb 44                	jmp    f0106b29 <get_page_table+0x91>
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ae8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106aed:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106af0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106af3:	c1 e8 0c             	shr    $0xc,%eax
f0106af6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106af9:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f0106afe:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0106b01:	72 17                	jb     f0106b1a <get_page_table+0x82>
f0106b03:	ff 75 f0             	pushl  -0x10(%ebp)
f0106b06:	68 60 63 13 f0       	push   $0xf0136360
f0106b0b:	68 e2 00 00 00       	push   $0xe2
f0106b10:	68 a3 62 13 f0       	push   $0xf01362a3
f0106b15:	e8 eb 96 ff ff       	call   f0100205 <_panic>
f0106b1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106b1d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106b22:	89 c2                	mov    %eax,%edx
f0106b24:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b27:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0106b29:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b2e:	e9 b9 00 00 00       	jmp    f0106bec <get_page_table+0x154>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0106b33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106b37:	0f 84 a1 00 00 00    	je     f0106bde <get_page_table+0x146>
f0106b3d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b40:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0106b43:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b46:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0106b49:	83 ec 0c             	sub    $0xc,%esp
f0106b4c:	6a 00                	push   $0x0
f0106b4e:	e8 70 61 00 00       	call   f010ccc3 <fault_handler>
f0106b53:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106b56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b59:	c1 e8 16             	shr    $0x16,%eax
f0106b5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b63:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b66:	01 d0                	add    %edx,%eax
f0106b68:	8b 00                	mov    (%eax),%eax
f0106b6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106b6d:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106b74:	77 1d                	ja     f0106b93 <get_page_table+0xfb>
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b79:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b7e:	83 ec 0c             	sub    $0xc,%esp
f0106b81:	50                   	push   %eax
f0106b82:	e8 28 12 00 00       	call   f0107daf <kheap_virtual_address>
f0106b87:	83 c4 10             	add    $0x10,%esp
f0106b8a:	89 c2                	mov    %eax,%edx
f0106b8c:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b8f:	89 10                	mov    %edx,(%eax)
f0106b91:	eb 44                	jmp    f0106bd7 <get_page_table+0x13f>
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106b93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b96:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106b9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106b9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ba1:	c1 e8 0c             	shr    $0xc,%eax
f0106ba4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106ba7:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f0106bac:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106baf:	72 17                	jb     f0106bc8 <get_page_table+0x130>
f0106bb1:	ff 75 e8             	pushl  -0x18(%ebp)
f0106bb4:	68 60 63 13 f0       	push   $0xf0136360
f0106bb9:	68 fa 00 00 00       	push   $0xfa
f0106bbe:	68 a3 62 13 f0       	push   $0xf01362a3
f0106bc3:	e8 3d 96 ff ff       	call   f0100205 <_panic>
f0106bc8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106bcb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106bd0:	89 c2                	mov    %eax,%edx
f0106bd2:	8b 45 10             	mov    0x10(%ebp),%eax
f0106bd5:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106bd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bdc:	eb 0e                	jmp    f0106bec <get_page_table+0x154>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106bde:	8b 45 10             	mov    0x10(%ebp),%eax
f0106be1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106be7:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106bec:	c9                   	leave  
f0106bed:	c3                   	ret    

f0106bee <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106bee:	55                   	push   %ebp
f0106bef:	89 e5                	mov    %esp,%ebp
f0106bf1:	53                   	push   %ebx
f0106bf2:	83 ec 14             	sub    $0x14,%esp
	//	b.	clear the TLB cache (using "tlbflush()")

	//change this "return" according to your answer

#if USE_KHEAP
	uint32 * ptr_page_table = kmalloc(PAGE_SIZE);
f0106bf5:	83 ec 0c             	sub    $0xc,%esp
f0106bf8:	68 00 10 00 00       	push   $0x1000
f0106bfd:	e8 62 0f 00 00       	call   f0107b64 <kmalloc>
f0106c02:	83 c4 10             	add    $0x10,%esp
f0106c05:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_page_table == NULL)
f0106c08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c0c:	75 17                	jne    f0106c25 <create_page_table+0x37>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0106c0e:	83 ec 04             	sub    $0x4,%esp
f0106c11:	68 8f 63 13 f0       	push   $0xf013638f
f0106c16:	68 18 01 00 00       	push   $0x118
f0106c1b:	68 a3 62 13 f0       	push   $0xf01362a3
f0106c20:	e8 e0 95 ff ff       	call   f0100205 <_panic>
	}
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0106c25:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c28:	c1 e8 16             	shr    $0x16,%eax
f0106c2b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106c32:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c35:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0106c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c3b:	83 ec 0c             	sub    $0xc,%esp
f0106c3e:	50                   	push   %eax
f0106c3f:	e8 ac 11 00 00       	call   f0107df0 <kheap_physical_address>
f0106c44:	83 c4 10             	add    $0x10,%esp
f0106c47:	83 c8 07             	or     $0x7,%eax
f0106c4a:	89 03                	mov    %eax,(%ebx)
			kheap_physical_address((unsigned int)ptr_page_table)
			, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	//================
	memset(ptr_page_table , 0, PAGE_SIZE);
f0106c4c:	83 ec 04             	sub    $0x4,%esp
f0106c4f:	68 00 10 00 00       	push   $0x1000
f0106c54:	6a 00                	push   $0x0
f0106c56:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c59:	e8 95 af 02 00       	call   f0131bf3 <memset>
f0106c5e:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106c61:	0f 20 d8             	mov    %cr3,%eax
f0106c64:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106c67:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106c6a:	0f 22 d8             	mov    %eax,%cr3
#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
#endif

	return ptr_page_table;
f0106c6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106c70:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106c73:	c9                   	leave  
f0106c74:	c3                   	ret    

f0106c75 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c75:	55                   	push   %ebp
f0106c76:	89 e5                	mov    %esp,%ebp
f0106c78:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106c7b:	83 ec 0c             	sub    $0xc,%esp
f0106c7e:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106c81:	50                   	push   %eax
f0106c82:	e8 52 fc ff ff       	call   f01068d9 <allocate_frame>
f0106c87:	83 c4 10             	add    $0x10,%esp
f0106c8a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106c8d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106c90:	83 ec 0c             	sub    $0xc,%esp
f0106c93:	50                   	push   %eax
f0106c94:	e8 03 f8 ff ff       	call   f010649c <to_physical_address>
f0106c99:	83 c4 10             	add    $0x10,%esp
f0106c9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ca2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106ca5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ca8:	c1 e8 0c             	shr    $0xc,%eax
f0106cab:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106cae:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f0106cb3:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106cb6:	72 17                	jb     f0106ccf <__static_cpt+0x5a>
f0106cb8:	ff 75 ec             	pushl  -0x14(%ebp)
f0106cbb:	68 60 63 13 f0       	push   $0xf0136360
f0106cc0:	68 30 01 00 00       	push   $0x130
f0106cc5:	68 a3 62 13 f0       	push   $0xf01362a3
f0106cca:	e8 36 95 ff ff       	call   f0100205 <_panic>
f0106ccf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cd2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106cd7:	89 c2                	mov    %eax,%edx
f0106cd9:	8b 45 10             	mov    0x10(%ebp),%eax
f0106cdc:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106cde:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ce1:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106cea:	c1 e8 16             	shr    $0x16,%eax
f0106ced:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106cf4:	8b 45 08             	mov    0x8(%ebp),%eax
f0106cf7:	01 d0                	add    %edx,%eax
f0106cf9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106cfc:	83 ca 07             	or     $0x7,%edx
f0106cff:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106d01:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d04:	8b 00                	mov    (%eax),%eax
f0106d06:	83 ec 04             	sub    $0x4,%esp
f0106d09:	68 00 10 00 00       	push   $0x1000
f0106d0e:	6a 00                	push   $0x0
f0106d10:	50                   	push   %eax
f0106d11:	e8 dd ae 02 00       	call   f0131bf3 <memset>
f0106d16:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106d19:	0f 20 d8             	mov    %cr3,%eax
f0106d1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106d1f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d22:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106d25:	90                   	nop
f0106d26:	c9                   	leave  
f0106d27:	c3                   	ret    

f0106d28 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d28:	55                   	push   %ebp
f0106d29:	89 e5                	mov    %esp,%ebp
f0106d2b:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d2e:	ff 75 0c             	pushl  0xc(%ebp)
f0106d31:	e8 66 f7 ff ff       	call   f010649c <to_physical_address>
f0106d36:	83 c4 04             	add    $0x4,%esp
f0106d39:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106d3c:	83 ec 04             	sub    $0x4,%esp
f0106d3f:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0106d42:	50                   	push   %eax
f0106d43:	ff 75 10             	pushl  0x10(%ebp)
f0106d46:	ff 75 08             	pushl  0x8(%ebp)
f0106d49:	e8 4a fd ff ff       	call   f0106a98 <get_page_table>
f0106d4e:	83 c4 10             	add    $0x10,%esp
f0106d51:	83 f8 01             	cmp    $0x1,%eax
f0106d54:	75 1b                	jne    f0106d71 <map_frame+0x49>
		//page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		//ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		=============================================================================================*/
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0106d56:	83 ec 08             	sub    $0x8,%esp
f0106d59:	ff 75 10             	pushl  0x10(%ebp)
f0106d5c:	ff 75 08             	pushl  0x8(%ebp)
f0106d5f:	e8 8a fe ff ff       	call   f0106bee <create_page_table>
f0106d64:	83 c4 10             	add    $0x10,%esp
f0106d67:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//cprintf("======>page table created using kheap for VA %x at dir = %x PT = %x\n", virtual_address, ptr_page_directory[PDX(virtual_address)], ptr_page_table);
			uint32* ptr_page_table2 =NULL;
f0106d6a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106d71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106d74:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d77:	c1 ea 0c             	shr    $0xc,%edx
f0106d7a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106d80:	c1 e2 02             	shl    $0x2,%edx
f0106d83:	01 d0                	add    %edx,%eax
f0106d85:	8b 00                	mov    (%eax),%eax
f0106d87:	89 45 ec             	mov    %eax,-0x14(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106d8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d8d:	83 e0 01             	and    $0x1,%eax
f0106d90:	85 c0                	test   %eax,%eax
f0106d92:	74 25                	je     f0106db9 <map_frame+0x91>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106d94:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d97:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d9c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106d9f:	75 07                	jne    f0106da8 <map_frame+0x80>
			return 0;
f0106da1:	b8 00 00 00 00       	mov    $0x0,%eax
f0106da6:	eb 43                	jmp    f0106deb <map_frame+0xc3>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106da8:	83 ec 08             	sub    $0x8,%esp
f0106dab:	ff 75 10             	pushl  0x10(%ebp)
f0106dae:	ff 75 08             	pushl  0x8(%ebp)
f0106db1:	e8 a7 00 00 00       	call   f0106e5d <unmap_frame>
f0106db6:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106db9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106dbc:	8b 40 08             	mov    0x8(%eax),%eax
f0106dbf:	40                   	inc    %eax
f0106dc0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106dc3:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106dc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106dca:	8b 55 10             	mov    0x10(%ebp),%edx
f0106dcd:	c1 ea 0c             	shr    $0xc,%edx
f0106dd0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106dd6:	c1 e2 02             	shl    $0x2,%edx
f0106dd9:	01 c2                	add    %eax,%edx
f0106ddb:	8b 45 14             	mov    0x14(%ebp),%eax
f0106dde:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106de1:	83 c8 01             	or     $0x1,%eax
f0106de4:	89 02                	mov    %eax,(%edx)

	return 0;
f0106de6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106deb:	c9                   	leave  
f0106dec:	c3                   	ret    

f0106ded <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106ded:	55                   	push   %ebp
f0106dee:	89 e5                	mov    %esp,%ebp
f0106df0:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106df3:	83 ec 04             	sub    $0x4,%esp
f0106df6:	ff 75 10             	pushl  0x10(%ebp)
f0106df9:	ff 75 0c             	pushl  0xc(%ebp)
f0106dfc:	ff 75 08             	pushl  0x8(%ebp)
f0106dff:	e8 94 fc ff ff       	call   f0106a98 <get_page_table>
f0106e04:	83 c4 10             	add    $0x10,%esp
f0106e07:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106e0a:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e0d:	8b 00                	mov    (%eax),%eax
f0106e0f:	85 c0                	test   %eax,%eax
f0106e11:	74 43                	je     f0106e56 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106e13:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106e16:	c1 e8 0c             	shr    $0xc,%eax
f0106e19:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106e1e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106e21:	8b 45 10             	mov    0x10(%ebp),%eax
f0106e24:	8b 00                	mov    (%eax),%eax
f0106e26:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e29:	c1 e2 02             	shl    $0x2,%edx
f0106e2c:	01 d0                	add    %edx,%eax
f0106e2e:	8b 00                	mov    (%eax),%eax
f0106e30:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106e33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106e37:	74 16                	je     f0106e4f <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106e39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e3c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106e41:	83 ec 0c             	sub    $0xc,%esp
f0106e44:	50                   	push   %eax
f0106e45:	e8 65 f6 ff ff       	call   f01064af <to_frame_info>
f0106e4a:	83 c4 10             	add    $0x10,%esp
f0106e4d:	eb 0c                	jmp    f0106e5b <get_frame_info+0x6e>
		}
		return 0;
f0106e4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e54:	eb 05                	jmp    f0106e5b <get_frame_info+0x6e>
	}
	return 0;
f0106e56:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106e5b:	c9                   	leave  
f0106e5c:	c3                   	ret    

f0106e5d <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106e5d:	55                   	push   %ebp
f0106e5e:	89 e5                	mov    %esp,%ebp
f0106e60:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106e63:	83 ec 04             	sub    $0x4,%esp
f0106e66:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106e69:	50                   	push   %eax
f0106e6a:	ff 75 0c             	pushl  0xc(%ebp)
f0106e6d:	ff 75 08             	pushl  0x8(%ebp)
f0106e70:	e8 78 ff ff ff       	call   f0106ded <get_frame_info>
f0106e75:	83 c4 10             	add    $0x10,%esp
f0106e78:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106e7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106e7f:	74 60                	je     f0106ee1 <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106e81:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106e84:	8a 40 14             	mov    0x14(%eax),%al
f0106e87:	84 c0                	test   %al,%al
f0106e89:	74 1c                	je     f0106ea7 <unmap_frame+0x4a>
f0106e8b:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106e92:	77 13                	ja     f0106ea7 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106e94:	83 ec 08             	sub    $0x8,%esp
f0106e97:	ff 75 0c             	pushl  0xc(%ebp)
f0106e9a:	68 ac 63 13 f0       	push   $0xf01363ac
f0106e9f:	e8 6a 9e ff ff       	call   f0100d0e <cprintf>
f0106ea4:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106ea7:	83 ec 0c             	sub    $0xc,%esp
f0106eaa:	ff 75 f4             	pushl  -0xc(%ebp)
f0106ead:	e8 b6 fb ff ff       	call   f0106a68 <decrement_references>
f0106eb2:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106eb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106eb8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106ebb:	c1 ea 0c             	shr    $0xc,%edx
f0106ebe:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106ec4:	c1 e2 02             	shl    $0x2,%edx
f0106ec7:	01 d0                	add    %edx,%eax
f0106ec9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ed2:	83 ec 08             	sub    $0x8,%esp
f0106ed5:	50                   	push   %eax
f0106ed6:	ff 75 08             	pushl  0x8(%ebp)
f0106ed9:	e8 17 f6 ff ff       	call   f01064f5 <tlb_invalidate>
f0106ede:	83 c4 10             	add    $0x10,%esp
	}
}
f0106ee1:	90                   	nop
f0106ee2:	c9                   	leave  
f0106ee3:	c3                   	ret    

f0106ee4 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106ee4:	55                   	push   %ebp
f0106ee5:	89 e5                	mov    %esp,%ebp
f0106ee7:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106eea:	ff 75 0c             	pushl  0xc(%ebp)
f0106eed:	e8 aa f5 ff ff       	call   f010649c <to_physical_address>
f0106ef2:	83 c4 04             	add    $0x4,%esp
f0106ef5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106ef8:	8b 45 10             	mov    0x10(%ebp),%eax
f0106efb:	c1 e8 16             	shr    $0x16,%eax
f0106efe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106f05:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f08:	01 d0                	add    %edx,%eax
f0106f0a:	8b 00                	mov    (%eax),%eax
f0106f0c:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0106f0f:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0106f16:	77 19                	ja     f0106f31 <loadtime_map_frame+0x4d>
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f18:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f1b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f20:	83 ec 0c             	sub    $0xc,%esp
f0106f23:	50                   	push   %eax
f0106f24:	e8 86 0e 00 00       	call   f0107daf <kheap_virtual_address>
f0106f29:	83 c4 10             	add    $0x10,%esp
f0106f2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106f2f:	eb 40                	jmp    f0106f71 <loadtime_map_frame+0x8d>
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106f31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f34:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106f39:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106f3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f3f:	c1 e8 0c             	shr    $0xc,%eax
f0106f42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106f45:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f0106f4a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106f4d:	72 17                	jb     f0106f66 <loadtime_map_frame+0x82>
f0106f4f:	ff 75 e8             	pushl  -0x18(%ebp)
f0106f52:	68 60 63 13 f0       	push   $0xf0136360
f0106f57:	68 e6 01 00 00       	push   $0x1e6
f0106f5c:	68 a3 62 13 f0       	push   $0xf01362a3
f0106f61:	e8 9f 92 ff ff       	call   f0100205 <_panic>
f0106f66:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106f69:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106f6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106f71:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106f75:	75 14                	jne    f0106f8b <loadtime_map_frame+0xa7>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
f0106f77:	83 ec 08             	sub    $0x8,%esp
f0106f7a:	ff 75 10             	pushl  0x10(%ebp)
f0106f7d:	ff 75 08             	pushl  0x8(%ebp)
f0106f80:	e8 69 fc ff ff       	call   f0106bee <create_page_table>
f0106f85:	83 c4 10             	add    $0x10,%esp
f0106f88:	89 45 f4             	mov    %eax,-0xc(%ebp)
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
		}
#endif
	}

	ptr_frame_info->references++;
f0106f8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106f8e:	8b 40 08             	mov    0x8(%eax),%eax
f0106f91:	40                   	inc    %eax
f0106f92:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106f95:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106f99:	8b 45 10             	mov    0x10(%ebp),%eax
f0106f9c:	c1 e8 0c             	shr    $0xc,%eax
f0106f9f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106fa4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106fab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fae:	01 c2                	add    %eax,%edx
f0106fb0:	8b 45 14             	mov    0x14(%ebp),%eax
f0106fb3:	0b 45 f0             	or     -0x10(%ebp),%eax
f0106fb6:	83 c8 01             	or     $0x1,%eax
f0106fb9:	89 02                	mov    %eax,(%edx)

	return 0;
f0106fbb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106fc0:	c9                   	leave  
f0106fc1:	c3                   	ret    

f0106fc2 <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106fc2:	55                   	push   %ebp
f0106fc3:	89 e5                	mov    %esp,%ebp
f0106fc5:	57                   	push   %edi
f0106fc6:	56                   	push   %esi
f0106fc7:	53                   	push   %ebx
f0106fc8:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106fcb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106fd2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106fd9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106fe0:	a1 14 f7 85 f0       	mov    0xf085f714,%eax
f0106fe5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106fe8:	eb 1a                	jmp    f0107004 <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106fea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fed:	8a 40 14             	mov    0x14(%eax),%al
f0106ff0:	84 c0                	test   %al,%al
f0106ff2:	74 05                	je     f0106ff9 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106ff4:	ff 45 e8             	incl   -0x18(%ebp)
f0106ff7:	eb 03                	jmp    f0106ffc <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106ff9:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106ffc:	a1 1c f7 85 f0       	mov    0xf085f71c,%eax
f0107001:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107004:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107008:	74 07                	je     f0107011 <calculate_available_frames+0x4f>
f010700a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010700d:	8b 00                	mov    (%eax),%eax
f010700f:	eb 05                	jmp    f0107016 <calculate_available_frames+0x54>
f0107011:	b8 00 00 00 00       	mov    $0x0,%eax
f0107016:	a3 1c f7 85 f0       	mov    %eax,0xf085f71c
f010701b:	a1 1c f7 85 f0       	mov    0xf085f71c,%eax
f0107020:	85 c0                	test   %eax,%eax
f0107022:	75 c6                	jne    f0106fea <calculate_available_frames+0x28>
f0107024:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107028:	75 c0                	jne    f0106fea <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f010702a:	a1 b4 f6 85 f0       	mov    0xf085f6b4,%eax
f010702f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107032:	eb 0b                	jmp    f010703f <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0107034:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0107037:	a1 bc f6 85 f0       	mov    0xf085f6bc,%eax
f010703c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010703f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107043:	74 07                	je     f010704c <calculate_available_frames+0x8a>
f0107045:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107048:	8b 00                	mov    (%eax),%eax
f010704a:	eb 05                	jmp    f0107051 <calculate_available_frames+0x8f>
f010704c:	b8 00 00 00 00       	mov    $0x0,%eax
f0107051:	a3 bc f6 85 f0       	mov    %eax,0xf085f6bc
f0107056:	a1 bc f6 85 f0       	mov    0xf085f6bc,%eax
f010705b:	85 c0                	test   %eax,%eax
f010705d:	75 d5                	jne    f0107034 <calculate_available_frames+0x72>
f010705f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107063:	75 cf                	jne    f0107034 <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0107065:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107068:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f010706b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010706e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0107071:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107074:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0107077:	8b 45 08             	mov    0x8(%ebp),%eax
f010707a:	89 c3                	mov    %eax,%ebx
f010707c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010707f:	ba 03 00 00 00       	mov    $0x3,%edx
f0107084:	89 df                	mov    %ebx,%edi
f0107086:	89 c6                	mov    %eax,%esi
f0107088:	89 d1                	mov    %edx,%ecx
f010708a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010708c:	8b 45 08             	mov    0x8(%ebp),%eax
f010708f:	83 c4 20             	add    $0x20,%esp
f0107092:	5b                   	pop    %ebx
f0107093:	5e                   	pop    %esi
f0107094:	5f                   	pop    %edi
f0107095:	5d                   	pop    %ebp
f0107096:	c2 04 00             	ret    $0x4

f0107099 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107099:	55                   	push   %ebp
f010709a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010709c:	8b 45 08             	mov    0x8(%ebp),%eax
f010709f:	8b 15 50 f7 85 f0    	mov    0xf085f750,%edx
f01070a5:	29 d0                	sub    %edx,%eax
f01070a7:	c1 f8 03             	sar    $0x3,%eax
f01070aa:	89 c2                	mov    %eax,%edx
f01070ac:	89 d0                	mov    %edx,%eax
f01070ae:	c1 e0 02             	shl    $0x2,%eax
f01070b1:	01 d0                	add    %edx,%eax
f01070b3:	c1 e0 02             	shl    $0x2,%eax
f01070b6:	01 d0                	add    %edx,%eax
f01070b8:	c1 e0 02             	shl    $0x2,%eax
f01070bb:	01 d0                	add    %edx,%eax
f01070bd:	89 c1                	mov    %eax,%ecx
f01070bf:	c1 e1 08             	shl    $0x8,%ecx
f01070c2:	01 c8                	add    %ecx,%eax
f01070c4:	89 c1                	mov    %eax,%ecx
f01070c6:	c1 e1 10             	shl    $0x10,%ecx
f01070c9:	01 c8                	add    %ecx,%eax
f01070cb:	01 c0                	add    %eax,%eax
f01070cd:	01 d0                	add    %edx,%eax
}
f01070cf:	5d                   	pop    %ebp
f01070d0:	c3                   	ret    

f01070d1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f01070d1:	55                   	push   %ebp
f01070d2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f01070d4:	ff 75 08             	pushl  0x8(%ebp)
f01070d7:	e8 bd ff ff ff       	call   f0107099 <to_frame_number>
f01070dc:	83 c4 04             	add    $0x4,%esp
f01070df:	c1 e0 0c             	shl    $0xc,%eax
}
f01070e2:	c9                   	leave  
f01070e3:	c3                   	ret    

f01070e4 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f01070e4:	55                   	push   %ebp
f01070e5:	89 e5                	mov    %esp,%ebp
f01070e7:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SHARES  = numOfElements ;
f01070ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01070ed:	a3 24 f7 85 f0       	mov    %eax,0xf085f724
	shares = kmalloc(numOfElements*sizeof(struct Share));
f01070f2:	8b 55 08             	mov    0x8(%ebp),%edx
f01070f5:	89 d0                	mov    %edx,%eax
f01070f7:	c1 e0 02             	shl    $0x2,%eax
f01070fa:	01 d0                	add    %edx,%eax
f01070fc:	c1 e0 02             	shl    $0x2,%eax
f01070ff:	01 d0                	add    %edx,%eax
f0107101:	c1 e0 02             	shl    $0x2,%eax
f0107104:	83 ec 0c             	sub    $0xc,%esp
f0107107:	50                   	push   %eax
f0107108:	e8 57 0a 00 00       	call   f0107b64 <kmalloc>
f010710d:	83 c4 10             	add    $0x10,%esp
f0107110:	a3 e8 f6 85 f0       	mov    %eax,0xf085f6e8
	if (shares == NULL)
f0107115:	a1 e8 f6 85 f0       	mov    0xf085f6e8,%eax
f010711a:	85 c0                	test   %eax,%eax
f010711c:	75 14                	jne    f0107132 <create_shares_array+0x4e>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f010711e:	83 ec 04             	sub    $0x4,%esp
f0107121:	68 d0 63 13 f0       	push   $0xf01363d0
f0107126:	6a 21                	push   $0x21
f0107128:	68 14 64 13 f0       	push   $0xf0136414
f010712d:	e8 d3 90 ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107132:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107139:	eb 4b                	jmp    f0107186 <create_shares_array+0xa2>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010713b:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107141:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107144:	89 d0                	mov    %edx,%eax
f0107146:	c1 e0 02             	shl    $0x2,%eax
f0107149:	01 d0                	add    %edx,%eax
f010714b:	c1 e0 02             	shl    $0x2,%eax
f010714e:	01 d0                	add    %edx,%eax
f0107150:	c1 e0 02             	shl    $0x2,%eax
f0107153:	01 c8                	add    %ecx,%eax
f0107155:	83 ec 04             	sub    $0x4,%esp
f0107158:	6a 54                	push   $0x54
f010715a:	6a 00                	push   $0x0
f010715c:	50                   	push   %eax
f010715d:	e8 91 aa 02 00       	call   f0131bf3 <memset>
f0107162:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0107165:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f010716b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010716e:	89 d0                	mov    %edx,%eax
f0107170:	c1 e0 02             	shl    $0x2,%eax
f0107173:	01 d0                	add    %edx,%eax
f0107175:	c1 e0 02             	shl    $0x2,%eax
f0107178:	01 d0                	add    %edx,%eax
f010717a:	c1 e0 02             	shl    $0x2,%eax
f010717d:	01 c8                	add    %ecx,%eax
f010717f:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0107183:	ff 45 f4             	incl   -0xc(%ebp)
f0107186:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107189:	a1 24 f7 85 f0       	mov    0xf085f724,%eax
f010718e:	39 c2                	cmp    %eax,%edx
f0107190:	72 a9                	jb     f010713b <create_shares_array+0x57>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0107192:	90                   	nop
f0107193:	c9                   	leave  
f0107194:	c3                   	ret    

f0107195 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0107195:	55                   	push   %ebp
f0107196:	89 e5                	mov    %esp,%ebp
f0107198:	53                   	push   %ebx
f0107199:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f010719c:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f01071a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01071aa:	eb 2c                	jmp    f01071d8 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f01071ac:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01071b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071b5:	89 d0                	mov    %edx,%eax
f01071b7:	c1 e0 02             	shl    $0x2,%eax
f01071ba:	01 d0                	add    %edx,%eax
f01071bc:	c1 e0 02             	shl    $0x2,%eax
f01071bf:	01 d0                	add    %edx,%eax
f01071c1:	c1 e0 02             	shl    $0x2,%eax
f01071c4:	01 c8                	add    %ecx,%eax
f01071c6:	8a 40 4d             	mov    0x4d(%eax),%al
f01071c9:	84 c0                	test   %al,%al
f01071cb:	74 08                	je     f01071d5 <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f01071cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01071d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f01071d3:	eb 0f                	jmp    f01071e4 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f01071d5:	ff 45 f0             	incl   -0x10(%ebp)
f01071d8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01071db:	a1 24 f7 85 f0       	mov    0xf085f724,%eax
f01071e0:	39 c2                	cmp    %eax,%edx
f01071e2:	72 c8                	jb     f01071ac <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f01071e4:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f01071e8:	75 0a                	jne    f01071f4 <allocate_share_object+0x5f>
	{
		return E_NO_SHARE ;
f01071ea:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f01071ef:	e9 94 00 00 00       	jmp    f0107288 <allocate_share_object+0xf3>
		}
#endif
*/
	}

	*allocatedObject = &(shares[sharedObjectID]);
f01071f4:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01071fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01071fd:	89 d0                	mov    %edx,%eax
f01071ff:	c1 e0 02             	shl    $0x2,%eax
f0107202:	01 d0                	add    %edx,%eax
f0107204:	c1 e0 02             	shl    $0x2,%eax
f0107207:	01 d0                	add    %edx,%eax
f0107209:	c1 e0 02             	shl    $0x2,%eax
f010720c:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010720f:	8b 45 08             	mov    0x8(%ebp),%eax
f0107212:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f0107214:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f010721a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010721d:	89 d0                	mov    %edx,%eax
f010721f:	c1 e0 02             	shl    $0x2,%eax
f0107222:	01 d0                	add    %edx,%eax
f0107224:	c1 e0 02             	shl    $0x2,%eax
f0107227:	01 d0                	add    %edx,%eax
f0107229:	c1 e0 02             	shl    $0x2,%eax
f010722c:	01 c8                	add    %ecx,%eax
f010722e:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

#if USE_KHEAP
	{
		shares[sharedObjectID].framesStorage = create_frames_storage();
f0107232:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107238:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010723b:	89 d0                	mov    %edx,%eax
f010723d:	c1 e0 02             	shl    $0x2,%eax
f0107240:	01 d0                	add    %edx,%eax
f0107242:	c1 e0 02             	shl    $0x2,%eax
f0107245:	01 d0                	add    %edx,%eax
f0107247:	c1 e0 02             	shl    $0x2,%eax
f010724a:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f010724d:	e8 97 01 00 00       	call   f01073e9 <create_frames_storage>
f0107252:	89 43 50             	mov    %eax,0x50(%ebx)
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107255:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f010725b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010725e:	89 d0                	mov    %edx,%eax
f0107260:	c1 e0 02             	shl    $0x2,%eax
f0107263:	01 d0                	add    %edx,%eax
f0107265:	c1 e0 02             	shl    $0x2,%eax
f0107268:	01 d0                	add    %edx,%eax
f010726a:	c1 e0 02             	shl    $0x2,%eax
f010726d:	01 c8                	add    %ecx,%eax
f010726f:	8b 40 50             	mov    0x50(%eax),%eax
f0107272:	83 ec 04             	sub    $0x4,%esp
f0107275:	68 00 10 00 00       	push   $0x1000
f010727a:	6a 00                	push   $0x0
f010727c:	50                   	push   %eax
f010727d:	e8 71 a9 02 00       	call   f0131bf3 <memset>
f0107282:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f0107285:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107288:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010728b:	c9                   	leave  
f010728c:	c3                   	ret    

f010728d <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f010728d:	55                   	push   %ebp
f010728e:	89 e5                	mov    %esp,%ebp
f0107290:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107293:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f010729a:	eb 7b                	jmp    f0107317 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f010729c:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01072a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072a5:	89 d0                	mov    %edx,%eax
f01072a7:	c1 e0 02             	shl    $0x2,%eax
f01072aa:	01 d0                	add    %edx,%eax
f01072ac:	c1 e0 02             	shl    $0x2,%eax
f01072af:	01 d0                	add    %edx,%eax
f01072b1:	c1 e0 02             	shl    $0x2,%eax
f01072b4:	01 c8                	add    %ecx,%eax
f01072b6:	8a 40 4d             	mov    0x4d(%eax),%al
f01072b9:	84 c0                	test   %al,%al
f01072bb:	75 56                	jne    f0107313 <get_share_object_ID+0x86>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01072bd:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01072c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072c6:	89 d0                	mov    %edx,%eax
f01072c8:	c1 e0 02             	shl    $0x2,%eax
f01072cb:	01 d0                	add    %edx,%eax
f01072cd:	c1 e0 02             	shl    $0x2,%eax
f01072d0:	01 d0                	add    %edx,%eax
f01072d2:	c1 e0 02             	shl    $0x2,%eax
f01072d5:	01 c8                	add    %ecx,%eax
f01072d7:	8b 00                	mov    (%eax),%eax
f01072d9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01072dc:	75 36                	jne    f0107314 <get_share_object_ID+0x87>
f01072de:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01072e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01072e7:	89 d0                	mov    %edx,%eax
f01072e9:	c1 e0 02             	shl    $0x2,%eax
f01072ec:	01 d0                	add    %edx,%eax
f01072ee:	c1 e0 02             	shl    $0x2,%eax
f01072f1:	01 d0                	add    %edx,%eax
f01072f3:	c1 e0 02             	shl    $0x2,%eax
f01072f6:	01 c8                	add    %ecx,%eax
f01072f8:	83 c0 04             	add    $0x4,%eax
f01072fb:	83 ec 08             	sub    $0x8,%esp
f01072fe:	50                   	push   %eax
f01072ff:	ff 75 0c             	pushl  0xc(%ebp)
f0107302:	e8 0a a8 02 00       	call   f0131b11 <strcmp>
f0107307:	83 c4 10             	add    $0x10,%esp
f010730a:	85 c0                	test   %eax,%eax
f010730c:	75 06                	jne    f0107314 <get_share_object_ID+0x87>
		{
			//cprintf("%s found\n", name);
			return i;
f010730e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107311:	eb 19                	jmp    f010732c <get_share_object_ID+0x9f>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107313:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107314:	ff 45 f4             	incl   -0xc(%ebp)
f0107317:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010731a:	a1 24 f7 85 f0       	mov    0xf085f724,%eax
f010731f:	39 c2                	cmp    %eax,%edx
f0107321:	0f 82 75 ff ff ff    	jb     f010729c <get_share_object_ID+0xf>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107327:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010732c:	c9                   	leave  
f010732d:	c3                   	ret    

f010732e <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f010732e:	55                   	push   %ebp
f010732f:	89 e5                	mov    %esp,%ebp
f0107331:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f0107334:	a1 24 f7 85 f0       	mov    0xf085f724,%eax
f0107339:	39 45 08             	cmp    %eax,0x8(%ebp)
f010733c:	72 0a                	jb     f0107348 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f010733e:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107343:	e9 9f 00 00 00       	jmp    f01073e7 <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f0107348:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f010734e:	8b 55 08             	mov    0x8(%ebp),%edx
f0107351:	89 d0                	mov    %edx,%eax
f0107353:	c1 e0 02             	shl    $0x2,%eax
f0107356:	01 d0                	add    %edx,%eax
f0107358:	c1 e0 02             	shl    $0x2,%eax
f010735b:	01 d0                	add    %edx,%eax
f010735d:	c1 e0 02             	shl    $0x2,%eax
f0107360:	01 c8                	add    %ecx,%eax
f0107362:	8b 40 50             	mov    0x50(%eax),%eax
f0107365:	83 ec 0c             	sub    $0xc,%esp
f0107368:	50                   	push   %eax
f0107369:	e8 52 01 00 00       	call   f01074c0 <clear_frames_storage>
f010736e:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
f0107371:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107377:	8b 55 08             	mov    0x8(%ebp),%edx
f010737a:	89 d0                	mov    %edx,%eax
f010737c:	c1 e0 02             	shl    $0x2,%eax
f010737f:	01 d0                	add    %edx,%eax
f0107381:	c1 e0 02             	shl    $0x2,%eax
f0107384:	01 d0                	add    %edx,%eax
f0107386:	c1 e0 02             	shl    $0x2,%eax
f0107389:	01 c8                	add    %ecx,%eax
f010738b:	8b 40 50             	mov    0x50(%eax),%eax
f010738e:	83 ec 0c             	sub    $0xc,%esp
f0107391:	50                   	push   %eax
f0107392:	e8 d5 08 00 00       	call   f0107c6c <kfree>
f0107397:	83 c4 10             	add    $0x10,%esp
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f010739a:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01073a0:	8b 55 08             	mov    0x8(%ebp),%edx
f01073a3:	89 d0                	mov    %edx,%eax
f01073a5:	c1 e0 02             	shl    $0x2,%eax
f01073a8:	01 d0                	add    %edx,%eax
f01073aa:	c1 e0 02             	shl    $0x2,%eax
f01073ad:	01 d0                	add    %edx,%eax
f01073af:	c1 e0 02             	shl    $0x2,%eax
f01073b2:	01 c8                	add    %ecx,%eax
f01073b4:	83 ec 04             	sub    $0x4,%esp
f01073b7:	6a 54                	push   $0x54
f01073b9:	6a 00                	push   $0x0
f01073bb:	50                   	push   %eax
f01073bc:	e8 32 a8 02 00       	call   f0131bf3 <memset>
f01073c1:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01073c4:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01073ca:	8b 55 08             	mov    0x8(%ebp),%edx
f01073cd:	89 d0                	mov    %edx,%eax
f01073cf:	c1 e0 02             	shl    $0x2,%eax
f01073d2:	01 d0                	add    %edx,%eax
f01073d4:	c1 e0 02             	shl    $0x2,%eax
f01073d7:	01 d0                	add    %edx,%eax
f01073d9:	c1 e0 02             	shl    $0x2,%eax
f01073dc:	01 c8                	add    %ecx,%eax
f01073de:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f01073e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01073e7:	c9                   	leave  
f01073e8:	c3                   	ret    

f01073e9 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01073e9:	55                   	push   %ebp
f01073ea:	89 e5                	mov    %esp,%ebp
f01073ec:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01073ef:	83 ec 0c             	sub    $0xc,%esp
f01073f2:	68 00 10 00 00       	push   $0x1000
f01073f7:	e8 68 07 00 00       	call   f0107b64 <kmalloc>
f01073fc:	83 c4 10             	add    $0x10,%esp
f01073ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f0107402:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107406:	75 17                	jne    f010741f <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107408:	83 ec 04             	sub    $0x4,%esp
f010740b:	68 35 64 13 f0       	push   $0xf0136435
f0107410:	68 a5 00 00 00       	push   $0xa5
f0107415:	68 14 64 13 f0       	push   $0xf0136414
f010741a:	e8 e6 8d ff ff       	call   f0100205 <_panic>
	}
	return frames_storage;
f010741f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107422:	c9                   	leave  
f0107423:	c3                   	ret    

f0107424 <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f0107424:	55                   	push   %ebp
f0107425:	89 e5                	mov    %esp,%ebp
f0107427:	53                   	push   %ebx
f0107428:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f010742b:	8b 45 10             	mov    0x10(%ebp),%eax
f010742e:	c1 e0 0c             	shl    $0xc,%eax
f0107431:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f0107434:	83 ec 04             	sub    $0x4,%esp
f0107437:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010743a:	50                   	push   %eax
f010743b:	ff 75 f4             	pushl  -0xc(%ebp)
f010743e:	ff 75 08             	pushl  0x8(%ebp)
f0107441:	e8 52 f6 ff ff       	call   f0106a98 <get_page_table>
f0107446:	83 c4 10             	add    $0x10,%esp
f0107449:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f010744c:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0107450:	75 14                	jne    f0107466 <add_frame_to_storage+0x42>
	{
#if USE_KHEAP
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
f0107452:	83 ec 08             	sub    $0x8,%esp
f0107455:	ff 75 f4             	pushl  -0xc(%ebp)
f0107458:	ff 75 08             	pushl  0x8(%ebp)
f010745b:	e8 8e f7 ff ff       	call   f0106bee <create_page_table>
f0107460:	83 c4 10             	add    $0x10,%esp
f0107463:	89 45 ec             	mov    %eax,-0x14(%ebp)
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107466:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107469:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010746c:	c1 ea 0c             	shr    $0xc,%edx
f010746f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107475:	c1 e2 02             	shl    $0x2,%edx
f0107478:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f010747b:	83 ec 0c             	sub    $0xc,%esp
f010747e:	ff 75 0c             	pushl  0xc(%ebp)
f0107481:	e8 4b fc ff ff       	call   f01070d1 <to_physical_address>
f0107486:	83 c4 10             	add    $0x10,%esp
f0107489:	83 c8 01             	or     $0x1,%eax
f010748c:	89 03                	mov    %eax,(%ebx)
}
f010748e:	90                   	nop
f010748f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107492:	c9                   	leave  
f0107493:	c3                   	ret    

f0107494 <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f0107494:	55                   	push   %ebp
f0107495:	89 e5                	mov    %esp,%ebp
f0107497:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f010749a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010749d:	c1 e0 0c             	shl    $0xc,%eax
f01074a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01074a3:	83 ec 04             	sub    $0x4,%esp
f01074a6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01074a9:	50                   	push   %eax
f01074aa:	ff 75 f4             	pushl  -0xc(%ebp)
f01074ad:	ff 75 08             	pushl  0x8(%ebp)
f01074b0:	e8 38 f9 ff ff       	call   f0106ded <get_frame_info>
f01074b5:	83 c4 10             	add    $0x10,%esp
f01074b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01074bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01074be:	c9                   	leave  
f01074bf:	c3                   	ret    

f01074c0 <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01074c0:	55                   	push   %ebp
f01074c1:	89 e5                	mov    %esp,%ebp
f01074c3:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01074c6:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01074cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01074d4:	eb 5b                	jmp    f0107531 <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01074d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01074e3:	01 d0                	add    %edx,%eax
f01074e5:	8b 00                	mov    (%eax),%eax
f01074e7:	85 c0                	test   %eax,%eax
f01074e9:	74 43                	je     f010752e <clear_frames_storage+0x6e>
		{
#if USE_KHEAP
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f01074eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ee:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01074f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01074f8:	01 d0                	add    %edx,%eax
f01074fa:	8b 00                	mov    (%eax),%eax
f01074fc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107501:	83 ec 0c             	sub    $0xc,%esp
f0107504:	50                   	push   %eax
f0107505:	e8 a5 08 00 00       	call   f0107daf <kheap_virtual_address>
f010750a:	83 c4 10             	add    $0x10,%esp
f010750d:	83 ec 0c             	sub    $0xc,%esp
f0107510:	50                   	push   %eax
f0107511:	e8 56 07 00 00       	call   f0107c6c <kfree>
f0107516:	83 c4 10             	add    $0x10,%esp
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			}
#endif
			frames_storage[i] = 0;
f0107519:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010751c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107523:	8b 45 08             	mov    0x8(%ebp),%eax
f0107526:	01 d0                	add    %edx,%eax
f0107528:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f010752e:	ff 45 f4             	incl   -0xc(%ebp)
f0107531:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107538:	7e 9c                	jle    f01074d6 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f010753a:	90                   	nop
f010753b:	c9                   	leave  
f010753c:	c3                   	ret    

f010753d <getSizeOfSharedObject>:

//==============================
// [9] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010753d:	55                   	push   %ebp
f010753e:	89 e5                	mov    %esp,%ebp
f0107540:	83 ec 18             	sub    $0x18,%esp
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//

	int shareObjectID = get_share_object_ID(ownerID, shareName);
f0107543:	83 ec 08             	sub    $0x8,%esp
f0107546:	ff 75 0c             	pushl  0xc(%ebp)
f0107549:	ff 75 08             	pushl  0x8(%ebp)
f010754c:	e8 3c fd ff ff       	call   f010728d <get_share_object_ID>
f0107551:	83 c4 10             	add    $0x10,%esp
f0107554:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f0107557:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f010755b:	75 07                	jne    f0107564 <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f010755d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107562:	eb 1d                	jmp    f0107581 <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f0107564:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f010756a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010756d:	89 d0                	mov    %edx,%eax
f010756f:	c1 e0 02             	shl    $0x2,%eax
f0107572:	01 d0                	add    %edx,%eax
f0107574:	c1 e0 02             	shl    $0x2,%eax
f0107577:	01 d0                	add    %edx,%eax
f0107579:	c1 e0 02             	shl    $0x2,%eax
f010757c:	01 c8                	add    %ecx,%eax
f010757e:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f0107581:	c9                   	leave  
f0107582:	c3                   	ret    

f0107583 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107583:	55                   	push   %ebp
f0107584:	89 e5                	mov    %esp,%ebp
f0107586:	53                   	push   %ebx
f0107587:	83 ec 54             	sub    $0x54,%esp
f010758a:	8b 45 14             	mov    0x14(%ebp),%eax
f010758d:	88 45 b4             	mov    %al,-0x4c(%ebp)
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] createSharedObject()
	// your code is here, remove the panic and write your code
	//panic("createSharedObject() is not implemented yet...!!");

		struct Env* myenv = curenv; //The calling environment
f0107590:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0107595:	89 45 ec             	mov    %eax,-0x14(%ebp)
		struct Share *allocatedObject;

		uint32 start=ROUNDDOWN((uint32)virtual_address,PAGE_SIZE);
f0107598:	8b 45 18             	mov    0x18(%ebp),%eax
f010759b:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010759e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01075a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01075a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint32 end=ROUNDUP(size+(uint32)virtual_address,PAGE_SIZE);
f01075a9:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f01075b0:	8b 55 18             	mov    0x18(%ebp),%edx
f01075b3:	8b 45 10             	mov    0x10(%ebp),%eax
f01075b6:	01 c2                	add    %eax,%edx
f01075b8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01075bb:	01 d0                	add    %edx,%eax
f01075bd:	48                   	dec    %eax
f01075be:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01075c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01075c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01075c9:	f7 75 e0             	divl   -0x20(%ebp)
f01075cc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01075cf:	29 d0                	sub    %edx,%eax
f01075d1:	89 45 d8             	mov    %eax,-0x28(%ebp)

		uint32* page_directory = myenv->env_page_directory;
f01075d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01075d7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01075da:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint32 *ptr_page_table = NULL ;
f01075dd:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		int exist= get_share_object_ID( ownerID, shareName);
f01075e4:	83 ec 08             	sub    $0x8,%esp
f01075e7:	ff 75 0c             	pushl  0xc(%ebp)
f01075ea:	ff 75 08             	pushl  0x8(%ebp)
f01075ed:	e8 9b fc ff ff       	call   f010728d <get_share_object_ID>
f01075f2:	83 c4 10             	add    $0x10,%esp
f01075f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if(exist < -1 ) {
f01075f8:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f01075fc:	0f 8d 52 01 00 00    	jge    f0107754 <createSharedObject+0x1d1>
		int index=allocate_share_object(&allocatedObject);
f0107602:	83 ec 0c             	sub    $0xc,%esp
f0107605:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0107608:	50                   	push   %eax
f0107609:	e8 87 fb ff ff       	call   f0107195 <allocate_share_object>
f010760e:	83 c4 10             	add    $0x10,%esp
f0107611:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if(index !=E_NO_SHARE)
f0107614:	83 7d c8 f2          	cmpl   $0xfffffff2,-0x38(%ebp)
f0107618:	0f 84 2f 01 00 00    	je     f010774d <createSharedObject+0x1ca>
		{
		shares[index].ownerID=ownerID;
f010761e:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107624:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107627:	89 d0                	mov    %edx,%eax
f0107629:	c1 e0 02             	shl    $0x2,%eax
f010762c:	01 d0                	add    %edx,%eax
f010762e:	c1 e0 02             	shl    $0x2,%eax
f0107631:	01 d0                	add    %edx,%eax
f0107633:	c1 e0 02             	shl    $0x2,%eax
f0107636:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107639:	8b 45 08             	mov    0x8(%ebp),%eax
f010763c:	89 02                	mov    %eax,(%edx)
		strcpy(shares[index].name,shareName);
f010763e:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107644:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107647:	89 d0                	mov    %edx,%eax
f0107649:	c1 e0 02             	shl    $0x2,%eax
f010764c:	01 d0                	add    %edx,%eax
f010764e:	c1 e0 02             	shl    $0x2,%eax
f0107651:	01 d0                	add    %edx,%eax
f0107653:	c1 e0 02             	shl    $0x2,%eax
f0107656:	01 c8                	add    %ecx,%eax
f0107658:	83 c0 04             	add    $0x4,%eax
f010765b:	83 ec 08             	sub    $0x8,%esp
f010765e:	ff 75 0c             	pushl  0xc(%ebp)
f0107661:	50                   	push   %eax
f0107662:	e8 ed a3 02 00       	call   f0131a54 <strcpy>
f0107667:	83 c4 10             	add    $0x10,%esp
		shares[index].size=size;
f010766a:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107670:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107673:	89 d0                	mov    %edx,%eax
f0107675:	c1 e0 02             	shl    $0x2,%eax
f0107678:	01 d0                	add    %edx,%eax
f010767a:	c1 e0 02             	shl    $0x2,%eax
f010767d:	01 d0                	add    %edx,%eax
f010767f:	c1 e0 02             	shl    $0x2,%eax
f0107682:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0107685:	8b 45 10             	mov    0x10(%ebp),%eax
f0107688:	89 42 44             	mov    %eax,0x44(%edx)
		shares[index].references=1;
f010768b:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107691:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107694:	89 d0                	mov    %edx,%eax
f0107696:	c1 e0 02             	shl    $0x2,%eax
f0107699:	01 d0                	add    %edx,%eax
f010769b:	c1 e0 02             	shl    $0x2,%eax
f010769e:	01 d0                	add    %edx,%eax
f01076a0:	c1 e0 02             	shl    $0x2,%eax
f01076a3:	01 c8                	add    %ecx,%eax
f01076a5:	c7 40 48 01 00 00 00 	movl   $0x1,0x48(%eax)
		shares[index].isWritable=isWritable;
f01076ac:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01076b2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01076b5:	89 d0                	mov    %edx,%eax
f01076b7:	c1 e0 02             	shl    $0x2,%eax
f01076ba:	01 d0                	add    %edx,%eax
f01076bc:	c1 e0 02             	shl    $0x2,%eax
f01076bf:	01 d0                	add    %edx,%eax
f01076c1:	c1 e0 02             	shl    $0x2,%eax
f01076c4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01076c7:	8a 45 b4             	mov    -0x4c(%ebp),%al
f01076ca:	88 42 4c             	mov    %al,0x4c(%edx)

		for(uint32 i=start,  j=0; i<(end) ; i=i+PAGE_SIZE,j++)
f01076cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01076d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01076d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01076da:	eb 64                	jmp    f0107740 <createSharedObject+0x1bd>
			{
			// allocate frame
			struct FrameInfo *ptr_frame_info=NULL;
f01076dc:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
			allocate_frame(&ptr_frame_info);
f01076e3:	83 ec 0c             	sub    $0xc,%esp
f01076e6:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01076e9:	50                   	push   %eax
f01076ea:	e8 ea f1 ff ff       	call   f01068d9 <allocate_frame>
f01076ef:	83 c4 10             	add    $0x10,%esp

			// map to RAM
			map_frame(page_directory, ptr_frame_info, i, PERM_WRITEABLE|PERM_USER);
f01076f2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01076f5:	6a 06                	push   $0x6
f01076f7:	ff 75 f4             	pushl  -0xc(%ebp)
f01076fa:	50                   	push   %eax
f01076fb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01076fe:	e8 25 f6 ff ff       	call   f0106d28 <map_frame>
f0107703:	83 c4 10             	add    $0x10,%esp

			add_frame_to_storage( shares[index].framesStorage,  ptr_frame_info,j);
f0107706:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f0107709:	8b 1d e8 f6 85 f0    	mov    0xf085f6e8,%ebx
f010770f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0107712:	89 d0                	mov    %edx,%eax
f0107714:	c1 e0 02             	shl    $0x2,%eax
f0107717:	01 d0                	add    %edx,%eax
f0107719:	c1 e0 02             	shl    $0x2,%eax
f010771c:	01 d0                	add    %edx,%eax
f010771e:	c1 e0 02             	shl    $0x2,%eax
f0107721:	01 d8                	add    %ebx,%eax
f0107723:	8b 40 50             	mov    0x50(%eax),%eax
f0107726:	83 ec 04             	sub    $0x4,%esp
f0107729:	ff 75 f0             	pushl  -0x10(%ebp)
f010772c:	51                   	push   %ecx
f010772d:	50                   	push   %eax
f010772e:	e8 f1 fc ff ff       	call   f0107424 <add_frame_to_storage>
f0107733:	83 c4 10             	add    $0x10,%esp
		strcpy(shares[index].name,shareName);
		shares[index].size=size;
		shares[index].references=1;
		shares[index].isWritable=isWritable;

		for(uint32 i=start,  j=0; i<(end) ; i=i+PAGE_SIZE,j++)
f0107736:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010773d:	ff 45 f0             	incl   -0x10(%ebp)
f0107740:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107743:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0107746:	72 94                	jb     f01076dc <createSharedObject+0x159>
			map_frame(page_directory, ptr_frame_info, i, PERM_WRITEABLE|PERM_USER);

			add_frame_to_storage( shares[index].framesStorage,  ptr_frame_info,j);

		  }
		 	 return index;
f0107748:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010774b:	eb 0c                	jmp    f0107759 <createSharedObject+0x1d6>
			}return E_NO_SHARE ;
f010774d:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f0107752:	eb 05                	jmp    f0107759 <createSharedObject+0x1d6>
		 }else return E_SHARED_MEM_EXISTS ;
f0107754:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax

}
f0107759:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010775c:	c9                   	leave  
f010775d:	c3                   	ret    

f010775e <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010775e:	55                   	push   %ebp
f010775f:	89 e5                	mov    %esp,%ebp
f0107761:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS3] [SHARING - KERNEL SIDE] getSharedObject()
	// your code is here, remove the panic and write your code
	//panic("getSharedObject() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f0107764:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0107769:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct FrameInfo *ptr_frame_info = NULL;
f010776c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 *ptr_page_table = NULL ;
f0107773:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	uint32* page_directory = myenv->env_page_directory;
f010777a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010777d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107780:	89 45 e0             	mov    %eax,-0x20(%ebp)

	int exist=get_share_object_ID(ownerID, shareName);
f0107783:	83 ec 08             	sub    $0x8,%esp
f0107786:	ff 75 0c             	pushl  0xc(%ebp)
f0107789:	ff 75 08             	pushl  0x8(%ebp)
f010778c:	e8 fc fa ff ff       	call   f010728d <get_share_object_ID>
f0107791:	83 c4 10             	add    $0x10,%esp
f0107794:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(exist > -1 ) {
f0107797:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010779b:	0f 88 3f 01 00 00    	js     f01078e0 <getSharedObject+0x182>

		uint32 start=ROUNDDOWN((uint32)virtual_address,PAGE_SIZE);
f01077a1:	8b 45 10             	mov    0x10(%ebp),%eax
f01077a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01077a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01077aa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01077af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint32 end=ROUNDUP(shares[exist].size+(uint32)virtual_address,PAGE_SIZE);
f01077b2:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f01077b9:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01077bf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01077c2:	89 d0                	mov    %edx,%eax
f01077c4:	c1 e0 02             	shl    $0x2,%eax
f01077c7:	01 d0                	add    %edx,%eax
f01077c9:	c1 e0 02             	shl    $0x2,%eax
f01077cc:	01 d0                	add    %edx,%eax
f01077ce:	c1 e0 02             	shl    $0x2,%eax
f01077d1:	01 c8                	add    %ecx,%eax
f01077d3:	8b 40 44             	mov    0x44(%eax),%eax
f01077d6:	89 c2                	mov    %eax,%edx
f01077d8:	8b 45 10             	mov    0x10(%ebp),%eax
f01077db:	01 c2                	add    %eax,%edx
f01077dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01077e0:	01 d0                	add    %edx,%eax
f01077e2:	48                   	dec    %eax
f01077e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01077e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01077e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01077ee:	f7 75 d0             	divl   -0x30(%ebp)
f01077f1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01077f4:	29 d0                	sub    %edx,%eax
f01077f6:	89 45 c8             	mov    %eax,-0x38(%ebp)


		for(uint32 i=start,  j=0; i<(end) ; i=i+PAGE_SIZE,j++)
f01077f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01077fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01077ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0107806:	e9 a3 00 00 00       	jmp    f01078ae <getSharedObject+0x150>
		{
				ptr_frame_info=get_frame_from_storage(shares[exist].framesStorage, j);
f010780b:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107811:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0107814:	89 d0                	mov    %edx,%eax
f0107816:	c1 e0 02             	shl    $0x2,%eax
f0107819:	01 d0                	add    %edx,%eax
f010781b:	c1 e0 02             	shl    $0x2,%eax
f010781e:	01 d0                	add    %edx,%eax
f0107820:	c1 e0 02             	shl    $0x2,%eax
f0107823:	01 c8                	add    %ecx,%eax
f0107825:	8b 40 50             	mov    0x50(%eax),%eax
f0107828:	83 ec 08             	sub    $0x8,%esp
f010782b:	ff 75 f0             	pushl  -0x10(%ebp)
f010782e:	50                   	push   %eax
f010782f:	e8 60 fc ff ff       	call   f0107494 <get_frame_from_storage>
f0107834:	83 c4 10             	add    $0x10,%esp
f0107837:	89 45 e8             	mov    %eax,-0x18(%ebp)

				if(shares[exist].isWritable==1){
f010783a:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107840:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0107843:	89 d0                	mov    %edx,%eax
f0107845:	c1 e0 02             	shl    $0x2,%eax
f0107848:	01 d0                	add    %edx,%eax
f010784a:	c1 e0 02             	shl    $0x2,%eax
f010784d:	01 d0                	add    %edx,%eax
f010784f:	c1 e0 02             	shl    $0x2,%eax
f0107852:	01 c8                	add    %ecx,%eax
f0107854:	8a 40 4c             	mov    0x4c(%eax),%al
f0107857:	3c 01                	cmp    $0x1,%al
f0107859:	75 15                	jne    f0107870 <getSharedObject+0x112>
					map_frame(page_directory,ptr_frame_info,i,PERM_WRITEABLE|PERM_USER);
f010785b:	6a 06                	push   $0x6
f010785d:	ff 75 f4             	pushl  -0xc(%ebp)
f0107860:	ff 75 e8             	pushl  -0x18(%ebp)
f0107863:	ff 75 e0             	pushl  -0x20(%ebp)
f0107866:	e8 bd f4 ff ff       	call   f0106d28 <map_frame>
f010786b:	83 c4 10             	add    $0x10,%esp
f010786e:	eb 34                	jmp    f01078a4 <getSharedObject+0x146>
				}
				else if(shares[exist].isWritable==0){
f0107870:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f0107876:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0107879:	89 d0                	mov    %edx,%eax
f010787b:	c1 e0 02             	shl    $0x2,%eax
f010787e:	01 d0                	add    %edx,%eax
f0107880:	c1 e0 02             	shl    $0x2,%eax
f0107883:	01 d0                	add    %edx,%eax
f0107885:	c1 e0 02             	shl    $0x2,%eax
f0107888:	01 c8                	add    %ecx,%eax
f010788a:	8a 40 4c             	mov    0x4c(%eax),%al
f010788d:	84 c0                	test   %al,%al
f010788f:	75 13                	jne    f01078a4 <getSharedObject+0x146>
					map_frame(page_directory,ptr_frame_info,i,PERM_USER);
f0107891:	6a 04                	push   $0x4
f0107893:	ff 75 f4             	pushl  -0xc(%ebp)
f0107896:	ff 75 e8             	pushl  -0x18(%ebp)
f0107899:	ff 75 e0             	pushl  -0x20(%ebp)
f010789c:	e8 87 f4 ff ff       	call   f0106d28 <map_frame>
f01078a1:	83 c4 10             	add    $0x10,%esp

		uint32 start=ROUNDDOWN((uint32)virtual_address,PAGE_SIZE);
		uint32 end=ROUNDUP(shares[exist].size+(uint32)virtual_address,PAGE_SIZE);


		for(uint32 i=start,  j=0; i<(end) ; i=i+PAGE_SIZE,j++)
f01078a4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01078ab:	ff 45 f0             	incl   -0x10(%ebp)
f01078ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01078b1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01078b4:	0f 82 51 ff ff ff    	jb     f010780b <getSharedObject+0xad>
				}
				else if(shares[exist].isWritable==0){
					map_frame(page_directory,ptr_frame_info,i,PERM_USER);
				}
		}
		shares[exist].references++;
f01078ba:	8b 0d e8 f6 85 f0    	mov    0xf085f6e8,%ecx
f01078c0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01078c3:	89 d0                	mov    %edx,%eax
f01078c5:	c1 e0 02             	shl    $0x2,%eax
f01078c8:	01 d0                	add    %edx,%eax
f01078ca:	c1 e0 02             	shl    $0x2,%eax
f01078cd:	01 d0                	add    %edx,%eax
f01078cf:	c1 e0 02             	shl    $0x2,%eax
f01078d2:	01 c8                	add    %ecx,%eax
f01078d4:	8b 50 48             	mov    0x48(%eax),%edx
f01078d7:	42                   	inc    %edx
f01078d8:	89 50 48             	mov    %edx,0x48(%eax)
		return exist;
f01078db:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01078de:	eb 05                	jmp    f01078e5 <getSharedObject+0x187>
	}
	else {return E_SHARED_MEM_NOT_EXISTS;}
f01078e0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
	// RETURN:
	//	a) sharedObjectID (its index in the array) if success
	//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists


}
f01078e5:	c9                   	leave  
f01078e6:	c3                   	ret    

f01078e7 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01078e7:	55                   	push   %ebp
f01078e8:	89 e5                	mov    %esp,%ebp
f01078ea:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [SHARING - KERNEL SIDE] freeSharedObject()
	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01078ed:	83 ec 04             	sub    $0x4,%esp
f01078f0:	68 54 64 13 f0       	push   $0xf0136454
f01078f5:	68 7c 01 00 00       	push   $0x17c
f01078fa:	68 14 64 13 f0       	push   $0xf0136414
f01078ff:	e8 01 89 ff ff       	call   f0100205 <_panic>

f0107904 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0107904:	55                   	push   %ebp
f0107905:	89 e5                	mov    %esp,%ebp
f0107907:	a1 58 f7 85 f0       	mov    0xf085f758,%eax
f010790c:	83 f8 01             	cmp    $0x1,%eax
f010790f:	75 04                	jne    f0107915 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0107911:	b0 01                	mov    $0x1,%al
f0107913:	eb 02                	jmp    f0107917 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0107915:	b0 00                	mov    $0x0,%al
f0107917:	5d                   	pop    %ebp
f0107918:	c3                   	ret    

f0107919 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0107919:	55                   	push   %ebp
f010791a:	89 e5                	mov    %esp,%ebp
f010791c:	a1 58 f7 85 f0       	mov    0xf085f758,%eax
f0107921:	83 f8 02             	cmp    $0x2,%eax
f0107924:	75 04                	jne    f010792a <isKHeapPlacementStrategyBESTFIT+0x11>
f0107926:	b0 01                	mov    $0x1,%al
f0107928:	eb 02                	jmp    f010792c <isKHeapPlacementStrategyBESTFIT+0x13>
f010792a:	b0 00                	mov    $0x0,%al
f010792c:	5d                   	pop    %ebp
f010792d:	c3                   	ret    

f010792e <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010792e:	55                   	push   %ebp
f010792f:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107931:	8b 45 08             	mov    0x8(%ebp),%eax
f0107934:	8b 15 50 f7 85 f0    	mov    0xf085f750,%edx
f010793a:	29 d0                	sub    %edx,%eax
f010793c:	c1 f8 03             	sar    $0x3,%eax
f010793f:	89 c2                	mov    %eax,%edx
f0107941:	89 d0                	mov    %edx,%eax
f0107943:	c1 e0 02             	shl    $0x2,%eax
f0107946:	01 d0                	add    %edx,%eax
f0107948:	c1 e0 02             	shl    $0x2,%eax
f010794b:	01 d0                	add    %edx,%eax
f010794d:	c1 e0 02             	shl    $0x2,%eax
f0107950:	01 d0                	add    %edx,%eax
f0107952:	89 c1                	mov    %eax,%ecx
f0107954:	c1 e1 08             	shl    $0x8,%ecx
f0107957:	01 c8                	add    %ecx,%eax
f0107959:	89 c1                	mov    %eax,%ecx
f010795b:	c1 e1 10             	shl    $0x10,%ecx
f010795e:	01 c8                	add    %ecx,%eax
f0107960:	01 c0                	add    %eax,%eax
f0107962:	01 d0                	add    %edx,%eax
}
f0107964:	5d                   	pop    %ebp
f0107965:	c3                   	ret    

f0107966 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107966:	55                   	push   %ebp
f0107967:	89 e5                	mov    %esp,%ebp
f0107969:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010796c:	8b 45 08             	mov    0x8(%ebp),%eax
f010796f:	c1 e8 0c             	shr    $0xc,%eax
f0107972:	89 c2                	mov    %eax,%edx
f0107974:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f0107979:	39 c2                	cmp    %eax,%edx
f010797b:	72 14                	jb     f0107991 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010797d:	83 ec 04             	sub    $0x4,%esp
f0107980:	68 84 64 13 f0       	push   $0xf0136484
f0107985:	6a 55                	push   $0x55
f0107987:	68 a9 64 13 f0       	push   $0xf01364a9
f010798c:	e8 74 88 ff ff       	call   f0100205 <_panic>
	return &frames_info[PPN(physical_address)];
f0107991:	8b 15 50 f7 85 f0    	mov    0xf085f750,%edx
f0107997:	8b 45 08             	mov    0x8(%ebp),%eax
f010799a:	c1 e8 0c             	shr    $0xc,%eax
f010799d:	89 c1                	mov    %eax,%ecx
f010799f:	89 c8                	mov    %ecx,%eax
f01079a1:	01 c0                	add    %eax,%eax
f01079a3:	01 c8                	add    %ecx,%eax
f01079a5:	c1 e0 03             	shl    $0x3,%eax
f01079a8:	01 d0                	add    %edx,%eax
}
f01079aa:	c9                   	leave  
f01079ab:	c3                   	ret    

f01079ac <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01079ac:	55                   	push   %ebp
f01079ad:	89 e5                	mov    %esp,%ebp
f01079af:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	//kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");

	//[1] Initialize two lists (AllocMemBlocksList & FreeMemBlocksList) [Hint: use LIST_INIT()]
	     LIST_INIT(&FreeMemBlocksList);
f01079b2:	c7 05 60 f7 85 f0 00 	movl   $0x0,0xf085f760
f01079b9:	00 00 00 
f01079bc:	c7 05 64 f7 85 f0 00 	movl   $0x0,0xf085f764
f01079c3:	00 00 00 
f01079c6:	c7 05 6c f7 85 f0 00 	movl   $0x0,0xf085f76c
f01079cd:	00 00 00 
	     LIST_INIT(&AllocMemBlocksList);
f01079d0:	c7 05 c4 f6 85 f0 00 	movl   $0x0,0xf085f6c4
f01079d7:	00 00 00 
f01079da:	c7 05 c8 f6 85 f0 00 	movl   $0x0,0xf085f6c8
f01079e1:	00 00 00 
f01079e4:	c7 05 d0 f6 85 f0 00 	movl   $0x0,0xf085f6d0
f01079eb:	00 00 00 
	     MemBlockNodes =(struct MemBlock *)KERNEL_HEAP_START;
f01079ee:	c7 05 d4 f6 85 f0 00 	movl   $0xf6000000,0xf085f6d4
f01079f5:	00 00 f6 
	     for (uint32 i = KERNEL_HEAP_START; i < KERNEL_HEAP_MAX; i += PAGE_SIZE) {
	      runpages++;
	     }*/


	     MAX_MEM_BLOCK_CNT = NUM_OF_KHEAP_PAGES;
f01079f8:	c7 05 00 f7 85 f0 ff 	movl   $0x9fff,0xf085f700
f01079ff:	9f 00 00 
	     //size of MemBlockNodes
	     uint32 blocksArraySize= ROUNDUP(NUM_OF_KHEAP_PAGES * sizeof(struct MemBlock), PAGE_SIZE);
f0107a02:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0107a09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a0c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0107a11:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107a14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a17:	ba 00 00 00 00       	mov    $0x0,%edx
f0107a1c:	f7 75 f4             	divl   -0xc(%ebp)
f0107a1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a22:	29 d0                	sub    %edx,%eax
f0107a24:	89 45 ec             	mov    %eax,-0x14(%ebp)

	     //uint32 blocksArraySize=NUM_OF_KHEAP_PAGES * sizeof(struct MemBlock);
	     //uint32 size2 =(KERNEL_HEAP_START-KERNEL_HEAP_MAX)/PAGE_SIZE;

	     //size of kheap
	     uint32 size2 =MAX_MEM_BLOCK_CNT *PAGE_SIZE;
f0107a27:	a1 00 f7 85 f0       	mov    0xf085f700,%eax
f0107a2c:	c1 e0 0c             	shl    $0xc,%eax
f0107a2f:	89 45 e8             	mov    %eax,-0x18(%ebp)

	     //MemBlockNodes->sva=KERNEL_HEAP_START;
	     //uint32 var = MAX_MEM_BLOCK_CNT * PAGE_SIZE;

	    allocate_chunk(ptr_page_directory, KERNEL_HEAP_START,
f0107a32:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0107a37:	6a 03                	push   $0x3
f0107a39:	ff 75 ec             	pushl  -0x14(%ebp)
f0107a3c:	68 00 00 00 f6       	push   $0xf6000000
f0107a41:	50                   	push   %eax
f0107a42:	e8 b7 15 00 00       	call   f0108ffe <allocate_chunk>
f0107a47:	83 c4 10             	add    $0x10,%esp
	       blocksArraySize, PERM_WRITEABLE|PERM_PRESENT);

	    #endif

	     //[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	     initialize_MemBlocksList(MAX_MEM_BLOCK_CNT);
f0107a4a:	a1 00 f7 85 f0       	mov    0xf085f700,%eax
f0107a4f:	83 ec 0c             	sub    $0xc,%esp
f0107a52:	50                   	push   %eax
f0107a53:	e8 17 ab 02 00       	call   f013256f <initialize_MemBlocksList>
f0107a58:	83 c4 10             	add    $0x10,%esp

	     //[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
	     struct MemBlock *newblock = LIST_FIRST(&AvailableMemBlocksList);
f0107a5b:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f0107a60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	     LIST_REMOVE(&AvailableMemBlocksList, newblock);
f0107a63:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107a67:	75 14                	jne    f0107a7d <initialize_dyn_block_system+0xd1>
f0107a69:	83 ec 04             	sub    $0x4,%esp
f0107a6c:	68 c3 64 13 f0       	push   $0xf01364c3
f0107a71:	6a 3e                	push   $0x3e
f0107a73:	68 e1 64 13 f0       	push   $0xf01364e1
f0107a78:	e8 88 87 ff ff       	call   f0100205 <_panic>
f0107a7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a80:	8b 00                	mov    (%eax),%eax
f0107a82:	85 c0                	test   %eax,%eax
f0107a84:	74 10                	je     f0107a96 <initialize_dyn_block_system+0xea>
f0107a86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a89:	8b 00                	mov    (%eax),%eax
f0107a8b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107a8e:	8b 52 04             	mov    0x4(%edx),%edx
f0107a91:	89 50 04             	mov    %edx,0x4(%eax)
f0107a94:	eb 0b                	jmp    f0107aa1 <initialize_dyn_block_system+0xf5>
f0107a96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107a99:	8b 40 04             	mov    0x4(%eax),%eax
f0107a9c:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f0107aa1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107aa4:	8b 40 04             	mov    0x4(%eax),%eax
f0107aa7:	85 c0                	test   %eax,%eax
f0107aa9:	74 0f                	je     f0107aba <initialize_dyn_block_system+0x10e>
f0107aab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107aae:	8b 40 04             	mov    0x4(%eax),%eax
f0107ab1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107ab4:	8b 12                	mov    (%edx),%edx
f0107ab6:	89 10                	mov    %edx,(%eax)
f0107ab8:	eb 0a                	jmp    f0107ac4 <initialize_dyn_block_system+0x118>
f0107aba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107abd:	8b 00                	mov    (%eax),%eax
f0107abf:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f0107ac4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107ac7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107acd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107ad0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107ad7:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0107adc:	48                   	dec    %eax
f0107add:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0

	     //newblock->size=size2-blocksArraySize;
	          newblock->size=KERNEL_HEAP_MAX-KERNEL_HEAP_START-blocksArraySize;
f0107ae2:	b8 00 f0 ff 09       	mov    $0x9fff000,%eax
f0107ae7:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0107aea:	89 c2                	mov    %eax,%edx
f0107aec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107aef:	89 50 0c             	mov    %edx,0xc(%eax)
	     //sva
	     newblock->sva= (blocksArraySize+KERNEL_HEAP_START);
f0107af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107af5:	8d 90 00 00 00 f6    	lea    -0xa000000(%eax),%edx
f0107afb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107afe:	89 50 08             	mov    %edx,0x8(%eax)
	     //newblock->sva=MemBlockNodes;

	     LIST_INSERT_HEAD(&FreeMemBlocksList, (newblock));
f0107b01:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107b05:	75 14                	jne    f0107b1b <initialize_dyn_block_system+0x16f>
f0107b07:	83 ec 04             	sub    $0x4,%esp
f0107b0a:	68 f4 64 13 f0       	push   $0xf01364f4
f0107b0f:	6a 46                	push   $0x46
f0107b11:	68 e1 64 13 f0       	push   $0xf01364e1
f0107b16:	e8 ea 86 ff ff       	call   f0100205 <_panic>
f0107b1b:	8b 15 60 f7 85 f0    	mov    0xf085f760,%edx
f0107b21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107b24:	89 10                	mov    %edx,(%eax)
f0107b26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107b29:	8b 00                	mov    (%eax),%eax
f0107b2b:	85 c0                	test   %eax,%eax
f0107b2d:	74 0d                	je     f0107b3c <initialize_dyn_block_system+0x190>
f0107b2f:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f0107b34:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0107b37:	89 50 04             	mov    %edx,0x4(%eax)
f0107b3a:	eb 08                	jmp    f0107b44 <initialize_dyn_block_system+0x198>
f0107b3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107b3f:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f0107b44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107b47:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f0107b4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107b4f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107b56:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0107b5b:	40                   	inc    %eax
f0107b5c:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c

}
f0107b61:	90                   	nop
f0107b62:	c9                   	leave  
f0107b63:	c3                   	ret    

f0107b64 <kmalloc>:

void* kmalloc(unsigned int size)
{
f0107b64:	55                   	push   %ebp
f0107b65:	89 e5                	mov    %esp,%ebp
f0107b67:	83 ec 28             	sub    $0x28,%esp
	 //refer to the project presentation and documentation for details
	 // use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy


	 struct MemBlock *theBlock;
	 int ret = 0;
f0107b6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	 int check;
	 uint32 newsize = ROUNDUP(size, PAGE_SIZE);
f0107b71:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107b78:	8b 55 08             	mov    0x8(%ebp),%edx
f0107b7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b7e:	01 d0                	add    %edx,%eax
f0107b80:	48                   	dec    %eax
f0107b81:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107b84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107b87:	ba 00 00 00 00       	mov    $0x0,%edx
f0107b8c:	f7 75 f0             	divl   -0x10(%ebp)
f0107b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107b92:	29 d0                	sub    %edx,%eax
f0107b94:	89 45 e8             	mov    %eax,-0x18(%ebp)
	 int frameNum;
	 if (isKHeapPlacementStrategyFIRSTFIT() == 1) {  ret = 1; }
f0107b97:	e8 68 fd ff ff       	call   f0107904 <isKHeapPlacementStrategyFIRSTFIT>
f0107b9c:	3c 01                	cmp    $0x1,%al
f0107b9e:	75 07                	jne    f0107ba7 <kmalloc+0x43>
f0107ba0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	 if (isKHeapPlacementStrategyBESTFIT() == 1) {   ret = 2; }
f0107ba7:	e8 6d fd ff ff       	call   f0107919 <isKHeapPlacementStrategyBESTFIT>
f0107bac:	3c 01                	cmp    $0x1,%al
f0107bae:	75 07                	jne    f0107bb7 <kmalloc+0x53>
f0107bb0:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)

	 if (ret == 1) {
f0107bb7:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0107bbb:	75 51                	jne    f0107c0e <kmalloc+0xaa>
	  theBlock = alloc_block_FF(newsize);
f0107bbd:	83 ec 0c             	sub    $0xc,%esp
f0107bc0:	ff 75 e8             	pushl  -0x18(%ebp)
f0107bc3:	e8 39 ad 02 00       	call   f0132901 <alloc_block_FF>
f0107bc8:	83 c4 10             	add    $0x10,%esp
f0107bcb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	        if (theBlock != NULL){
f0107bce:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107bd2:	74 33                	je     f0107c07 <kmalloc+0xa3>
	         insert_sorted_allocList(theBlock);
f0107bd4:	83 ec 0c             	sub    $0xc,%esp
f0107bd7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107bda:	e8 c5 aa 02 00       	call   f01326a4 <insert_sorted_allocList>
f0107bdf:	83 c4 10             	add    $0x10,%esp
	         check =allocate_chunk(ptr_page_directory, theBlock->sva, newsize,PERM_WRITEABLE|PERM_PRESENT);
f0107be2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107be5:	8b 50 08             	mov    0x8(%eax),%edx
f0107be8:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0107bed:	6a 03                	push   $0x3
f0107bef:	ff 75 e8             	pushl  -0x18(%ebp)
f0107bf2:	52                   	push   %edx
f0107bf3:	50                   	push   %eax
f0107bf4:	e8 05 14 00 00       	call   f0108ffe <allocate_chunk>
f0107bf9:	83 c4 10             	add    $0x10,%esp
f0107bfc:	89 45 e0             	mov    %eax,-0x20(%ebp)
	      return (void*)theBlock->sva;
f0107bff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107c02:	8b 40 08             	mov    0x8(%eax),%eax
f0107c05:	eb 63                	jmp    f0107c6a <kmalloc+0x106>
	        }
	        else return NULL;
f0107c07:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c0c:	eb 5c                	jmp    f0107c6a <kmalloc+0x106>
	 }

	 if (ret == 2) {
f0107c0e:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0107c12:	75 51                	jne    f0107c65 <kmalloc+0x101>
	  theBlock = alloc_block_BF(newsize);
f0107c14:	83 ec 0c             	sub    $0xc,%esp
f0107c17:	ff 75 e8             	pushl  -0x18(%ebp)
f0107c1a:	e8 95 af 02 00       	call   f0132bb4 <alloc_block_BF>
f0107c1f:	83 c4 10             	add    $0x10,%esp
f0107c22:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	        if (theBlock != NULL){
f0107c25:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0107c29:	74 33                	je     f0107c5e <kmalloc+0xfa>
	         insert_sorted_allocList(theBlock);
f0107c2b:	83 ec 0c             	sub    $0xc,%esp
f0107c2e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107c31:	e8 6e aa 02 00       	call   f01326a4 <insert_sorted_allocList>
f0107c36:	83 c4 10             	add    $0x10,%esp
	      check =allocate_chunk(ptr_page_directory, theBlock->sva,newsize,PERM_WRITEABLE|PERM_PRESENT);
f0107c39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107c3c:	8b 50 08             	mov    0x8(%eax),%edx
f0107c3f:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0107c44:	6a 03                	push   $0x3
f0107c46:	ff 75 e8             	pushl  -0x18(%ebp)
f0107c49:	52                   	push   %edx
f0107c4a:	50                   	push   %eax
f0107c4b:	e8 ae 13 00 00       	call   f0108ffe <allocate_chunk>
f0107c50:	83 c4 10             	add    $0x10,%esp
f0107c53:	89 45 e0             	mov    %eax,-0x20(%ebp)
	      return (void*)theBlock->sva;
f0107c56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107c59:	8b 40 08             	mov    0x8(%eax),%eax
f0107c5c:	eb 0c                	jmp    f0107c6a <kmalloc+0x106>
	        }
	        else return NULL;
f0107c5e:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c63:	eb 05                	jmp    f0107c6a <kmalloc+0x106>
	 }

	   return 0;
f0107c65:	b8 00 00 00 00       	mov    $0x0,%eax
	//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)
	//refer to the project presentation and documentation for details
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

	//change this "return" according to your answer
}
f0107c6a:	c9                   	leave  
f0107c6b:	c3                   	ret    

f0107c6c <kfree>:

void kfree(void* virtual_address)
{
f0107c6c:	55                   	push   %ebp
f0107c6d:	89 e5                	mov    %esp,%ebp
f0107c6f:	83 ec 28             	sub    $0x28,%esp
	 // check return of find block ---> do noting if null
	 //remove from allocate list
	 // detete from


	 uint32 va=(uint32)virtual_address;
f0107c72:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c75:	89 45 f0             	mov    %eax,-0x10(%ebp)
	 if (KERNEL_HEAP_START <= va&& KERNEL_HEAP_MAX > va)
f0107c78:	81 7d f0 ff ff ff f5 	cmpl   $0xf5ffffff,-0x10(%ebp)
f0107c7f:	0f 86 27 01 00 00    	jbe    f0107dac <kfree+0x140>
f0107c85:	81 7d f0 ff ef ff ff 	cmpl   $0xffffefff,-0x10(%ebp)
f0107c8c:	0f 87 1a 01 00 00    	ja     f0107dac <kfree+0x140>
	 {
	  struct MemBlock *theBlock = find_block(&AllocMemBlocksList,va);
f0107c92:	83 ec 08             	sub    $0x8,%esp
f0107c95:	ff 75 f0             	pushl  -0x10(%ebp)
f0107c98:	68 c4 f6 85 f0       	push   $0xf085f6c4
f0107c9d:	e8 aa a9 02 00       	call   f013264c <find_block>
f0107ca2:	83 c4 10             	add    $0x10,%esp
f0107ca5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	  if (theBlock != NULL) {
f0107ca8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107cac:	0f 84 fa 00 00 00    	je     f0107dac <kfree+0x140>
	   LIST_REMOVE(&AllocMemBlocksList, theBlock);
f0107cb2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107cb6:	75 17                	jne    f0107ccf <kfree+0x63>
f0107cb8:	83 ec 04             	sub    $0x4,%esp
f0107cbb:	68 c3 64 13 f0       	push   $0xf01364c3
f0107cc0:	68 8f 00 00 00       	push   $0x8f
f0107cc5:	68 e1 64 13 f0       	push   $0xf01364e1
f0107cca:	e8 36 85 ff ff       	call   f0100205 <_panic>
f0107ccf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107cd2:	8b 00                	mov    (%eax),%eax
f0107cd4:	85 c0                	test   %eax,%eax
f0107cd6:	74 10                	je     f0107ce8 <kfree+0x7c>
f0107cd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107cdb:	8b 00                	mov    (%eax),%eax
f0107cdd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107ce0:	8b 52 04             	mov    0x4(%edx),%edx
f0107ce3:	89 50 04             	mov    %edx,0x4(%eax)
f0107ce6:	eb 0b                	jmp    f0107cf3 <kfree+0x87>
f0107ce8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ceb:	8b 40 04             	mov    0x4(%eax),%eax
f0107cee:	a3 c8 f6 85 f0       	mov    %eax,0xf085f6c8
f0107cf3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107cf6:	8b 40 04             	mov    0x4(%eax),%eax
f0107cf9:	85 c0                	test   %eax,%eax
f0107cfb:	74 0f                	je     f0107d0c <kfree+0xa0>
f0107cfd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d00:	8b 40 04             	mov    0x4(%eax),%eax
f0107d03:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107d06:	8b 12                	mov    (%edx),%edx
f0107d08:	89 10                	mov    %edx,(%eax)
f0107d0a:	eb 0a                	jmp    f0107d16 <kfree+0xaa>
f0107d0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d0f:	8b 00                	mov    (%eax),%eax
f0107d11:	a3 c4 f6 85 f0       	mov    %eax,0xf085f6c4
f0107d16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d19:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0107d1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d22:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107d29:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0107d2e:	48                   	dec    %eax
f0107d2f:	a3 d0 f6 85 f0       	mov    %eax,0xf085f6d0
	   uint32 endaddress = ROUNDUP((theBlock->size+va), PAGE_SIZE);
f0107d34:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0107d3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d3e:	8b 50 0c             	mov    0xc(%eax),%edx
f0107d41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d44:	01 c2                	add    %eax,%edx
f0107d46:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107d49:	01 d0                	add    %edx,%eax
f0107d4b:	48                   	dec    %eax
f0107d4c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107d4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d52:	ba 00 00 00 00       	mov    $0x0,%edx
f0107d57:	f7 75 e8             	divl   -0x18(%ebp)
f0107d5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107d5d:	29 d0                	sub    %edx,%eax
f0107d5f:	89 45 e0             	mov    %eax,-0x20(%ebp)
	   va=ROUNDDOWN(va,PAGE_SIZE);
f0107d62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d65:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0107d68:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107d6b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107d70:	89 45 f0             	mov    %eax,-0x10(%ebp)
	   for (uint32 var = va; var < endaddress; var+=PAGE_SIZE) {
f0107d73:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107d76:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107d79:	eb 1b                	jmp    f0107d96 <kfree+0x12a>
	     unmap_frame(ptr_page_directory, var);
f0107d7b:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0107d80:	83 ec 08             	sub    $0x8,%esp
f0107d83:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d86:	50                   	push   %eax
f0107d87:	e8 d1 f0 ff ff       	call   f0106e5d <unmap_frame>
f0107d8c:	83 c4 10             	add    $0x10,%esp
	  struct MemBlock *theBlock = find_block(&AllocMemBlocksList,va);
	  if (theBlock != NULL) {
	   LIST_REMOVE(&AllocMemBlocksList, theBlock);
	   uint32 endaddress = ROUNDUP((theBlock->size+va), PAGE_SIZE);
	   va=ROUNDDOWN(va,PAGE_SIZE);
	   for (uint32 var = va; var < endaddress; var+=PAGE_SIZE) {
f0107d8f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107d99:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0107d9c:	72 dd                	jb     f0107d7b <kfree+0x10f>
	     unmap_frame(ptr_page_directory, var);
	     }
	   insert_sorted_with_merge_freeList(theBlock);
f0107d9e:	83 ec 0c             	sub    $0xc,%esp
f0107da1:	ff 75 ec             	pushl  -0x14(%ebp)
f0107da4:	e8 2b b0 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f0107da9:	83 c4 10             	add    $0x10,%esp

	 }



}
f0107dac:	90                   	nop
f0107dad:	c9                   	leave  
f0107dae:	c3                   	ret    

f0107daf <kheap_virtual_address>:

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107daf:	55                   	push   %ebp
f0107db0:	89 e5                	mov    %esp,%ebp
f0107db2:	83 ec 18             	sub    $0x18,%esp
	// Write your code here, remove the panic and write your code
	//panic("kheap_virtual_address() is not implemented yet...!!");


	  struct FrameInfo *ptr_frame_info ;
	  ptr_frame_info = to_frame_info(physical_address) ;
f0107db5:	83 ec 0c             	sub    $0xc,%esp
f0107db8:	ff 75 08             	pushl  0x8(%ebp)
f0107dbb:	e8 a6 fb ff ff       	call   f0107966 <to_frame_info>
f0107dc0:	83 c4 10             	add    $0x10,%esp
f0107dc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	  uint32 frame =to_frame_number(ptr_frame_info);
f0107dc6:	83 ec 0c             	sub    $0xc,%esp
f0107dc9:	ff 75 f4             	pushl  -0xc(%ebp)
f0107dcc:	e8 5d fb ff ff       	call   f010792e <to_frame_number>
f0107dd1:	83 c4 10             	add    $0x10,%esp
f0107dd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	  return (unsigned int)frames_info[frame].va;
f0107dd7:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f0107ddd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107de0:	89 d0                	mov    %edx,%eax
f0107de2:	01 c0                	add    %eax,%eax
f0107de4:	01 d0                	add    %edx,%eax
f0107de6:	c1 e0 03             	shl    $0x3,%eax
f0107de9:	01 c8                	add    %ecx,%eax
f0107deb:	8b 40 0c             	mov    0xc(%eax),%eax


	//return the virtual address corresponding to given physical_address
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}
f0107dee:	c9                   	leave  
f0107def:	c3                   	ret    

f0107df0 <kheap_physical_address>:

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107df0:	55                   	push   %ebp
f0107df1:	89 e5                	mov    %esp,%ebp
f0107df3:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	//panic("kheap_physical_address() is not implemented yet...!!");


	 unsigned int pa =virtual_to_physical( ptr_page_directory,  virtual_address);
f0107df6:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0107dfb:	83 ec 08             	sub    $0x8,%esp
f0107dfe:	ff 75 08             	pushl  0x8(%ebp)
f0107e01:	50                   	push   %eax
f0107e02:	e8 9a 02 00 00       	call   f01080a1 <virtual_to_physical>
f0107e07:	83 c4 10             	add    $0x10,%esp
f0107e0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 return pa ;
f0107e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax



	//return the physical address corresponding to given virtual_address
	//refer to the project presentation and documentation for details
}
f0107e10:	c9                   	leave  
f0107e11:	c3                   	ret    

f0107e12 <kfreeall>:


void kfreeall()
{
f0107e12:	55                   	push   %ebp
f0107e13:	89 e5                	mov    %esp,%ebp
f0107e15:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e18:	83 ec 04             	sub    $0x4,%esp
f0107e1b:	68 17 65 13 f0       	push   $0xf0136517
f0107e20:	68 c3 00 00 00       	push   $0xc3
f0107e25:	68 e1 64 13 f0       	push   $0xf01364e1
f0107e2a:	e8 d6 83 ff ff       	call   f0100205 <_panic>

f0107e2f <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107e2f:	55                   	push   %ebp
f0107e30:	89 e5                	mov    %esp,%ebp
f0107e32:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e35:	83 ec 04             	sub    $0x4,%esp
f0107e38:	68 17 65 13 f0       	push   $0xf0136517
f0107e3d:	68 c9 00 00 00       	push   $0xc9
f0107e42:	68 e1 64 13 f0       	push   $0xf01364e1
f0107e47:	e8 b9 83 ff ff       	call   f0100205 <_panic>

f0107e4c <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107e4c:	55                   	push   %ebp
f0107e4d:	89 e5                	mov    %esp,%ebp
f0107e4f:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107e52:	83 ec 04             	sub    $0x4,%esp
f0107e55:	68 17 65 13 f0       	push   $0xf0136517
f0107e5a:	68 ce 00 00 00       	push   $0xce
f0107e5f:	68 e1 64 13 f0       	push   $0xf01364e1
f0107e64:	e8 9c 83 ff ff       	call   f0100205 <_panic>

f0107e69 <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0107e69:	55                   	push   %ebp
f0107e6a:	89 e5                	mov    %esp,%ebp
f0107e6c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f0107e6f:	83 ec 04             	sub    $0x4,%esp
f0107e72:	68 28 65 13 f0       	push   $0xf0136528
f0107e77:	68 e5 00 00 00       	push   $0xe5
f0107e7c:	68 e1 64 13 f0       	push   $0xf01364e1
f0107e81:	e8 7f 83 ff ff       	call   f0100205 <_panic>

f0107e86 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0107e86:	55                   	push   %ebp
f0107e87:	89 e5                	mov    %esp,%ebp
f0107e89:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code
	//panic("pt_set_page_permissions() is not implemented yet...!!");
	  uint32 * ptr_page_table = NULL;
f0107e8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	  get_page_table(page_directory , virtual_address, & ptr_page_table);
f0107e93:	83 ec 04             	sub    $0x4,%esp
f0107e96:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0107e99:	50                   	push   %eax
f0107e9a:	ff 75 0c             	pushl  0xc(%ebp)
f0107e9d:	ff 75 08             	pushl  0x8(%ebp)
f0107ea0:	e8 f3 eb ff ff       	call   f0106a98 <get_page_table>
f0107ea5:	83 c4 10             	add    $0x10,%esp
	  if (  ptr_page_table != NULL )
f0107ea8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107eab:	85 c0                	test   %eax,%eax
f0107ead:	0f 84 f4 00 00 00    	je     f0107fa7 <pt_set_page_permissions+0x121>
	  {
	        if (permissions_to_clear==0 && permissions_to_set!=0   )
f0107eb3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0107eb7:	75 3a                	jne    f0107ef3 <pt_set_page_permissions+0x6d>
f0107eb9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0107ebd:	74 34                	je     f0107ef3 <pt_set_page_permissions+0x6d>
	        {
	          ptr_page_table[PTX(virtual_address)]= ptr_page_table[PTX(virtual_address)]| permissions_to_set;
f0107ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ec2:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ec5:	c1 ea 0c             	shr    $0xc,%edx
f0107ec8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107ece:	c1 e2 02             	shl    $0x2,%edx
f0107ed1:	01 c2                	add    %eax,%edx
f0107ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ed6:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107ed9:	c1 e9 0c             	shr    $0xc,%ecx
f0107edc:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107ee2:	c1 e1 02             	shl    $0x2,%ecx
f0107ee5:	01 c8                	add    %ecx,%eax
f0107ee7:	8b 00                	mov    (%eax),%eax
f0107ee9:	0b 45 10             	or     0x10(%ebp),%eax
f0107eec:	89 02                	mov    %eax,(%edx)
f0107eee:	e9 c8 00 00 00       	jmp    f0107fbb <pt_set_page_permissions+0x135>
	        }
	        else if(permissions_to_set==0 && permissions_to_clear!=0   )
f0107ef3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0107ef7:	75 3e                	jne    f0107f37 <pt_set_page_permissions+0xb1>
f0107ef9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0107efd:	74 38                	je     f0107f37 <pt_set_page_permissions+0xb1>
	        {
	        ptr_page_table[PTX(virtual_address)]= ptr_page_table[PTX(virtual_address)]&(~ permissions_to_clear);
f0107eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f02:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f05:	c1 ea 0c             	shr    $0xc,%edx
f0107f08:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107f0e:	c1 e2 02             	shl    $0x2,%edx
f0107f11:	01 d0                	add    %edx,%eax
f0107f13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f16:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107f19:	c1 e9 0c             	shr    $0xc,%ecx
f0107f1c:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f22:	c1 e1 02             	shl    $0x2,%ecx
f0107f25:	01 ca                	add    %ecx,%edx
f0107f27:	8b 12                	mov    (%edx),%edx
f0107f29:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107f2c:	f7 d1                	not    %ecx
f0107f2e:	21 ca                	and    %ecx,%edx
f0107f30:	89 10                	mov    %edx,(%eax)
f0107f32:	e9 84 00 00 00       	jmp    f0107fbb <pt_set_page_permissions+0x135>
	        }
	        else if( permissions_to_clear!=0 && permissions_to_clear!=0 )
f0107f37:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0107f3b:	74 7e                	je     f0107fbb <pt_set_page_permissions+0x135>
f0107f3d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0107f41:	74 78                	je     f0107fbb <pt_set_page_permissions+0x135>
	        {
	         ptr_page_table[PTX(virtual_address)]= ptr_page_table[PTX(virtual_address)]&(~ permissions_to_clear);
f0107f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f46:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f49:	c1 ea 0c             	shr    $0xc,%edx
f0107f4c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107f52:	c1 e2 02             	shl    $0x2,%edx
f0107f55:	01 d0                	add    %edx,%eax
f0107f57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f5a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107f5d:	c1 e9 0c             	shr    $0xc,%ecx
f0107f60:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f66:	c1 e1 02             	shl    $0x2,%ecx
f0107f69:	01 ca                	add    %ecx,%edx
f0107f6b:	8b 12                	mov    (%edx),%edx
f0107f6d:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107f70:	f7 d1                	not    %ecx
f0107f72:	21 ca                	and    %ecx,%edx
f0107f74:	89 10                	mov    %edx,(%eax)
	         ptr_page_table[PTX(virtual_address)]= ptr_page_table[PTX(virtual_address)]| permissions_to_set;
f0107f76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f79:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f7c:	c1 ea 0c             	shr    $0xc,%edx
f0107f7f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107f85:	c1 e2 02             	shl    $0x2,%edx
f0107f88:	01 c2                	add    %eax,%edx
f0107f8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107f8d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107f90:	c1 e9 0c             	shr    $0xc,%ecx
f0107f93:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107f99:	c1 e1 02             	shl    $0x2,%ecx
f0107f9c:	01 c8                	add    %ecx,%eax
f0107f9e:	8b 00                	mov    (%eax),%eax
f0107fa0:	0b 45 10             	or     0x10(%ebp),%eax
f0107fa3:	89 02                	mov    %eax,(%edx)
f0107fa5:	eb 14                	jmp    f0107fbb <pt_set_page_permissions+0x135>
	        }
	  }
	  else{
	   panic("Invalid va");
f0107fa7:	83 ec 04             	sub    $0x4,%esp
f0107faa:	68 4f 65 13 f0       	push   $0xf013654f
f0107faf:	6a 22                	push   $0x22
f0107fb1:	68 5a 65 13 f0       	push   $0xf013655a
f0107fb6:	e8 4a 82 ff ff       	call   f0100205 <_panic>
	  }
	  tlb_invalidate((void *)ptr_page_directory ,(void *)virtual_address );
f0107fbb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fbe:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0107fc3:	83 ec 08             	sub    $0x8,%esp
f0107fc6:	52                   	push   %edx
f0107fc7:	50                   	push   %eax
f0107fc8:	e8 28 e5 ff ff       	call   f01064f5 <tlb_invalidate>
f0107fcd:	83 c4 10             	add    $0x10,%esp

}
f0107fd0:	90                   	nop
f0107fd1:	c9                   	leave  
f0107fd2:	c3                   	ret    

f0107fd3 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107fd3:	55                   	push   %ebp
f0107fd4:	89 e5                	mov    %esp,%ebp
f0107fd6:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code
	//panic("pt_get_page_permissions() is not implemented yet...!!");
	 uint32* ptr_page_table=NULL;
f0107fd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	  get_page_table(page_directory,virtual_address,&ptr_page_table);
f0107fe0:	83 ec 04             	sub    $0x4,%esp
f0107fe3:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107fe6:	50                   	push   %eax
f0107fe7:	ff 75 0c             	pushl  0xc(%ebp)
f0107fea:	ff 75 08             	pushl  0x8(%ebp)
f0107fed:	e8 a6 ea ff ff       	call   f0106a98 <get_page_table>
f0107ff2:	83 c4 10             	add    $0x10,%esp
	  if(ptr_page_table ==NULL){
f0107ff5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ff8:	85 c0                	test   %eax,%eax
f0107ffa:	75 07                	jne    f0108003 <pt_get_page_permissions+0x30>
	    return -1;
f0107ffc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108001:	eb 28                	jmp    f010802b <pt_get_page_permissions+0x58>
	  }
	  else{
	    uint32 table_entry= ptr_page_table[PTX(virtual_address)];
f0108003:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108006:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108009:	c1 ea 0c             	shr    $0xc,%edx
f010800c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108012:	c1 e2 02             	shl    $0x2,%edx
f0108015:	01 d0                	add    %edx,%eax
f0108017:	8b 00                	mov    (%eax),%eax
f0108019:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    int per = table_entry << 20;
f010801c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010801f:	c1 e0 14             	shl    $0x14,%eax
f0108022:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    return (per >> 20);
f0108025:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108028:	c1 f8 14             	sar    $0x14,%eax
	  }
}
f010802b:	c9                   	leave  
f010802c:	c3                   	ret    

f010802d <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f010802d:	55                   	push   %ebp
f010802e:	89 e5                	mov    %esp,%ebp
f0108030:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	//panic("pt_clear_page_table_entry() is not implemented yet...!!");

	uint32 *ptr_page_table = NULL;
f0108033:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f010803a:	83 ec 04             	sub    $0x4,%esp
f010803d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108040:	50                   	push   %eax
f0108041:	ff 75 0c             	pushl  0xc(%ebp)
f0108044:	ff 75 08             	pushl  0x8(%ebp)
f0108047:	e8 4c ea ff ff       	call   f0106a98 <get_page_table>
f010804c:	83 c4 10             	add    $0x10,%esp
f010804f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (ptr_page_table!= NULL)
f0108052:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108055:	85 c0                	test   %eax,%eax
f0108057:	74 1c                	je     f0108075 <pt_clear_page_table_entry+0x48>
	{
	//cprintf("page table found at virtual address:%x\n", ptr_page_table);
	ptr_page_table[PTX(virtual_address)]=0;
f0108059:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010805c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010805f:	c1 ea 0c             	shr    $0xc,%edx
f0108062:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108068:	c1 e2 02             	shl    $0x2,%edx
f010806b:	01 d0                	add    %edx,%eax
f010806d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108073:	eb 14                	jmp    f0108089 <pt_clear_page_table_entry+0x5c>
	}
	else{
		panic("Invalid va");
f0108075:	83 ec 04             	sub    $0x4,%esp
f0108078:	68 4f 65 13 f0       	push   $0xf013654f
f010807d:	6a 47                	push   $0x47
f010807f:	68 5a 65 13 f0       	push   $0xf013655a
f0108084:	e8 7c 81 ff ff       	call   f0100205 <_panic>
	}


	tlb_invalidate((void *)ptr_page_directory, (void *)virtual_address);
f0108089:	8b 55 0c             	mov    0xc(%ebp),%edx
f010808c:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0108091:	83 ec 08             	sub    $0x8,%esp
f0108094:	52                   	push   %edx
f0108095:	50                   	push   %eax
f0108096:	e8 5a e4 ff ff       	call   f01064f5 <tlb_invalidate>
f010809b:	83 c4 10             	add    $0x10,%esp

}
f010809e:	90                   	nop
f010809f:	c9                   	leave  
f01080a0:	c3                   	ret    

f01080a1 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f01080a1:	55                   	push   %ebp
f01080a2:	89 e5                	mov    %esp,%ebp
f01080a4:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	//panic("virtual_to_physical() is not implemented yet...!!");

	uint32* ptr_page_table=NULL;
f01080a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	  get_page_table(page_directory,virtual_address,&ptr_page_table);
f01080ae:	83 ec 04             	sub    $0x4,%esp
f01080b1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01080b4:	50                   	push   %eax
f01080b5:	ff 75 0c             	pushl  0xc(%ebp)
f01080b8:	ff 75 08             	pushl  0x8(%ebp)
f01080bb:	e8 d8 e9 ff ff       	call   f0106a98 <get_page_table>
f01080c0:	83 c4 10             	add    $0x10,%esp
	  if(ptr_page_table ==NULL){
f01080c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01080c6:	85 c0                	test   %eax,%eax
f01080c8:	75 07                	jne    f01080d1 <virtual_to_physical+0x30>
	    return -1;
f01080ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01080cf:	eb 28                	jmp    f01080f9 <virtual_to_physical+0x58>
	  }
	  else{
	    uint32 table_entry= ptr_page_table[PTX(virtual_address)];
f01080d1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01080d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01080d7:	c1 ea 0c             	shr    $0xc,%edx
f01080da:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01080e0:	c1 e2 02             	shl    $0x2,%edx
f01080e3:	01 d0                	add    %edx,%eax
f01080e5:	8b 00                	mov    (%eax),%eax
f01080e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	    int frameNum = table_entry >> 12;
f01080ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01080ed:	c1 e8 0c             	shr    $0xc,%eax
f01080f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    return (frameNum << 12);
f01080f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01080f6:	c1 e0 0c             	shl    $0xc,%eax
	  }
}
f01080f9:	c9                   	leave  
f01080fa:	c3                   	ret    

f01080fb <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f01080fb:	55                   	push   %ebp
f01080fc:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f01080fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108101:	c1 e8 16             	shr    $0x16,%eax
f0108104:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010810b:	8b 45 08             	mov    0x8(%ebp),%eax
f010810e:	01 d0                	add    %edx,%eax
f0108110:	8b 00                	mov    (%eax),%eax
f0108112:	83 e0 20             	and    $0x20,%eax
f0108115:	85 c0                	test   %eax,%eax
f0108117:	0f 95 c0             	setne  %al
f010811a:	0f b6 c0             	movzbl %al,%eax
}
f010811d:	5d                   	pop    %ebp
f010811e:	c3                   	ret    

f010811f <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f010811f:	55                   	push   %ebp
f0108120:	89 e5                	mov    %esp,%ebp
f0108122:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0108125:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108128:	c1 e8 16             	shr    $0x16,%eax
f010812b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108132:	8b 45 08             	mov    0x8(%ebp),%eax
f0108135:	01 d0                	add    %edx,%eax
f0108137:	8b 55 0c             	mov    0xc(%ebp),%edx
f010813a:	c1 ea 16             	shr    $0x16,%edx
f010813d:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108144:	8b 55 08             	mov    0x8(%ebp),%edx
f0108147:	01 ca                	add    %ecx,%edx
f0108149:	8b 12                	mov    (%edx),%edx
f010814b:	83 e2 df             	and    $0xffffffdf,%edx
f010814e:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108150:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108153:	83 ec 08             	sub    $0x8,%esp
f0108156:	50                   	push   %eax
f0108157:	6a 00                	push   $0x0
f0108159:	e8 97 e3 ff ff       	call   f01064f5 <tlb_invalidate>
f010815e:	83 c4 10             	add    $0x10,%esp
}
f0108161:	90                   	nop
f0108162:	c9                   	leave  
f0108163:	c3                   	ret    

f0108164 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108164:	55                   	push   %ebp
f0108165:	89 e5                	mov    %esp,%ebp
f0108167:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f010816a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010816d:	c1 e8 16             	shr    $0x16,%eax
f0108170:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108177:	8b 45 08             	mov    0x8(%ebp),%eax
f010817a:	01 d0                	add    %edx,%eax
f010817c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108182:	0f 20 d8             	mov    %cr3,%eax
f0108185:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108188:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010818b:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f010818e:	90                   	nop
f010818f:	c9                   	leave  
f0108190:	c3                   	ret    

f0108191 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108191:	55                   	push   %ebp
f0108192:	89 e5                	mov    %esp,%ebp
f0108194:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108197:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010819e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f01081a5:	eb 21                	jmp    f01081c8 <env_page_ws_get_size+0x37>
f01081a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01081aa:	8b 48 78             	mov    0x78(%eax),%ecx
f01081ad:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01081b0:	89 d0                	mov    %edx,%eax
f01081b2:	01 c0                	add    %eax,%eax
f01081b4:	01 d0                	add    %edx,%eax
f01081b6:	c1 e0 03             	shl    $0x3,%eax
f01081b9:	01 c8                	add    %ecx,%eax
f01081bb:	8a 40 04             	mov    0x4(%eax),%al
f01081be:	84 c0                	test   %al,%al
f01081c0:	75 03                	jne    f01081c5 <env_page_ws_get_size+0x34>
f01081c2:	ff 45 f8             	incl   -0x8(%ebp)
f01081c5:	ff 45 fc             	incl   -0x4(%ebp)
f01081c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01081cb:	8b 50 74             	mov    0x74(%eax),%edx
f01081ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01081d1:	39 c2                	cmp    %eax,%edx
f01081d3:	77 d2                	ja     f01081a7 <env_page_ws_get_size+0x16>
	return counter;
f01081d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01081d8:	c9                   	leave  
f01081d9:	c3                   	ret    

f01081da <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f01081da:	55                   	push   %ebp
f01081db:	89 e5                	mov    %esp,%ebp
f01081dd:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f01081e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f01081e7:	eb 4c                	jmp    f0108235 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f01081e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01081ec:	8b 48 78             	mov    0x78(%eax),%ecx
f01081ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01081f2:	89 d0                	mov    %edx,%eax
f01081f4:	01 c0                	add    %eax,%eax
f01081f6:	01 d0                	add    %edx,%eax
f01081f8:	c1 e0 03             	shl    $0x3,%eax
f01081fb:	01 c8                	add    %ecx,%eax
f01081fd:	8b 00                	mov    (%eax),%eax
f01081ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108202:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108205:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010820a:	89 c2                	mov    %eax,%edx
f010820c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010820f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108212:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108215:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010821a:	39 c2                	cmp    %eax,%edx
f010821c:	75 14                	jne    f0108232 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f010821e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108221:	83 ec 08             	sub    $0x8,%esp
f0108224:	50                   	push   %eax
f0108225:	ff 75 08             	pushl  0x8(%ebp)
f0108228:	e8 b9 00 00 00       	call   f01082e6 <env_page_ws_clear_entry>
f010822d:	83 c4 10             	add    $0x10,%esp
			break;
f0108230:	eb 10                	jmp    f0108242 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108232:	ff 45 f4             	incl   -0xc(%ebp)
f0108235:	8b 45 08             	mov    0x8(%ebp),%eax
f0108238:	8b 50 74             	mov    0x74(%eax),%edx
f010823b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010823e:	39 c2                	cmp    %eax,%edx
f0108240:	77 a7                	ja     f01081e9 <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108242:	90                   	nop
f0108243:	c9                   	leave  
f0108244:	c3                   	ret    

f0108245 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108245:	55                   	push   %ebp
f0108246:	89 e5                	mov    %esp,%ebp
f0108248:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f010824b:	8b 45 08             	mov    0x8(%ebp),%eax
f010824e:	8b 40 74             	mov    0x74(%eax),%eax
f0108251:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108254:	77 16                	ja     f010826c <env_page_ws_set_entry+0x27>
f0108256:	68 74 65 13 f0       	push   $0xf0136574
f010825b:	68 aa 65 13 f0       	push   $0xf01365aa
f0108260:	6a 26                	push   $0x26
f0108262:	68 c0 65 13 f0       	push   $0xf01365c0
f0108267:	e8 99 7f ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f010826c:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108273:	76 16                	jbe    f010828b <env_page_ws_set_entry+0x46>
f0108275:	68 e0 65 13 f0       	push   $0xf01365e0
f010827a:	68 aa 65 13 f0       	push   $0xf01365aa
f010827f:	6a 27                	push   $0x27
f0108281:	68 c0 65 13 f0       	push   $0xf01365c0
f0108286:	e8 7a 7f ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010828b:	8b 45 08             	mov    0x8(%ebp),%eax
f010828e:	8b 48 78             	mov    0x78(%eax),%ecx
f0108291:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108294:	89 d0                	mov    %edx,%eax
f0108296:	01 c0                	add    %eax,%eax
f0108298:	01 d0                	add    %edx,%eax
f010829a:	c1 e0 03             	shl    $0x3,%eax
f010829d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01082a0:	8b 45 10             	mov    0x10(%ebp),%eax
f01082a3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01082a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01082a9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01082ae:	89 02                	mov    %eax,(%edx)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f01082b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b3:	8b 48 78             	mov    0x78(%eax),%ecx
f01082b6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082b9:	89 d0                	mov    %edx,%eax
f01082bb:	01 c0                	add    %eax,%eax
f01082bd:	01 d0                	add    %edx,%eax
f01082bf:	c1 e0 03             	shl    $0x3,%eax
f01082c2:	01 c8                	add    %ecx,%eax
f01082c4:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f01082c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01082cb:	8b 48 78             	mov    0x78(%eax),%ecx
f01082ce:	8b 55 0c             	mov    0xc(%ebp),%edx
f01082d1:	89 d0                	mov    %edx,%eax
f01082d3:	01 c0                	add    %eax,%eax
f01082d5:	01 d0                	add    %edx,%eax
f01082d7:	c1 e0 03             	shl    $0x3,%eax
f01082da:	01 c8                	add    %ecx,%eax
f01082dc:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f01082e3:	90                   	nop
}
f01082e4:	c9                   	leave  
f01082e5:	c3                   	ret    

f01082e6 <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f01082e6:	55                   	push   %ebp
f01082e7:	89 e5                	mov    %esp,%ebp
f01082e9:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01082ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01082ef:	8b 40 74             	mov    0x74(%eax),%eax
f01082f2:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01082f5:	77 16                	ja     f010830d <env_page_ws_clear_entry+0x27>
f01082f7:	68 14 66 13 f0       	push   $0xf0136614
f01082fc:	68 aa 65 13 f0       	push   $0xf01365aa
f0108301:	6a 32                	push   $0x32
f0108303:	68 c0 65 13 f0       	push   $0xf01365c0
f0108308:	e8 f8 7e ff ff       	call   f0100205 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f010830d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108310:	8b 48 78             	mov    0x78(%eax),%ecx
f0108313:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108316:	89 d0                	mov    %edx,%eax
f0108318:	01 c0                	add    %eax,%eax
f010831a:	01 d0                	add    %edx,%eax
f010831c:	c1 e0 03             	shl    $0x3,%eax
f010831f:	01 c8                	add    %ecx,%eax
f0108321:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0108327:	8b 45 08             	mov    0x8(%ebp),%eax
f010832a:	8b 48 78             	mov    0x78(%eax),%ecx
f010832d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108330:	89 d0                	mov    %edx,%eax
f0108332:	01 c0                	add    %eax,%eax
f0108334:	01 d0                	add    %edx,%eax
f0108336:	c1 e0 03             	shl    $0x3,%eax
f0108339:	01 c8                	add    %ecx,%eax
f010833b:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f010833f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108342:	8b 48 78             	mov    0x78(%eax),%ecx
f0108345:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108348:	89 d0                	mov    %edx,%eax
f010834a:	01 c0                	add    %eax,%eax
f010834c:	01 d0                	add    %edx,%eax
f010834e:	c1 e0 03             	shl    $0x3,%eax
f0108351:	01 c8                	add    %ecx,%eax
f0108353:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
f010835a:	90                   	nop
f010835b:	c9                   	leave  
f010835c:	c3                   	ret    

f010835d <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f010835d:	55                   	push   %ebp
f010835e:	89 e5                	mov    %esp,%ebp
f0108360:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108363:	8b 45 08             	mov    0x8(%ebp),%eax
f0108366:	8b 40 74             	mov    0x74(%eax),%eax
f0108369:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010836c:	77 16                	ja     f0108384 <env_page_ws_get_virtual_address+0x27>
f010836e:	68 14 66 13 f0       	push   $0xf0136614
f0108373:	68 aa 65 13 f0       	push   $0xf01365aa
f0108378:	6a 3a                	push   $0x3a
f010837a:	68 c0 65 13 f0       	push   $0xf01365c0
f010837f:	e8 81 7e ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108384:	8b 45 08             	mov    0x8(%ebp),%eax
f0108387:	8b 48 78             	mov    0x78(%eax),%ecx
f010838a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010838d:	89 d0                	mov    %edx,%eax
f010838f:	01 c0                	add    %eax,%eax
f0108391:	01 d0                	add    %edx,%eax
f0108393:	c1 e0 03             	shl    $0x3,%eax
f0108396:	01 c8                	add    %ecx,%eax
f0108398:	8b 00                	mov    (%eax),%eax
f010839a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010839d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01083a0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01083a5:	c9                   	leave  
f01083a6:	c3                   	ret    

f01083a7 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f01083a7:	55                   	push   %ebp
f01083a8:	89 e5                	mov    %esp,%ebp
f01083aa:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01083ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b0:	8b 40 74             	mov    0x74(%eax),%eax
f01083b3:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01083b6:	77 16                	ja     f01083ce <env_page_ws_get_time_stamp+0x27>
f01083b8:	68 14 66 13 f0       	push   $0xf0136614
f01083bd:	68 aa 65 13 f0       	push   $0xf01365aa
f01083c2:	6a 40                	push   $0x40
f01083c4:	68 c0 65 13 f0       	push   $0xf01365c0
f01083c9:	e8 37 7e ff ff       	call   f0100205 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f01083ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01083d1:	8b 48 78             	mov    0x78(%eax),%ecx
f01083d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083d7:	89 d0                	mov    %edx,%eax
f01083d9:	01 c0                	add    %eax,%eax
f01083db:	01 d0                	add    %edx,%eax
f01083dd:	c1 e0 03             	shl    $0x3,%eax
f01083e0:	01 c8                	add    %ecx,%eax
f01083e2:	8b 40 08             	mov    0x8(%eax),%eax
}
f01083e5:	c9                   	leave  
f01083e6:	c3                   	ret    

f01083e7 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f01083e7:	55                   	push   %ebp
f01083e8:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f01083ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01083ed:	8b 48 78             	mov    0x78(%eax),%ecx
f01083f0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01083f3:	89 d0                	mov    %edx,%eax
f01083f5:	01 c0                	add    %eax,%eax
f01083f7:	01 d0                	add    %edx,%eax
f01083f9:	c1 e0 03             	shl    $0x3,%eax
f01083fc:	01 c8                	add    %ecx,%eax
f01083fe:	8a 40 04             	mov    0x4(%eax),%al
f0108401:	0f b6 c0             	movzbl %al,%eax
}
f0108404:	5d                   	pop    %ebp
f0108405:	c3                   	ret    

f0108406 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0108406:	55                   	push   %ebp
f0108407:	89 e5                	mov    %esp,%ebp
f0108409:	53                   	push   %ebx
f010840a:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010840d:	83 ec 0c             	sub    $0xc,%esp
f0108410:	6a 02                	push   $0x2
f0108412:	e8 40 5f 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0108417:	83 c4 10             	add    $0x10,%esp
f010841a:	85 c0                	test   %eax,%eax
f010841c:	0f 84 fe 00 00 00    	je     f0108520 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0108422:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f0108429:	83 ec 0c             	sub    $0xc,%esp
f010842c:	68 4c 66 13 f0       	push   $0xf013664c
f0108431:	e8 d8 88 ff ff       	call   f0100d0e <cprintf>
f0108436:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108439:	8b 45 08             	mov    0x8(%ebp),%eax
f010843c:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f0108442:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108445:	eb 2c                	jmp    f0108473 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0108447:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010844a:	8b 10                	mov    (%eax),%edx
f010844c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010844f:	8d 48 01             	lea    0x1(%eax),%ecx
f0108452:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0108455:	83 ec 04             	sub    $0x4,%esp
f0108458:	52                   	push   %edx
f0108459:	50                   	push   %eax
f010845a:	68 66 66 13 f0       	push   $0xf0136666
f010845f:	e8 aa 88 ff ff       	call   f0100d0e <cprintf>
f0108464:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0108467:	8b 45 08             	mov    0x8(%ebp),%eax
f010846a:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108470:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108473:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108477:	74 08                	je     f0108481 <env_page_ws_print+0x7b>
f0108479:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010847c:	8b 40 10             	mov    0x10(%eax),%eax
f010847f:	eb 05                	jmp    f0108486 <env_page_ws_print+0x80>
f0108481:	b8 00 00 00 00       	mov    $0x0,%eax
f0108486:	8b 55 08             	mov    0x8(%ebp),%edx
f0108489:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010848f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108492:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f0108498:	85 c0                	test   %eax,%eax
f010849a:	75 ab                	jne    f0108447 <env_page_ws_print+0x41>
f010849c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01084a0:	75 a5                	jne    f0108447 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01084a2:	83 ec 0c             	sub    $0xc,%esp
f01084a5:	68 6e 66 13 f0       	push   $0xf013666e
f01084aa:	e8 5f 88 ff ff       	call   f0100d0e <cprintf>
f01084af:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01084b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01084b5:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f01084bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01084be:	eb 2c                	jmp    f01084ec <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01084c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084c3:	8b 10                	mov    (%eax),%edx
f01084c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084c8:	8d 48 01             	lea    0x1(%eax),%ecx
f01084cb:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01084ce:	83 ec 04             	sub    $0x4,%esp
f01084d1:	52                   	push   %edx
f01084d2:	50                   	push   %eax
f01084d3:	68 66 66 13 f0       	push   $0xf0136666
f01084d8:	e8 31 88 ff ff       	call   f0100d0e <cprintf>
f01084dd:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01084e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01084e3:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f01084e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01084ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01084f0:	74 08                	je     f01084fa <env_page_ws_print+0xf4>
f01084f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01084f5:	8b 40 10             	mov    0x10(%eax),%eax
f01084f8:	eb 05                	jmp    f01084ff <env_page_ws_print+0xf9>
f01084fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01084ff:	8b 55 08             	mov    0x8(%ebp),%edx
f0108502:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f0108508:	8b 45 08             	mov    0x8(%ebp),%eax
f010850b:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f0108511:	85 c0                	test   %eax,%eax
f0108513:	75 ab                	jne    f01084c0 <env_page_ws_print+0xba>
f0108515:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108519:	75 a5                	jne    f01084c0 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010851b:	e9 95 01 00 00       	jmp    f01086b5 <env_page_ws_print+0x2af>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0108520:	83 ec 0c             	sub    $0xc,%esp
f0108523:	68 89 66 13 f0       	push   $0xf0136689
f0108528:	e8 e1 87 ff ff       	call   f0100d0e <cprintf>
f010852d:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0108530:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0108537:	e9 6a 01 00 00       	jmp    f01086a6 <env_page_ws_print+0x2a0>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010853c:	8b 45 08             	mov    0x8(%ebp),%eax
f010853f:	8b 48 78             	mov    0x78(%eax),%ecx
f0108542:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108545:	89 d0                	mov    %edx,%eax
f0108547:	01 c0                	add    %eax,%eax
f0108549:	01 d0                	add    %edx,%eax
f010854b:	c1 e0 03             	shl    $0x3,%eax
f010854e:	01 c8                	add    %ecx,%eax
f0108550:	8a 40 04             	mov    0x4(%eax),%al
f0108553:	84 c0                	test   %al,%al
f0108555:	74 43                	je     f010859a <env_page_ws_print+0x194>
			{
				cprintf("EMPTY LOCATION");
f0108557:	83 ec 0c             	sub    $0xc,%esp
f010855a:	68 93 66 13 f0       	push   $0xf0136693
f010855f:	e8 aa 87 ff ff       	call   f0100d0e <cprintf>
f0108564:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f0108567:	8b 45 08             	mov    0x8(%ebp),%eax
f010856a:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0108570:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108573:	75 10                	jne    f0108585 <env_page_ws_print+0x17f>
				{
					cprintf("		<--");
f0108575:	83 ec 0c             	sub    $0xc,%esp
f0108578:	68 a2 66 13 f0       	push   $0xf01366a2
f010857d:	e8 8c 87 ff ff       	call   f0100d0e <cprintf>
f0108582:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0108585:	83 ec 0c             	sub    $0xc,%esp
f0108588:	68 a8 66 13 f0       	push   $0xf01366a8
f010858d:	e8 7c 87 ff ff       	call   f0100d0e <cprintf>
f0108592:	83 c4 10             	add    $0x10,%esp
				continue;
f0108595:	e9 09 01 00 00       	jmp    f01086a3 <env_page_ws_print+0x29d>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010859a:	8b 45 08             	mov    0x8(%ebp),%eax
f010859d:	8b 48 78             	mov    0x78(%eax),%ecx
f01085a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085a3:	89 d0                	mov    %edx,%eax
f01085a5:	01 c0                	add    %eax,%eax
f01085a7:	01 d0                	add    %edx,%eax
f01085a9:	c1 e0 03             	shl    $0x3,%eax
f01085ac:	01 c8                	add    %ecx,%eax
f01085ae:	8b 00                	mov    (%eax),%eax
f01085b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01085b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01085b6:	8b 48 78             	mov    0x78(%eax),%ecx
f01085b9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01085bc:	89 d0                	mov    %edx,%eax
f01085be:	01 c0                	add    %eax,%eax
f01085c0:	01 d0                	add    %edx,%eax
f01085c2:	c1 e0 03             	shl    $0x3,%eax
f01085c5:	01 c8                	add    %ecx,%eax
f01085c7:	8b 40 08             	mov    0x8(%eax),%eax
f01085ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01085cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01085d0:	8b 40 5c             	mov    0x5c(%eax),%eax
f01085d3:	83 ec 08             	sub    $0x8,%esp
f01085d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01085d9:	50                   	push   %eax
f01085da:	e8 f4 f9 ff ff       	call   f0107fd3 <pt_get_page_permissions>
f01085df:	83 c4 10             	add    $0x10,%esp
f01085e2:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01085e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01085e8:	83 e0 40             	and    $0x40,%eax
f01085eb:	85 c0                	test   %eax,%eax
f01085ed:	0f 95 c0             	setne  %al
f01085f0:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01085f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01085f6:	83 e0 20             	and    $0x20,%eax
f01085f9:	85 c0                	test   %eax,%eax
f01085fb:	0f 95 c0             	setne  %al
f01085fe:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0108601:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108604:	25 00 02 00 00       	and    $0x200,%eax
f0108609:	85 c0                	test   %eax,%eax
f010860b:	0f 95 c0             	setne  %al
f010860e:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0108611:	8b 45 08             	mov    0x8(%ebp),%eax
f0108614:	8b 48 78             	mov    0x78(%eax),%ecx
f0108617:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010861a:	89 d0                	mov    %edx,%eax
f010861c:	01 c0                	add    %eax,%eax
f010861e:	01 d0                	add    %edx,%eax
f0108620:	c1 e0 03             	shl    $0x3,%eax
f0108623:	01 c8                	add    %ecx,%eax
f0108625:	8b 00                	mov    (%eax),%eax
f0108627:	83 ec 04             	sub    $0x4,%esp
f010862a:	50                   	push   %eax
f010862b:	ff 75 ec             	pushl  -0x14(%ebp)
f010862e:	68 aa 66 13 f0       	push   $0xf01366aa
f0108633:	e8 d6 86 ff ff       	call   f0100d0e <cprintf>
f0108638:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f010863b:	8b 45 08             	mov    0x8(%ebp),%eax
f010863e:	8b 48 78             	mov    0x78(%eax),%ecx
f0108641:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108644:	89 d0                	mov    %edx,%eax
f0108646:	01 c0                	add    %eax,%eax
f0108648:	01 d0                	add    %edx,%eax
f010864a:	c1 e0 03             	shl    $0x3,%eax
f010864d:	01 c8                	add    %ecx,%eax
f010864f:	8b 58 0c             	mov    0xc(%eax),%ebx
f0108652:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0108656:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f010865a:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f010865e:	83 ec 08             	sub    $0x8,%esp
f0108661:	53                   	push   %ebx
f0108662:	ff 75 e4             	pushl  -0x1c(%ebp)
f0108665:	51                   	push   %ecx
f0108666:	52                   	push   %edx
f0108667:	50                   	push   %eax
f0108668:	68 bc 66 13 f0       	push   $0xf01366bc
f010866d:	e8 9c 86 ff ff       	call   f0100d0e <cprintf>
f0108672:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0108675:	8b 45 08             	mov    0x8(%ebp),%eax
f0108678:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010867e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0108681:	75 10                	jne    f0108693 <env_page_ws_print+0x28d>
			{
				cprintf(" <--");
f0108683:	83 ec 0c             	sub    $0xc,%esp
f0108686:	68 03 67 13 f0       	push   $0xf0136703
f010868b:	e8 7e 86 ff ff       	call   f0100d0e <cprintf>
f0108690:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108693:	83 ec 0c             	sub    $0xc,%esp
f0108696:	68 a8 66 13 f0       	push   $0xf01366a8
f010869b:	e8 6e 86 ff ff       	call   f0100d0e <cprintf>
f01086a0:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01086a3:	ff 45 ec             	incl   -0x14(%ebp)
f01086a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01086a9:	8b 40 74             	mov    0x74(%eax),%eax
f01086ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01086af:	0f 87 87 fe ff ff    	ja     f010853c <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01086b5:	90                   	nop
f01086b6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01086b9:	c9                   	leave  
f01086ba:	c3                   	ret    

f01086bb <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01086bb:	55                   	push   %ebp
f01086bc:	89 e5                	mov    %esp,%ebp
f01086be:	53                   	push   %ebx
f01086bf:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01086c2:	83 ec 0c             	sub    $0xc,%esp
f01086c5:	68 08 67 13 f0       	push   $0xf0136708
f01086ca:	e8 3f 86 ff ff       	call   f0100d0e <cprintf>
f01086cf:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01086d2:	83 ec 0c             	sub    $0xc,%esp
f01086d5:	68 3d 67 13 f0       	push   $0xf013673d
f01086da:	e8 2f 86 ff ff       	call   f0100d0e <cprintf>
f01086df:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01086e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01086e9:	e9 10 01 00 00       	jmp    f01087fe <env_table_ws_print+0x143>
	{
		if (e->__ptr_tws[i].empty)
f01086ee:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01086f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01086f4:	89 d0                	mov    %edx,%eax
f01086f6:	01 c0                	add    %eax,%eax
f01086f8:	01 d0                	add    %edx,%eax
f01086fa:	c1 e0 03             	shl    $0x3,%eax
f01086fd:	01 c8                	add    %ecx,%eax
f01086ff:	83 e8 80             	sub    $0xffffff80,%eax
f0108702:	8a 00                	mov    (%eax),%al
f0108704:	84 c0                	test   %al,%al
f0108706:	74 43                	je     f010874b <env_table_ws_print+0x90>
		{
			cprintf("EMPTY LOCATION");
f0108708:	83 ec 0c             	sub    $0xc,%esp
f010870b:	68 93 66 13 f0       	push   $0xf0136693
f0108710:	e8 f9 85 ff ff       	call   f0100d0e <cprintf>
f0108715:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0108718:	8b 45 08             	mov    0x8(%ebp),%eax
f010871b:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f0108721:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108724:	75 10                	jne    f0108736 <env_table_ws_print+0x7b>
			{
				cprintf("		<--");
f0108726:	83 ec 0c             	sub    $0xc,%esp
f0108729:	68 a2 66 13 f0       	push   $0xf01366a2
f010872e:	e8 db 85 ff ff       	call   f0100d0e <cprintf>
f0108733:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0108736:	83 ec 0c             	sub    $0xc,%esp
f0108739:	68 a8 66 13 f0       	push   $0xf01366a8
f010873e:	e8 cb 85 ff ff       	call   f0100d0e <cprintf>
f0108743:	83 c4 10             	add    $0x10,%esp
			continue;
f0108746:	e9 b0 00 00 00       	jmp    f01087fb <env_table_ws_print+0x140>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f010874b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010874e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108751:	89 d0                	mov    %edx,%eax
f0108753:	01 c0                	add    %eax,%eax
f0108755:	01 d0                	add    %edx,%eax
f0108757:	c1 e0 03             	shl    $0x3,%eax
f010875a:	01 c8                	add    %ecx,%eax
f010875c:	83 c0 7c             	add    $0x7c,%eax
f010875f:	8b 00                	mov    (%eax),%eax
f0108761:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0108764:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108767:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010876a:	89 d0                	mov    %edx,%eax
f010876c:	01 c0                	add    %eax,%eax
f010876e:	01 d0                	add    %edx,%eax
f0108770:	c1 e0 03             	shl    $0x3,%eax
f0108773:	01 c8                	add    %ecx,%eax
f0108775:	83 c0 7c             	add    $0x7c,%eax
f0108778:	8b 00                	mov    (%eax),%eax
f010877a:	83 ec 04             	sub    $0x4,%esp
f010877d:	50                   	push   %eax
f010877e:	ff 75 f4             	pushl  -0xc(%ebp)
f0108781:	68 48 67 13 f0       	push   $0xf0136748
f0108786:	e8 83 85 ff ff       	call   f0100d0e <cprintf>
f010878b:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f010878e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108791:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108794:	89 d0                	mov    %edx,%eax
f0108796:	01 c0                	add    %eax,%eax
f0108798:	01 d0                	add    %edx,%eax
f010879a:	c1 e0 03             	shl    $0x3,%eax
f010879d:	01 c8                	add    %ecx,%eax
f010879f:	05 84 00 00 00       	add    $0x84,%eax
f01087a4:	8b 18                	mov    (%eax),%ebx
f01087a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01087a9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01087ac:	83 ec 08             	sub    $0x8,%esp
f01087af:	ff 75 f0             	pushl  -0x10(%ebp)
f01087b2:	50                   	push   %eax
f01087b3:	e8 43 f9 ff ff       	call   f01080fb <pd_is_table_used>
f01087b8:	83 c4 10             	add    $0x10,%esp
f01087bb:	83 ec 04             	sub    $0x4,%esp
f01087be:	53                   	push   %ebx
f01087bf:	50                   	push   %eax
f01087c0:	68 60 67 13 f0       	push   $0xf0136760
f01087c5:	e8 44 85 ff ff       	call   f0100d0e <cprintf>
f01087ca:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01087cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01087d0:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f01087d6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01087d9:	75 10                	jne    f01087eb <env_table_ws_print+0x130>
		{
			cprintf(" <--");
f01087db:	83 ec 0c             	sub    $0xc,%esp
f01087de:	68 03 67 13 f0       	push   $0xf0136703
f01087e3:	e8 26 85 ff ff       	call   f0100d0e <cprintf>
f01087e8:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01087eb:	83 ec 0c             	sub    $0xc,%esp
f01087ee:	68 a8 66 13 f0       	push   $0xf01366a8
f01087f3:	e8 16 85 ff ff       	call   f0100d0e <cprintf>
f01087f8:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01087fb:	ff 45 f4             	incl   -0xc(%ebp)
f01087fe:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0108802:	0f 86 e6 fe ff ff    	jbe    f01086ee <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0108808:	90                   	nop
f0108809:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010880c:	c9                   	leave  
f010880d:	c3                   	ret    

f010880e <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f010880e:	55                   	push   %ebp
f010880f:	89 e5                	mov    %esp,%ebp
f0108811:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108814:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010881b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0108822:	eb 20                	jmp    f0108844 <env_table_ws_get_size+0x36>
f0108824:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108827:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010882a:	89 d0                	mov    %edx,%eax
f010882c:	01 c0                	add    %eax,%eax
f010882e:	01 d0                	add    %edx,%eax
f0108830:	c1 e0 03             	shl    $0x3,%eax
f0108833:	01 c8                	add    %ecx,%eax
f0108835:	83 e8 80             	sub    $0xffffff80,%eax
f0108838:	8a 00                	mov    (%eax),%al
f010883a:	84 c0                	test   %al,%al
f010883c:	75 03                	jne    f0108841 <env_table_ws_get_size+0x33>
f010883e:	ff 45 f8             	incl   -0x8(%ebp)
f0108841:	ff 45 fc             	incl   -0x4(%ebp)
f0108844:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0108848:	7e da                	jle    f0108824 <env_table_ws_get_size+0x16>
	return counter;
f010884a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010884d:	c9                   	leave  
f010884e:	c3                   	ret    

f010884f <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010884f:	55                   	push   %ebp
f0108850:	89 e5                	mov    %esp,%ebp
f0108852:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108855:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f010885c:	eb 4c                	jmp    f01088aa <env_table_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f010885e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108861:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108864:	89 d0                	mov    %edx,%eax
f0108866:	01 c0                	add    %eax,%eax
f0108868:	01 d0                	add    %edx,%eax
f010886a:	c1 e0 03             	shl    $0x3,%eax
f010886d:	01 c8                	add    %ecx,%eax
f010886f:	83 c0 7c             	add    $0x7c,%eax
f0108872:	8b 00                	mov    (%eax),%eax
f0108874:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108877:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010887a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010887f:	89 c2                	mov    %eax,%edx
f0108881:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108884:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108887:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010888a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010888f:	39 c2                	cmp    %eax,%edx
f0108891:	75 14                	jne    f01088a7 <env_table_ws_invalidate+0x58>
		{
			env_table_ws_clear_entry(e, i);
f0108893:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108896:	83 ec 08             	sub    $0x8,%esp
f0108899:	50                   	push   %eax
f010889a:	ff 75 08             	pushl  0x8(%ebp)
f010889d:	e8 b8 00 00 00       	call   f010895a <env_table_ws_clear_entry>
f01088a2:	83 c4 10             	add    $0x10,%esp
			break;
f01088a5:	eb 09                	jmp    f01088b0 <env_table_ws_invalidate+0x61>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01088a7:	ff 45 f4             	incl   -0xc(%ebp)
f01088aa:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01088ae:	7e ae                	jle    f010885e <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01088b0:	90                   	nop
f01088b1:	c9                   	leave  
f01088b2:	c3                   	ret    

f01088b3 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01088b3:	55                   	push   %ebp
f01088b4:	89 e5                	mov    %esp,%ebp
f01088b6:	53                   	push   %ebx
f01088b7:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01088ba:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01088be:	76 19                	jbe    f01088d9 <env_table_ws_set_entry+0x26>
f01088c0:	68 84 67 13 f0       	push   $0xf0136784
f01088c5:	68 aa 65 13 f0       	push   $0xf01365aa
f01088ca:	68 b6 00 00 00       	push   $0xb6
f01088cf:	68 c0 65 13 f0       	push   $0xf01365c0
f01088d4:	e8 2c 79 ff ff       	call   f0100205 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01088d9:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01088e0:	76 19                	jbe    f01088fb <env_table_ws_set_entry+0x48>
f01088e2:	68 e0 65 13 f0       	push   $0xf01365e0
f01088e7:	68 aa 65 13 f0       	push   $0xf01365aa
f01088ec:	68 b7 00 00 00       	push   $0xb7
f01088f1:	68 c0 65 13 f0       	push   $0xf01365c0
f01088f6:	e8 0a 79 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f01088fb:	8b 45 10             	mov    0x10(%ebp),%eax
f01088fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108901:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108904:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0108909:	89 c1                	mov    %eax,%ecx
f010890b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010890e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108911:	89 d0                	mov    %edx,%eax
f0108913:	01 c0                	add    %eax,%eax
f0108915:	01 d0                	add    %edx,%eax
f0108917:	c1 e0 03             	shl    $0x3,%eax
f010891a:	01 d8                	add    %ebx,%eax
f010891c:	83 c0 7c             	add    $0x7c,%eax
f010891f:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0108921:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108924:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108927:	89 d0                	mov    %edx,%eax
f0108929:	01 c0                	add    %eax,%eax
f010892b:	01 d0                	add    %edx,%eax
f010892d:	c1 e0 03             	shl    $0x3,%eax
f0108930:	01 c8                	add    %ecx,%eax
f0108932:	83 e8 80             	sub    $0xffffff80,%eax
f0108935:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0108938:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010893b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010893e:	89 d0                	mov    %edx,%eax
f0108940:	01 c0                	add    %eax,%eax
f0108942:	01 d0                	add    %edx,%eax
f0108944:	c1 e0 03             	shl    $0x3,%eax
f0108947:	01 c8                	add    %ecx,%eax
f0108949:	05 84 00 00 00       	add    $0x84,%eax
f010894e:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0108954:	90                   	nop
}
f0108955:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108958:	c9                   	leave  
f0108959:	c3                   	ret    

f010895a <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010895a:	55                   	push   %ebp
f010895b:	89 e5                	mov    %esp,%ebp
f010895d:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108960:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108964:	76 19                	jbe    f010897f <env_table_ws_clear_entry+0x25>
f0108966:	68 84 67 13 f0       	push   $0xf0136784
f010896b:	68 aa 65 13 f0       	push   $0xf01365aa
f0108970:	68 c2 00 00 00       	push   $0xc2
f0108975:	68 c0 65 13 f0       	push   $0xf01365c0
f010897a:	e8 86 78 ff ff       	call   f0100205 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f010897f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108982:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108985:	89 d0                	mov    %edx,%eax
f0108987:	01 c0                	add    %eax,%eax
f0108989:	01 d0                	add    %edx,%eax
f010898b:	c1 e0 03             	shl    $0x3,%eax
f010898e:	01 c8                	add    %ecx,%eax
f0108990:	83 c0 7c             	add    $0x7c,%eax
f0108993:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0108999:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010899c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010899f:	89 d0                	mov    %edx,%eax
f01089a1:	01 c0                	add    %eax,%eax
f01089a3:	01 d0                	add    %edx,%eax
f01089a5:	c1 e0 03             	shl    $0x3,%eax
f01089a8:	01 c8                	add    %ecx,%eax
f01089aa:	83 e8 80             	sub    $0xffffff80,%eax
f01089ad:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01089b0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089b3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089b6:	89 d0                	mov    %edx,%eax
f01089b8:	01 c0                	add    %eax,%eax
f01089ba:	01 d0                	add    %edx,%eax
f01089bc:	c1 e0 03             	shl    $0x3,%eax
f01089bf:	01 c8                	add    %ecx,%eax
f01089c1:	05 84 00 00 00       	add    $0x84,%eax
f01089c6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01089cc:	90                   	nop
f01089cd:	c9                   	leave  
f01089ce:	c3                   	ret    

f01089cf <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01089cf:	55                   	push   %ebp
f01089d0:	89 e5                	mov    %esp,%ebp
f01089d2:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01089d5:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01089d9:	76 19                	jbe    f01089f4 <env_table_ws_get_virtual_address+0x25>
f01089db:	68 84 67 13 f0       	push   $0xf0136784
f01089e0:	68 aa 65 13 f0       	push   $0xf01365aa
f01089e5:	68 ca 00 00 00       	push   $0xca
f01089ea:	68 c0 65 13 f0       	push   $0xf01365c0
f01089ef:	e8 11 78 ff ff       	call   f0100205 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f01089f4:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01089f7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01089fa:	89 d0                	mov    %edx,%eax
f01089fc:	01 c0                	add    %eax,%eax
f01089fe:	01 d0                	add    %edx,%eax
f0108a00:	c1 e0 03             	shl    $0x3,%eax
f0108a03:	01 c8                	add    %ecx,%eax
f0108a05:	83 c0 7c             	add    $0x7c,%eax
f0108a08:	8b 00                	mov    (%eax),%eax
f0108a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a10:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0108a15:	c9                   	leave  
f0108a16:	c3                   	ret    

f0108a17 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108a17:	55                   	push   %ebp
f0108a18:	89 e5                	mov    %esp,%ebp
f0108a1a:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0108a1d:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0108a21:	76 19                	jbe    f0108a3c <env_table_ws_get_time_stamp+0x25>
f0108a23:	68 84 67 13 f0       	push   $0xf0136784
f0108a28:	68 aa 65 13 f0       	push   $0xf01365aa
f0108a2d:	68 d1 00 00 00       	push   $0xd1
f0108a32:	68 c0 65 13 f0       	push   $0xf01365c0
f0108a37:	e8 c9 77 ff ff       	call   f0100205 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0108a3c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a3f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a42:	89 d0                	mov    %edx,%eax
f0108a44:	01 c0                	add    %eax,%eax
f0108a46:	01 d0                	add    %edx,%eax
f0108a48:	c1 e0 03             	shl    $0x3,%eax
f0108a4b:	01 c8                	add    %ecx,%eax
f0108a4d:	05 84 00 00 00       	add    $0x84,%eax
f0108a52:	8b 00                	mov    (%eax),%eax
}
f0108a54:	c9                   	leave  
f0108a55:	c3                   	ret    

f0108a56 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108a56:	55                   	push   %ebp
f0108a57:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0108a59:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108a5c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a5f:	89 d0                	mov    %edx,%eax
f0108a61:	01 c0                	add    %eax,%eax
f0108a63:	01 d0                	add    %edx,%eax
f0108a65:	c1 e0 03             	shl    $0x3,%eax
f0108a68:	01 c8                	add    %ecx,%eax
f0108a6a:	83 e8 80             	sub    $0xffffff80,%eax
f0108a6d:	8a 00                	mov    (%eax),%al
f0108a6f:	0f b6 c0             	movzbl %al,%eax
}
f0108a72:	5d                   	pop    %ebp
f0108a73:	c3                   	ret    

f0108a74 <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f0108a74:	55                   	push   %ebp
f0108a75:	89 e5                	mov    %esp,%ebp
f0108a77:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0108a7a:	83 ec 04             	sub    $0x4,%esp
f0108a7d:	68 b8 67 13 f0       	push   $0xf01367b8
f0108a82:	68 e5 00 00 00       	push   $0xe5
f0108a87:	68 c0 65 13 f0       	push   $0xf01365c0
f0108a8c:	e8 74 77 ff ff       	call   f0100205 <_panic>

f0108a91 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108a91:	55                   	push   %ebp
f0108a92:	89 e5                	mov    %esp,%ebp
f0108a94:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f0108a97:	83 ec 04             	sub    $0x4,%esp
f0108a9a:	68 e4 67 13 f0       	push   $0xf01367e4
f0108a9f:	68 ec 00 00 00       	push   $0xec
f0108aa4:	68 c0 65 13 f0       	push   $0xf01365c0
f0108aa9:	e8 57 77 ff ff       	call   f0100205 <_panic>

f0108aae <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108aae:	55                   	push   %ebp
f0108aaf:	89 e5                	mov    %esp,%ebp
f0108ab1:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f0108ab4:	83 ec 04             	sub    $0x4,%esp
f0108ab7:	68 14 68 13 f0       	push   $0xf0136814
f0108abc:	68 f3 00 00 00       	push   $0xf3
f0108ac1:	68 c0 65 13 f0       	push   $0xf01365c0
f0108ac6:	e8 3a 77 ff ff       	call   f0100205 <_panic>

f0108acb <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108acb:	55                   	push   %ebp
f0108acc:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0108ace:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ad1:	8b 15 50 f7 85 f0    	mov    0xf085f750,%edx
f0108ad7:	29 d0                	sub    %edx,%eax
f0108ad9:	c1 f8 03             	sar    $0x3,%eax
f0108adc:	89 c2                	mov    %eax,%edx
f0108ade:	89 d0                	mov    %edx,%eax
f0108ae0:	c1 e0 02             	shl    $0x2,%eax
f0108ae3:	01 d0                	add    %edx,%eax
f0108ae5:	c1 e0 02             	shl    $0x2,%eax
f0108ae8:	01 d0                	add    %edx,%eax
f0108aea:	c1 e0 02             	shl    $0x2,%eax
f0108aed:	01 d0                	add    %edx,%eax
f0108aef:	89 c1                	mov    %eax,%ecx
f0108af1:	c1 e1 08             	shl    $0x8,%ecx
f0108af4:	01 c8                	add    %ecx,%eax
f0108af6:	89 c1                	mov    %eax,%ecx
f0108af8:	c1 e1 10             	shl    $0x10,%ecx
f0108afb:	01 c8                	add    %ecx,%eax
f0108afd:	01 c0                	add    %eax,%eax
f0108aff:	01 d0                	add    %edx,%eax
}
f0108b01:	5d                   	pop    %ebp
f0108b02:	c3                   	ret    

f0108b03 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108b03:	55                   	push   %ebp
f0108b04:	89 e5                	mov    %esp,%ebp
f0108b06:	83 ec 58             	sub    $0x58,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	//panic("cut_paste_pages() is not implemented yet...!!");

	uint32 size=num_of_pages*PAGE_SIZE;
f0108b09:	8b 45 14             	mov    0x14(%ebp),%eax
f0108b0c:	c1 e0 0c             	shl    $0xc,%eax
f0108b0f:	89 45 e8             	mov    %eax,-0x18(%ebp)

    uint32 newsource =ROUNDDOWN(source_va,PAGE_SIZE);
f0108b12:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108b15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108b18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b1b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b20:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 newsizesrc =ROUNDUP(source_va+size,PAGE_SIZE);
f0108b23:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0108b2a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108b30:	01 c2                	add    %eax,%edx
f0108b32:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108b35:	01 d0                	add    %edx,%eax
f0108b37:	48                   	dec    %eax
f0108b38:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0108b3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b3e:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b43:	f7 75 dc             	divl   -0x24(%ebp)
f0108b46:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108b49:	29 d0                	sub    %edx,%eax
f0108b4b:	89 45 d4             	mov    %eax,-0x2c(%ebp)

    uint32 newdest =ROUNDDOWN(dest_va,PAGE_SIZE);
f0108b4e:	8b 45 10             	mov    0x10(%ebp),%eax
f0108b51:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0108b54:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108b57:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108b5c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	uint32 newsizedest =ROUNDUP(dest_va+size,PAGE_SIZE);
f0108b5f:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0108b66:	8b 55 10             	mov    0x10(%ebp),%edx
f0108b69:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108b6c:	01 c2                	add    %eax,%edx
f0108b6e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108b71:	01 d0                	add    %edx,%eax
f0108b73:	48                   	dec    %eax
f0108b74:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0108b77:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108b7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b7f:	f7 75 c8             	divl   -0x38(%ebp)
f0108b82:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108b85:	29 d0                	sub    %edx,%eax
f0108b87:	89 45 c0             	mov    %eax,-0x40(%ebp)

	uint32 *ptr_page_table = NULL ;
f0108b8a:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	struct FrameInfo *ptr_frame_info_dest=NULL;
f0108b91:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	struct FrameInfo *ptr_frame_info_src=NULL;
f0108b98:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	for(uint32 i=newdest ; i<newsizedest ; i=i+PAGE_SIZE){
f0108b9f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108ba2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108ba5:	eb 44                	jmp    f0108beb <cut_paste_pages+0xe8>
		get_page_table(page_directory,i,&ptr_page_table);
f0108ba7:	83 ec 04             	sub    $0x4,%esp
f0108baa:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0108bad:	50                   	push   %eax
f0108bae:	ff 75 f4             	pushl  -0xc(%ebp)
f0108bb1:	ff 75 08             	pushl  0x8(%ebp)
f0108bb4:	e8 df de ff ff       	call   f0106a98 <get_page_table>
f0108bb9:	83 c4 10             	add    $0x10,%esp
		ptr_frame_info_dest = get_frame_info(page_directory, i, (&ptr_page_table));
f0108bbc:	83 ec 04             	sub    $0x4,%esp
f0108bbf:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0108bc2:	50                   	push   %eax
f0108bc3:	ff 75 f4             	pushl  -0xc(%ebp)
f0108bc6:	ff 75 08             	pushl  0x8(%ebp)
f0108bc9:	e8 1f e2 ff ff       	call   f0106ded <get_frame_info>
f0108bce:	83 c4 10             	add    $0x10,%esp
f0108bd1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (ptr_frame_info_dest != NULL){ return -1 ;}//edited
f0108bd4:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0108bd8:	74 0a                	je     f0108be4 <cut_paste_pages+0xe1>
f0108bda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108bdf:	e9 c9 00 00 00       	jmp    f0108cad <cut_paste_pages+0x1aa>

	uint32 *ptr_page_table = NULL ;
	struct FrameInfo *ptr_frame_info_dest=NULL;
	struct FrameInfo *ptr_frame_info_src=NULL;

	for(uint32 i=newdest ; i<newsizedest ; i=i+PAGE_SIZE){
f0108be4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108beb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108bee:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0108bf1:	72 b4                	jb     f0108ba7 <cut_paste_pages+0xa4>
		get_page_table(page_directory,i,&ptr_page_table);
		ptr_frame_info_dest = get_frame_info(page_directory, i, (&ptr_page_table));
		if (ptr_frame_info_dest != NULL){ return -1 ;}//edited
	}

	for(uint32 i=newdest,j=newsource ; i<newsizedest||j<newsizesrc ; i=i+PAGE_SIZE ,j=j+PAGE_SIZE){
f0108bf3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108bf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108bf9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108bfc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108bff:	e9 8c 00 00 00       	jmp    f0108c90 <cut_paste_pages+0x18d>

		get_page_table(page_directory,i,&ptr_page_table);
f0108c04:	83 ec 04             	sub    $0x4,%esp
f0108c07:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0108c0a:	50                   	push   %eax
f0108c0b:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c0e:	ff 75 08             	pushl  0x8(%ebp)
f0108c11:	e8 82 de ff ff       	call   f0106a98 <get_page_table>
f0108c16:	83 c4 10             	add    $0x10,%esp
			if (ptr_page_table==NULL )
f0108c19:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108c1c:	85 c0                	test   %eax,%eax
f0108c1e:	75 11                	jne    f0108c31 <cut_paste_pages+0x12e>
			{
				create_page_table(page_directory, i);
f0108c20:	83 ec 08             	sub    $0x8,%esp
f0108c23:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c26:	ff 75 08             	pushl  0x8(%ebp)
f0108c29:	e8 c0 df ff ff       	call   f0106bee <create_page_table>
f0108c2e:	83 c4 10             	add    $0x10,%esp
			}


			ptr_frame_info_src = get_frame_info(page_directory,j , (&ptr_page_table));
f0108c31:	83 ec 04             	sub    $0x4,%esp
f0108c34:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0108c37:	50                   	push   %eax
f0108c38:	ff 75 ec             	pushl  -0x14(%ebp)
f0108c3b:	ff 75 08             	pushl  0x8(%ebp)
f0108c3e:	e8 aa e1 ff ff       	call   f0106ded <get_frame_info>
f0108c43:	83 c4 10             	add    $0x10,%esp
f0108c46:	89 45 b8             	mov    %eax,-0x48(%ebp)

			int perms =pt_get_page_permissions(page_directory,j);
f0108c49:	83 ec 08             	sub    $0x8,%esp
f0108c4c:	ff 75 ec             	pushl  -0x14(%ebp)
f0108c4f:	ff 75 08             	pushl  0x8(%ebp)
f0108c52:	e8 7c f3 ff ff       	call   f0107fd3 <pt_get_page_permissions>
f0108c57:	83 c4 10             	add    $0x10,%esp
f0108c5a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		// map to RAM
			map_frame(page_directory, ptr_frame_info_src, i, perms) ;
f0108c5d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0108c60:	ff 75 f0             	pushl  -0x10(%ebp)
f0108c63:	ff 75 b8             	pushl  -0x48(%ebp)
f0108c66:	ff 75 08             	pushl  0x8(%ebp)
f0108c69:	e8 ba e0 ff ff       	call   f0106d28 <map_frame>
f0108c6e:	83 c4 10             	add    $0x10,%esp

			unmap_frame(page_directory, j);
f0108c71:	83 ec 08             	sub    $0x8,%esp
f0108c74:	ff 75 ec             	pushl  -0x14(%ebp)
f0108c77:	ff 75 08             	pushl  0x8(%ebp)
f0108c7a:	e8 de e1 ff ff       	call   f0106e5d <unmap_frame>
f0108c7f:	83 c4 10             	add    $0x10,%esp
		get_page_table(page_directory,i,&ptr_page_table);
		ptr_frame_info_dest = get_frame_info(page_directory, i, (&ptr_page_table));
		if (ptr_frame_info_dest != NULL){ return -1 ;}//edited
	}

	for(uint32 i=newdest,j=newsource ; i<newsizedest||j<newsizesrc ; i=i+PAGE_SIZE ,j=j+PAGE_SIZE){
f0108c82:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108c89:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108c90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c93:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0108c96:	0f 82 68 ff ff ff    	jb     f0108c04 <cut_paste_pages+0x101>
f0108c9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108c9f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0108ca2:	0f 82 5c ff ff ff    	jb     f0108c04 <cut_paste_pages+0x101>
			unmap_frame(page_directory, j);


	}

	return 0 ;
f0108ca8:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0108cad:	c9                   	leave  
f0108cae:	c3                   	ret    

f0108caf <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f0108caf:	55                   	push   %ebp
f0108cb0:	89 e5                	mov    %esp,%ebp
f0108cb2:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	//panic("copy_paste_chunk() is not implemented yet...!!");

	uint32 newsource =source_va;
f0108cb5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cb8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 newsizesrc =source_va+size;
f0108cbb:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108cbe:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cc1:	01 d0                	add    %edx,%eax
f0108cc3:	89 45 d8             	mov    %eax,-0x28(%ebp)

	uint32 newdest =dest_va;
f0108cc6:	8b 45 10             	mov    0x10(%ebp),%eax
f0108cc9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 newsizedest =dest_va+size;
f0108ccc:	8b 55 10             	mov    0x10(%ebp),%edx
f0108ccf:	8b 45 14             	mov    0x14(%ebp),%eax
f0108cd2:	01 d0                	add    %edx,%eax
f0108cd4:	89 45 d0             	mov    %eax,-0x30(%ebp)


	uint32 *ptr_page_table = NULL ;
f0108cd7:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	struct FrameInfo *ptr_frame_info_dest=NULL;
f0108cde:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	struct FrameInfo *ptr_frame_info_src=NULL;
f0108ce5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)

	for(uint32 i=newdest ; i< newsizedest; i=i+PAGE_SIZE){
f0108cec:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108cef:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108cf2:	eb 67                	jmp    f0108d5b <copy_paste_chunk+0xac>
	//if destination pages exist and read only deny process and return -1
	  get_page_table(page_directory,i,&ptr_page_table);
f0108cf4:	83 ec 04             	sub    $0x4,%esp
f0108cf7:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108cfa:	50                   	push   %eax
f0108cfb:	ff 75 f4             	pushl  -0xc(%ebp)
f0108cfe:	ff 75 08             	pushl  0x8(%ebp)
f0108d01:	e8 92 dd ff ff       	call   f0106a98 <get_page_table>
f0108d06:	83 c4 10             	add    $0x10,%esp
	  ptr_frame_info_dest = get_frame_info(page_directory, i, (&ptr_page_table));
f0108d09:	83 ec 04             	sub    $0x4,%esp
f0108d0c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108d0f:	50                   	push   %eax
f0108d10:	ff 75 f4             	pushl  -0xc(%ebp)
f0108d13:	ff 75 08             	pushl  0x8(%ebp)
f0108d16:	e8 d2 e0 ff ff       	call   f0106ded <get_frame_info>
f0108d1b:	83 c4 10             	add    $0x10,%esp
f0108d1e:	89 45 bc             	mov    %eax,-0x44(%ebp)
	  int perms_dettt=ptr_page_table[PTX(i)] & (PERM_WRITEABLE);
f0108d21:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108d24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108d27:	c1 ea 0c             	shr    $0xc,%edx
f0108d2a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108d30:	c1 e2 02             	shl    $0x2,%edx
f0108d33:	01 d0                	add    %edx,%eax
f0108d35:	8b 00                	mov    (%eax),%eax
f0108d37:	83 e0 02             	and    $0x2,%eax
f0108d3a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	  if (ptr_frame_info_dest != NULL && perms_dettt != (PERM_WRITEABLE))
f0108d3d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108d40:	85 c0                	test   %eax,%eax
f0108d42:	74 10                	je     f0108d54 <copy_paste_chunk+0xa5>
f0108d44:	83 7d c8 02          	cmpl   $0x2,-0x38(%ebp)
f0108d48:	74 0a                	je     f0108d54 <copy_paste_chunk+0xa5>
	  { return -1 ;}
f0108d4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108d4f:	e9 27 01 00 00       	jmp    f0108e7b <copy_paste_chunk+0x1cc>

	uint32 *ptr_page_table = NULL ;
	struct FrameInfo *ptr_frame_info_dest=NULL;
	struct FrameInfo *ptr_frame_info_src=NULL;

	for(uint32 i=newdest ; i< newsizedest; i=i+PAGE_SIZE){
f0108d54:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108d5e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0108d61:	72 91                	jb     f0108cf4 <copy_paste_chunk+0x45>
	  { return -1 ;}

	  }


	for(uint32 i=newdest,j=newsource ; i<newsizedest||j<newsizesrc ; i=i+PAGE_SIZE,j=j+PAGE_SIZE){
f0108d63:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108d66:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108d69:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108d6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108d6f:	e9 ba 00 00 00       	jmp    f0108e2e <copy_paste_chunk+0x17f>
	  //if page table not exist create it
	   get_page_table(page_directory,i,&ptr_page_table);
f0108d74:	83 ec 04             	sub    $0x4,%esp
f0108d77:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108d7a:	50                   	push   %eax
f0108d7b:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d7e:	ff 75 08             	pushl  0x8(%ebp)
f0108d81:	e8 12 dd ff ff       	call   f0106a98 <get_page_table>
f0108d86:	83 c4 10             	add    $0x10,%esp
	   if (ptr_page_table==NULL){create_page_table(page_directory, i);}
f0108d89:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108d8c:	85 c0                	test   %eax,%eax
f0108d8e:	75 11                	jne    f0108da1 <copy_paste_chunk+0xf2>
f0108d90:	83 ec 08             	sub    $0x8,%esp
f0108d93:	ff 75 f0             	pushl  -0x10(%ebp)
f0108d96:	ff 75 08             	pushl  0x8(%ebp)
f0108d99:	e8 50 de ff ff       	call   f0106bee <create_page_table>
f0108d9e:	83 c4 10             	add    $0x10,%esp


	   ptr_frame_info_dest = get_frame_info(page_directory, i, (&ptr_page_table));
f0108da1:	83 ec 04             	sub    $0x4,%esp
f0108da4:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108da7:	50                   	push   %eax
f0108da8:	ff 75 f0             	pushl  -0x10(%ebp)
f0108dab:	ff 75 08             	pushl  0x8(%ebp)
f0108dae:	e8 3a e0 ff ff       	call   f0106ded <get_frame_info>
f0108db3:	83 c4 10             	add    $0x10,%esp
f0108db6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		 //destination pages not exist create it
		 if (ptr_frame_info_dest == NULL){
f0108db9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108dbc:	85 c0                	test   %eax,%eax
f0108dbe:	75 60                	jne    f0108e20 <copy_paste_chunk+0x171>

		 ptr_frame_info_src = get_frame_info(page_directory,j , (&ptr_page_table));
f0108dc0:	83 ec 04             	sub    $0x4,%esp
f0108dc3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0108dc6:	50                   	push   %eax
f0108dc7:	ff 75 ec             	pushl  -0x14(%ebp)
f0108dca:	ff 75 08             	pushl  0x8(%ebp)
f0108dcd:	e8 1b e0 ff ff       	call   f0106ded <get_frame_info>
f0108dd2:	83 c4 10             	add    $0x10,%esp
f0108dd5:	89 45 cc             	mov    %eax,-0x34(%ebp)

		 allocate_frame(&ptr_frame_info_dest) ;
f0108dd8:	83 ec 0c             	sub    $0xc,%esp
f0108ddb:	8d 45 bc             	lea    -0x44(%ebp),%eax
f0108dde:	50                   	push   %eax
f0108ddf:	e8 f5 da ff ff       	call   f01068d9 <allocate_frame>
f0108de4:	83 c4 10             	add    $0x10,%esp

		int perms= ptr_page_table[PTX(j)] & 0x00000fff;
f0108de7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108dea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108ded:	c1 ea 0c             	shr    $0xc,%edx
f0108df0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108df6:	c1 e2 02             	shl    $0x2,%edx
f0108df9:	01 d0                	add    %edx,%eax
f0108dfb:	8b 00                	mov    (%eax),%eax
f0108dfd:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108e02:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		map_frame(page_directory, ptr_frame_info_dest, i, perms | PERM_WRITEABLE) ;
f0108e05:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0108e08:	83 c8 02             	or     $0x2,%eax
f0108e0b:	89 c2                	mov    %eax,%edx
f0108e0d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108e10:	52                   	push   %edx
f0108e11:	ff 75 f0             	pushl  -0x10(%ebp)
f0108e14:	50                   	push   %eax
f0108e15:	ff 75 08             	pushl  0x8(%ebp)
f0108e18:	e8 0b df ff ff       	call   f0106d28 <map_frame>
f0108e1d:	83 c4 10             	add    $0x10,%esp
	  { return -1 ;}

	  }


	for(uint32 i=newdest,j=newsource ; i<newsizedest||j<newsizesrc ; i=i+PAGE_SIZE,j=j+PAGE_SIZE){
f0108e20:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108e27:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108e31:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0108e34:	0f 82 3a ff ff ff    	jb     f0108d74 <copy_paste_chunk+0xc5>
f0108e3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108e3d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108e40:	0f 82 2e ff ff ff    	jb     f0108d74 <copy_paste_chunk+0xc5>
		int perms= ptr_page_table[PTX(j)] & 0x00000fff;
		map_frame(page_directory, ptr_frame_info_dest, i, perms | PERM_WRITEABLE) ;
		}
	}

	  uint8 *ptr_src = (uint8 *)(source_va) ;
f0108e46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e49:	89 45 e8             	mov    %eax,-0x18(%ebp)
	  uint8 *ptr_dest = (uint8 *) dest_va;
f0108e4c:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		   //copy and paste byte by byte
	  for(int k =0 ; k< size; k++)
f0108e52:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0108e59:	eb 13                	jmp    f0108e6e <copy_paste_chunk+0x1bf>
	  {
		 *ptr_dest=*ptr_src;
f0108e5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e5e:	8a 10                	mov    (%eax),%dl
f0108e60:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108e63:	88 10                	mov    %dl,(%eax)
		  ptr_src++ ;
f0108e65:	ff 45 e8             	incl   -0x18(%ebp)
		  ptr_dest++ ;
f0108e68:	ff 45 e4             	incl   -0x1c(%ebp)

	  uint8 *ptr_src = (uint8 *)(source_va) ;
	  uint8 *ptr_dest = (uint8 *) dest_va;

		   //copy and paste byte by byte
	  for(int k =0 ; k< size; k++)
f0108e6b:	ff 45 e0             	incl   -0x20(%ebp)
f0108e6e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108e71:	3b 45 14             	cmp    0x14(%ebp),%eax
f0108e74:	72 e5                	jb     f0108e5b <copy_paste_chunk+0x1ac>
		 *ptr_dest=*ptr_src;
		  ptr_src++ ;
		  ptr_dest++ ;
	  }

	return 0 ;
f0108e76:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0108e7b:	c9                   	leave  
f0108e7c:	c3                   	ret    

f0108e7d <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108e7d:	55                   	push   %ebp
f0108e7e:	89 e5                	mov    %esp,%ebp
f0108e80:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	//panic("share_chunk() is not implemented yet...!!");

	    uint32 newsource =ROUNDDOWN(source_va,PAGE_SIZE);
f0108e83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e8c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint32 newsizesrc =ROUNDUP(source_va+size,PAGE_SIZE);
f0108e94:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0108e9b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e9e:	8b 45 14             	mov    0x14(%ebp),%eax
f0108ea1:	01 c2                	add    %eax,%edx
f0108ea3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108ea6:	01 d0                	add    %edx,%eax
f0108ea8:	48                   	dec    %eax
f0108ea9:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0108eac:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108eaf:	ba 00 00 00 00       	mov    $0x0,%edx
f0108eb4:	f7 75 e0             	divl   -0x20(%ebp)
f0108eb7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108eba:	29 d0                	sub    %edx,%eax
f0108ebc:	89 45 d8             	mov    %eax,-0x28(%ebp)

	    uint32 newdest =ROUNDDOWN(dest_va,PAGE_SIZE);
f0108ebf:	8b 45 10             	mov    0x10(%ebp),%eax
f0108ec2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0108ec5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0108ec8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ecd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		uint32 newsizedest =ROUNDUP(dest_va+size,PAGE_SIZE);
f0108ed0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0108ed7:	8b 55 10             	mov    0x10(%ebp),%edx
f0108eda:	8b 45 14             	mov    0x14(%ebp),%eax
f0108edd:	01 c2                	add    %eax,%edx
f0108edf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108ee2:	01 d0                	add    %edx,%eax
f0108ee4:	48                   	dec    %eax
f0108ee5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0108ee8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108eeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0108ef0:	f7 75 cc             	divl   -0x34(%ebp)
f0108ef3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108ef6:	29 d0                	sub    %edx,%eax
f0108ef8:	89 45 c4             	mov    %eax,-0x3c(%ebp)

		uint32 *ptr_page_table = NULL ;
f0108efb:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
		struct FrameInfo *ptr_frame_info_dest=NULL;
f0108f02:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
		struct FrameInfo *ptr_frame_info_src=NULL;
f0108f09:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)

		for(uint32 i=newdest ; i<newsizedest ; i=i+PAGE_SIZE){
f0108f10:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f13:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f16:	eb 44                	jmp    f0108f5c <share_chunk+0xdf>
			get_page_table(page_directory,i,&ptr_page_table);
f0108f18:	83 ec 04             	sub    $0x4,%esp
f0108f1b:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0108f1e:	50                   	push   %eax
f0108f1f:	ff 75 f4             	pushl  -0xc(%ebp)
f0108f22:	ff 75 08             	pushl  0x8(%ebp)
f0108f25:	e8 6e db ff ff       	call   f0106a98 <get_page_table>
f0108f2a:	83 c4 10             	add    $0x10,%esp
			ptr_frame_info_dest = get_frame_info(page_directory, i, (&ptr_page_table));
f0108f2d:	83 ec 04             	sub    $0x4,%esp
f0108f30:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0108f33:	50                   	push   %eax
f0108f34:	ff 75 f4             	pushl  -0xc(%ebp)
f0108f37:	ff 75 08             	pushl  0x8(%ebp)
f0108f3a:	e8 ae de ff ff       	call   f0106ded <get_frame_info>
f0108f3f:	83 c4 10             	add    $0x10,%esp
f0108f42:	89 45 c0             	mov    %eax,-0x40(%ebp)
			if (ptr_frame_info_dest != NULL){ return -1 ;}//edited
f0108f45:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0108f49:	74 0a                	je     f0108f55 <share_chunk+0xd8>
f0108f4b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108f50:	e9 a7 00 00 00       	jmp    f0108ffc <share_chunk+0x17f>

		uint32 *ptr_page_table = NULL ;
		struct FrameInfo *ptr_frame_info_dest=NULL;
		struct FrameInfo *ptr_frame_info_src=NULL;

		for(uint32 i=newdest ; i<newsizedest ; i=i+PAGE_SIZE){
f0108f55:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0108f5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f5f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0108f62:	72 b4                	jb     f0108f18 <share_chunk+0x9b>
			get_page_table(page_directory,i,&ptr_page_table);
			ptr_frame_info_dest = get_frame_info(page_directory, i, (&ptr_page_table));
			if (ptr_frame_info_dest != NULL){ return -1 ;}//edited
		}

		for(uint32 i=newdest,j=newsource ; i<newsizedest||j<newsizesrc ; i=i+PAGE_SIZE ,j=j+PAGE_SIZE){
f0108f64:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0108f67:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108f6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108f6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108f70:	eb 71                	jmp    f0108fe3 <share_chunk+0x166>

			get_page_table(page_directory,i,&ptr_page_table);
f0108f72:	83 ec 04             	sub    $0x4,%esp
f0108f75:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0108f78:	50                   	push   %eax
f0108f79:	ff 75 f0             	pushl  -0x10(%ebp)
f0108f7c:	ff 75 08             	pushl  0x8(%ebp)
f0108f7f:	e8 14 db ff ff       	call   f0106a98 <get_page_table>
f0108f84:	83 c4 10             	add    $0x10,%esp
				if (ptr_page_table==NULL && newsizedest >= (4*1024*1024))
f0108f87:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0108f8a:	85 c0                	test   %eax,%eax
f0108f8c:	75 1a                	jne    f0108fa8 <share_chunk+0x12b>
f0108f8e:	81 7d c4 ff ff 3f 00 	cmpl   $0x3fffff,-0x3c(%ebp)
f0108f95:	76 11                	jbe    f0108fa8 <share_chunk+0x12b>
				{
					create_page_table(page_directory, i);
f0108f97:	83 ec 08             	sub    $0x8,%esp
f0108f9a:	ff 75 f0             	pushl  -0x10(%ebp)
f0108f9d:	ff 75 08             	pushl  0x8(%ebp)
f0108fa0:	e8 49 dc ff ff       	call   f0106bee <create_page_table>
f0108fa5:	83 c4 10             	add    $0x10,%esp
				}


				ptr_frame_info_src = get_frame_info(page_directory,j , (&ptr_page_table));
f0108fa8:	83 ec 04             	sub    $0x4,%esp
f0108fab:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0108fae:	50                   	push   %eax
f0108faf:	ff 75 ec             	pushl  -0x14(%ebp)
f0108fb2:	ff 75 08             	pushl  0x8(%ebp)
f0108fb5:	e8 33 de ff ff       	call   f0106ded <get_frame_info>
f0108fba:	83 c4 10             	add    $0x10,%esp
f0108fbd:	89 45 bc             	mov    %eax,-0x44(%ebp)

			// map to RAM
				map_frame(page_directory, ptr_frame_info_src, i, perms) ;
f0108fc0:	8b 45 18             	mov    0x18(%ebp),%eax
f0108fc3:	50                   	push   %eax
f0108fc4:	ff 75 f0             	pushl  -0x10(%ebp)
f0108fc7:	ff 75 bc             	pushl  -0x44(%ebp)
f0108fca:	ff 75 08             	pushl  0x8(%ebp)
f0108fcd:	e8 56 dd ff ff       	call   f0106d28 <map_frame>
f0108fd2:	83 c4 10             	add    $0x10,%esp
			get_page_table(page_directory,i,&ptr_page_table);
			ptr_frame_info_dest = get_frame_info(page_directory, i, (&ptr_page_table));
			if (ptr_frame_info_dest != NULL){ return -1 ;}//edited
		}

		for(uint32 i=newdest,j=newsource ; i<newsizedest||j<newsizesrc ; i=i+PAGE_SIZE ,j=j+PAGE_SIZE){
f0108fd5:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0108fdc:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f0108fe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108fe6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0108fe9:	72 87                	jb     f0108f72 <share_chunk+0xf5>
f0108feb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108fee:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108ff1:	0f 82 7b ff ff ff    	jb     f0108f72 <share_chunk+0xf5>
			// map to RAM
				map_frame(page_directory, ptr_frame_info_src, i, perms) ;

		}

		return 0 ;
f0108ff7:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0108ffc:	c9                   	leave  
f0108ffd:	c3                   	ret    

f0108ffe <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108ffe:	55                   	push   %ebp
f0108fff:	89 e5                	mov    %esp,%ebp
f0109001:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	//panic("allocate_chunk() is not implemented yet...!!");

	  uint32 newva =ROUNDDOWN(va,PAGE_SIZE);
f0109004:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109007:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010900a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010900d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109012:	89 45 e8             	mov    %eax,-0x18(%ebp)
	  uint32 newsize =ROUNDUP(va+size,PAGE_SIZE);
f0109015:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010901c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010901f:	8b 45 10             	mov    0x10(%ebp),%eax
f0109022:	01 c2                	add    %eax,%edx
f0109024:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109027:	01 d0                	add    %edx,%eax
f0109029:	48                   	dec    %eax
f010902a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010902d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109030:	ba 00 00 00 00       	mov    $0x0,%edx
f0109035:	f7 75 e4             	divl   -0x1c(%ebp)
f0109038:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010903b:	29 d0                	sub    %edx,%eax
f010903d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	  struct FrameInfo *ptr_frame_info;
	  uint32 *ptr_page_table = NULL ;
f0109040:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	  for(uint32 i=newva ; i<newsize ; i=i+PAGE_SIZE)
f0109047:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010904a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010904d:	eb 44                	jmp    f0109093 <allocate_chunk+0x95>
	  {
	    get_page_table(page_directory,i,&ptr_page_table);
f010904f:	83 ec 04             	sub    $0x4,%esp
f0109052:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0109055:	50                   	push   %eax
f0109056:	ff 75 f4             	pushl  -0xc(%ebp)
f0109059:	ff 75 08             	pushl  0x8(%ebp)
f010905c:	e8 37 da ff ff       	call   f0106a98 <get_page_table>
f0109061:	83 c4 10             	add    $0x10,%esp
	    ptr_frame_info = get_frame_info(page_directory, i, (&ptr_page_table));
f0109064:	83 ec 04             	sub    $0x4,%esp
f0109067:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010906a:	50                   	push   %eax
f010906b:	ff 75 f4             	pushl  -0xc(%ebp)
f010906e:	ff 75 08             	pushl  0x8(%ebp)
f0109071:	e8 77 dd ff ff       	call   f0106ded <get_frame_info>
f0109076:	83 c4 10             	add    $0x10,%esp
f0109079:	89 45 d8             	mov    %eax,-0x28(%ebp)
	      if (ptr_frame_info != NULL){ return -1 ;}//edited
f010907c:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0109080:	74 0a                	je     f010908c <allocate_chunk+0x8e>
f0109082:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0109087:	e9 c8 00 00 00       	jmp    f0109154 <allocate_chunk+0x156>

	  uint32 newva =ROUNDDOWN(va,PAGE_SIZE);
	  uint32 newsize =ROUNDUP(va+size,PAGE_SIZE);
	  struct FrameInfo *ptr_frame_info;
	  uint32 *ptr_page_table = NULL ;
	  for(uint32 i=newva ; i<newsize ; i=i+PAGE_SIZE)
f010908c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109093:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109096:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0109099:	72 b4                	jb     f010904f <allocate_chunk+0x51>
	    ptr_frame_info = get_frame_info(page_directory, i, (&ptr_page_table));
	      if (ptr_frame_info != NULL){ return -1 ;}//edited

	  }

	  ptr_page_table=NULL;
f010909b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	  for(uint32 i=newva ; i<(newsize) ; i=i+PAGE_SIZE)
f01090a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01090a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090a8:	e9 96 00 00 00       	jmp    f0109143 <allocate_chunk+0x145>
	  {

	    get_page_table(page_directory,i,&ptr_page_table);
f01090ad:	83 ec 04             	sub    $0x4,%esp
f01090b0:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01090b3:	50                   	push   %eax
f01090b4:	ff 75 f0             	pushl  -0x10(%ebp)
f01090b7:	ff 75 08             	pushl  0x8(%ebp)
f01090ba:	e8 d9 d9 ff ff       	call   f0106a98 <get_page_table>
f01090bf:	83 c4 10             	add    $0x10,%esp
	    if (ptr_page_table==NULL && newsize>= 4*1024*1024 ){create_page_table(page_directory, i);}
f01090c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01090c5:	85 c0                	test   %eax,%eax
f01090c7:	75 1a                	jne    f01090e3 <allocate_chunk+0xe5>
f01090c9:	81 7d dc ff ff 3f 00 	cmpl   $0x3fffff,-0x24(%ebp)
f01090d0:	76 11                	jbe    f01090e3 <allocate_chunk+0xe5>
f01090d2:	83 ec 08             	sub    $0x8,%esp
f01090d5:	ff 75 f0             	pushl  -0x10(%ebp)
f01090d8:	ff 75 08             	pushl  0x8(%ebp)
f01090db:	e8 0e db ff ff       	call   f0106bee <create_page_table>
f01090e0:	83 c4 10             	add    $0x10,%esp
	    // allocate frame
	    struct FrameInfo *ptr_frame_info2=NULL;
f01090e3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	    allocate_frame(&ptr_frame_info2) ;
f01090ea:	83 ec 0c             	sub    $0xc,%esp
f01090ed:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01090f0:	50                   	push   %eax
f01090f1:	e8 e3 d7 ff ff       	call   f01068d9 <allocate_frame>
f01090f6:	83 c4 10             	add    $0x10,%esp
	    // map to RAM
	    map_frame(page_directory, ptr_frame_info2, i, perms) ;
f01090f9:	8b 55 14             	mov    0x14(%ebp),%edx
f01090fc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01090ff:	52                   	push   %edx
f0109100:	ff 75 f0             	pushl  -0x10(%ebp)
f0109103:	50                   	push   %eax
f0109104:	ff 75 08             	pushl  0x8(%ebp)
f0109107:	e8 1c dc ff ff       	call   f0106d28 <map_frame>
f010910c:	83 c4 10             	add    $0x10,%esp
	    uint32 frame =to_frame_number(ptr_frame_info2);
f010910f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109112:	83 ec 0c             	sub    $0xc,%esp
f0109115:	50                   	push   %eax
f0109116:	e8 b0 f9 ff ff       	call   f0108acb <to_frame_number>
f010911b:	83 c4 10             	add    $0x10,%esp
f010911e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	    frames_info[frame].va=i;
f0109121:	8b 0d 50 f7 85 f0    	mov    0xf085f750,%ecx
f0109127:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010912a:	89 d0                	mov    %edx,%eax
f010912c:	01 c0                	add    %eax,%eax
f010912e:	01 d0                	add    %edx,%eax
f0109130:	c1 e0 03             	shl    $0x3,%eax
f0109133:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0109136:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109139:	89 42 0c             	mov    %eax,0xc(%edx)
	      if (ptr_frame_info != NULL){ return -1 ;}//edited

	  }

	  ptr_page_table=NULL;
	  for(uint32 i=newva ; i<(newsize) ; i=i+PAGE_SIZE)
f010913c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0109143:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109146:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0109149:	0f 82 5e ff ff ff    	jb     f01090ad <allocate_chunk+0xaf>
	    map_frame(page_directory, ptr_frame_info2, i, perms) ;
	    uint32 frame =to_frame_number(ptr_frame_info2);
	    frames_info[frame].va=i;
	  }

	  return 0 ;
f010914f:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0109154:	c9                   	leave  
f0109155:	c3                   	ret    

f0109156 <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0109156:	55                   	push   %ebp
f0109157:	89 e5                	mov    %esp,%ebp
f0109159:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	//panic("calculate_allocated_space() is not implemented yet...!!");

		uint32 newsva =ROUNDDOWN(sva,PAGE_SIZE);
f010915c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010915f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109162:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109165:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010916a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 neweva =ROUNDUP(eva,PAGE_SIZE);
f010916d:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0109174:	8b 55 10             	mov    0x10(%ebp),%edx
f0109177:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010917a:	01 d0                	add    %edx,%eax
f010917c:	48                   	dec    %eax
f010917d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109180:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109183:	ba 00 00 00 00       	mov    $0x0,%edx
f0109188:	f7 75 e8             	divl   -0x18(%ebp)
f010918b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010918e:	29 d0                	sub    %edx,%eax
f0109190:	89 45 e0             	mov    %eax,-0x20(%ebp)

		uint32 *ptr_page_table = NULL ;
f0109193:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		struct FrameInfo *ptr_frame_info=NULL;
f010919a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)

		for(uint32 i=newsva ; i<neweva ; i=i+PAGE_SIZE){
f01091a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01091a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01091a7:	eb 27                	jmp    f01091d0 <calculate_allocated_space+0x7a>
			get_page_table(page_directory,i,&ptr_page_table);
f01091a9:	83 ec 04             	sub    $0x4,%esp
f01091ac:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01091af:	50                   	push   %eax
f01091b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01091b3:	ff 75 08             	pushl  0x8(%ebp)
f01091b6:	e8 dd d8 ff ff       	call   f0106a98 <get_page_table>
f01091bb:	83 c4 10             	add    $0x10,%esp
			//ptr_frame_info = get_frame_info(page_directory, i, (&ptr_page_table));
			//if (ptr_frame_info != NULL){num_tables++;}
			if (ptr_page_table!=NULL){num_tables++;}
f01091be:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01091c1:	85 c0                	test   %eax,%eax
f01091c3:	74 04                	je     f01091c9 <calculate_allocated_space+0x73>
f01091c5:	83 45 14 04          	addl   $0x4,0x14(%ebp)
		uint32 neweva =ROUNDUP(eva,PAGE_SIZE);

		uint32 *ptr_page_table = NULL ;
		struct FrameInfo *ptr_frame_info=NULL;

		for(uint32 i=newsva ; i<neweva ; i=i+PAGE_SIZE){
f01091c9:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01091d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01091d3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01091d6:	72 d1                	jb     f01091a9 <calculate_allocated_space+0x53>
			//if (ptr_frame_info != NULL){num_tables++;}
			if (ptr_page_table!=NULL){num_tables++;}
		}


}
f01091d8:	90                   	nop
f01091d9:	c9                   	leave  
f01091da:	c3                   	ret    

f01091db <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f01091db:	55                   	push   %ebp
f01091dc:	89 e5                	mov    %esp,%ebp
f01091de:	83 ec 38             	sub    $0x38,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	//panic("calculate_required_frames() is not implemented yet...!!");

			uint32 newsva =ROUNDDOWN(sva,PAGE_SIZE);
f01091e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01091e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01091e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01091ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01091ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 neweva =ROUNDUP(sva+size,PAGE_SIZE);
f01091f2:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01091f9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01091fc:	8b 45 10             	mov    0x10(%ebp),%eax
f01091ff:	01 c2                	add    %eax,%edx
f0109201:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109204:	01 d0                	add    %edx,%eax
f0109206:	48                   	dec    %eax
f0109207:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010920a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010920d:	ba 00 00 00 00       	mov    $0x0,%edx
f0109212:	f7 75 e4             	divl   -0x1c(%ebp)
f0109215:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0109218:	29 d0                	sub    %edx,%eax
f010921a:	89 45 dc             	mov    %eax,-0x24(%ebp)

			uint32 num_tables=0;
f010921d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

			uint32 *ptr_page_table = NULL ;
f0109224:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
			struct FrameInfo *ptr_frame_info=NULL;
f010922b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

			for(uint32 i=newsva ; i<neweva ; i=i+PAGE_SIZE){
f0109232:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109235:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109238:	eb 3d                	jmp    f0109277 <calculate_required_frames+0x9c>
				get_page_table(page_directory,i,&ptr_page_table);
f010923a:	83 ec 04             	sub    $0x4,%esp
f010923d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0109240:	50                   	push   %eax
f0109241:	ff 75 f0             	pushl  -0x10(%ebp)
f0109244:	ff 75 08             	pushl  0x8(%ebp)
f0109247:	e8 4c d8 ff ff       	call   f0106a98 <get_page_table>
f010924c:	83 c4 10             	add    $0x10,%esp
				ptr_frame_info = get_frame_info(page_directory, i, (&ptr_page_table));
f010924f:	83 ec 04             	sub    $0x4,%esp
f0109252:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f0109255:	50                   	push   %eax
f0109256:	ff 75 f0             	pushl  -0x10(%ebp)
f0109259:	ff 75 08             	pushl  0x8(%ebp)
f010925c:	e8 8c db ff ff       	call   f0106ded <get_frame_info>
f0109261:	83 c4 10             	add    $0x10,%esp
f0109264:	89 45 d8             	mov    %eax,-0x28(%ebp)
				if (ptr_frame_info != NULL){num_tables++;}
f0109267:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f010926b:	74 03                	je     f0109270 <calculate_required_frames+0x95>
f010926d:	ff 45 f4             	incl   -0xc(%ebp)
			uint32 num_tables=0;

			uint32 *ptr_page_table = NULL ;
			struct FrameInfo *ptr_frame_info=NULL;

			for(uint32 i=newsva ; i<neweva ; i=i+PAGE_SIZE){
f0109270:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0109277:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010927a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010927d:	72 bb                	jb     f010923a <calculate_required_frames+0x5f>
				get_page_table(page_directory,i,&ptr_page_table);
				ptr_frame_info = get_frame_info(page_directory, i, (&ptr_page_table));
				if (ptr_frame_info != NULL){num_tables++;}
				//if (ptr_page_table==NULL){num_tables++;}
			}
			return num_tables;
f010927f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0109282:	c9                   	leave  
f0109283:	c3                   	ret    

f0109284 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109284:	55                   	push   %ebp
f0109285:	89 e5                	mov    %esp,%ebp
f0109287:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f010928a:	83 ec 04             	sub    $0x4,%esp
f010928d:	68 40 68 13 f0       	push   $0xf0136840
f0109292:	68 32 01 00 00       	push   $0x132
f0109297:	68 70 68 13 f0       	push   $0xf0136870
f010929c:	e8 64 6f ff ff       	call   f0100205 <_panic>

f01092a1 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01092a1:	55                   	push   %ebp
f01092a2:	89 e5                	mov    %esp,%ebp
f01092a4:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	//panic("free_user_mem() is not implemented yet...!!");

		uint32 va = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01092a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01092aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01092ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01092b0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01092b5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		uint32 endaddress = ROUNDUP((size + virtual_address), PAGE_SIZE);
f01092b8:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f01092bf:	8b 55 10             	mov    0x10(%ebp),%edx
f01092c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01092c5:	01 c2                	add    %eax,%edx
f01092c7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01092ca:	01 d0                	add    %edx,%eax
f01092cc:	48                   	dec    %eax
f01092cd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01092d0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01092d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01092d8:	f7 75 d8             	divl   -0x28(%ebp)
f01092db:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01092de:	29 d0                	sub    %edx,%eax
f01092e0:	89 45 d0             	mov    %eax,-0x30(%ebp)

		for (uint32 var = va; var < endaddress; var += PAGE_SIZE) {
f01092e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01092e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01092e9:	e9 98 00 00 00       	jmp    f0109386 <free_user_mem+0xe5>

				int read = pf_read_env_page(e, (void*) var);
f01092ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01092f1:	83 ec 08             	sub    $0x8,%esp
f01092f4:	50                   	push   %eax
f01092f5:	ff 75 08             	pushl  0x8(%ebp)
f01092f8:	e8 24 a7 ff ff       	call   f0103a21 <pf_read_env_page>
f01092fd:	83 c4 10             	add    $0x10,%esp
f0109300:	89 45 cc             	mov    %eax,-0x34(%ebp)

				if (read != E_PAGE_NOT_EXIST_IN_PF) {
f0109303:	83 7d cc f7          	cmpl   $0xfffffff7,-0x34(%ebp)
f0109307:	74 11                	je     f010931a <free_user_mem+0x79>
					pf_remove_env_page(e, var);
f0109309:	83 ec 08             	sub    $0x8,%esp
f010930c:	ff 75 f4             	pushl  -0xc(%ebp)
f010930f:	ff 75 08             	pushl  0x8(%ebp)
f0109312:	e8 c7 a7 ff ff       	call   f0103ade <pf_remove_env_page>
f0109317:	83 c4 10             	add    $0x10,%esp
				}

				for (int v = 0; v < e->page_WS_max_size ; v++) {
f010931a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109321:	eb 4f                	jmp    f0109372 <free_user_mem+0xd1>
					uint32 t = env_page_ws_get_virtual_address(e, v);
f0109323:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109326:	83 ec 08             	sub    $0x8,%esp
f0109329:	50                   	push   %eax
f010932a:	ff 75 08             	pushl  0x8(%ebp)
f010932d:	e8 2b f0 ff ff       	call   f010835d <env_page_ws_get_virtual_address>
f0109332:	83 c4 10             	add    $0x10,%esp
f0109335:	89 45 c8             	mov    %eax,-0x38(%ebp)
					if (t>=va && t< endaddress) {
f0109338:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010933b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010933e:	72 2f                	jb     f010936f <free_user_mem+0xce>
f0109340:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109343:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0109346:	73 27                	jae    f010936f <free_user_mem+0xce>
						env_page_ws_clear_entry(e, v);
f0109348:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010934b:	83 ec 08             	sub    $0x8,%esp
f010934e:	50                   	push   %eax
f010934f:	ff 75 08             	pushl  0x8(%ebp)
f0109352:	e8 8f ef ff ff       	call   f01082e6 <env_page_ws_clear_entry>
f0109357:	83 c4 10             	add    $0x10,%esp
						unmap_frame(e->env_page_directory,t );
f010935a:	8b 45 08             	mov    0x8(%ebp),%eax
f010935d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109360:	83 ec 08             	sub    $0x8,%esp
f0109363:	ff 75 c8             	pushl  -0x38(%ebp)
f0109366:	50                   	push   %eax
f0109367:	e8 f1 da ff ff       	call   f0106e5d <unmap_frame>
f010936c:	83 c4 10             	add    $0x10,%esp

				if (read != E_PAGE_NOT_EXIST_IN_PF) {
					pf_remove_env_page(e, var);
				}

				for (int v = 0; v < e->page_WS_max_size ; v++) {
f010936f:	ff 45 f0             	incl   -0x10(%ebp)
f0109372:	8b 45 08             	mov    0x8(%ebp),%eax
f0109375:	8b 50 74             	mov    0x74(%eax),%edx
f0109378:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010937b:	39 c2                	cmp    %eax,%edx
f010937d:	77 a4                	ja     f0109323 <free_user_mem+0x82>
	//panic("free_user_mem() is not implemented yet...!!");

		uint32 va = ROUNDDOWN(virtual_address, PAGE_SIZE);
		uint32 endaddress = ROUNDUP((size + virtual_address), PAGE_SIZE);

		for (uint32 var = va; var < endaddress; var += PAGE_SIZE) {
f010937f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109386:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109389:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f010938c:	0f 82 5c ff ff ff    	jb     f01092ee <free_user_mem+0x4d>
						unmap_frame(e->env_page_directory,t );
						}
				}

		}
		uint32 *ptr_page_table2 = NULL;
f0109392:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
			for (uint32 var = va; var < endaddress; var += PAGE_SIZE) {
f0109399:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010939c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010939f:	e9 8a 00 00 00       	jmp    f010942e <free_user_mem+0x18d>
			get_page_table(e->env_page_directory, var, &ptr_page_table2);
f01093a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01093a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01093aa:	83 ec 04             	sub    $0x4,%esp
f01093ad:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f01093b0:	52                   	push   %edx
f01093b1:	ff 75 ec             	pushl  -0x14(%ebp)
f01093b4:	50                   	push   %eax
f01093b5:	e8 de d6 ff ff       	call   f0106a98 <get_page_table>
f01093ba:	83 c4 10             	add    $0x10,%esp
			if (ptr_page_table2!=NULL){
f01093bd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01093c0:	85 c0                	test   %eax,%eax
f01093c2:	74 63                	je     f0109427 <free_user_mem+0x186>
			int c = 0;
f01093c4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
			for (int n = 0; n < 1024; n++) {
f01093cb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01093d2:	eb 20                	jmp    f01093f4 <free_user_mem+0x153>
				//if (ptr_page_table2[n]  != 0)
				if((ptr_page_table2[n]&PERM_PRESENT)==PERM_PRESENT)
f01093d4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01093d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01093da:	c1 e2 02             	shl    $0x2,%edx
f01093dd:	01 d0                	add    %edx,%eax
f01093df:	8b 00                	mov    (%eax),%eax
f01093e1:	83 e0 01             	and    $0x1,%eax
f01093e4:	85 c0                	test   %eax,%eax
f01093e6:	74 09                	je     f01093f1 <free_user_mem+0x150>
				{
					c = 1;
f01093e8:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
					break;
f01093ef:	eb 0c                	jmp    f01093fd <free_user_mem+0x15c>
		uint32 *ptr_page_table2 = NULL;
			for (uint32 var = va; var < endaddress; var += PAGE_SIZE) {
			get_page_table(e->env_page_directory, var, &ptr_page_table2);
			if (ptr_page_table2!=NULL){
			int c = 0;
			for (int n = 0; n < 1024; n++) {
f01093f1:	ff 45 e4             	incl   -0x1c(%ebp)
f01093f4:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
f01093fb:	7e d7                	jle    f01093d4 <free_user_mem+0x133>
					c = 1;
					break;
				}

			}
			if (c == 0) {
f01093fd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0109401:	75 24                	jne    f0109427 <free_user_mem+0x186>
				pd_clear_page_dir_entry(e->env_page_directory,var);
f0109403:	8b 45 08             	mov    0x8(%ebp),%eax
f0109406:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109409:	83 ec 08             	sub    $0x8,%esp
f010940c:	ff 75 ec             	pushl  -0x14(%ebp)
f010940f:	50                   	push   %eax
f0109410:	e8 4f ed ff ff       	call   f0108164 <pd_clear_page_dir_entry>
f0109415:	83 c4 10             	add    $0x10,%esp
				kfree(ptr_page_table2);
f0109418:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010941b:	83 ec 0c             	sub    $0xc,%esp
f010941e:	50                   	push   %eax
f010941f:	e8 48 e8 ff ff       	call   f0107c6c <kfree>
f0109424:	83 c4 10             	add    $0x10,%esp
						}
				}

		}
		uint32 *ptr_page_table2 = NULL;
			for (uint32 var = va; var < endaddress; var += PAGE_SIZE) {
f0109427:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f010942e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109431:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0109434:	0f 82 6a ff ff ff    	jb     f01093a4 <free_user_mem+0x103>
			//1. Free ALL pages of the given range from the Page File
			//2. Free ONLY pages that are resident in the working set from the memory
			//3. Removes ONLY the empty page tables (i.e. not used) (no pages are mapped in the table)


}
f010943a:	90                   	nop
f010943b:	c9                   	leave  
f010943c:	c3                   	ret    

f010943d <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010943d:	55                   	push   %ebp
f010943e:	89 e5                	mov    %esp,%ebp
f0109440:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0109443:	83 ec 04             	sub    $0x4,%esp
f0109446:	68 8c 68 13 f0       	push   $0xf013688c
f010944b:	68 76 01 00 00       	push   $0x176
f0109450:	68 70 68 13 f0       	push   $0xf0136870
f0109455:	e8 ab 6d ff ff       	call   f0100205 <_panic>

f010945a <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010945a:	55                   	push   %ebp
f010945b:	89 e5                	mov    %esp,%ebp
f010945d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0109460:	83 ec 04             	sub    $0x4,%esp
f0109463:	68 cc 68 13 f0       	push   $0xf01368cc
f0109468:	68 86 01 00 00       	push   $0x186
f010946d:	68 70 68 13 f0       	push   $0xf0136870
f0109472:	e8 8e 6d ff ff       	call   f0100205 <_panic>

f0109477 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109477:	55                   	push   %ebp
f0109478:	89 e5                	mov    %esp,%ebp
f010947a:	57                   	push   %edi
f010947b:	56                   	push   %esi
f010947c:	53                   	push   %ebx
f010947d:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109483:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f010948a:	83 ec 0c             	sub    $0xc,%esp
f010948d:	ff 75 08             	pushl  0x8(%ebp)
f0109490:	e8 0b 22 00 00       	call   f010b6a0 <get_user_program_info>
f0109495:	83 c4 10             	add    $0x10,%esp
f0109498:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f010949b:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f010949f:	75 0a                	jne    f01094ab <env_create+0x34>
f01094a1:	b8 00 00 00 00       	mov    $0x0,%eax
f01094a6:	e9 cd 0b 00 00       	jmp    f010a078 <env_create+0xc01>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f01094ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01094ae:	8b 40 08             	mov    0x8(%eax),%eax
f01094b1:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01094b4:	c7 85 4c ff ff ff 00 	movl   $0x0,-0xb4(%ebp)
f01094bb:	00 00 00 
	if(allocate_environment(&e) < 0)
f01094be:	83 ec 0c             	sub    $0xc,%esp
f01094c1:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f01094c7:	50                   	push   %eax
f01094c8:	e8 d3 0e 00 00       	call   f010a3a0 <allocate_environment>
f01094cd:	83 c4 10             	add    $0x10,%esp
f01094d0:	85 c0                	test   %eax,%eax
f01094d2:	79 0a                	jns    f01094de <env_create+0x67>
	{
		return 0;
f01094d4:	b8 00 00 00 00       	mov    $0x0,%eax
f01094d9:	e9 9a 0b 00 00       	jmp    f010a078 <env_create+0xc01>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01094de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01094e1:	8b 00                	mov    (%eax),%eax
f01094e3:	83 ec 0c             	sub    $0xc,%esp
f01094e6:	50                   	push   %eax
f01094e7:	e8 19 85 02 00       	call   f0131a05 <strlen>
f01094ec:	83 c4 10             	add    $0x10,%esp
f01094ef:	83 f8 3f             	cmp    $0x3f,%eax
f01094f2:	7f 20                	jg     f0109514 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f01094f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01094f7:	8b 00                	mov    (%eax),%eax
f01094f9:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f01094ff:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0109505:	83 ec 08             	sub    $0x8,%esp
f0109508:	50                   	push   %eax
f0109509:	52                   	push   %edx
f010950a:	e8 45 85 02 00       	call   f0131a54 <strcpy>
f010950f:	83 c4 10             	add    $0x10,%esp
f0109512:	eb 20                	jmp    f0109534 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109514:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109517:	8b 00                	mov    (%eax),%eax
f0109519:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010951f:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f0109525:	83 ec 04             	sub    $0x4,%esp
f0109528:	6a 3f                	push   $0x3f
f010952a:	50                   	push   %eax
f010952b:	52                   	push   %edx
f010952c:	e8 51 85 02 00       	call   f0131a82 <strncpy>
f0109531:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
#if USE_KHEAP
	{
		ptr_user_page_directory = create_user_directory();
f0109534:	e8 6d 0f 00 00       	call   f010a4a6 <create_user_directory>
f0109539:	89 45 b0             	mov    %eax,-0x50(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f010953c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010953f:	83 ec 0c             	sub    $0xc,%esp
f0109542:	50                   	push   %eax
f0109543:	e8 a8 e8 ff ff       	call   f0107df0 <kheap_physical_address>
f0109548:	83 c4 10             	add    $0x10,%esp
f010954b:	89 45 ac             	mov    %eax,-0x54(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f010954e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109554:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109557:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010955a:	83 ec 0c             	sub    $0xc,%esp
f010955d:	6a 02                	push   $0x2
f010955f:	e8 f3 4d 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0109564:	83 c4 10             	add    $0x10,%esp
f0109567:	85 c0                	test   %eax,%eax
f0109569:	74 21                	je     f010958c <env_create+0x115>
	{
		e->SecondListSize = LRU_second_list_size;
f010956b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109571:	8b 55 10             	mov    0x10(%ebp),%edx
f0109574:	89 90 ec 05 00 00    	mov    %edx,0x5ec(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f010957a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109580:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109583:	2b 55 10             	sub    0x10(%ebp),%edx
f0109586:	89 90 e8 05 00 00    	mov    %edx,0x5e8(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f010958c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109590:	75 12                	jne    f01095a4 <env_create+0x12d>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109592:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109598:	c7 80 a0 05 00 00 0a 	movl   $0xa,0x5a0(%eax)
f010959f:	00 00 00 
f01095a2:	eb 0f                	jmp    f01095b3 <env_create+0x13c>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f01095a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095aa:	8b 55 14             	mov    0x14(%ebp),%edx
f01095ad:	89 90 a0 05 00 00    	mov    %edx,0x5a0(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f01095b3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095b9:	83 ec 04             	sub    $0x4,%esp
f01095bc:	ff 75 ac             	pushl  -0x54(%ebp)
f01095bf:	ff 75 b0             	pushl  -0x50(%ebp)
f01095c2:	50                   	push   %eax
f01095c3:	e8 fa 15 00 00       	call   f010abc2 <initialize_environment>
f01095c8:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01095cb:	0f 20 d8             	mov    %cr3,%eax
f01095ce:	89 45 a0             	mov    %eax,-0x60(%ebp)
	return val;
f01095d1:	8b 45 a0             	mov    -0x60(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f01095d4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	lcr3(e->env_cr3) ;
f01095d7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01095dd:	8b 40 60             	mov    0x60(%eax),%eax
f01095e0:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01095e6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01095ec:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f01095ef:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f01095f6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f01095fd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109603:	8b 40 74             	mov    0x74(%eax),%eax
f0109606:	48                   	dec    %eax
f0109607:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f010960a:	c7 85 48 ff ff ff ff 	movl   $0xffffffff,-0xb8(%ebp)
f0109611:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109614:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f010961a:	83 ec 08             	sub    $0x8,%esp
f010961d:	ff 75 b8             	pushl  -0x48(%ebp)
f0109620:	50                   	push   %eax
f0109621:	e8 af 1d 00 00       	call   f010b3d5 <PROGRAM_SEGMENT_FIRST>
f0109626:	83 c4 0c             	add    $0xc,%esp
f0109629:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010962f:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0109635:	b9 05 00 00 00       	mov    $0x5,%ecx
f010963a:	89 c7                	mov    %eax,%edi
f010963c:	89 d6                	mov    %edx,%esi
f010963e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109640:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0109646:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109649:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010964c:	8b 40 10             	mov    0x10(%eax),%eax
f010964f:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109652:	75 07                	jne    f010965b <env_create+0x1e4>
f0109654:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010965b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010965e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109661:	e9 15 03 00 00       	jmp    f010997b <env_create+0x504>
	{
		segment_counter++;
f0109666:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0109669:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0109670:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109673:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109679:	83 ec 0c             	sub    $0xc,%esp
f010967c:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0109682:	52                   	push   %edx
f0109683:	ff 75 dc             	pushl  -0x24(%ebp)
f0109686:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f010968c:	52                   	push   %edx
f010968d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109690:	50                   	push   %eax
f0109691:	e8 4b 0e 00 00       	call   f010a4e1 <program_segment_alloc_map_copy_workingset>
f0109696:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0109699:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010969f:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f01096a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01096a5:	8b 00                	mov    (%eax),%eax
f01096a7:	89 45 9c             	mov    %eax,-0x64(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f01096aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01096ad:	8b 40 0c             	mov    0xc(%eax),%eax
f01096b0:	89 45 98             	mov    %eax,-0x68(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f01096b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01096b6:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01096b9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01096bc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01096c1:	89 45 90             	mov    %eax,-0x70(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f01096c4:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01096cb:	8b 55 98             	mov    -0x68(%ebp),%edx
f01096ce:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01096d1:	01 d0                	add    %edx,%eax
f01096d3:	48                   	dec    %eax
f01096d4:	89 45 88             	mov    %eax,-0x78(%ebp)
f01096d7:	8b 45 88             	mov    -0x78(%ebp),%eax
f01096da:	ba 00 00 00 00       	mov    $0x0,%edx
f01096df:	f7 75 8c             	divl   -0x74(%ebp)
f01096e2:	8b 45 88             	mov    -0x78(%ebp),%eax
f01096e5:	29 d0                	sub    %edx,%eax
f01096e7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f01096ea:	8b 45 98             	mov    -0x68(%ebp),%eax
f01096ed:	2b 45 90             	sub    -0x70(%ebp),%eax
f01096f0:	89 45 80             	mov    %eax,-0x80(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f01096f3:	a1 80 f7 85 f0       	mov    0xf085f780,%eax
f01096f8:	83 ec 04             	sub    $0x4,%esp
f01096fb:	68 00 10 00 00       	push   $0x1000
f0109700:	6a 00                	push   $0x0
f0109702:	50                   	push   %eax
f0109703:	e8 eb 84 02 00       	call   f0131bf3 <memset>
f0109708:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f010970b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010970e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109711:	8b 15 80 f7 85 f0    	mov    0xf085f780,%edx
f0109717:	8b 45 80             	mov    -0x80(%ebp),%eax
f010971a:	01 d0                	add    %edx,%eax
f010971c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f010971f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109722:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109725:	eb 13                	jmp    f010973a <env_create+0x2c3>
		{
			*dst_ptr = *src_ptr ;
f0109727:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010972a:	8a 10                	mov    (%eax),%dl
f010972c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010972f:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109731:	ff 45 cc             	incl   -0x34(%ebp)
f0109734:	ff 45 d4             	incl   -0x2c(%ebp)
f0109737:	ff 45 d0             	incl   -0x30(%ebp)
f010973a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010973d:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0109740:	72 e5                	jb     f0109727 <env_create+0x2b0>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109742:	8b 15 80 f7 85 f0    	mov    0xf085f780,%edx
f0109748:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010974e:	83 ec 04             	sub    $0x4,%esp
f0109751:	52                   	push   %edx
f0109752:	ff 75 90             	pushl  -0x70(%ebp)
f0109755:	50                   	push   %eax
f0109756:	e8 a1 9f ff ff       	call   f01036fc <pf_add_env_page>
f010975b:	83 c4 10             	add    $0x10,%esp
f010975e:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109761:	75 17                	jne    f010977a <env_create+0x303>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109763:	83 ec 04             	sub    $0x4,%esp
f0109766:	68 f8 68 13 f0       	push   $0xf01368f8
f010976b:	68 e1 00 00 00       	push   $0xe1
f0109770:	68 3d 69 13 f0       	push   $0xf013693d
f0109775:	e8 8b 6a ff ff       	call   f0100205 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f010977a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010977d:	8b 50 04             	mov    0x4(%eax),%edx
f0109780:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109783:	01 d0                	add    %edx,%eax
f0109785:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010978b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109791:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109796:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f010979c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010979f:	8b 50 04             	mov    0x4(%eax),%edx
f01097a2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01097a5:	01 d0                	add    %edx,%eax
f01097a7:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01097ad:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01097b0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01097b3:	eb 43                	jmp    f01097f8 <env_create+0x381>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f01097b5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01097b8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01097be:	83 ec 04             	sub    $0x4,%esp
f01097c1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01097c4:	52                   	push   %edx
f01097c5:	50                   	push   %eax
f01097c6:	e8 31 9f ff ff       	call   f01036fc <pf_add_env_page>
f01097cb:	83 c4 10             	add    $0x10,%esp
f01097ce:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01097d1:	75 17                	jne    f01097ea <env_create+0x373>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01097d3:	83 ec 04             	sub    $0x4,%esp
f01097d6:	68 f8 68 13 f0       	push   $0xf01368f8
f01097db:	68 ee 00 00 00       	push   $0xee
f01097e0:	68 3d 69 13 f0       	push   $0xf013693d
f01097e5:	e8 1b 6a ff ff       	call   f0100205 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f01097ea:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01097f1:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f01097f8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01097fb:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0109801:	72 b2                	jb     f01097b5 <env_create+0x33e>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0109803:	a1 80 f7 85 f0       	mov    0xf085f780,%eax
f0109808:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f010980b:	83 ec 04             	sub    $0x4,%esp
f010980e:	68 00 10 00 00       	push   $0x1000
f0109813:	6a 00                	push   $0x0
f0109815:	ff 75 d0             	pushl  -0x30(%ebp)
f0109818:	e8 d6 83 02 00       	call   f0131bf3 <memset>
f010981d:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109820:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109826:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109829:	eb 13                	jmp    f010983e <env_create+0x3c7>
		{
			*dst_ptr = *src_ptr;
f010982b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010982e:	8a 10                	mov    (%eax),%dl
f0109830:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109833:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109835:	ff 45 cc             	incl   -0x34(%ebp)
f0109838:	ff 45 d4             	incl   -0x2c(%ebp)
f010983b:	ff 45 d0             	incl   -0x30(%ebp)
f010983e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109841:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f0109847:	72 e2                	jb     f010982b <env_create+0x3b4>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109849:	8b 15 80 f7 85 f0    	mov    0xf085f780,%edx
f010984f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109855:	83 ec 04             	sub    $0x4,%esp
f0109858:	52                   	push   %edx
f0109859:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f010985f:	50                   	push   %eax
f0109860:	e8 97 9e ff ff       	call   f01036fc <pf_add_env_page>
f0109865:	83 c4 10             	add    $0x10,%esp
f0109868:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010986b:	75 17                	jne    f0109884 <env_create+0x40d>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010986d:	83 ec 04             	sub    $0x4,%esp
f0109870:	68 f8 68 13 f0       	push   $0xf01368f8
f0109875:	68 fd 00 00 00       	push   $0xfd
f010987a:	68 3d 69 13 f0       	push   $0xf013693d
f010987f:	e8 81 69 ff ff       	call   f0100205 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109884:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010988b:	10 00 00 
f010988e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109891:	8b 50 04             	mov    0x4(%eax),%edx
f0109894:	8b 45 98             	mov    -0x68(%ebp),%eax
f0109897:	01 c2                	add    %eax,%edx
f0109899:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010989f:	01 d0                	add    %edx,%eax
f01098a1:	48                   	dec    %eax
f01098a2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01098a8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01098ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01098b3:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01098b9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01098bf:	29 d0                	sub    %edx,%eax
f01098c1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f01098c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01098c7:	8b 50 08             	mov    0x8(%eax),%edx
f01098ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01098cd:	01 d0                	add    %edx,%eax
f01098cf:	2b 45 c8             	sub    -0x38(%ebp),%eax
f01098d2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f01098d8:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01098df:	eb 41                	jmp    f0109922 <env_create+0x4ab>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f01098e1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01098e7:	83 ec 04             	sub    $0x4,%esp
f01098ea:	6a 01                	push   $0x1
f01098ec:	ff 75 c8             	pushl  -0x38(%ebp)
f01098ef:	50                   	push   %eax
f01098f0:	e8 d6 9c ff ff       	call   f01035cb <pf_add_empty_env_page>
f01098f5:	83 c4 10             	add    $0x10,%esp
f01098f8:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01098fb:	75 17                	jne    f0109914 <env_create+0x49d>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01098fd:	83 ec 04             	sub    $0x4,%esp
f0109900:	68 f8 68 13 f0       	push   $0xf01368f8
f0109905:	68 0a 01 00 00       	push   $0x10a
f010990a:	68 3d 69 13 f0       	push   $0xf013693d
f010990f:	e8 f1 68 ff ff       	call   f0100205 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109914:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010991b:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109922:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0109929:	10 00 00 
f010992c:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
f0109932:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109938:	01 d0                	add    %edx,%eax
f010993a:	48                   	dec    %eax
f010993b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0109941:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109947:	ba 00 00 00 00       	mov    $0x0,%edx
f010994c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0109952:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0109958:	29 d0                	sub    %edx,%eax
f010995a:	89 c2                	mov    %eax,%edx
f010995c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010995f:	39 c2                	cmp    %eax,%edx
f0109961:	0f 87 7a ff ff ff    	ja     f01098e1 <env_create+0x46a>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109967:	83 ec 08             	sub    $0x8,%esp
f010996a:	ff 75 b8             	pushl  -0x48(%ebp)
f010996d:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109970:	e8 55 19 00 00       	call   f010b2ca <PROGRAM_SEGMENT_NEXT>
f0109975:	83 c4 10             	add    $0x10,%esp
f0109978:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010997b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010997f:	0f 85 e1 fc ff ff    	jne    f0109666 <env_create+0x1ef>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f0109985:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f010998c:	e9 9d 00 00 00       	jmp    f0109a2e <env_create+0x5b7>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f0109991:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109997:	8b 48 78             	mov    0x78(%eax),%ecx
f010999a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010999d:	89 d0                	mov    %edx,%eax
f010999f:	01 c0                	add    %eax,%eax
f01099a1:	01 d0                	add    %edx,%eax
f01099a3:	c1 e0 03             	shl    $0x3,%eax
f01099a6:	01 c8                	add    %ecx,%eax
f01099a8:	8a 40 04             	mov    0x4(%eax),%al
f01099ab:	84 c0                	test   %al,%al
f01099ad:	75 7c                	jne    f0109a2b <env_create+0x5b4>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f01099af:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099b5:	8b 48 78             	mov    0x78(%eax),%ecx
f01099b8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01099bb:	89 d0                	mov    %edx,%eax
f01099bd:	01 c0                	add    %eax,%eax
f01099bf:	01 d0                	add    %edx,%eax
f01099c1:	c1 e0 03             	shl    $0x3,%eax
f01099c4:	01 c8                	add    %ecx,%eax
f01099c6:	8b 00                	mov    (%eax),%eax
f01099c8:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f01099ce:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01099d4:	8b 40 5c             	mov    0x5c(%eax),%eax
f01099d7:	83 ec 04             	sub    $0x4,%esp
f01099da:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f01099e0:	52                   	push   %edx
f01099e1:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f01099e7:	50                   	push   %eax
f01099e8:	e8 ab d0 ff ff       	call   f0106a98 <get_page_table>
f01099ed:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f01099f0:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01099f6:	8b 95 5c ff ff ff    	mov    -0xa4(%ebp),%edx
f01099fc:	c1 ea 0c             	shr    $0xc,%edx
f01099ff:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0109a05:	c1 e2 02             	shl    $0x2,%edx
f0109a08:	01 d0                	add    %edx,%eax
f0109a0a:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0109a10:	8b 8d 5c ff ff ff    	mov    -0xa4(%ebp),%ecx
f0109a16:	c1 e9 0c             	shr    $0xc,%ecx
f0109a19:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0109a1f:	c1 e1 02             	shl    $0x2,%ecx
f0109a22:	01 ca                	add    %ecx,%edx
f0109a24:	8b 12                	mov    (%edx),%edx
f0109a26:	83 e2 bf             	and    $0xffffffbf,%edx
f0109a29:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f0109a2b:	ff 45 c4             	incl   -0x3c(%ebp)
f0109a2e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a34:	8b 50 74             	mov    0x74(%eax),%edx
f0109a37:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109a3a:	39 c2                	cmp    %eax,%edx
f0109a3c:	0f 87 4f ff ff ff    	ja     f0109991 <env_create+0x51a>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0109a42:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109a45:	8b 50 08             	mov    0x8(%eax),%edx
f0109a48:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a4e:	83 ec 08             	sub    $0x8,%esp
f0109a51:	52                   	push   %edx
f0109a52:	50                   	push   %eax
f0109a53:	e8 bc 16 00 00       	call   f010b114 <set_environment_entry_point>
f0109a58:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f0109a5b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109a61:	c7 80 58 05 00 00 01 	movl   $0x1,0x558(%eax)
f0109a68:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f0109a6b:	c7 85 58 ff ff ff 00 	movl   $0xeebfd000,-0xa8(%ebp)
f0109a72:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f0109a75:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109a7c:	e9 53 05 00 00       	jmp    f0109fd4 <env_create+0xb5d>
	{
		struct FrameInfo *pp = NULL;
f0109a81:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0109a88:	00 00 00 
		allocate_frame(&pp);
f0109a8b:	83 ec 0c             	sub    $0xc,%esp
f0109a8e:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0109a94:	50                   	push   %eax
f0109a95:	e8 3f ce ff ff       	call   f01068d9 <allocate_frame>
f0109a9a:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0109a9d:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f0109aa3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109aa9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109aac:	6a 06                	push   $0x6
f0109aae:	ff 75 c0             	pushl  -0x40(%ebp)
f0109ab1:	52                   	push   %edx
f0109ab2:	50                   	push   %eax
f0109ab3:	e8 2c d4 ff ff       	call   f0106ee4 <loadtime_map_frame>
f0109ab8:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0109abb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109abe:	83 ec 04             	sub    $0x4,%esp
f0109ac1:	68 00 10 00 00       	push   $0x1000
f0109ac6:	6a 00                	push   $0x0
f0109ac8:	50                   	push   %eax
f0109ac9:	e8 25 81 02 00       	call   f0131bf3 <memset>
f0109ace:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0109ad1:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ad7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109add:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ae3:	83 ec 04             	sub    $0x4,%esp
f0109ae6:	ff 75 c0             	pushl  -0x40(%ebp)
f0109ae9:	52                   	push   %edx
f0109aea:	50                   	push   %eax
f0109aeb:	e8 55 e7 ff ff       	call   f0108245 <env_page_ws_set_entry>
f0109af0:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109af3:	83 ec 0c             	sub    $0xc,%esp
f0109af6:	6a 02                	push   $0x2
f0109af8:	e8 5a 48 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0109afd:	83 c4 10             	add    $0x10,%esp
f0109b00:	85 c0                	test   %eax,%eax
f0109b02:	0f 84 6b 04 00 00    	je     f0109f73 <env_create+0xafc>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109b08:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b0e:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b11:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b17:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b1d:	89 d0                	mov    %edx,%eax
f0109b1f:	01 c0                	add    %eax,%eax
f0109b21:	01 d0                	add    %edx,%eax
f0109b23:	c1 e0 03             	shl    $0x3,%eax
f0109b26:	01 c8                	add    %ecx,%eax
f0109b28:	85 c0                	test   %eax,%eax
f0109b2a:	75 17                	jne    f0109b43 <env_create+0x6cc>
f0109b2c:	83 ec 04             	sub    $0x4,%esp
f0109b2f:	68 5a 69 13 f0       	push   $0xf013695a
f0109b34:	68 41 01 00 00       	push   $0x141
f0109b39:	68 3d 69 13 f0       	push   $0xf013693d
f0109b3e:	e8 c2 66 ff ff       	call   f0100205 <_panic>
f0109b43:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b49:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b4c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b52:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b58:	89 d0                	mov    %edx,%eax
f0109b5a:	01 c0                	add    %eax,%eax
f0109b5c:	01 d0                	add    %edx,%eax
f0109b5e:	c1 e0 03             	shl    $0x3,%eax
f0109b61:	01 c8                	add    %ecx,%eax
f0109b63:	8b 40 10             	mov    0x10(%eax),%eax
f0109b66:	85 c0                	test   %eax,%eax
f0109b68:	74 4b                	je     f0109bb5 <env_create+0x73e>
f0109b6a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b70:	8b 48 78             	mov    0x78(%eax),%ecx
f0109b73:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b79:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109b7f:	89 d0                	mov    %edx,%eax
f0109b81:	01 c0                	add    %eax,%eax
f0109b83:	01 d0                	add    %edx,%eax
f0109b85:	c1 e0 03             	shl    $0x3,%eax
f0109b88:	01 c8                	add    %ecx,%eax
f0109b8a:	8b 50 10             	mov    0x10(%eax),%edx
f0109b8d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b93:	8b 58 78             	mov    0x78(%eax),%ebx
f0109b96:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109b9c:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ba2:	89 c8                	mov    %ecx,%eax
f0109ba4:	01 c0                	add    %eax,%eax
f0109ba6:	01 c8                	add    %ecx,%eax
f0109ba8:	c1 e0 03             	shl    $0x3,%eax
f0109bab:	01 d8                	add    %ebx,%eax
f0109bad:	8b 40 14             	mov    0x14(%eax),%eax
f0109bb0:	89 42 14             	mov    %eax,0x14(%edx)
f0109bb3:	eb 2f                	jmp    f0109be4 <env_create+0x76d>
f0109bb5:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109bbb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bc1:	8b 58 78             	mov    0x78(%eax),%ebx
f0109bc4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bca:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109bd0:	89 c8                	mov    %ecx,%eax
f0109bd2:	01 c0                	add    %eax,%eax
f0109bd4:	01 c8                	add    %ecx,%eax
f0109bd6:	c1 e0 03             	shl    $0x3,%eax
f0109bd9:	01 d8                	add    %ebx,%eax
f0109bdb:	8b 40 14             	mov    0x14(%eax),%eax
f0109bde:	89 82 bc 05 00 00    	mov    %eax,0x5bc(%edx)
f0109be4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bea:	8b 48 78             	mov    0x78(%eax),%ecx
f0109bed:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109bf3:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109bf9:	89 d0                	mov    %edx,%eax
f0109bfb:	01 c0                	add    %eax,%eax
f0109bfd:	01 d0                	add    %edx,%eax
f0109bff:	c1 e0 03             	shl    $0x3,%eax
f0109c02:	01 c8                	add    %ecx,%eax
f0109c04:	8b 40 14             	mov    0x14(%eax),%eax
f0109c07:	85 c0                	test   %eax,%eax
f0109c09:	74 4b                	je     f0109c56 <env_create+0x7df>
f0109c0b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c11:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c14:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c1a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c20:	89 d0                	mov    %edx,%eax
f0109c22:	01 c0                	add    %eax,%eax
f0109c24:	01 d0                	add    %edx,%eax
f0109c26:	c1 e0 03             	shl    $0x3,%eax
f0109c29:	01 c8                	add    %ecx,%eax
f0109c2b:	8b 50 14             	mov    0x14(%eax),%edx
f0109c2e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c34:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c37:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c3d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c43:	89 c8                	mov    %ecx,%eax
f0109c45:	01 c0                	add    %eax,%eax
f0109c47:	01 c8                	add    %ecx,%eax
f0109c49:	c1 e0 03             	shl    $0x3,%eax
f0109c4c:	01 d8                	add    %ebx,%eax
f0109c4e:	8b 40 10             	mov    0x10(%eax),%eax
f0109c51:	89 42 10             	mov    %eax,0x10(%edx)
f0109c54:	eb 2f                	jmp    f0109c85 <env_create+0x80e>
f0109c56:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109c5c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c62:	8b 58 78             	mov    0x78(%eax),%ebx
f0109c65:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c6b:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109c71:	89 c8                	mov    %ecx,%eax
f0109c73:	01 c0                	add    %eax,%eax
f0109c75:	01 c8                	add    %ecx,%eax
f0109c77:	c1 e0 03             	shl    $0x3,%eax
f0109c7a:	01 d8                	add    %ebx,%eax
f0109c7c:	8b 40 10             	mov    0x10(%eax),%eax
f0109c7f:	89 82 b8 05 00 00    	mov    %eax,0x5b8(%edx)
f0109c85:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c8b:	8b 48 78             	mov    0x78(%eax),%ecx
f0109c8e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109c94:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109c9a:	89 d0                	mov    %edx,%eax
f0109c9c:	01 c0                	add    %eax,%eax
f0109c9e:	01 d0                	add    %edx,%eax
f0109ca0:	c1 e0 03             	shl    $0x3,%eax
f0109ca3:	01 c8                	add    %ecx,%eax
f0109ca5:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f0109cac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cb2:	8b 48 78             	mov    0x78(%eax),%ecx
f0109cb5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cbb:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109cc1:	89 d0                	mov    %edx,%eax
f0109cc3:	01 c0                	add    %eax,%eax
f0109cc5:	01 d0                	add    %edx,%eax
f0109cc7:	c1 e0 03             	shl    $0x3,%eax
f0109cca:	01 c8                	add    %ecx,%eax
f0109ccc:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109cd3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cd9:	8b 90 c4 05 00 00    	mov    0x5c4(%eax),%edx
f0109cdf:	4a                   	dec    %edx
f0109ce0:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0109ce6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cec:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109cf2:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109cf8:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f0109cfe:	39 c2                	cmp    %eax,%edx
f0109d00:	0f 83 39 01 00 00    	jae    f0109e3f <env_create+0x9c8>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109d06:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d0c:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d0f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d15:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d1b:	89 d0                	mov    %edx,%eax
f0109d1d:	01 c0                	add    %eax,%eax
f0109d1f:	01 d0                	add    %edx,%eax
f0109d21:	c1 e0 03             	shl    $0x3,%eax
f0109d24:	01 c8                	add    %ecx,%eax
f0109d26:	85 c0                	test   %eax,%eax
f0109d28:	75 17                	jne    f0109d41 <env_create+0x8ca>
f0109d2a:	83 ec 04             	sub    $0x4,%esp
f0109d2d:	68 78 69 13 f0       	push   $0xf0136978
f0109d32:	68 46 01 00 00       	push   $0x146
f0109d37:	68 3d 69 13 f0       	push   $0xf013693d
f0109d3c:	e8 c4 64 ff ff       	call   f0100205 <_panic>
f0109d41:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d47:	8b 48 78             	mov    0x78(%eax),%ecx
f0109d4a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d50:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109d56:	89 d0                	mov    %edx,%eax
f0109d58:	01 c0                	add    %eax,%eax
f0109d5a:	01 d0                	add    %edx,%eax
f0109d5c:	c1 e0 03             	shl    $0x3,%eax
f0109d5f:	01 c8                	add    %ecx,%eax
f0109d61:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109d67:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f0109d6d:	89 50 10             	mov    %edx,0x10(%eax)
f0109d70:	8b 40 10             	mov    0x10(%eax),%eax
f0109d73:	85 c0                	test   %eax,%eax
f0109d75:	74 31                	je     f0109da8 <env_create+0x931>
f0109d77:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d7d:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f0109d83:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d89:	8b 58 78             	mov    0x78(%eax),%ebx
f0109d8c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109d92:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109d98:	89 c8                	mov    %ecx,%eax
f0109d9a:	01 c0                	add    %eax,%eax
f0109d9c:	01 c8                	add    %ecx,%eax
f0109d9e:	c1 e0 03             	shl    $0x3,%eax
f0109da1:	01 d8                	add    %ebx,%eax
f0109da3:	89 42 14             	mov    %eax,0x14(%edx)
f0109da6:	eb 2c                	jmp    f0109dd4 <env_create+0x95d>
f0109da8:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109dae:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109db4:	8b 58 78             	mov    0x78(%eax),%ebx
f0109db7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109dbd:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109dc3:	89 c8                	mov    %ecx,%eax
f0109dc5:	01 c0                	add    %eax,%eax
f0109dc7:	01 c8                	add    %ecx,%eax
f0109dc9:	c1 e0 03             	shl    $0x3,%eax
f0109dcc:	01 d8                	add    %ebx,%eax
f0109dce:	89 82 cc 05 00 00    	mov    %eax,0x5cc(%edx)
f0109dd4:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109dda:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109de0:	8b 58 78             	mov    0x78(%eax),%ebx
f0109de3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109de9:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109def:	89 c8                	mov    %ecx,%eax
f0109df1:	01 c0                	add    %eax,%eax
f0109df3:	01 c8                	add    %ecx,%eax
f0109df5:	c1 e0 03             	shl    $0x3,%eax
f0109df8:	01 d8                	add    %ebx,%eax
f0109dfa:	89 82 c8 05 00 00    	mov    %eax,0x5c8(%edx)
f0109e00:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e06:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e09:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e0f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e15:	89 d0                	mov    %edx,%eax
f0109e17:	01 c0                	add    %eax,%eax
f0109e19:	01 d0                	add    %edx,%eax
f0109e1b:	c1 e0 03             	shl    $0x3,%eax
f0109e1e:	01 c8                	add    %ecx,%eax
f0109e20:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109e27:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e2d:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f0109e33:	42                   	inc    %edx
f0109e34:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f0109e3a:	e9 34 01 00 00       	jmp    f0109f73 <env_create+0xafc>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109e3f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e45:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e48:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e4e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e54:	89 d0                	mov    %edx,%eax
f0109e56:	01 c0                	add    %eax,%eax
f0109e58:	01 d0                	add    %edx,%eax
f0109e5a:	c1 e0 03             	shl    $0x3,%eax
f0109e5d:	01 c8                	add    %ecx,%eax
f0109e5f:	85 c0                	test   %eax,%eax
f0109e61:	75 17                	jne    f0109e7a <env_create+0xa03>
f0109e63:	83 ec 04             	sub    $0x4,%esp
f0109e66:	68 78 69 13 f0       	push   $0xf0136978
f0109e6b:	68 4a 01 00 00       	push   $0x14a
f0109e70:	68 3d 69 13 f0       	push   $0xf013693d
f0109e75:	e8 8b 63 ff ff       	call   f0100205 <_panic>
f0109e7a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e80:	8b 48 78             	mov    0x78(%eax),%ecx
f0109e83:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109e89:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109e8f:	89 d0                	mov    %edx,%eax
f0109e91:	01 c0                	add    %eax,%eax
f0109e93:	01 d0                	add    %edx,%eax
f0109e95:	c1 e0 03             	shl    $0x3,%eax
f0109e98:	01 c8                	add    %ecx,%eax
f0109e9a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ea0:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f0109ea6:	89 50 10             	mov    %edx,0x10(%eax)
f0109ea9:	8b 40 10             	mov    0x10(%eax),%eax
f0109eac:	85 c0                	test   %eax,%eax
f0109eae:	74 31                	je     f0109ee1 <env_create+0xa6a>
f0109eb0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109eb6:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f0109ebc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ec2:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ec5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ecb:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109ed1:	89 c8                	mov    %ecx,%eax
f0109ed3:	01 c0                	add    %eax,%eax
f0109ed5:	01 c8                	add    %ecx,%eax
f0109ed7:	c1 e0 03             	shl    $0x3,%eax
f0109eda:	01 d8                	add    %ebx,%eax
f0109edc:	89 42 14             	mov    %eax,0x14(%edx)
f0109edf:	eb 2c                	jmp    f0109f0d <env_create+0xa96>
f0109ee1:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109ee7:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109eed:	8b 58 78             	mov    0x78(%eax),%ebx
f0109ef0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109ef6:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109efc:	89 c8                	mov    %ecx,%eax
f0109efe:	01 c0                	add    %eax,%eax
f0109f00:	01 c8                	add    %ecx,%eax
f0109f02:	c1 e0 03             	shl    $0x3,%eax
f0109f05:	01 d8                	add    %ebx,%eax
f0109f07:	89 82 dc 05 00 00    	mov    %eax,0x5dc(%edx)
f0109f0d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109f13:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f19:	8b 58 78             	mov    0x78(%eax),%ebx
f0109f1c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f22:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f0109f28:	89 c8                	mov    %ecx,%eax
f0109f2a:	01 c0                	add    %eax,%eax
f0109f2c:	01 c8                	add    %ecx,%eax
f0109f2e:	c1 e0 03             	shl    $0x3,%eax
f0109f31:	01 d8                	add    %ebx,%eax
f0109f33:	89 82 d8 05 00 00    	mov    %eax,0x5d8(%edx)
f0109f39:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f3f:	8b 48 78             	mov    0x78(%eax),%ecx
f0109f42:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f48:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f4e:	89 d0                	mov    %edx,%eax
f0109f50:	01 c0                	add    %eax,%eax
f0109f52:	01 d0                	add    %edx,%eax
f0109f54:	c1 e0 03             	shl    $0x3,%eax
f0109f57:	01 c8                	add    %ecx,%eax
f0109f59:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0109f60:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f66:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f0109f6c:	42                   	inc    %edx
f0109f6d:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
				}
			}
			e->page_last_WS_index ++;
f0109f73:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f79:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f0109f7f:	42                   	inc    %edx
f0109f80:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0109f86:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f0109f8c:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109f92:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f0109f98:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f0109f9e:	8b 5a 74             	mov    0x74(%edx),%ebx
f0109fa1:	ba 00 00 00 00       	mov    $0x0,%edx
f0109fa6:	f7 f3                	div    %ebx
f0109fa8:	89 d0                	mov    %edx,%eax
f0109faa:	89 81 2c 05 00 00    	mov    %eax,0x52c(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0109fb0:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0109fb6:	83 ec 04             	sub    $0x4,%esp
f0109fb9:	6a 01                	push   $0x1
f0109fbb:	ff 75 c0             	pushl  -0x40(%ebp)
f0109fbe:	50                   	push   %eax
f0109fbf:	e8 07 96 ff ff       	call   f01035cb <pf_add_empty_env_page>
f0109fc4:	83 c4 10             	add    $0x10,%esp
f0109fc7:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0109fcd:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0109fd4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0109fd7:	3b 85 58 ff ff ff    	cmp    -0xa8(%ebp),%eax
f0109fdd:	0f 83 9e fa ff ff    	jae    f0109a81 <env_create+0x60a>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109fe3:	83 ec 0c             	sub    $0xc,%esp
f0109fe6:	6a 02                	push   $0x2
f0109fe8:	e8 6a 43 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f0109fed:	83 c4 10             	add    $0x10,%esp
f0109ff0:	85 c0                	test   %eax,%eax
f0109ff2:	74 72                	je     f010a066 <env_create+0xbef>
	{
		struct WorkingSetElement * elm = NULL;
f0109ff4:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0109ffb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010a001:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010a007:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a00a:	eb 2b                	jmp    f010a037 <env_create+0xbc0>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f010a00c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010a00f:	8b 10                	mov    (%eax),%edx
f010a011:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010a017:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a01a:	6a 01                	push   $0x1
f010a01c:	6a 00                	push   $0x0
f010a01e:	52                   	push   %edx
f010a01f:	50                   	push   %eax
f010a020:	e8 61 de ff ff       	call   f0107e86 <pt_set_page_permissions>
f010a025:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f010a028:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010a02e:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010a034:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a037:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010a03d:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a041:	74 08                	je     f010a04b <env_create+0xbd4>
f010a043:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010a046:	8b 52 10             	mov    0x10(%edx),%edx
f010a049:	eb 05                	jmp    f010a050 <env_create+0xbd9>
f010a04b:	ba 00 00 00 00       	mov    $0x0,%edx
f010a050:	89 90 e0 05 00 00    	mov    %edx,0x5e0(%eax)
f010a056:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010a05c:	85 c0                	test   %eax,%eax
f010a05e:	75 ac                	jne    f010a00c <env_create+0xb95>
f010a060:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a064:	75 a6                	jne    f010a00c <env_create+0xb95>
f010a066:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010a069:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010a06c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010a06f:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f010a072:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
}
f010a078:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a07b:	5b                   	pop    %ebx
f010a07c:	5e                   	pop    %esi
f010a07d:	5f                   	pop    %edi
f010a07e:	5d                   	pop    %ebp
f010a07f:	c3                   	ret    

f010a080 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010a080:	55                   	push   %ebp
f010a081:	89 e5                	mov    %esp,%ebp
f010a083:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f010a086:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010a08b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a08e:	74 25                	je     f010a0b5 <env_run+0x35>
	{
		curenv = e ;
f010a090:	8b 45 08             	mov    0x8(%ebp),%eax
f010a093:	a3 f4 ed 85 f0       	mov    %eax,0xf085edf4
		curenv->env_runs++ ;
f010a098:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010a09d:	8b 50 58             	mov    0x58(%eax),%edx
f010a0a0:	42                   	inc    %edx
f010a0a1:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f010a0a4:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010a0a9:	8b 40 60             	mov    0x60(%eax),%eax
f010a0ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a0af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a0b2:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f010a0b5:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010a0ba:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f010a0c1:	e8 e0 a0 ff ff       	call   f01041a6 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f010a0c6:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010a0cb:	83 ec 0c             	sub    $0xc,%esp
f010a0ce:	50                   	push   %eax
f010a0cf:	e8 0f 01 00 00       	call   f010a1e3 <env_pop_tf>

f010a0d4 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010a0d4:	55                   	push   %ebp
f010a0d5:	89 e5                	mov    %esp,%ebp
f010a0d7:	83 ec 08             	sub    $0x8,%esp
	/********DON'T CHANGE THIS LINE***********/
#if USE_KHEAP
	unshare_pws_at_user_space(e);
f010a0da:	83 ec 0c             	sub    $0xc,%esp
f010a0dd:	ff 75 08             	pushl  0x8(%ebp)
f010a0e0:	e8 3e 11 00 00       	call   f010b223 <unshare_pws_at_user_space>
f010a0e5:	83 c4 10             	add    $0x10,%esp
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f010a0e8:	83 ec 04             	sub    $0x4,%esp
f010a0eb:	68 9c 69 13 f0       	push   $0xf013699c
f010a0f0:	68 9d 01 00 00       	push   $0x19d
f010a0f5:	68 3d 69 13 f0       	push   $0xf013693d
f010a0fa:	e8 06 61 ff ff       	call   f0100205 <_panic>

f010a0ff <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f010a0ff:	55                   	push   %ebp
f010a100:	89 e5                	mov    %esp,%ebp
f010a102:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f010a105:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010a10a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a10d:	83 ec 0c             	sub    $0xc,%esp
f010a110:	50                   	push   %eax
f010a111:	e8 73 b1 ff ff       	call   f0105289 <sched_exit_env>
f010a116:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f010a119:	e8 ef a5 ff ff       	call   f010470d <fos_scheduler>

f010a11e <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010a11e:	55                   	push   %ebp
f010a11f:	89 e5                	mov    %esp,%ebp
f010a121:	53                   	push   %ebx
f010a122:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010a125:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a129:	75 15                	jne    f010a140 <envid2env+0x22>
		*env_store = curenv;
f010a12b:	8b 15 f4 ed 85 f0    	mov    0xf085edf4,%edx
f010a131:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a134:	89 10                	mov    %edx,(%eax)
		return 0;
f010a136:	b8 00 00 00 00       	mov    $0x0,%eax
f010a13b:	e9 9e 00 00 00       	jmp    f010a1de <envid2env+0xc0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010a140:	8b 1d f0 ed 85 f0    	mov    0xf085edf0,%ebx
f010a146:	83 ec 0c             	sub    $0xc,%esp
f010a149:	68 b1 02 00 00       	push   $0x2b1
f010a14e:	e8 24 66 02 00       	call   f0130777 <nearest_pow2_ceil>
f010a153:	83 c4 10             	add    $0x10,%esp
f010a156:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a159:	8b 45 08             	mov    0x8(%ebp),%eax
f010a15c:	21 c2                	and    %eax,%edx
f010a15e:	89 d0                	mov    %edx,%eax
f010a160:	c1 e0 03             	shl    $0x3,%eax
f010a163:	01 d0                	add    %edx,%eax
f010a165:	01 c0                	add    %eax,%eax
f010a167:	01 d0                	add    %edx,%eax
f010a169:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a170:	01 d0                	add    %edx,%eax
f010a172:	c1 e0 04             	shl    $0x4,%eax
f010a175:	01 d8                	add    %ebx,%eax
f010a177:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a17a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a17d:	8b 40 54             	mov    0x54(%eax),%eax
f010a180:	85 c0                	test   %eax,%eax
f010a182:	74 0b                	je     f010a18f <envid2env+0x71>
f010a184:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a187:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a18a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a18d:	74 10                	je     f010a19f <envid2env+0x81>
		*env_store = 0;
f010a18f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a192:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a198:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a19d:	eb 3f                	jmp    f010a1de <envid2env+0xc0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f010a19f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a1a3:	74 2c                	je     f010a1d1 <envid2env+0xb3>
f010a1a5:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010a1aa:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a1ad:	74 22                	je     f010a1d1 <envid2env+0xb3>
f010a1af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1b2:	8b 50 50             	mov    0x50(%eax),%edx
f010a1b5:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010a1ba:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a1bd:	39 c2                	cmp    %eax,%edx
f010a1bf:	74 10                	je     f010a1d1 <envid2env+0xb3>
		*env_store = 0;
f010a1c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a1c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a1ca:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a1cf:	eb 0d                	jmp    f010a1de <envid2env+0xc0>
	}

	*env_store = e;
f010a1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a1d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a1d7:	89 10                	mov    %edx,(%eax)
	return 0;
f010a1d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a1de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a1e1:	c9                   	leave  
f010a1e2:	c3                   	ret    

f010a1e3 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f010a1e3:	55                   	push   %ebp
f010a1e4:	89 e5                	mov    %esp,%ebp
f010a1e6:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f010a1e9:	8b 65 08             	mov    0x8(%ebp),%esp
f010a1ec:	61                   	popa   
f010a1ed:	07                   	pop    %es
f010a1ee:	1f                   	pop    %ds
f010a1ef:	83 c4 08             	add    $0x8,%esp
f010a1f2:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f010a1f3:	83 ec 04             	sub    $0x4,%esp
f010a1f6:	68 c3 69 13 f0       	push   $0xf01369c3
f010a1fb:	68 fd 01 00 00       	push   $0x1fd
f010a200:	68 3d 69 13 f0       	push   $0xf013693d
f010a205:	e8 fb 5f ff ff       	call   f0100205 <_panic>

f010a20a <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010a20a:	55                   	push   %ebp
f010a20b:	89 e5                	mov    %esp,%ebp
f010a20d:	53                   	push   %ebx
f010a20e:	83 ec 14             	sub    $0x14,%esp
	int iEnv = NENV-1;
f010a211:	c7 45 f4 b0 02 00 00 	movl   $0x2b0,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f010a218:	e9 73 01 00 00       	jmp    f010a390 <env_init+0x186>
	{
		envs[iEnv].env_status = ENV_FREE;
f010a21d:	8b 0d f0 ed 85 f0    	mov    0xf085edf0,%ecx
f010a223:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a226:	89 d0                	mov    %edx,%eax
f010a228:	c1 e0 03             	shl    $0x3,%eax
f010a22b:	01 d0                	add    %edx,%eax
f010a22d:	01 c0                	add    %eax,%eax
f010a22f:	01 d0                	add    %edx,%eax
f010a231:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a238:	01 d0                	add    %edx,%eax
f010a23a:	c1 e0 04             	shl    $0x4,%eax
f010a23d:	01 c8                	add    %ecx,%eax
f010a23f:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010a246:	8b 0d f0 ed 85 f0    	mov    0xf085edf0,%ecx
f010a24c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a24f:	89 d0                	mov    %edx,%eax
f010a251:	c1 e0 03             	shl    $0x3,%eax
f010a254:	01 d0                	add    %edx,%eax
f010a256:	01 c0                	add    %eax,%eax
f010a258:	01 d0                	add    %edx,%eax
f010a25a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a261:	01 d0                	add    %edx,%eax
f010a263:	c1 e0 04             	shl    $0x4,%eax
f010a266:	01 c8                	add    %ecx,%eax
f010a268:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f010a26f:	8b 0d f0 ed 85 f0    	mov    0xf085edf0,%ecx
f010a275:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a278:	89 d0                	mov    %edx,%eax
f010a27a:	c1 e0 03             	shl    $0x3,%eax
f010a27d:	01 d0                	add    %edx,%eax
f010a27f:	01 c0                	add    %eax,%eax
f010a281:	01 d0                	add    %edx,%eax
f010a283:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a28a:	01 d0                	add    %edx,%eax
f010a28c:	c1 e0 04             	shl    $0x4,%eax
f010a28f:	01 c8                	add    %ecx,%eax
f010a291:	85 c0                	test   %eax,%eax
f010a293:	75 17                	jne    f010a2ac <env_init+0xa2>
f010a295:	83 ec 04             	sub    $0x4,%esp
f010a298:	68 78 69 13 f0       	push   $0xf0136978
f010a29d:	68 19 02 00 00       	push   $0x219
f010a2a2:	68 3d 69 13 f0       	push   $0xf013693d
f010a2a7:	e8 59 5f ff ff       	call   f0100205 <_panic>
f010a2ac:	8b 0d f0 ed 85 f0    	mov    0xf085edf0,%ecx
f010a2b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2b5:	89 d0                	mov    %edx,%eax
f010a2b7:	c1 e0 03             	shl    $0x3,%eax
f010a2ba:	01 d0                	add    %edx,%eax
f010a2bc:	01 c0                	add    %eax,%eax
f010a2be:	01 d0                	add    %edx,%eax
f010a2c0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a2c7:	01 d0                	add    %edx,%eax
f010a2c9:	c1 e0 04             	shl    $0x4,%eax
f010a2cc:	01 c8                	add    %ecx,%eax
f010a2ce:	8b 15 f8 ed 85 f0    	mov    0xf085edf8,%edx
f010a2d4:	89 50 44             	mov    %edx,0x44(%eax)
f010a2d7:	8b 40 44             	mov    0x44(%eax),%eax
f010a2da:	85 c0                	test   %eax,%eax
f010a2dc:	74 2d                	je     f010a30b <env_init+0x101>
f010a2de:	8b 0d f8 ed 85 f0    	mov    0xf085edf8,%ecx
f010a2e4:	8b 1d f0 ed 85 f0    	mov    0xf085edf0,%ebx
f010a2ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2ed:	89 d0                	mov    %edx,%eax
f010a2ef:	c1 e0 03             	shl    $0x3,%eax
f010a2f2:	01 d0                	add    %edx,%eax
f010a2f4:	01 c0                	add    %eax,%eax
f010a2f6:	01 d0                	add    %edx,%eax
f010a2f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a2ff:	01 d0                	add    %edx,%eax
f010a301:	c1 e0 04             	shl    $0x4,%eax
f010a304:	01 d8                	add    %ebx,%eax
f010a306:	89 41 48             	mov    %eax,0x48(%ecx)
f010a309:	eb 27                	jmp    f010a332 <env_init+0x128>
f010a30b:	8b 0d f0 ed 85 f0    	mov    0xf085edf0,%ecx
f010a311:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a314:	89 d0                	mov    %edx,%eax
f010a316:	c1 e0 03             	shl    $0x3,%eax
f010a319:	01 d0                	add    %edx,%eax
f010a31b:	01 c0                	add    %eax,%eax
f010a31d:	01 d0                	add    %edx,%eax
f010a31f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a326:	01 d0                	add    %edx,%eax
f010a328:	c1 e0 04             	shl    $0x4,%eax
f010a32b:	01 c8                	add    %ecx,%eax
f010a32d:	a3 fc ed 85 f0       	mov    %eax,0xf085edfc
f010a332:	8b 0d f0 ed 85 f0    	mov    0xf085edf0,%ecx
f010a338:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a33b:	89 d0                	mov    %edx,%eax
f010a33d:	c1 e0 03             	shl    $0x3,%eax
f010a340:	01 d0                	add    %edx,%eax
f010a342:	01 c0                	add    %eax,%eax
f010a344:	01 d0                	add    %edx,%eax
f010a346:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a34d:	01 d0                	add    %edx,%eax
f010a34f:	c1 e0 04             	shl    $0x4,%eax
f010a352:	01 c8                	add    %ecx,%eax
f010a354:	a3 f8 ed 85 f0       	mov    %eax,0xf085edf8
f010a359:	8b 0d f0 ed 85 f0    	mov    0xf085edf0,%ecx
f010a35f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a362:	89 d0                	mov    %edx,%eax
f010a364:	c1 e0 03             	shl    $0x3,%eax
f010a367:	01 d0                	add    %edx,%eax
f010a369:	01 c0                	add    %eax,%eax
f010a36b:	01 d0                	add    %edx,%eax
f010a36d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a374:	01 d0                	add    %edx,%eax
f010a376:	c1 e0 04             	shl    $0x4,%eax
f010a379:	01 c8                	add    %ecx,%eax
f010a37b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a382:	a1 04 ee 85 f0       	mov    0xf085ee04,%eax
f010a387:	40                   	inc    %eax
f010a388:	a3 04 ee 85 f0       	mov    %eax,0xf085ee04
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f010a38d:	ff 4d f4             	decl   -0xc(%ebp)
f010a390:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a394:	0f 89 83 fe ff ff    	jns    f010a21d <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f010a39a:	90                   	nop
f010a39b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a39e:	c9                   	leave  
f010a39f:	c3                   	ret    

f010a3a0 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010a3a0:	55                   	push   %ebp
f010a3a1:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010a3a3:	8b 15 f8 ed 85 f0    	mov    0xf085edf8,%edx
f010a3a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ac:	89 10                	mov    %edx,(%eax)
f010a3ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3b1:	8b 00                	mov    (%eax),%eax
f010a3b3:	85 c0                	test   %eax,%eax
f010a3b5:	75 07                	jne    f010a3be <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010a3b7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010a3bc:	eb 11                	jmp    f010a3cf <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010a3be:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3c1:	8b 00                	mov    (%eax),%eax
f010a3c3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f010a3ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a3cf:	5d                   	pop    %ebp
f010a3d0:	c3                   	ret    

f010a3d1 <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010a3d1:	55                   	push   %ebp
f010a3d2:	89 e5                	mov    %esp,%ebp
f010a3d4:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010a3d7:	83 ec 04             	sub    $0x4,%esp
f010a3da:	68 f0 05 00 00       	push   $0x5f0
f010a3df:	6a 00                	push   $0x0
f010a3e1:	ff 75 08             	pushl  0x8(%ebp)
f010a3e4:	e8 0a 78 02 00       	call   f0131bf3 <memset>
f010a3e9:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010a3ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010a3ef:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010a3f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a3fa:	75 17                	jne    f010a413 <free_environment+0x42>
f010a3fc:	83 ec 04             	sub    $0x4,%esp
f010a3ff:	68 78 69 13 f0       	push   $0xf0136978
f010a404:	68 36 02 00 00       	push   $0x236
f010a409:	68 3d 69 13 f0       	push   $0xf013693d
f010a40e:	e8 f2 5d ff ff       	call   f0100205 <_panic>
f010a413:	8b 15 f8 ed 85 f0    	mov    0xf085edf8,%edx
f010a419:	8b 45 08             	mov    0x8(%ebp),%eax
f010a41c:	89 50 44             	mov    %edx,0x44(%eax)
f010a41f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a422:	8b 40 44             	mov    0x44(%eax),%eax
f010a425:	85 c0                	test   %eax,%eax
f010a427:	74 0d                	je     f010a436 <free_environment+0x65>
f010a429:	a1 f8 ed 85 f0       	mov    0xf085edf8,%eax
f010a42e:	8b 55 08             	mov    0x8(%ebp),%edx
f010a431:	89 50 48             	mov    %edx,0x48(%eax)
f010a434:	eb 08                	jmp    f010a43e <free_environment+0x6d>
f010a436:	8b 45 08             	mov    0x8(%ebp),%eax
f010a439:	a3 fc ed 85 f0       	mov    %eax,0xf085edfc
f010a43e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a441:	a3 f8 ed 85 f0       	mov    %eax,0xf085edf8
f010a446:	8b 45 08             	mov    0x8(%ebp),%eax
f010a449:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a450:	a1 04 ee 85 f0       	mov    0xf085ee04,%eax
f010a455:	40                   	inc    %eax
f010a456:	a3 04 ee 85 f0       	mov    %eax,0xf085ee04
}
f010a45b:	90                   	nop
f010a45c:	c9                   	leave  
f010a45d:	c3                   	ret    

f010a45e <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f010a45e:	55                   	push   %ebp
f010a45f:	89 e5                	mov    %esp,%ebp
f010a461:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	//panic("create_user_page_WS() is not implemented yet...!!");
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f010a464:	8b 55 0c             	mov    0xc(%ebp),%edx
f010a467:	89 d0                	mov    %edx,%eax
f010a469:	01 c0                	add    %eax,%eax
f010a46b:	01 d0                	add    %edx,%eax
f010a46d:	c1 e0 03             	shl    $0x3,%eax
f010a470:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct WorkingSetElement* ptr_page_WS = kmalloc(nBytes);
f010a473:	83 ec 0c             	sub    $0xc,%esp
f010a476:	ff 75 f4             	pushl  -0xc(%ebp)
f010a479:	e8 e6 d6 ff ff       	call   f0107b64 <kmalloc>
f010a47e:	83 c4 10             	add    $0x10,%esp
f010a481:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(ptr_page_WS == NULL)
f010a484:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a488:	75 17                	jne    f010a4a1 <create_user_page_WS+0x43>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a48a:	83 ec 04             	sub    $0x4,%esp
f010a48d:	68 cf 69 13 f0       	push   $0xf01369cf
f010a492:	68 44 02 00 00       	push   $0x244
f010a497:	68 3d 69 13 f0       	push   $0xf013693d
f010a49c:	e8 64 5d ff ff       	call   f0100205 <_panic>
	return ptr_page_WS;
f010a4a1:	8b 45 f0             	mov    -0x10(%ebp),%eax

	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
}
f010a4a4:	c9                   	leave  
f010a4a5:	c3                   	ret    

f010a4a6 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010a4a6:	55                   	push   %ebp
f010a4a7:	89 e5                	mov    %esp,%ebp
f010a4a9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [PROGRAM LOAD] create_user_directory()
	// Write your code here, remove the panic and write your code
	//panic("create_user_directory() is not implemented yet...!!");
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010a4ac:	83 ec 0c             	sub    $0xc,%esp
f010a4af:	68 00 10 00 00       	push   $0x1000
f010a4b4:	e8 ab d6 ff ff       	call   f0107b64 <kmalloc>
f010a4b9:	83 c4 10             	add    $0x10,%esp
f010a4bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010a4bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a4c3:	75 17                	jne    f010a4dc <create_user_directory+0x36>
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010a4c5:	83 ec 04             	sub    $0x4,%esp
f010a4c8:	68 cf 69 13 f0       	push   $0xf01369cf
f010a4cd:	68 54 02 00 00       	push   $0x254
f010a4d2:	68 3d 69 13 f0       	push   $0xf013693d
f010a4d7:	e8 29 5d ff ff       	call   f0100205 <_panic>
	return ptr_user_page_directory;
f010a4dc:	8b 45 f4             	mov    -0xc(%ebp),%eax

	//Use kmalloc() to allocate a new directory
}
f010a4df:	c9                   	leave  
f010a4e0:	c3                   	ret    

f010a4e1 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010a4e1:	55                   	push   %ebp
f010a4e2:	89 e5                	mov    %esp,%ebp
f010a4e4:	53                   	push   %ebx
f010a4e5:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010a4e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4eb:	8b 40 0c             	mov    0xc(%eax),%eax
f010a4ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010a4f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a4f4:	8b 40 08             	mov    0x8(%eax),%eax
f010a4f7:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010a4fa:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010a501:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010a504:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a507:	01 c2                	add    %eax,%edx
f010a509:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a50c:	01 d0                	add    %edx,%eax
f010a50e:	48                   	dec    %eax
f010a50f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a512:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a515:	ba 00 00 00 00       	mov    $0x0,%edx
f010a51a:	f7 75 dc             	divl   -0x24(%ebp)
f010a51d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a520:	29 d0                	sub    %edx,%eax
f010a522:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010a525:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a528:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010a52b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010a52e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010a533:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010a536:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010a53d:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010a544:	8b 45 10             	mov    0x10(%ebp),%eax
f010a547:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010a54d:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010a554:	0f 85 c8 05 00 00    	jne    f010ab22 <program_segment_alloc_map_copy_workingset+0x641>
f010a55a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a55d:	05 5c 05 00 00       	add    $0x55c,%eax
f010a562:	83 ec 08             	sub    $0x8,%esp
f010a565:	68 ec 69 13 f0       	push   $0xf01369ec
f010a56a:	50                   	push   %eax
f010a56b:	e8 a1 75 02 00       	call   f0131b11 <strcmp>
f010a570:	83 c4 10             	add    $0x10,%esp
f010a573:	85 c0                	test   %eax,%eax
f010a575:	0f 84 a7 05 00 00    	je     f010ab22 <program_segment_alloc_map_copy_workingset+0x641>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010a57b:	8b 45 14             	mov    0x14(%ebp),%eax
f010a57e:	83 f8 06             	cmp    $0x6,%eax
f010a581:	76 05                	jbe    f010a588 <program_segment_alloc_map_copy_workingset+0xa7>
f010a583:	b8 06 00 00 00       	mov    $0x6,%eax
f010a588:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010a58b:	e9 92 05 00 00       	jmp    f010ab22 <program_segment_alloc_map_copy_workingset+0x641>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010a590:	83 ec 0c             	sub    $0xc,%esp
f010a593:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010a596:	50                   	push   %eax
f010a597:	e8 3d c3 ff ff       	call   f01068d9 <allocate_frame>
f010a59c:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010a59f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010a5a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5a5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a5a8:	6a 06                	push   $0x6
f010a5aa:	ff 75 f4             	pushl  -0xc(%ebp)
f010a5ad:	52                   	push   %edx
f010a5ae:	50                   	push   %eax
f010a5af:	e8 30 c9 ff ff       	call   f0106ee4 <loadtime_map_frame>
f010a5b4:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010a5b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5ba:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5c0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5c6:	89 d0                	mov    %edx,%eax
f010a5c8:	01 c0                	add    %eax,%eax
f010a5ca:	01 d0                	add    %edx,%eax
f010a5cc:	c1 e0 03             	shl    $0x3,%eax
f010a5cf:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a5d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a5d5:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010a5d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5da:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5e0:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a5e6:	89 d0                	mov    %edx,%eax
f010a5e8:	01 c0                	add    %eax,%eax
f010a5ea:	01 d0                	add    %edx,%eax
f010a5ec:	c1 e0 03             	shl    $0x3,%eax
f010a5ef:	01 c8                	add    %ecx,%eax
f010a5f1:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010a5f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5f8:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5fb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a5fe:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a604:	89 d0                	mov    %edx,%eax
f010a606:	01 c0                	add    %eax,%eax
f010a608:	01 d0                	add    %edx,%eax
f010a60a:	c1 e0 03             	shl    $0x3,%eax
f010a60d:	01 c8                	add    %ecx,%eax
f010a60f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a616:	83 ec 0c             	sub    $0xc,%esp
f010a619:	6a 02                	push   $0x2
f010a61b:	e8 37 3d 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f010a620:	83 c4 10             	add    $0x10,%esp
f010a623:	85 c0                	test   %eax,%eax
f010a625:	0f 84 c8 03 00 00    	je     f010a9f3 <program_segment_alloc_map_copy_workingset+0x512>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a62b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a62e:	8b 48 78             	mov    0x78(%eax),%ecx
f010a631:	8b 45 08             	mov    0x8(%ebp),%eax
f010a634:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a63a:	89 d0                	mov    %edx,%eax
f010a63c:	01 c0                	add    %eax,%eax
f010a63e:	01 d0                	add    %edx,%eax
f010a640:	c1 e0 03             	shl    $0x3,%eax
f010a643:	01 c8                	add    %ecx,%eax
f010a645:	85 c0                	test   %eax,%eax
f010a647:	75 17                	jne    f010a660 <program_segment_alloc_map_copy_workingset+0x17f>
f010a649:	83 ec 04             	sub    $0x4,%esp
f010a64c:	68 5a 69 13 f0       	push   $0xf013695a
f010a651:	68 87 02 00 00       	push   $0x287
f010a656:	68 3d 69 13 f0       	push   $0xf013693d
f010a65b:	e8 a5 5b ff ff       	call   f0100205 <_panic>
f010a660:	8b 45 08             	mov    0x8(%ebp),%eax
f010a663:	8b 48 78             	mov    0x78(%eax),%ecx
f010a666:	8b 45 08             	mov    0x8(%ebp),%eax
f010a669:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a66f:	89 d0                	mov    %edx,%eax
f010a671:	01 c0                	add    %eax,%eax
f010a673:	01 d0                	add    %edx,%eax
f010a675:	c1 e0 03             	shl    $0x3,%eax
f010a678:	01 c8                	add    %ecx,%eax
f010a67a:	8b 40 10             	mov    0x10(%eax),%eax
f010a67d:	85 c0                	test   %eax,%eax
f010a67f:	74 3f                	je     f010a6c0 <program_segment_alloc_map_copy_workingset+0x1df>
f010a681:	8b 45 08             	mov    0x8(%ebp),%eax
f010a684:	8b 48 78             	mov    0x78(%eax),%ecx
f010a687:	8b 45 08             	mov    0x8(%ebp),%eax
f010a68a:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a690:	89 d0                	mov    %edx,%eax
f010a692:	01 c0                	add    %eax,%eax
f010a694:	01 d0                	add    %edx,%eax
f010a696:	c1 e0 03             	shl    $0x3,%eax
f010a699:	01 c8                	add    %ecx,%eax
f010a69b:	8b 50 10             	mov    0x10(%eax),%edx
f010a69e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a1:	8b 58 78             	mov    0x78(%eax),%ebx
f010a6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6a7:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a6ad:	89 c8                	mov    %ecx,%eax
f010a6af:	01 c0                	add    %eax,%eax
f010a6b1:	01 c8                	add    %ecx,%eax
f010a6b3:	c1 e0 03             	shl    $0x3,%eax
f010a6b6:	01 d8                	add    %ebx,%eax
f010a6b8:	8b 40 14             	mov    0x14(%eax),%eax
f010a6bb:	89 42 14             	mov    %eax,0x14(%edx)
f010a6be:	eb 26                	jmp    f010a6e6 <program_segment_alloc_map_copy_workingset+0x205>
f010a6c0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6c6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6c9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6cf:	89 d0                	mov    %edx,%eax
f010a6d1:	01 c0                	add    %eax,%eax
f010a6d3:	01 d0                	add    %edx,%eax
f010a6d5:	c1 e0 03             	shl    $0x3,%eax
f010a6d8:	01 c8                	add    %ecx,%eax
f010a6da:	8b 50 14             	mov    0x14(%eax),%edx
f010a6dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e0:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010a6e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6e9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a6ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010a6ef:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a6f5:	89 d0                	mov    %edx,%eax
f010a6f7:	01 c0                	add    %eax,%eax
f010a6f9:	01 d0                	add    %edx,%eax
f010a6fb:	c1 e0 03             	shl    $0x3,%eax
f010a6fe:	01 c8                	add    %ecx,%eax
f010a700:	8b 40 14             	mov    0x14(%eax),%eax
f010a703:	85 c0                	test   %eax,%eax
f010a705:	74 3f                	je     f010a746 <program_segment_alloc_map_copy_workingset+0x265>
f010a707:	8b 45 08             	mov    0x8(%ebp),%eax
f010a70a:	8b 48 78             	mov    0x78(%eax),%ecx
f010a70d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a710:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a716:	89 d0                	mov    %edx,%eax
f010a718:	01 c0                	add    %eax,%eax
f010a71a:	01 d0                	add    %edx,%eax
f010a71c:	c1 e0 03             	shl    $0x3,%eax
f010a71f:	01 c8                	add    %ecx,%eax
f010a721:	8b 50 14             	mov    0x14(%eax),%edx
f010a724:	8b 45 08             	mov    0x8(%ebp),%eax
f010a727:	8b 58 78             	mov    0x78(%eax),%ebx
f010a72a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a72d:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a733:	89 c8                	mov    %ecx,%eax
f010a735:	01 c0                	add    %eax,%eax
f010a737:	01 c8                	add    %ecx,%eax
f010a739:	c1 e0 03             	shl    $0x3,%eax
f010a73c:	01 d8                	add    %ebx,%eax
f010a73e:	8b 40 10             	mov    0x10(%eax),%eax
f010a741:	89 42 10             	mov    %eax,0x10(%edx)
f010a744:	eb 26                	jmp    f010a76c <program_segment_alloc_map_copy_workingset+0x28b>
f010a746:	8b 45 08             	mov    0x8(%ebp),%eax
f010a749:	8b 48 78             	mov    0x78(%eax),%ecx
f010a74c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a74f:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a755:	89 d0                	mov    %edx,%eax
f010a757:	01 c0                	add    %eax,%eax
f010a759:	01 d0                	add    %edx,%eax
f010a75b:	c1 e0 03             	shl    $0x3,%eax
f010a75e:	01 c8                	add    %ecx,%eax
f010a760:	8b 50 10             	mov    0x10(%eax),%edx
f010a763:	8b 45 08             	mov    0x8(%ebp),%eax
f010a766:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010a76c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a76f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a772:	8b 45 08             	mov    0x8(%ebp),%eax
f010a775:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a77b:	89 d0                	mov    %edx,%eax
f010a77d:	01 c0                	add    %eax,%eax
f010a77f:	01 d0                	add    %edx,%eax
f010a781:	c1 e0 03             	shl    $0x3,%eax
f010a784:	01 c8                	add    %ecx,%eax
f010a786:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010a78d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a790:	8b 48 78             	mov    0x78(%eax),%ecx
f010a793:	8b 45 08             	mov    0x8(%ebp),%eax
f010a796:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a79c:	89 d0                	mov    %edx,%eax
f010a79e:	01 c0                	add    %eax,%eax
f010a7a0:	01 d0                	add    %edx,%eax
f010a7a2:	c1 e0 03             	shl    $0x3,%eax
f010a7a5:	01 c8                	add    %ecx,%eax
f010a7a7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a7ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b1:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010a7b7:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a7ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7bd:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010a7c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7c6:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010a7cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7cf:	8b 80 e8 05 00 00    	mov    0x5e8(%eax),%eax
f010a7d5:	48                   	dec    %eax
f010a7d6:	39 c2                	cmp    %eax,%edx
f010a7d8:	0f 83 0d 01 00 00    	jae    f010a8eb <program_segment_alloc_map_copy_workingset+0x40a>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a7de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7e1:	8b 48 78             	mov    0x78(%eax),%ecx
f010a7e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7e7:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a7ed:	89 d0                	mov    %edx,%eax
f010a7ef:	01 c0                	add    %eax,%eax
f010a7f1:	01 d0                	add    %edx,%eax
f010a7f3:	c1 e0 03             	shl    $0x3,%eax
f010a7f6:	01 c8                	add    %ecx,%eax
f010a7f8:	85 c0                	test   %eax,%eax
f010a7fa:	75 17                	jne    f010a813 <program_segment_alloc_map_copy_workingset+0x332>
f010a7fc:	83 ec 04             	sub    $0x4,%esp
f010a7ff:	68 78 69 13 f0       	push   $0xf0136978
f010a804:	68 8b 02 00 00       	push   $0x28b
f010a809:	68 3d 69 13 f0       	push   $0xf013693d
f010a80e:	e8 f2 59 ff ff       	call   f0100205 <_panic>
f010a813:	8b 45 08             	mov    0x8(%ebp),%eax
f010a816:	8b 48 78             	mov    0x78(%eax),%ecx
f010a819:	8b 45 08             	mov    0x8(%ebp),%eax
f010a81c:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a822:	89 d0                	mov    %edx,%eax
f010a824:	01 c0                	add    %eax,%eax
f010a826:	01 d0                	add    %edx,%eax
f010a828:	c1 e0 03             	shl    $0x3,%eax
f010a82b:	01 c8                	add    %ecx,%eax
f010a82d:	8b 55 08             	mov    0x8(%ebp),%edx
f010a830:	8b 92 c8 05 00 00    	mov    0x5c8(%edx),%edx
f010a836:	89 50 10             	mov    %edx,0x10(%eax)
f010a839:	8b 40 10             	mov    0x10(%eax),%eax
f010a83c:	85 c0                	test   %eax,%eax
f010a83e:	74 28                	je     f010a868 <program_segment_alloc_map_copy_workingset+0x387>
f010a840:	8b 45 08             	mov    0x8(%ebp),%eax
f010a843:	8b 90 c8 05 00 00    	mov    0x5c8(%eax),%edx
f010a849:	8b 45 08             	mov    0x8(%ebp),%eax
f010a84c:	8b 58 78             	mov    0x78(%eax),%ebx
f010a84f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a852:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a858:	89 c8                	mov    %ecx,%eax
f010a85a:	01 c0                	add    %eax,%eax
f010a85c:	01 c8                	add    %ecx,%eax
f010a85e:	c1 e0 03             	shl    $0x3,%eax
f010a861:	01 d8                	add    %ebx,%eax
f010a863:	89 42 14             	mov    %eax,0x14(%edx)
f010a866:	eb 24                	jmp    f010a88c <program_segment_alloc_map_copy_workingset+0x3ab>
f010a868:	8b 45 08             	mov    0x8(%ebp),%eax
f010a86b:	8b 48 78             	mov    0x78(%eax),%ecx
f010a86e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a871:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a877:	89 d0                	mov    %edx,%eax
f010a879:	01 c0                	add    %eax,%eax
f010a87b:	01 d0                	add    %edx,%eax
f010a87d:	c1 e0 03             	shl    $0x3,%eax
f010a880:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a883:	8b 45 08             	mov    0x8(%ebp),%eax
f010a886:	89 90 cc 05 00 00    	mov    %edx,0x5cc(%eax)
f010a88c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a88f:	8b 48 78             	mov    0x78(%eax),%ecx
f010a892:	8b 45 08             	mov    0x8(%ebp),%eax
f010a895:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a89b:	89 d0                	mov    %edx,%eax
f010a89d:	01 c0                	add    %eax,%eax
f010a89f:	01 d0                	add    %edx,%eax
f010a8a1:	c1 e0 03             	shl    $0x3,%eax
f010a8a4:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a8a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8aa:	89 90 c8 05 00 00    	mov    %edx,0x5c8(%eax)
f010a8b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b3:	8b 48 78             	mov    0x78(%eax),%ecx
f010a8b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8b9:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a8bf:	89 d0                	mov    %edx,%eax
f010a8c1:	01 c0                	add    %eax,%eax
f010a8c3:	01 d0                	add    %edx,%eax
f010a8c5:	c1 e0 03             	shl    $0x3,%eax
f010a8c8:	01 c8                	add    %ecx,%eax
f010a8ca:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a8d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8d4:	8b 80 d4 05 00 00    	mov    0x5d4(%eax),%eax
f010a8da:	8d 50 01             	lea    0x1(%eax),%edx
f010a8dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8e0:	89 90 d4 05 00 00    	mov    %edx,0x5d4(%eax)
f010a8e6:	e9 08 01 00 00       	jmp    f010a9f3 <program_segment_alloc_map_copy_workingset+0x512>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010a8eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8ee:	8b 48 78             	mov    0x78(%eax),%ecx
f010a8f1:	8b 45 08             	mov    0x8(%ebp),%eax
f010a8f4:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a8fa:	89 d0                	mov    %edx,%eax
f010a8fc:	01 c0                	add    %eax,%eax
f010a8fe:	01 d0                	add    %edx,%eax
f010a900:	c1 e0 03             	shl    $0x3,%eax
f010a903:	01 c8                	add    %ecx,%eax
f010a905:	85 c0                	test   %eax,%eax
f010a907:	75 17                	jne    f010a920 <program_segment_alloc_map_copy_workingset+0x43f>
f010a909:	83 ec 04             	sub    $0x4,%esp
f010a90c:	68 78 69 13 f0       	push   $0xf0136978
f010a911:	68 90 02 00 00       	push   $0x290
f010a916:	68 3d 69 13 f0       	push   $0xf013693d
f010a91b:	e8 e5 58 ff ff       	call   f0100205 <_panic>
f010a920:	8b 45 08             	mov    0x8(%ebp),%eax
f010a923:	8b 48 78             	mov    0x78(%eax),%ecx
f010a926:	8b 45 08             	mov    0x8(%ebp),%eax
f010a929:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a92f:	89 d0                	mov    %edx,%eax
f010a931:	01 c0                	add    %eax,%eax
f010a933:	01 d0                	add    %edx,%eax
f010a935:	c1 e0 03             	shl    $0x3,%eax
f010a938:	01 c8                	add    %ecx,%eax
f010a93a:	8b 55 08             	mov    0x8(%ebp),%edx
f010a93d:	8b 92 d8 05 00 00    	mov    0x5d8(%edx),%edx
f010a943:	89 50 10             	mov    %edx,0x10(%eax)
f010a946:	8b 40 10             	mov    0x10(%eax),%eax
f010a949:	85 c0                	test   %eax,%eax
f010a94b:	74 28                	je     f010a975 <program_segment_alloc_map_copy_workingset+0x494>
f010a94d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a950:	8b 90 d8 05 00 00    	mov    0x5d8(%eax),%edx
f010a956:	8b 45 08             	mov    0x8(%ebp),%eax
f010a959:	8b 58 78             	mov    0x78(%eax),%ebx
f010a95c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a95f:	8b 88 2c 05 00 00    	mov    0x52c(%eax),%ecx
f010a965:	89 c8                	mov    %ecx,%eax
f010a967:	01 c0                	add    %eax,%eax
f010a969:	01 c8                	add    %ecx,%eax
f010a96b:	c1 e0 03             	shl    $0x3,%eax
f010a96e:	01 d8                	add    %ebx,%eax
f010a970:	89 42 14             	mov    %eax,0x14(%edx)
f010a973:	eb 24                	jmp    f010a999 <program_segment_alloc_map_copy_workingset+0x4b8>
f010a975:	8b 45 08             	mov    0x8(%ebp),%eax
f010a978:	8b 48 78             	mov    0x78(%eax),%ecx
f010a97b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a97e:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a984:	89 d0                	mov    %edx,%eax
f010a986:	01 c0                	add    %eax,%eax
f010a988:	01 d0                	add    %edx,%eax
f010a98a:	c1 e0 03             	shl    $0x3,%eax
f010a98d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a990:	8b 45 08             	mov    0x8(%ebp),%eax
f010a993:	89 90 dc 05 00 00    	mov    %edx,0x5dc(%eax)
f010a999:	8b 45 08             	mov    0x8(%ebp),%eax
f010a99c:	8b 48 78             	mov    0x78(%eax),%ecx
f010a99f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9a2:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a9a8:	89 d0                	mov    %edx,%eax
f010a9aa:	01 c0                	add    %eax,%eax
f010a9ac:	01 d0                	add    %edx,%eax
f010a9ae:	c1 e0 03             	shl    $0x3,%eax
f010a9b1:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010a9b4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9b7:	89 90 d8 05 00 00    	mov    %edx,0x5d8(%eax)
f010a9bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c0:	8b 48 78             	mov    0x78(%eax),%ecx
f010a9c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9c6:	8b 90 2c 05 00 00    	mov    0x52c(%eax),%edx
f010a9cc:	89 d0                	mov    %edx,%eax
f010a9ce:	01 c0                	add    %eax,%eax
f010a9d0:	01 d0                	add    %edx,%eax
f010a9d2:	c1 e0 03             	shl    $0x3,%eax
f010a9d5:	01 c8                	add    %ecx,%eax
f010a9d7:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010a9de:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9e1:	8b 80 e4 05 00 00    	mov    0x5e4(%eax),%eax
f010a9e7:	8d 50 01             	lea    0x1(%eax),%edx
f010a9ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9ed:	89 90 e4 05 00 00    	mov    %edx,0x5e4(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f010a9f3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a9f6:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010a9fc:	8d 50 01             	lea    0x1(%eax),%edx
f010a9ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa02:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010aa08:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa0b:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010aa11:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa14:	8b 4a 74             	mov    0x74(%edx),%ecx
f010aa17:	ba 00 00 00 00       	mov    $0x0,%edx
f010aa1c:	f7 f1                	div    %ecx
f010aa1e:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa21:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010aa27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa2a:	c1 e8 16             	shr    $0x16,%eax
f010aa2d:	89 c2                	mov    %eax,%edx
f010aa2f:	8b 45 18             	mov    0x18(%ebp),%eax
f010aa32:	8b 00                	mov    (%eax),%eax
f010aa34:	39 c2                	cmp    %eax,%edx
f010aa36:	0f 84 cf 00 00 00    	je     f010ab0b <program_segment_alloc_map_copy_workingset+0x62a>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010aa3c:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa3f:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa48:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010aa4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010aa4e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010aa53:	89 c1                	mov    %eax,%ecx
f010aa55:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010aa58:	89 d0                	mov    %edx,%eax
f010aa5a:	01 c0                	add    %eax,%eax
f010aa5c:	01 d0                	add    %edx,%eax
f010aa5e:	c1 e0 03             	shl    $0x3,%eax
f010aa61:	01 d8                	add    %ebx,%eax
f010aa63:	83 c0 7c             	add    $0x7c,%eax
f010aa66:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010aa68:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa6b:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa71:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa74:	89 d0                	mov    %edx,%eax
f010aa76:	01 c0                	add    %eax,%eax
f010aa78:	01 d0                	add    %edx,%eax
f010aa7a:	c1 e0 03             	shl    $0x3,%eax
f010aa7d:	01 c8                	add    %ecx,%eax
f010aa7f:	83 e8 80             	sub    $0xffffff80,%eax
f010aa82:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010aa85:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa88:	8b 90 30 05 00 00    	mov    0x530(%eax),%edx
f010aa8e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aa91:	89 d0                	mov    %edx,%eax
f010aa93:	01 c0                	add    %eax,%eax
f010aa95:	01 d0                	add    %edx,%eax
f010aa97:	c1 e0 03             	shl    $0x3,%eax
f010aa9a:	01 c8                	add    %ecx,%eax
f010aa9c:	05 84 00 00 00       	add    $0x84,%eax
f010aaa1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010aaa7:	8b 45 08             	mov    0x8(%ebp),%eax
f010aaaa:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aab0:	8d 50 01             	lea    0x1(%eax),%edx
f010aab3:	8b 45 08             	mov    0x8(%ebp),%eax
f010aab6:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010aabc:	8b 45 08             	mov    0x8(%ebp),%eax
f010aabf:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aac5:	b9 32 00 00 00       	mov    $0x32,%ecx
f010aaca:	ba 00 00 00 00       	mov    $0x0,%edx
f010aacf:	f7 f1                	div    %ecx
f010aad1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aad4:	89 90 30 05 00 00    	mov    %edx,0x530(%eax)
			if (e->table_last_WS_index == 0)
f010aada:	8b 45 08             	mov    0x8(%ebp),%eax
f010aadd:	8b 80 30 05 00 00    	mov    0x530(%eax),%eax
f010aae3:	85 c0                	test   %eax,%eax
f010aae5:	75 17                	jne    f010aafe <program_segment_alloc_map_copy_workingset+0x61d>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010aae7:	83 ec 04             	sub    $0x4,%esp
f010aaea:	68 f0 69 13 f0       	push   $0xf01369f0
f010aaef:	68 a0 02 00 00       	push   $0x2a0
f010aaf4:	68 3d 69 13 f0       	push   $0xf013693d
f010aaf9:	e8 07 57 ff ff       	call   f0100205 <_panic>
			(*lastTableNumber) = PDX(iVA);
f010aafe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab01:	c1 e8 16             	shr    $0x16,%eax
f010ab04:	89 c2                	mov    %eax,%edx
f010ab06:	8b 45 18             	mov    0x18(%ebp),%eax
f010ab09:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010ab0b:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab0e:	8b 00                	mov    (%eax),%eax
f010ab10:	8d 50 01             	lea    0x1(%eax),%edx
f010ab13:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab16:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010ab18:	ff 45 f0             	incl   -0x10(%ebp)
f010ab1b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010ab22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab25:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ab28:	73 0c                	jae    f010ab36 <program_segment_alloc_map_copy_workingset+0x655>
f010ab2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ab2d:	3b 45 14             	cmp    0x14(%ebp),%eax
f010ab30:	0f 82 5a fa ff ff    	jb     f010a590 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010ab36:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab39:	8b 00                	mov    (%eax),%eax
f010ab3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010ab3e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab41:	8b 40 0c             	mov    0xc(%eax),%eax
f010ab44:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab47:	eb 10                	jmp    f010ab59 <program_segment_alloc_map_copy_workingset+0x678>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010ab49:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ab4c:	8a 10                	mov    (%eax),%dl
f010ab4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab51:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010ab53:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010ab56:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab5c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010ab5f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ab62:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ab67:	89 c2                	mov    %eax,%edx
f010ab69:	8b 45 10             	mov    0x10(%ebp),%eax
f010ab6c:	8b 00                	mov    (%eax),%eax
f010ab6e:	c1 e0 0c             	shl    $0xc,%eax
f010ab71:	01 c2                	add    %eax,%edx
f010ab73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab76:	39 c2                	cmp    %eax,%edx
f010ab78:	76 1d                	jbe    f010ab97 <program_segment_alloc_map_copy_workingset+0x6b6>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010ab7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ab7d:	8b 50 04             	mov    0x4(%eax),%edx
f010ab80:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab83:	01 c2                	add    %eax,%edx
f010ab85:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010ab88:	39 c2                	cmp    %eax,%edx
f010ab8a:	77 bd                	ja     f010ab49 <program_segment_alloc_map_copy_workingset+0x668>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010ab8c:	eb 09                	jmp    f010ab97 <program_segment_alloc_map_copy_workingset+0x6b6>
	{
		*dst_ptr = 0;
f010ab8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ab91:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010ab94:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010ab97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ab9a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010ab9d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010aba0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010aba5:	89 c2                	mov    %eax,%edx
f010aba7:	8b 45 10             	mov    0x10(%ebp),%eax
f010abaa:	8b 00                	mov    (%eax),%eax
f010abac:	c1 e0 0c             	shl    $0xc,%eax
f010abaf:	01 c2                	add    %eax,%edx
f010abb1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010abb4:	39 c2                	cmp    %eax,%edx
f010abb6:	77 d6                	ja     f010ab8e <program_segment_alloc_map_copy_workingset+0x6ad>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f010abb8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010abbd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010abc0:	c9                   	leave  
f010abc1:	c3                   	ret    

f010abc2 <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010abc2:	55                   	push   %ebp
f010abc3:	89 e5                	mov    %esp,%ebp
f010abc5:	53                   	push   %ebx
f010abc6:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010abc9:	8b 45 08             	mov    0x8(%ebp),%eax
f010abcc:	8b 55 0c             	mov    0xc(%ebp),%edx
f010abcf:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f010abd2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abd5:	8b 55 10             	mov    0x10(%ebp),%edx
f010abd8:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010abdb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010abe2:	eb 17                	jmp    f010abfb <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010abe4:	8b 45 08             	mov    0x8(%ebp),%eax
f010abe7:	8b 40 5c             	mov    0x5c(%eax),%eax
f010abea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010abed:	c1 e2 02             	shl    $0x2,%edx
f010abf0:	01 d0                	add    %edx,%eax
f010abf2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010abf8:	ff 45 f4             	incl   -0xc(%ebp)
f010abfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abfe:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010ac03:	76 df                	jbe    f010abe4 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010ac05:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010ac0c:	eb 22                	jmp    f010ac30 <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010ac0e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac11:	8b 40 5c             	mov    0x5c(%eax),%eax
f010ac14:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac17:	c1 e2 02             	shl    $0x2,%edx
f010ac1a:	01 c2                	add    %eax,%edx
f010ac1c:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f010ac21:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010ac24:	c1 e1 02             	shl    $0x2,%ecx
f010ac27:	01 c8                	add    %ecx,%eax
f010ac29:	8b 00                	mov    (%eax),%eax
f010ac2b:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010ac2d:	ff 45 f4             	incl   -0xc(%ebp)
f010ac30:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010ac37:	7e d5                	jle    f010ac0e <initialize_environment+0x4c>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
f010ac39:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac3c:	8b 40 74             	mov    0x74(%eax),%eax
f010ac3f:	83 ec 08             	sub    $0x8,%esp
f010ac42:	50                   	push   %eax
f010ac43:	ff 75 08             	pushl  0x8(%ebp)
f010ac46:	e8 13 f8 ff ff       	call   f010a45e <create_user_page_WS>
f010ac4b:	83 c4 10             	add    $0x10,%esp
f010ac4e:	89 c2                	mov    %eax,%edx
f010ac50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac53:	89 50 78             	mov    %edx,0x78(%eax)
		share_pws_at_user_space(e);
f010ac56:	83 ec 0c             	sub    $0xc,%esp
f010ac59:	ff 75 08             	pushl  0x8(%ebp)
f010ac5c:	e8 f3 04 00 00       	call   f010b154 <share_pws_at_user_space>
f010ac61:	83 c4 10             	add    $0x10,%esp
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010ac64:	83 ec 0c             	sub    $0xc,%esp
f010ac67:	6a 02                	push   $0x2
f010ac69:	e8 e9 36 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f010ac6e:	83 c4 10             	add    $0x10,%esp
f010ac71:	85 c0                	test   %eax,%eax
f010ac73:	0f 84 04 01 00 00    	je     f010ad7d <initialize_environment+0x1bb>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ac79:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ac80:	e9 e7 00 00 00       	jmp    f010ad6c <initialize_environment+0x1aa>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010ac85:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac88:	8b 48 78             	mov    0x78(%eax),%ecx
f010ac8b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ac8e:	89 d0                	mov    %edx,%eax
f010ac90:	01 c0                	add    %eax,%eax
f010ac92:	01 d0                	add    %edx,%eax
f010ac94:	c1 e0 03             	shl    $0x3,%eax
f010ac97:	01 c8                	add    %ecx,%eax
f010ac99:	85 c0                	test   %eax,%eax
f010ac9b:	75 17                	jne    f010acb4 <initialize_environment+0xf2>
f010ac9d:	83 ec 04             	sub    $0x4,%esp
f010aca0:	68 78 69 13 f0       	push   $0xf0136978
f010aca5:	68 fe 02 00 00       	push   $0x2fe
f010acaa:	68 3d 69 13 f0       	push   $0xf013693d
f010acaf:	e8 51 55 ff ff       	call   f0100205 <_panic>
f010acb4:	8b 45 08             	mov    0x8(%ebp),%eax
f010acb7:	8b 48 78             	mov    0x78(%eax),%ecx
f010acba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010acbd:	89 d0                	mov    %edx,%eax
f010acbf:	01 c0                	add    %eax,%eax
f010acc1:	01 d0                	add    %edx,%eax
f010acc3:	c1 e0 03             	shl    $0x3,%eax
f010acc6:	01 c8                	add    %ecx,%eax
f010acc8:	8b 55 08             	mov    0x8(%ebp),%edx
f010accb:	8b 92 b8 05 00 00    	mov    0x5b8(%edx),%edx
f010acd1:	89 50 10             	mov    %edx,0x10(%eax)
f010acd4:	8b 40 10             	mov    0x10(%eax),%eax
f010acd7:	85 c0                	test   %eax,%eax
f010acd9:	74 22                	je     f010acfd <initialize_environment+0x13b>
f010acdb:	8b 45 08             	mov    0x8(%ebp),%eax
f010acde:	8b 90 b8 05 00 00    	mov    0x5b8(%eax),%edx
f010ace4:	8b 45 08             	mov    0x8(%ebp),%eax
f010ace7:	8b 58 78             	mov    0x78(%eax),%ebx
f010acea:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010aced:	89 c8                	mov    %ecx,%eax
f010acef:	01 c0                	add    %eax,%eax
f010acf1:	01 c8                	add    %ecx,%eax
f010acf3:	c1 e0 03             	shl    $0x3,%eax
f010acf6:	01 d8                	add    %ebx,%eax
f010acf8:	89 42 14             	mov    %eax,0x14(%edx)
f010acfb:	eb 1e                	jmp    f010ad1b <initialize_environment+0x159>
f010acfd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad00:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad03:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ad06:	89 d0                	mov    %edx,%eax
f010ad08:	01 c0                	add    %eax,%eax
f010ad0a:	01 d0                	add    %edx,%eax
f010ad0c:	c1 e0 03             	shl    $0x3,%eax
f010ad0f:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ad12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad15:	89 90 bc 05 00 00    	mov    %edx,0x5bc(%eax)
f010ad1b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad1e:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad21:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ad24:	89 d0                	mov    %edx,%eax
f010ad26:	01 c0                	add    %eax,%eax
f010ad28:	01 d0                	add    %edx,%eax
f010ad2a:	c1 e0 03             	shl    $0x3,%eax
f010ad2d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ad30:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad33:	89 90 b8 05 00 00    	mov    %edx,0x5b8(%eax)
f010ad39:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad3c:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ad42:	89 d0                	mov    %edx,%eax
f010ad44:	01 c0                	add    %eax,%eax
f010ad46:	01 d0                	add    %edx,%eax
f010ad48:	c1 e0 03             	shl    $0x3,%eax
f010ad4b:	01 c8                	add    %ecx,%eax
f010ad4d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ad54:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad57:	8b 80 c4 05 00 00    	mov    0x5c4(%eax),%eax
f010ad5d:	8d 50 01             	lea    0x1(%eax),%edx
f010ad60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad63:	89 90 c4 05 00 00    	mov    %edx,0x5c4(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010ad69:	ff 45 f0             	incl   -0x10(%ebp)
f010ad6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad6f:	8b 50 74             	mov    0x74(%eax),%edx
f010ad72:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad75:	39 c2                	cmp    %eax,%edx
f010ad77:	0f 87 08 ff ff ff    	ja     f010ac85 <initialize_environment+0xc3>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010ad7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ad84:	eb 50                	jmp    f010add6 <initialize_environment+0x214>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010ad86:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad89:	8b 48 78             	mov    0x78(%eax),%ecx
f010ad8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad8f:	89 d0                	mov    %edx,%eax
f010ad91:	01 c0                	add    %eax,%eax
f010ad93:	01 d0                	add    %edx,%eax
f010ad95:	c1 e0 03             	shl    $0x3,%eax
f010ad98:	01 c8                	add    %ecx,%eax
f010ad9a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010ada0:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada3:	8b 48 78             	mov    0x78(%eax),%ecx
f010ada6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ada9:	89 d0                	mov    %edx,%eax
f010adab:	01 c0                	add    %eax,%eax
f010adad:	01 d0                	add    %edx,%eax
f010adaf:	c1 e0 03             	shl    $0x3,%eax
f010adb2:	01 c8                	add    %ecx,%eax
f010adb4:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010adb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbb:	8b 48 78             	mov    0x78(%eax),%ecx
f010adbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adc1:	89 d0                	mov    %edx,%eax
f010adc3:	01 c0                	add    %eax,%eax
f010adc5:	01 d0                	add    %edx,%eax
f010adc7:	c1 e0 03             	shl    $0x3,%eax
f010adca:	01 c8                	add    %ecx,%eax
f010adcc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010add3:	ff 45 f4             	incl   -0xc(%ebp)
f010add6:	8b 45 08             	mov    0x8(%ebp),%eax
f010add9:	8b 50 74             	mov    0x74(%eax),%edx
f010addc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010addf:	39 c2                	cmp    %eax,%edx
f010ade1:	77 a3                	ja     f010ad86 <initialize_environment+0x1c4>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010ade3:	8b 45 08             	mov    0x8(%ebp),%eax
f010ade6:	c7 80 2c 05 00 00 00 	movl   $0x0,0x52c(%eax)
f010aded:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010adf0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010adf7:	eb 50                	jmp    f010ae49 <initialize_environment+0x287>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010adf9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010adfc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010adff:	89 d0                	mov    %edx,%eax
f010ae01:	01 c0                	add    %eax,%eax
f010ae03:	01 d0                	add    %edx,%eax
f010ae05:	c1 e0 03             	shl    $0x3,%eax
f010ae08:	01 c8                	add    %ecx,%eax
f010ae0a:	83 c0 7c             	add    $0x7c,%eax
f010ae0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010ae13:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae19:	89 d0                	mov    %edx,%eax
f010ae1b:	01 c0                	add    %eax,%eax
f010ae1d:	01 d0                	add    %edx,%eax
f010ae1f:	c1 e0 03             	shl    $0x3,%eax
f010ae22:	01 c8                	add    %ecx,%eax
f010ae24:	83 e8 80             	sub    $0xffffff80,%eax
f010ae27:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010ae2a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ae30:	89 d0                	mov    %edx,%eax
f010ae32:	01 c0                	add    %eax,%eax
f010ae34:	01 d0                	add    %edx,%eax
f010ae36:	c1 e0 03             	shl    $0x3,%eax
f010ae39:	01 c8                	add    %ecx,%eax
f010ae3b:	05 84 00 00 00       	add    $0x84,%eax
f010ae40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010ae46:	ff 45 f4             	incl   -0xc(%ebp)
f010ae49:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010ae4d:	7e aa                	jle    f010adf9 <initialize_environment+0x237>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010ae4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae52:	c7 80 30 05 00 00 00 	movl   $0x0,0x530(%eax)
f010ae59:	00 00 00 

	e->pageFaultsCounter=0;
f010ae5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5f:	c7 80 34 05 00 00 00 	movl   $0x0,0x534(%eax)
f010ae66:	00 00 00 
	e->tableFaultsCounter=0;
f010ae69:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae6c:	c7 80 38 05 00 00 00 	movl   $0x0,0x538(%eax)
f010ae73:	00 00 00 

	e->freeingFullWSCounter = 0;
f010ae76:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae79:	c7 80 3c 05 00 00 00 	movl   $0x0,0x53c(%eax)
f010ae80:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010ae83:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae86:	c7 80 40 05 00 00 00 	movl   $0x0,0x540(%eax)
f010ae8d:	00 00 00 

	e->nModifiedPages=0;
f010ae90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae93:	c7 80 44 05 00 00 00 	movl   $0x0,0x544(%eax)
f010ae9a:	00 00 00 
	e->nNotModifiedPages=0;
f010ae9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea0:	c7 80 48 05 00 00 00 	movl   $0x0,0x548(%eax)
f010aea7:	00 00 00 
	e->nClocks = 0;
f010aeaa:	8b 45 08             	mov    0x8(%ebp),%eax
f010aead:	c7 80 a4 05 00 00 00 	movl   $0x0,0x5a4(%eax)
f010aeb4:	00 00 00 

	//2020
	e->nPageIn = 0;
f010aeb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeba:	c7 80 4c 05 00 00 00 	movl   $0x0,0x54c(%eax)
f010aec1:	00 00 00 
	e->nPageOut = 0;
f010aec4:	8b 45 08             	mov    0x8(%ebp),%eax
f010aec7:	c7 80 50 05 00 00 00 	movl   $0x0,0x550(%eax)
f010aece:	00 00 00 
	e->nNewPageAdded = 0;
f010aed1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aed4:	c7 80 54 05 00 00 00 	movl   $0x0,0x554(%eax)
f010aedb:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010aede:	83 ec 0c             	sub    $0xc,%esp
f010aee1:	ff 75 08             	pushl  0x8(%ebp)
f010aee4:	e8 09 00 00 00       	call   f010aef2 <complete_environment_initialization>
f010aee9:	83 c4 10             	add    $0x10,%esp
}
f010aeec:	90                   	nop
f010aeed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010aef0:	c9                   	leave  
f010aef1:	c3                   	ret    

f010aef2 <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010aef2:	55                   	push   %ebp
f010aef3:	89 e5                	mov    %esp,%ebp
f010aef5:	53                   	push   %ebx
f010aef6:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010aef9:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefc:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aeff:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010af05:	8b 45 08             	mov    0x8(%ebp),%eax
f010af08:	8b 40 60             	mov    0x60(%eax),%eax
f010af0b:	83 c8 03             	or     $0x3,%eax
f010af0e:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010af10:	8b 45 08             	mov    0x8(%ebp),%eax
f010af13:	8b 40 5c             	mov    0x5c(%eax),%eax
f010af16:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010af1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af1f:	8b 40 60             	mov    0x60(%eax),%eax
f010af22:	83 c8 05             	or     $0x5,%eax
f010af25:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010af27:	8b 45 08             	mov    0x8(%ebp),%eax
f010af2a:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010af31:	8b 45 08             	mov    0x8(%ebp),%eax
f010af34:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010af3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af3e:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010af45:	8b 45 08             	mov    0x8(%ebp),%eax
f010af48:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010af4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af52:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010af55:	83 ec 0c             	sub    $0xc,%esp
f010af58:	68 b1 02 00 00       	push   $0x2b1
f010af5d:	e8 4a 58 02 00       	call   f01307ac <log2_ceil>
f010af62:	83 c4 10             	add    $0x10,%esp
f010af65:	ba 01 00 00 00       	mov    $0x1,%edx
f010af6a:	88 c1                	mov    %al,%cl
f010af6c:	d3 e2                	shl    %cl,%edx
f010af6e:	89 d0                	mov    %edx,%eax
f010af70:	01 d8                	add    %ebx,%eax
f010af72:	89 c3                	mov    %eax,%ebx
f010af74:	83 ec 0c             	sub    $0xc,%esp
f010af77:	68 b1 02 00 00       	push   $0x2b1
f010af7c:	e8 f6 57 02 00       	call   f0130777 <nearest_pow2_ceil>
f010af81:	83 c4 10             	add    $0x10,%esp
f010af84:	f7 d8                	neg    %eax
f010af86:	21 d8                	and    %ebx,%eax
f010af88:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010af8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010af8f:	7f 1e                	jg     f010afaf <complete_environment_initialization+0xbd>
		generation = 1 << ENVGENSHIFT;
f010af91:	83 ec 0c             	sub    $0xc,%esp
f010af94:	68 b1 02 00 00       	push   $0x2b1
f010af99:	e8 0e 58 02 00       	call   f01307ac <log2_ceil>
f010af9e:	83 c4 10             	add    $0x10,%esp
f010afa1:	ba 01 00 00 00       	mov    $0x1,%edx
f010afa6:	88 c1                	mov    %al,%cl
f010afa8:	d3 e2                	shl    %cl,%edx
f010afaa:	89 d0                	mov    %edx,%eax
f010afac:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010afaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb2:	8b 15 f0 ed 85 f0    	mov    0xf085edf0,%edx
f010afb8:	29 d0                	sub    %edx,%eax
f010afba:	c1 f8 04             	sar    $0x4,%eax
f010afbd:	89 c2                	mov    %eax,%edx
f010afbf:	89 d0                	mov    %edx,%eax
f010afc1:	c1 e0 03             	shl    $0x3,%eax
f010afc4:	01 d0                	add    %edx,%eax
f010afc6:	01 c0                	add    %eax,%eax
f010afc8:	01 d0                	add    %edx,%eax
f010afca:	c1 e0 03             	shl    $0x3,%eax
f010afcd:	01 d0                	add    %edx,%eax
f010afcf:	89 c1                	mov    %eax,%ecx
f010afd1:	c1 e1 08             	shl    $0x8,%ecx
f010afd4:	01 c8                	add    %ecx,%eax
f010afd6:	01 c0                	add    %eax,%eax
f010afd8:	01 d0                	add    %edx,%eax
f010afda:	01 c0                	add    %eax,%eax
f010afdc:	01 d0                	add    %edx,%eax
f010afde:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010afe5:	01 d0                	add    %edx,%eax
f010afe7:	89 c2                	mov    %eax,%edx
f010afe9:	c1 e2 09             	shl    $0x9,%edx
f010afec:	29 c2                	sub    %eax,%edx
f010afee:	89 d0                	mov    %edx,%eax
f010aff0:	f7 d8                	neg    %eax
f010aff2:	0b 45 f4             	or     -0xc(%ebp),%eax
f010aff5:	89 c2                	mov    %eax,%edx
f010aff7:	8b 45 08             	mov    0x8(%ebp),%eax
f010affa:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010affd:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010b002:	85 c0                	test   %eax,%eax
f010b004:	75 0c                	jne    f010b012 <complete_environment_initialization+0x120>
		e->env_parent_id = 0;//no parent;
f010b006:	8b 45 08             	mov    0x8(%ebp),%eax
f010b009:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010b010:	eb 0e                	jmp    f010b020 <complete_environment_initialization+0x12e>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010b012:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010b017:	8b 50 4c             	mov    0x4c(%eax),%edx
f010b01a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b01d:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010b020:	8b 45 08             	mov    0x8(%ebp),%eax
f010b023:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010b02a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b02d:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010b034:	8b 45 08             	mov    0x8(%ebp),%eax
f010b037:	83 ec 04             	sub    $0x4,%esp
f010b03a:	6a 44                	push   $0x44
f010b03c:	6a 00                	push   $0x0
f010b03e:	50                   	push   %eax
f010b03f:	e8 af 6b 02 00       	call   f0131bf3 <memset>
f010b044:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010b047:	8b 45 08             	mov    0x8(%ebp),%eax
f010b04a:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010b050:	8b 45 08             	mov    0x8(%ebp),%eax
f010b053:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010b059:	8b 45 08             	mov    0x8(%ebp),%eax
f010b05c:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010b062:	8b 45 08             	mov    0x8(%ebp),%eax
f010b065:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010b06c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b06f:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010b075:	8b 45 08             	mov    0x8(%ebp),%eax
f010b078:	8b 40 38             	mov    0x38(%eax),%eax
f010b07b:	80 cc 02             	or     $0x2,%ah
f010b07e:	89 c2                	mov    %eax,%edx
f010b080:	8b 45 08             	mov    0x8(%ebp),%eax
f010b083:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010b086:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b08a:	75 17                	jne    f010b0a3 <complete_environment_initialization+0x1b1>
f010b08c:	83 ec 04             	sub    $0x4,%esp
f010b08f:	68 5a 69 13 f0       	push   $0xf013695a
f010b094:	68 62 03 00 00       	push   $0x362
f010b099:	68 3d 69 13 f0       	push   $0xf013693d
f010b09e:	e8 62 51 ff ff       	call   f0100205 <_panic>
f010b0a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a6:	8b 40 44             	mov    0x44(%eax),%eax
f010b0a9:	85 c0                	test   %eax,%eax
f010b0ab:	74 11                	je     f010b0be <complete_environment_initialization+0x1cc>
f010b0ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b0:	8b 40 44             	mov    0x44(%eax),%eax
f010b0b3:	8b 55 08             	mov    0x8(%ebp),%edx
f010b0b6:	8b 52 48             	mov    0x48(%edx),%edx
f010b0b9:	89 50 48             	mov    %edx,0x48(%eax)
f010b0bc:	eb 0b                	jmp    f010b0c9 <complete_environment_initialization+0x1d7>
f010b0be:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0c1:	8b 40 48             	mov    0x48(%eax),%eax
f010b0c4:	a3 fc ed 85 f0       	mov    %eax,0xf085edfc
f010b0c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0cc:	8b 40 48             	mov    0x48(%eax),%eax
f010b0cf:	85 c0                	test   %eax,%eax
f010b0d1:	74 11                	je     f010b0e4 <complete_environment_initialization+0x1f2>
f010b0d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d6:	8b 40 48             	mov    0x48(%eax),%eax
f010b0d9:	8b 55 08             	mov    0x8(%ebp),%edx
f010b0dc:	8b 52 44             	mov    0x44(%edx),%edx
f010b0df:	89 50 44             	mov    %edx,0x44(%eax)
f010b0e2:	eb 0b                	jmp    f010b0ef <complete_environment_initialization+0x1fd>
f010b0e4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e7:	8b 40 44             	mov    0x44(%eax),%eax
f010b0ea:	a3 f8 ed 85 f0       	mov    %eax,0xf085edf8
f010b0ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0f2:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010b0f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0fc:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010b103:	a1 04 ee 85 f0       	mov    0xf085ee04,%eax
f010b108:	48                   	dec    %eax
f010b109:	a3 04 ee 85 f0       	mov    %eax,0xf085ee04
	return ;
f010b10e:	90                   	nop
}
f010b10f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b112:	c9                   	leave  
f010b113:	c3                   	ret    

f010b114 <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010b114:	55                   	push   %ebp
f010b115:	89 e5                	mov    %esp,%ebp
f010b117:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b11a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b11d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b120:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b123:	8b 00                	mov    (%eax),%eax
f010b125:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b12a:	74 17                	je     f010b143 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010b12c:	83 ec 04             	sub    $0x4,%esp
f010b12f:	68 93 6a 13 f0       	push   $0xf0136a93
f010b134:	68 6e 03 00 00       	push   $0x36e
f010b139:	68 3d 69 13 f0       	push   $0xf013693d
f010b13e:	e8 c2 50 ff ff       	call   f0100205 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010b143:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b146:	8b 40 18             	mov    0x18(%eax),%eax
f010b149:	89 c2                	mov    %eax,%edx
f010b14b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b14e:	89 50 30             	mov    %edx,0x30(%eax)
}
f010b151:	90                   	nop
f010b152:	c9                   	leave  
f010b153:	c3                   	ret    

f010b154 <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010b154:	55                   	push   %ebp
f010b155:	89 e5                	mov    %esp,%ebp
f010b157:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f010b15a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b15d:	c7 80 9c 05 00 00 00 	movl   $0xa0000000,0x59c(%eax)
f010b164:	00 00 a0 
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f010b167:	8b 45 08             	mov    0x8(%ebp),%eax
f010b16a:	8b 40 78             	mov    0x78(%eax),%eax
f010b16d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b170:	8b 45 08             	mov    0x8(%ebp),%eax
f010b173:	8b 50 74             	mov    0x74(%eax),%edx
f010b176:	89 d0                	mov    %edx,%eax
f010b178:	01 c0                	add    %eax,%eax
f010b17a:	01 d0                	add    %edx,%eax
f010b17c:	c1 e0 03             	shl    $0x3,%eax
f010b17f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f010b182:	8b 45 08             	mov    0x8(%ebp),%eax
f010b185:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b18b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b18e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b191:	8b 40 78             	mov    0x78(%eax),%eax
f010b194:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b197:	eb 71                	jmp    f010b20a <share_pws_at_user_space+0xb6>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010b199:	83 ec 0c             	sub    $0xc,%esp
f010b19c:	ff 75 f4             	pushl  -0xc(%ebp)
f010b19f:	e8 4c cc ff ff       	call   f0107df0 <kheap_physical_address>
f010b1a4:	83 c4 10             	add    $0x10,%esp
f010b1a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory,  dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010b1aa:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1ad:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b1b0:	83 ec 04             	sub    $0x4,%esp
f010b1b3:	8d 55 e4             	lea    -0x1c(%ebp),%edx
f010b1b6:	52                   	push   %edx
f010b1b7:	ff 75 f0             	pushl  -0x10(%ebp)
f010b1ba:	50                   	push   %eax
f010b1bb:	e8 d8 b8 ff ff       	call   f0106a98 <get_page_table>
f010b1c0:	83 c4 10             	add    $0x10,%esp
f010b1c3:	83 f8 01             	cmp    $0x1,%eax
f010b1c6:	75 18                	jne    f010b1e0 <share_pws_at_user_space+0x8c>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010b1c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1cb:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b1ce:	83 ec 08             	sub    $0x8,%esp
f010b1d1:	ff 75 f0             	pushl  -0x10(%ebp)
f010b1d4:	50                   	push   %eax
f010b1d5:	e8 14 ba ff ff       	call   f0106bee <create_page_table>
f010b1da:	83 c4 10             	add    $0x10,%esp
f010b1dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f010b1e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b1e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b1e6:	c1 ea 0c             	shr    $0xc,%edx
f010b1e9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010b1ef:	c1 e2 02             	shl    $0x2,%edx
f010b1f2:	01 d0                	add    %edx,%eax
f010b1f4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b1f7:	83 ca 05             	or     $0x5,%edx
f010b1fa:	89 10                	mov    %edx,(%eax)
#if USE_KHEAP
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010b1fc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b203:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010b20a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b20d:	8b 40 78             	mov    0x78(%eax),%eax
f010b210:	89 c2                	mov    %eax,%edx
f010b212:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b215:	01 d0                	add    %edx,%eax
f010b217:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b21a:	0f 87 79 ff ff ff    	ja     f010b199 <share_pws_at_user_space+0x45>
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
#endif
}
f010b220:	90                   	nop
f010b221:	c9                   	leave  
f010b222:	c3                   	ret    

f010b223 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010b223:	55                   	push   %ebp
f010b224:	89 e5                	mov    %esp,%ebp
f010b226:	83 ec 28             	sub    $0x28,%esp
#if USE_KHEAP
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010b229:	8b 45 08             	mov    0x8(%ebp),%eax
f010b22c:	8b 50 74             	mov    0x74(%eax),%edx
f010b22f:	89 d0                	mov    %edx,%eax
f010b231:	01 c0                	add    %eax,%eax
f010b233:	01 d0                	add    %edx,%eax
f010b235:	c1 e0 03             	shl    $0x3,%eax
f010b238:	89 45 f0             	mov    %eax,-0x10(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010b23b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b23e:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b244:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
f010b247:	8b 45 08             	mov    0x8(%ebp),%eax
f010b24a:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b250:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010b253:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b256:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b25b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b25e:	eb 46                	jmp    f010b2a6 <unshare_pws_at_user_space+0x83>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, tsva, &uws_table );
f010b260:	8b 45 08             	mov    0x8(%ebp),%eax
f010b263:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b266:	83 ec 04             	sub    $0x4,%esp
f010b269:	8d 55 e0             	lea    -0x20(%ebp),%edx
f010b26c:	52                   	push   %edx
f010b26d:	ff 75 f4             	pushl  -0xc(%ebp)
f010b270:	50                   	push   %eax
f010b271:	e8 22 b8 ff ff       	call   f0106a98 <get_page_table>
f010b276:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f010b279:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b27c:	83 ec 0c             	sub    $0xc,%esp
f010b27f:	50                   	push   %eax
f010b280:	e8 e7 c9 ff ff       	call   f0107c6c <kfree>
f010b285:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f010b288:	8b 45 08             	mov    0x8(%ebp),%eax
f010b28b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b28e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b291:	c1 ea 16             	shr    $0x16,%edx
f010b294:	c1 e2 02             	shl    $0x2,%edx
f010b297:	01 d0                	add    %edx,%eax
f010b299:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, sva);
		}
		*/
		unsigned int tsva = ROUNDDOWN((unsigned int) e->__uptr_pws, PTSIZE);
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f010b29f:	81 45 f4 00 00 40 00 	addl   $0x400000,-0xc(%ebp)
f010b2a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2a9:	8b 80 9c 05 00 00    	mov    0x59c(%eax),%eax
f010b2af:	89 c2                	mov    %eax,%edx
f010b2b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b2b4:	01 d0                	add    %edx,%eax
f010b2b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b2b9:	77 a5                	ja     f010b260 <unshare_pws_at_user_space+0x3d>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010b2bb:	0f 20 d8             	mov    %cr3,%eax
f010b2be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010b2c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b2c4:	0f 22 d8             	mov    %eax,%cr3
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
#endif
}
f010b2c7:	90                   	nop
f010b2c8:	c9                   	leave  
f010b2c9:	c3                   	ret    

f010b2ca <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010b2ca:	55                   	push   %ebp
f010b2cb:	89 e5                	mov    %esp,%ebp
f010b2cd:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010b2d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2d3:	8b 40 10             	mov    0x10(%eax),%eax
f010b2d6:	8d 48 01             	lea    0x1(%eax),%ecx
f010b2d9:	8b 55 08             	mov    0x8(%ebp),%edx
f010b2dc:	89 4a 10             	mov    %ecx,0x10(%edx)
f010b2df:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b2e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b2e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b2eb:	8b 00                	mov    (%eax),%eax
f010b2ed:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b2f2:	74 17                	je     f010b30b <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010b2f4:	83 ec 04             	sub    $0x4,%esp
f010b2f7:	68 93 6a 13 f0       	push   $0xf0136a93
f010b2fc:	68 b8 03 00 00       	push   $0x3b8
f010b301:	68 3d 69 13 f0       	push   $0xf013693d
f010b306:	e8 fa 4e ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b30b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b30e:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b311:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b314:	01 d0                	add    %edx,%eax
f010b316:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010b319:	eb 0f                	jmp    f010b32a <PROGRAM_SEGMENT_NEXT+0x60>
f010b31b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b31e:	8b 40 10             	mov    0x10(%eax),%eax
f010b321:	8d 50 01             	lea    0x1(%eax),%edx
f010b324:	8b 45 08             	mov    0x8(%ebp),%eax
f010b327:	89 50 10             	mov    %edx,0x10(%eax)
f010b32a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b32d:	8b 40 10             	mov    0x10(%eax),%eax
f010b330:	c1 e0 05             	shl    $0x5,%eax
f010b333:	89 c2                	mov    %eax,%edx
f010b335:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b338:	01 d0                	add    %edx,%eax
f010b33a:	8b 00                	mov    (%eax),%eax
f010b33c:	83 f8 01             	cmp    $0x1,%eax
f010b33f:	74 13                	je     f010b354 <PROGRAM_SEGMENT_NEXT+0x8a>
f010b341:	8b 45 08             	mov    0x8(%ebp),%eax
f010b344:	8b 50 10             	mov    0x10(%eax),%edx
f010b347:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b34a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b34d:	0f b7 c0             	movzwl %ax,%eax
f010b350:	39 c2                	cmp    %eax,%edx
f010b352:	72 c7                	jb     f010b31b <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010b354:	8b 45 08             	mov    0x8(%ebp),%eax
f010b357:	8b 40 10             	mov    0x10(%eax),%eax
f010b35a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010b35d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b360:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b363:	0f b7 c0             	movzwl %ax,%eax
f010b366:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010b369:	7e 63                	jle    f010b3ce <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b36b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b36e:	c1 e0 05             	shl    $0x5,%eax
f010b371:	89 c2                	mov    %eax,%edx
f010b373:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b376:	01 d0                	add    %edx,%eax
f010b378:	8b 50 04             	mov    0x4(%eax),%edx
f010b37b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b37e:	01 c2                	add    %eax,%edx
f010b380:	8b 45 08             	mov    0x8(%ebp),%eax
f010b383:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010b385:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b388:	c1 e0 05             	shl    $0x5,%eax
f010b38b:	89 c2                	mov    %eax,%edx
f010b38d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b390:	01 d0                	add    %edx,%eax
f010b392:	8b 50 14             	mov    0x14(%eax),%edx
f010b395:	8b 45 08             	mov    0x8(%ebp),%eax
f010b398:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010b39b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b39e:	c1 e0 05             	shl    $0x5,%eax
f010b3a1:	89 c2                	mov    %eax,%edx
f010b3a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3a6:	01 d0                	add    %edx,%eax
f010b3a8:	8b 50 10             	mov    0x10(%eax),%edx
f010b3ab:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3ae:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010b3b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b3b4:	c1 e0 05             	shl    $0x5,%eax
f010b3b7:	89 c2                	mov    %eax,%edx
f010b3b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3bc:	01 d0                	add    %edx,%eax
f010b3be:	8b 40 08             	mov    0x8(%eax),%eax
f010b3c1:	89 c2                	mov    %eax,%edx
f010b3c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3c6:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010b3c9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3cc:	eb 05                	jmp    f010b3d3 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010b3ce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b3d3:	c9                   	leave  
f010b3d4:	c3                   	ret    

f010b3d5 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010b3d5:	55                   	push   %ebp
f010b3d6:	89 e5                	mov    %esp,%ebp
f010b3d8:	57                   	push   %edi
f010b3d9:	56                   	push   %esi
f010b3da:	53                   	push   %ebx
f010b3db:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010b3de:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010b3e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010b3eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3ee:	8b 00                	mov    (%eax),%eax
f010b3f0:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010b3f5:	74 17                	je     f010b40e <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010b3f7:	83 ec 04             	sub    $0x4,%esp
f010b3fa:	68 93 6a 13 f0       	push   $0xf0136a93
f010b3ff:	68 d4 03 00 00       	push   $0x3d4
f010b404:	68 3d 69 13 f0       	push   $0xf013693d
f010b409:	e8 f7 4d ff ff       	call   f0100205 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010b40e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b411:	8b 50 1c             	mov    0x1c(%eax),%edx
f010b414:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b417:	01 d0                	add    %edx,%eax
f010b419:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010b41c:	eb 07                	jmp    f010b425 <PROGRAM_SEGMENT_FIRST+0x50>
f010b41e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b421:	40                   	inc    %eax
f010b422:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010b425:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b428:	c1 e0 05             	shl    $0x5,%eax
f010b42b:	89 c2                	mov    %eax,%edx
f010b42d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b430:	01 d0                	add    %edx,%eax
f010b432:	8b 00                	mov    (%eax),%eax
f010b434:	83 f8 01             	cmp    $0x1,%eax
f010b437:	74 10                	je     f010b449 <PROGRAM_SEGMENT_FIRST+0x74>
f010b439:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010b43c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b43f:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b442:	0f b7 c0             	movzwl %ax,%eax
f010b445:	39 c2                	cmp    %eax,%edx
f010b447:	72 d5                	jb     f010b41e <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010b449:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b44c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010b44f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b452:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b455:	0f b7 c0             	movzwl %ax,%eax
f010b458:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010b45b:	7e 68                	jle    f010b4c5 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010b45d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b460:	c1 e0 05             	shl    $0x5,%eax
f010b463:	89 c2                	mov    %eax,%edx
f010b465:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b468:	01 d0                	add    %edx,%eax
f010b46a:	8b 50 04             	mov    0x4(%eax),%edx
f010b46d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b470:	01 d0                	add    %edx,%eax
f010b472:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010b475:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b478:	c1 e0 05             	shl    $0x5,%eax
f010b47b:	89 c2                	mov    %eax,%edx
f010b47d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b480:	01 d0                	add    %edx,%eax
f010b482:	8b 40 14             	mov    0x14(%eax),%eax
f010b485:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010b488:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b48b:	c1 e0 05             	shl    $0x5,%eax
f010b48e:	89 c2                	mov    %eax,%edx
f010b490:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b493:	01 d0                	add    %edx,%eax
f010b495:	8b 40 10             	mov    0x10(%eax),%eax
f010b498:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010b49b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010b49e:	c1 e0 05             	shl    $0x5,%eax
f010b4a1:	89 c2                	mov    %eax,%edx
f010b4a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b4a6:	01 d0                	add    %edx,%eax
f010b4a8:	8b 40 08             	mov    0x8(%eax),%eax
f010b4ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010b4ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4b1:	89 c3                	mov    %eax,%ebx
f010b4b3:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b4b6:	ba 05 00 00 00       	mov    $0x5,%edx
f010b4bb:	89 df                	mov    %ebx,%edi
f010b4bd:	89 c6                	mov    %eax,%esi
f010b4bf:	89 d1                	mov    %edx,%ecx
f010b4c1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010b4c3:	eb 1c                	jmp    f010b4e1 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010b4c5:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010b4cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4cf:	89 c3                	mov    %eax,%ebx
f010b4d1:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010b4d4:	ba 05 00 00 00       	mov    $0x5,%edx
f010b4d9:	89 df                	mov    %ebx,%edi
f010b4db:	89 c6                	mov    %eax,%esi
f010b4dd:	89 d1                	mov    %edx,%ecx
f010b4df:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010b4e1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4e4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010b4e7:	5b                   	pop    %ebx
f010b4e8:	5e                   	pop    %esi
f010b4e9:	5f                   	pop    %edi
f010b4ea:	5d                   	pop    %ebp
f010b4eb:	c2 04 00             	ret    $0x4

f010b4ee <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010b4ee:	55                   	push   %ebp
f010b4ef:	89 e5                	mov    %esp,%ebp
f010b4f1:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010b4f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b4fb:	a1 b4 f6 85 f0       	mov    0xf085f6b4,%eax
f010b500:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b503:	e9 c3 00 00 00       	jmp    f010b5cb <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010b508:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b50b:	8b 40 10             	mov    0x10(%eax),%eax
f010b50e:	3b 45 08             	cmp    0x8(%ebp),%eax
f010b511:	0f 85 ac 00 00 00    	jne    f010b5c3 <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010b517:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b51a:	8b 50 0c             	mov    0xc(%eax),%edx
f010b51d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b520:	8b 40 10             	mov    0x10(%eax),%eax
f010b523:	8b 40 5c             	mov    0x5c(%eax),%eax
f010b526:	83 ec 08             	sub    $0x8,%esp
f010b529:	52                   	push   %edx
f010b52a:	50                   	push   %eax
f010b52b:	e8 fd ca ff ff       	call   f010802d <pt_clear_page_table_entry>
f010b530:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010b533:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b537:	75 17                	jne    f010b550 <cleanup_buffers+0x62>
f010b539:	83 ec 04             	sub    $0x4,%esp
f010b53c:	68 5a 69 13 f0       	push   $0xf013695a
f010b541:	68 fb 03 00 00       	push   $0x3fb
f010b546:	68 3d 69 13 f0       	push   $0xf013693d
f010b54b:	e8 b5 4c ff ff       	call   f0100205 <_panic>
f010b550:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b553:	8b 00                	mov    (%eax),%eax
f010b555:	85 c0                	test   %eax,%eax
f010b557:	74 10                	je     f010b569 <cleanup_buffers+0x7b>
f010b559:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b55c:	8b 00                	mov    (%eax),%eax
f010b55e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b561:	8b 52 04             	mov    0x4(%edx),%edx
f010b564:	89 50 04             	mov    %edx,0x4(%eax)
f010b567:	eb 0b                	jmp    f010b574 <cleanup_buffers+0x86>
f010b569:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b56c:	8b 40 04             	mov    0x4(%eax),%eax
f010b56f:	a3 b8 f6 85 f0       	mov    %eax,0xf085f6b8
f010b574:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b577:	8b 40 04             	mov    0x4(%eax),%eax
f010b57a:	85 c0                	test   %eax,%eax
f010b57c:	74 0f                	je     f010b58d <cleanup_buffers+0x9f>
f010b57e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b581:	8b 40 04             	mov    0x4(%eax),%eax
f010b584:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b587:	8b 12                	mov    (%edx),%edx
f010b589:	89 10                	mov    %edx,(%eax)
f010b58b:	eb 0a                	jmp    f010b597 <cleanup_buffers+0xa9>
f010b58d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b590:	8b 00                	mov    (%eax),%eax
f010b592:	a3 b4 f6 85 f0       	mov    %eax,0xf085f6b4
f010b597:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b59a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b5a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b5aa:	a1 c0 f6 85 f0       	mov    0xf085f6c0,%eax
f010b5af:	48                   	dec    %eax
f010b5b0:	a3 c0 f6 85 f0       	mov    %eax,0xf085f6c0

			free_frame(ptr_fi);
f010b5b5:	83 ec 0c             	sub    $0xc,%esp
f010b5b8:	ff 75 f4             	pushl  -0xc(%ebp)
f010b5bb:	e8 2e b4 ff ff       	call   f01069ee <free_frame>
f010b5c0:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010b5c3:	a1 bc f6 85 f0       	mov    0xf085f6bc,%eax
f010b5c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010b5cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b5cf:	74 07                	je     f010b5d8 <cleanup_buffers+0xea>
f010b5d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5d4:	8b 00                	mov    (%eax),%eax
f010b5d6:	eb 05                	jmp    f010b5dd <cleanup_buffers+0xef>
f010b5d8:	b8 00 00 00 00       	mov    $0x0,%eax
f010b5dd:	a3 bc f6 85 f0       	mov    %eax,0xf085f6bc
f010b5e2:	a1 bc f6 85 f0       	mov    0xf085f6bc,%eax
f010b5e7:	85 c0                	test   %eax,%eax
f010b5e9:	0f 85 19 ff ff ff    	jne    f010b508 <cleanup_buffers+0x1a>
f010b5ef:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b5f3:	0f 85 0f ff ff ff    	jne    f010b508 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010b5f9:	90                   	nop
f010b5fa:	c9                   	leave  
f010b5fb:	c3                   	ret    

f010b5fc <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010b5fc:	55                   	push   %ebp
f010b5fd:	89 e5                	mov    %esp,%ebp
f010b5ff:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010b602:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010b606:	7e 06                	jle    f010b60e <set_program_priority+0x12>
f010b608:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b60c:	7e 14                	jle    f010b622 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010b60e:	83 ec 04             	sub    $0x4,%esp
f010b611:	68 ac 6a 13 f0       	push   $0xf0136aac
f010b616:	6a 10                	push   $0x10
f010b618:	68 d0 6a 13 f0       	push   $0xf0136ad0
f010b61d:	e8 e3 4b ff ff       	call   f0100205 <_panic>
		return;
	}
	if(env == NULL)
f010b622:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b626:	74 75                	je     f010b69d <set_program_priority+0xa1>
		return;
	switch(priority)
f010b628:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010b62c:	77 56                	ja     f010b684 <set_program_priority+0x88>
f010b62e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b631:	c1 e0 02             	shl    $0x2,%eax
f010b634:	05 0c 6b 13 f0       	add    $0xf0136b0c,%eax
f010b639:	8b 00                	mov    (%eax),%eax
f010b63b:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010b63d:	83 ec 08             	sub    $0x8,%esp
f010b640:	6a 01                	push   $0x1
f010b642:	ff 75 08             	pushl  0x8(%ebp)
f010b645:	e8 64 d4 ff ff       	call   f0108aae <half_WS_Size>
f010b64a:	83 c4 10             	add    $0x10,%esp
			break;
f010b64d:	eb 35                	jmp    f010b684 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010b64f:	83 ec 08             	sub    $0x8,%esp
f010b652:	6a 00                	push   $0x0
f010b654:	ff 75 08             	pushl  0x8(%ebp)
f010b657:	e8 52 d4 ff ff       	call   f0108aae <half_WS_Size>
f010b65c:	83 c4 10             	add    $0x10,%esp
			break;
f010b65f:	eb 23                	jmp    f010b684 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010b661:	83 ec 08             	sub    $0x8,%esp
f010b664:	6a 01                	push   $0x1
f010b666:	ff 75 08             	pushl  0x8(%ebp)
f010b669:	e8 23 d4 ff ff       	call   f0108a91 <double_WS_Size>
f010b66e:	83 c4 10             	add    $0x10,%esp
			break;
f010b671:	eb 11                	jmp    f010b684 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010b673:	83 ec 08             	sub    $0x8,%esp
f010b676:	6a 00                	push   $0x0
f010b678:	ff 75 08             	pushl  0x8(%ebp)
f010b67b:	e8 11 d4 ff ff       	call   f0108a91 <double_WS_Size>
f010b680:	83 c4 10             	add    $0x10,%esp
			break;
f010b683:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010b684:	8b 45 08             	mov    0x8(%ebp),%eax
f010b687:	8b 40 74             	mov    0x74(%eax),%eax
f010b68a:	83 ec 08             	sub    $0x8,%esp
f010b68d:	50                   	push   %eax
f010b68e:	68 ed 6a 13 f0       	push   $0xf0136aed
f010b693:	e8 76 56 ff ff       	call   f0100d0e <cprintf>
f010b698:	83 c4 10             	add    $0x10,%esp
f010b69b:	eb 01                	jmp    f010b69e <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010b69d:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010b69e:	c9                   	leave  
f010b69f:	c3                   	ret    

f010b6a0 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010b6a0:	55                   	push   %ebp
f010b6a1:	89 e5                	mov    %esp,%ebp
f010b6a3:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b6a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b6ad:	eb 29                	jmp    f010b6d8 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010b6af:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b6b2:	89 d0                	mov    %edx,%eax
f010b6b4:	01 c0                	add    %eax,%eax
f010b6b6:	01 d0                	add    %edx,%eax
f010b6b8:	c1 e0 02             	shl    $0x2,%eax
f010b6bb:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b6c0:	8b 00                	mov    (%eax),%eax
f010b6c2:	83 ec 08             	sub    $0x8,%esp
f010b6c5:	50                   	push   %eax
f010b6c6:	ff 75 08             	pushl  0x8(%ebp)
f010b6c9:	e8 43 64 02 00       	call   f0131b11 <strcmp>
f010b6ce:	83 c4 10             	add    $0x10,%esp
f010b6d1:	85 c0                	test   %eax,%eax
f010b6d3:	74 0f                	je     f010b6e4 <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b6d5:	ff 45 f4             	incl   -0xc(%ebp)
f010b6d8:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b6dd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b6e0:	7c cd                	jl     f010b6af <get_user_program_info+0xf>
f010b6e2:	eb 01                	jmp    f010b6e5 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010b6e4:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b6e5:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b6ea:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b6ed:	75 1a                	jne    f010b709 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010b6ef:	83 ec 08             	sub    $0x8,%esp
f010b6f2:	ff 75 08             	pushl  0x8(%ebp)
f010b6f5:	68 a1 76 13 f0       	push   $0xf01376a1
f010b6fa:	e8 0f 56 ff ff       	call   f0100d0e <cprintf>
f010b6ff:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b702:	b8 00 00 00 00       	mov    $0x0,%eax
f010b707:	eb 11                	jmp    f010b71a <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010b709:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b70c:	89 d0                	mov    %edx,%eax
f010b70e:	01 c0                	add    %eax,%eax
f010b710:	01 d0                	add    %edx,%eax
f010b712:	c1 e0 02             	shl    $0x2,%eax
f010b715:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b71a:	c9                   	leave  
f010b71b:	c3                   	ret    

f010b71c <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010b71c:	55                   	push   %ebp
f010b71d:	89 e5                	mov    %esp,%ebp
f010b71f:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b722:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b729:	eb 30                	jmp    f010b75b <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010b72b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b72e:	89 d0                	mov    %edx,%eax
f010b730:	01 c0                	add    %eax,%eax
f010b732:	01 d0                	add    %edx,%eax
f010b734:	c1 e0 02             	shl    $0x2,%eax
f010b737:	05 00 39 19 f0       	add    $0xf0193900,%eax
f010b73c:	8b 00                	mov    (%eax),%eax
f010b73e:	8b 55 08             	mov    0x8(%ebp),%edx
f010b741:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010b747:	83 ec 08             	sub    $0x8,%esp
f010b74a:	50                   	push   %eax
f010b74b:	52                   	push   %edx
f010b74c:	e8 c0 63 02 00       	call   f0131b11 <strcmp>
f010b751:	83 c4 10             	add    $0x10,%esp
f010b754:	85 c0                	test   %eax,%eax
f010b756:	74 0f                	je     f010b767 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010b758:	ff 45 f4             	incl   -0xc(%ebp)
f010b75b:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b760:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b763:	7c c6                	jl     f010b72b <get_user_program_info_by_env+0xf>
f010b765:	eb 01                	jmp    f010b768 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010b767:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010b768:	a1 18 3d 19 f0       	mov    0xf0193d18,%eax
f010b76d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010b770:	75 17                	jne    f010b789 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010b772:	83 ec 0c             	sub    $0xc,%esp
f010b775:	68 bc 76 13 f0       	push   $0xf01376bc
f010b77a:	e8 8f 55 ff ff       	call   f0100d0e <cprintf>
f010b77f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b782:	b8 00 00 00 00       	mov    $0x0,%eax
f010b787:	eb 11                	jmp    f010b79a <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010b789:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b78c:	89 d0                	mov    %edx,%eax
f010b78e:	01 c0                	add    %eax,%eax
f010b790:	01 d0                	add    %edx,%eax
f010b792:	c1 e0 02             	shl    $0x2,%eax
f010b795:	05 00 39 19 f0       	add    $0xf0193900,%eax
}
f010b79a:	c9                   	leave  
f010b79b:	c3                   	ret    

f010b79c <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010b79c:	55                   	push   %ebp
f010b79d:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010b79f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7a2:	83 f8 13             	cmp    $0x13,%eax
f010b7a5:	77 0c                	ja     f010b7b3 <trapname+0x17>
		return excnames[trapno];
f010b7a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7aa:	8b 04 85 00 7b 13 f0 	mov    -0xfec8500(,%eax,4),%eax
f010b7b1:	eb 12                	jmp    f010b7c5 <trapname+0x29>
	if (trapno == T_SYSCALL)
f010b7b3:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010b7b7:	75 07                	jne    f010b7c0 <trapname+0x24>
		return "System call";
f010b7b9:	b8 e0 76 13 f0       	mov    $0xf01376e0,%eax
f010b7be:	eb 05                	jmp    f010b7c5 <trapname+0x29>
	return "(unknown trap)";
f010b7c0:	b8 ec 76 13 f0       	mov    $0xf01376ec,%eax
}
f010b7c5:	5d                   	pop    %ebp
f010b7c6:	c3                   	ret    

f010b7c7 <idt_init>:


void
idt_init(void)
{
f010b7c7:	55                   	push   %ebp
f010b7c8:	89 e5                	mov    %esp,%ebp
f010b7ca:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010b7cd:	b8 5c ce 10 f0       	mov    $0xf010ce5c,%eax
f010b7d2:	66 a3 90 ee 85 f0    	mov    %ax,0xf085ee90
f010b7d8:	66 c7 05 92 ee 85 f0 	movw   $0x8,0xf085ee92
f010b7df:	08 00 
f010b7e1:	a0 94 ee 85 f0       	mov    0xf085ee94,%al
f010b7e6:	83 e0 e0             	and    $0xffffffe0,%eax
f010b7e9:	a2 94 ee 85 f0       	mov    %al,0xf085ee94
f010b7ee:	a0 94 ee 85 f0       	mov    0xf085ee94,%al
f010b7f3:	83 e0 1f             	and    $0x1f,%eax
f010b7f6:	a2 94 ee 85 f0       	mov    %al,0xf085ee94
f010b7fb:	a0 95 ee 85 f0       	mov    0xf085ee95,%al
f010b800:	83 e0 f0             	and    $0xfffffff0,%eax
f010b803:	83 c8 0e             	or     $0xe,%eax
f010b806:	a2 95 ee 85 f0       	mov    %al,0xf085ee95
f010b80b:	a0 95 ee 85 f0       	mov    0xf085ee95,%al
f010b810:	83 e0 ef             	and    $0xffffffef,%eax
f010b813:	a2 95 ee 85 f0       	mov    %al,0xf085ee95
f010b818:	a0 95 ee 85 f0       	mov    0xf085ee95,%al
f010b81d:	83 e0 9f             	and    $0xffffff9f,%eax
f010b820:	a2 95 ee 85 f0       	mov    %al,0xf085ee95
f010b825:	a0 95 ee 85 f0       	mov    0xf085ee95,%al
f010b82a:	83 c8 80             	or     $0xffffff80,%eax
f010b82d:	a2 95 ee 85 f0       	mov    %al,0xf085ee95
f010b832:	b8 5c ce 10 f0       	mov    $0xf010ce5c,%eax
f010b837:	c1 e8 10             	shr    $0x10,%eax
f010b83a:	66 a3 96 ee 85 f0    	mov    %ax,0xf085ee96
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010b840:	b8 64 ce 10 f0       	mov    $0xf010ce64,%eax
f010b845:	66 a3 a0 ef 85 f0    	mov    %ax,0xf085efa0
f010b84b:	66 c7 05 a2 ef 85 f0 	movw   $0x8,0xf085efa2
f010b852:	08 00 
f010b854:	a0 a4 ef 85 f0       	mov    0xf085efa4,%al
f010b859:	83 e0 e0             	and    $0xffffffe0,%eax
f010b85c:	a2 a4 ef 85 f0       	mov    %al,0xf085efa4
f010b861:	a0 a4 ef 85 f0       	mov    0xf085efa4,%al
f010b866:	83 e0 1f             	and    $0x1f,%eax
f010b869:	a2 a4 ef 85 f0       	mov    %al,0xf085efa4
f010b86e:	a0 a5 ef 85 f0       	mov    0xf085efa5,%al
f010b873:	83 e0 f0             	and    $0xfffffff0,%eax
f010b876:	83 c8 0e             	or     $0xe,%eax
f010b879:	a2 a5 ef 85 f0       	mov    %al,0xf085efa5
f010b87e:	a0 a5 ef 85 f0       	mov    0xf085efa5,%al
f010b883:	83 e0 ef             	and    $0xffffffef,%eax
f010b886:	a2 a5 ef 85 f0       	mov    %al,0xf085efa5
f010b88b:	a0 a5 ef 85 f0       	mov    0xf085efa5,%al
f010b890:	83 c8 60             	or     $0x60,%eax
f010b893:	a2 a5 ef 85 f0       	mov    %al,0xf085efa5
f010b898:	a0 a5 ef 85 f0       	mov    0xf085efa5,%al
f010b89d:	83 c8 80             	or     $0xffffff80,%eax
f010b8a0:	a2 a5 ef 85 f0       	mov    %al,0xf085efa5
f010b8a5:	b8 64 ce 10 f0       	mov    $0xf010ce64,%eax
f010b8aa:	c1 e8 10             	shr    $0x10,%eax
f010b8ad:	66 a3 a6 ef 85 f0    	mov    %ax,0xf085efa6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010b8b3:	b8 6e ce 10 f0       	mov    $0xf010ce6e,%eax
f010b8b8:	66 a3 60 ee 85 f0    	mov    %ax,0xf085ee60
f010b8be:	66 c7 05 62 ee 85 f0 	movw   $0x8,0xf085ee62
f010b8c5:	08 00 
f010b8c7:	a0 64 ee 85 f0       	mov    0xf085ee64,%al
f010b8cc:	83 e0 e0             	and    $0xffffffe0,%eax
f010b8cf:	a2 64 ee 85 f0       	mov    %al,0xf085ee64
f010b8d4:	a0 64 ee 85 f0       	mov    0xf085ee64,%al
f010b8d9:	83 e0 1f             	and    $0x1f,%eax
f010b8dc:	a2 64 ee 85 f0       	mov    %al,0xf085ee64
f010b8e1:	a0 65 ee 85 f0       	mov    0xf085ee65,%al
f010b8e6:	83 e0 f0             	and    $0xfffffff0,%eax
f010b8e9:	83 c8 0e             	or     $0xe,%eax
f010b8ec:	a2 65 ee 85 f0       	mov    %al,0xf085ee65
f010b8f1:	a0 65 ee 85 f0       	mov    0xf085ee65,%al
f010b8f6:	83 e0 ef             	and    $0xffffffef,%eax
f010b8f9:	a2 65 ee 85 f0       	mov    %al,0xf085ee65
f010b8fe:	a0 65 ee 85 f0       	mov    0xf085ee65,%al
f010b903:	83 e0 9f             	and    $0xffffff9f,%eax
f010b906:	a2 65 ee 85 f0       	mov    %al,0xf085ee65
f010b90b:	a0 65 ee 85 f0       	mov    0xf085ee65,%al
f010b910:	83 c8 80             	or     $0xffffff80,%eax
f010b913:	a2 65 ee 85 f0       	mov    %al,0xf085ee65
f010b918:	b8 6e ce 10 f0       	mov    $0xf010ce6e,%eax
f010b91d:	c1 e8 10             	shr    $0x10,%eax
f010b920:	66 a3 66 ee 85 f0    	mov    %ax,0xf085ee66


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010b926:	b8 76 ce 10 f0       	mov    $0xf010ce76,%eax
f010b92b:	66 a3 20 ee 85 f0    	mov    %ax,0xf085ee20
f010b931:	66 c7 05 22 ee 85 f0 	movw   $0x8,0xf085ee22
f010b938:	08 00 
f010b93a:	a0 24 ee 85 f0       	mov    0xf085ee24,%al
f010b93f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b942:	a2 24 ee 85 f0       	mov    %al,0xf085ee24
f010b947:	a0 24 ee 85 f0       	mov    0xf085ee24,%al
f010b94c:	83 e0 1f             	and    $0x1f,%eax
f010b94f:	a2 24 ee 85 f0       	mov    %al,0xf085ee24
f010b954:	a0 25 ee 85 f0       	mov    0xf085ee25,%al
f010b959:	83 e0 f0             	and    $0xfffffff0,%eax
f010b95c:	83 c8 0e             	or     $0xe,%eax
f010b95f:	a2 25 ee 85 f0       	mov    %al,0xf085ee25
f010b964:	a0 25 ee 85 f0       	mov    0xf085ee25,%al
f010b969:	83 e0 ef             	and    $0xffffffef,%eax
f010b96c:	a2 25 ee 85 f0       	mov    %al,0xf085ee25
f010b971:	a0 25 ee 85 f0       	mov    0xf085ee25,%al
f010b976:	83 c8 60             	or     $0x60,%eax
f010b979:	a2 25 ee 85 f0       	mov    %al,0xf085ee25
f010b97e:	a0 25 ee 85 f0       	mov    0xf085ee25,%al
f010b983:	83 c8 80             	or     $0xffffff80,%eax
f010b986:	a2 25 ee 85 f0       	mov    %al,0xf085ee25
f010b98b:	b8 76 ce 10 f0       	mov    $0xf010ce76,%eax
f010b990:	c1 e8 10             	shr    $0x10,%eax
f010b993:	66 a3 26 ee 85 f0    	mov    %ax,0xf085ee26
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010b999:	b8 80 ce 10 f0       	mov    $0xf010ce80,%eax
f010b99e:	66 a3 28 ee 85 f0    	mov    %ax,0xf085ee28
f010b9a4:	66 c7 05 2a ee 85 f0 	movw   $0x8,0xf085ee2a
f010b9ab:	08 00 
f010b9ad:	a0 2c ee 85 f0       	mov    0xf085ee2c,%al
f010b9b2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b9b5:	a2 2c ee 85 f0       	mov    %al,0xf085ee2c
f010b9ba:	a0 2c ee 85 f0       	mov    0xf085ee2c,%al
f010b9bf:	83 e0 1f             	and    $0x1f,%eax
f010b9c2:	a2 2c ee 85 f0       	mov    %al,0xf085ee2c
f010b9c7:	a0 2d ee 85 f0       	mov    0xf085ee2d,%al
f010b9cc:	83 c8 0f             	or     $0xf,%eax
f010b9cf:	a2 2d ee 85 f0       	mov    %al,0xf085ee2d
f010b9d4:	a0 2d ee 85 f0       	mov    0xf085ee2d,%al
f010b9d9:	83 e0 ef             	and    $0xffffffef,%eax
f010b9dc:	a2 2d ee 85 f0       	mov    %al,0xf085ee2d
f010b9e1:	a0 2d ee 85 f0       	mov    0xf085ee2d,%al
f010b9e6:	83 c8 60             	or     $0x60,%eax
f010b9e9:	a2 2d ee 85 f0       	mov    %al,0xf085ee2d
f010b9ee:	a0 2d ee 85 f0       	mov    0xf085ee2d,%al
f010b9f3:	83 c8 80             	or     $0xffffff80,%eax
f010b9f6:	a2 2d ee 85 f0       	mov    %al,0xf085ee2d
f010b9fb:	b8 80 ce 10 f0       	mov    $0xf010ce80,%eax
f010ba00:	c1 e8 10             	shr    $0x10,%eax
f010ba03:	66 a3 2e ee 85 f0    	mov    %ax,0xf085ee2e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010ba09:	b8 8a ce 10 f0       	mov    $0xf010ce8a,%eax
f010ba0e:	66 a3 30 ee 85 f0    	mov    %ax,0xf085ee30
f010ba14:	66 c7 05 32 ee 85 f0 	movw   $0x8,0xf085ee32
f010ba1b:	08 00 
f010ba1d:	a0 34 ee 85 f0       	mov    0xf085ee34,%al
f010ba22:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba25:	a2 34 ee 85 f0       	mov    %al,0xf085ee34
f010ba2a:	a0 34 ee 85 f0       	mov    0xf085ee34,%al
f010ba2f:	83 e0 1f             	and    $0x1f,%eax
f010ba32:	a2 34 ee 85 f0       	mov    %al,0xf085ee34
f010ba37:	a0 35 ee 85 f0       	mov    0xf085ee35,%al
f010ba3c:	83 e0 f0             	and    $0xfffffff0,%eax
f010ba3f:	83 c8 0e             	or     $0xe,%eax
f010ba42:	a2 35 ee 85 f0       	mov    %al,0xf085ee35
f010ba47:	a0 35 ee 85 f0       	mov    0xf085ee35,%al
f010ba4c:	83 e0 ef             	and    $0xffffffef,%eax
f010ba4f:	a2 35 ee 85 f0       	mov    %al,0xf085ee35
f010ba54:	a0 35 ee 85 f0       	mov    0xf085ee35,%al
f010ba59:	83 c8 60             	or     $0x60,%eax
f010ba5c:	a2 35 ee 85 f0       	mov    %al,0xf085ee35
f010ba61:	a0 35 ee 85 f0       	mov    0xf085ee35,%al
f010ba66:	83 c8 80             	or     $0xffffff80,%eax
f010ba69:	a2 35 ee 85 f0       	mov    %al,0xf085ee35
f010ba6e:	b8 8a ce 10 f0       	mov    $0xf010ce8a,%eax
f010ba73:	c1 e8 10             	shr    $0x10,%eax
f010ba76:	66 a3 36 ee 85 f0    	mov    %ax,0xf085ee36
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010ba7c:	b8 94 ce 10 f0       	mov    $0xf010ce94,%eax
f010ba81:	66 a3 38 ee 85 f0    	mov    %ax,0xf085ee38
f010ba87:	66 c7 05 3a ee 85 f0 	movw   $0x8,0xf085ee3a
f010ba8e:	08 00 
f010ba90:	a0 3c ee 85 f0       	mov    0xf085ee3c,%al
f010ba95:	83 e0 e0             	and    $0xffffffe0,%eax
f010ba98:	a2 3c ee 85 f0       	mov    %al,0xf085ee3c
f010ba9d:	a0 3c ee 85 f0       	mov    0xf085ee3c,%al
f010baa2:	83 e0 1f             	and    $0x1f,%eax
f010baa5:	a2 3c ee 85 f0       	mov    %al,0xf085ee3c
f010baaa:	a0 3d ee 85 f0       	mov    0xf085ee3d,%al
f010baaf:	83 c8 0f             	or     $0xf,%eax
f010bab2:	a2 3d ee 85 f0       	mov    %al,0xf085ee3d
f010bab7:	a0 3d ee 85 f0       	mov    0xf085ee3d,%al
f010babc:	83 e0 ef             	and    $0xffffffef,%eax
f010babf:	a2 3d ee 85 f0       	mov    %al,0xf085ee3d
f010bac4:	a0 3d ee 85 f0       	mov    0xf085ee3d,%al
f010bac9:	83 c8 60             	or     $0x60,%eax
f010bacc:	a2 3d ee 85 f0       	mov    %al,0xf085ee3d
f010bad1:	a0 3d ee 85 f0       	mov    0xf085ee3d,%al
f010bad6:	83 c8 80             	or     $0xffffff80,%eax
f010bad9:	a2 3d ee 85 f0       	mov    %al,0xf085ee3d
f010bade:	b8 94 ce 10 f0       	mov    $0xf010ce94,%eax
f010bae3:	c1 e8 10             	shr    $0x10,%eax
f010bae6:	66 a3 3e ee 85 f0    	mov    %ax,0xf085ee3e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010baec:	b8 9e ce 10 f0       	mov    $0xf010ce9e,%eax
f010baf1:	66 a3 40 ee 85 f0    	mov    %ax,0xf085ee40
f010baf7:	66 c7 05 42 ee 85 f0 	movw   $0x8,0xf085ee42
f010bafe:	08 00 
f010bb00:	a0 44 ee 85 f0       	mov    0xf085ee44,%al
f010bb05:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb08:	a2 44 ee 85 f0       	mov    %al,0xf085ee44
f010bb0d:	a0 44 ee 85 f0       	mov    0xf085ee44,%al
f010bb12:	83 e0 1f             	and    $0x1f,%eax
f010bb15:	a2 44 ee 85 f0       	mov    %al,0xf085ee44
f010bb1a:	a0 45 ee 85 f0       	mov    0xf085ee45,%al
f010bb1f:	83 c8 0f             	or     $0xf,%eax
f010bb22:	a2 45 ee 85 f0       	mov    %al,0xf085ee45
f010bb27:	a0 45 ee 85 f0       	mov    0xf085ee45,%al
f010bb2c:	83 e0 ef             	and    $0xffffffef,%eax
f010bb2f:	a2 45 ee 85 f0       	mov    %al,0xf085ee45
f010bb34:	a0 45 ee 85 f0       	mov    0xf085ee45,%al
f010bb39:	83 c8 60             	or     $0x60,%eax
f010bb3c:	a2 45 ee 85 f0       	mov    %al,0xf085ee45
f010bb41:	a0 45 ee 85 f0       	mov    0xf085ee45,%al
f010bb46:	83 c8 80             	or     $0xffffff80,%eax
f010bb49:	a2 45 ee 85 f0       	mov    %al,0xf085ee45
f010bb4e:	b8 9e ce 10 f0       	mov    $0xf010ce9e,%eax
f010bb53:	c1 e8 10             	shr    $0x10,%eax
f010bb56:	66 a3 46 ee 85 f0    	mov    %ax,0xf085ee46
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010bb5c:	b8 a8 ce 10 f0       	mov    $0xf010cea8,%eax
f010bb61:	66 a3 48 ee 85 f0    	mov    %ax,0xf085ee48
f010bb67:	66 c7 05 4a ee 85 f0 	movw   $0x8,0xf085ee4a
f010bb6e:	08 00 
f010bb70:	a0 4c ee 85 f0       	mov    0xf085ee4c,%al
f010bb75:	83 e0 e0             	and    $0xffffffe0,%eax
f010bb78:	a2 4c ee 85 f0       	mov    %al,0xf085ee4c
f010bb7d:	a0 4c ee 85 f0       	mov    0xf085ee4c,%al
f010bb82:	83 e0 1f             	and    $0x1f,%eax
f010bb85:	a2 4c ee 85 f0       	mov    %al,0xf085ee4c
f010bb8a:	a0 4d ee 85 f0       	mov    0xf085ee4d,%al
f010bb8f:	83 e0 f0             	and    $0xfffffff0,%eax
f010bb92:	83 c8 0e             	or     $0xe,%eax
f010bb95:	a2 4d ee 85 f0       	mov    %al,0xf085ee4d
f010bb9a:	a0 4d ee 85 f0       	mov    0xf085ee4d,%al
f010bb9f:	83 e0 ef             	and    $0xffffffef,%eax
f010bba2:	a2 4d ee 85 f0       	mov    %al,0xf085ee4d
f010bba7:	a0 4d ee 85 f0       	mov    0xf085ee4d,%al
f010bbac:	83 c8 60             	or     $0x60,%eax
f010bbaf:	a2 4d ee 85 f0       	mov    %al,0xf085ee4d
f010bbb4:	a0 4d ee 85 f0       	mov    0xf085ee4d,%al
f010bbb9:	83 c8 80             	or     $0xffffff80,%eax
f010bbbc:	a2 4d ee 85 f0       	mov    %al,0xf085ee4d
f010bbc1:	b8 a8 ce 10 f0       	mov    $0xf010cea8,%eax
f010bbc6:	c1 e8 10             	shr    $0x10,%eax
f010bbc9:	66 a3 4e ee 85 f0    	mov    %ax,0xf085ee4e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010bbcf:	b8 b2 ce 10 f0       	mov    $0xf010ceb2,%eax
f010bbd4:	66 a3 50 ee 85 f0    	mov    %ax,0xf085ee50
f010bbda:	66 c7 05 52 ee 85 f0 	movw   $0x8,0xf085ee52
f010bbe1:	08 00 
f010bbe3:	a0 54 ee 85 f0       	mov    0xf085ee54,%al
f010bbe8:	83 e0 e0             	and    $0xffffffe0,%eax
f010bbeb:	a2 54 ee 85 f0       	mov    %al,0xf085ee54
f010bbf0:	a0 54 ee 85 f0       	mov    0xf085ee54,%al
f010bbf5:	83 e0 1f             	and    $0x1f,%eax
f010bbf8:	a2 54 ee 85 f0       	mov    %al,0xf085ee54
f010bbfd:	a0 55 ee 85 f0       	mov    0xf085ee55,%al
f010bc02:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc05:	83 c8 0e             	or     $0xe,%eax
f010bc08:	a2 55 ee 85 f0       	mov    %al,0xf085ee55
f010bc0d:	a0 55 ee 85 f0       	mov    0xf085ee55,%al
f010bc12:	83 e0 ef             	and    $0xffffffef,%eax
f010bc15:	a2 55 ee 85 f0       	mov    %al,0xf085ee55
f010bc1a:	a0 55 ee 85 f0       	mov    0xf085ee55,%al
f010bc1f:	83 c8 60             	or     $0x60,%eax
f010bc22:	a2 55 ee 85 f0       	mov    %al,0xf085ee55
f010bc27:	a0 55 ee 85 f0       	mov    0xf085ee55,%al
f010bc2c:	83 c8 80             	or     $0xffffff80,%eax
f010bc2f:	a2 55 ee 85 f0       	mov    %al,0xf085ee55
f010bc34:	b8 b2 ce 10 f0       	mov    $0xf010ceb2,%eax
f010bc39:	c1 e8 10             	shr    $0x10,%eax
f010bc3c:	66 a3 56 ee 85 f0    	mov    %ax,0xf085ee56
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010bc42:	b8 bc ce 10 f0       	mov    $0xf010cebc,%eax
f010bc47:	66 a3 58 ee 85 f0    	mov    %ax,0xf085ee58
f010bc4d:	66 c7 05 5a ee 85 f0 	movw   $0x8,0xf085ee5a
f010bc54:	08 00 
f010bc56:	a0 5c ee 85 f0       	mov    0xf085ee5c,%al
f010bc5b:	83 e0 e0             	and    $0xffffffe0,%eax
f010bc5e:	a2 5c ee 85 f0       	mov    %al,0xf085ee5c
f010bc63:	a0 5c ee 85 f0       	mov    0xf085ee5c,%al
f010bc68:	83 e0 1f             	and    $0x1f,%eax
f010bc6b:	a2 5c ee 85 f0       	mov    %al,0xf085ee5c
f010bc70:	a0 5d ee 85 f0       	mov    0xf085ee5d,%al
f010bc75:	83 e0 f0             	and    $0xfffffff0,%eax
f010bc78:	83 c8 0e             	or     $0xe,%eax
f010bc7b:	a2 5d ee 85 f0       	mov    %al,0xf085ee5d
f010bc80:	a0 5d ee 85 f0       	mov    0xf085ee5d,%al
f010bc85:	83 e0 ef             	and    $0xffffffef,%eax
f010bc88:	a2 5d ee 85 f0       	mov    %al,0xf085ee5d
f010bc8d:	a0 5d ee 85 f0       	mov    0xf085ee5d,%al
f010bc92:	83 c8 60             	or     $0x60,%eax
f010bc95:	a2 5d ee 85 f0       	mov    %al,0xf085ee5d
f010bc9a:	a0 5d ee 85 f0       	mov    0xf085ee5d,%al
f010bc9f:	83 c8 80             	or     $0xffffff80,%eax
f010bca2:	a2 5d ee 85 f0       	mov    %al,0xf085ee5d
f010bca7:	b8 bc ce 10 f0       	mov    $0xf010cebc,%eax
f010bcac:	c1 e8 10             	shr    $0x10,%eax
f010bcaf:	66 a3 5e ee 85 f0    	mov    %ax,0xf085ee5e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010bcb5:	b8 c6 ce 10 f0       	mov    $0xf010cec6,%eax
f010bcba:	66 a3 70 ee 85 f0    	mov    %ax,0xf085ee70
f010bcc0:	66 c7 05 72 ee 85 f0 	movw   $0x8,0xf085ee72
f010bcc7:	08 00 
f010bcc9:	a0 74 ee 85 f0       	mov    0xf085ee74,%al
f010bcce:	83 e0 e0             	and    $0xffffffe0,%eax
f010bcd1:	a2 74 ee 85 f0       	mov    %al,0xf085ee74
f010bcd6:	a0 74 ee 85 f0       	mov    0xf085ee74,%al
f010bcdb:	83 e0 1f             	and    $0x1f,%eax
f010bcde:	a2 74 ee 85 f0       	mov    %al,0xf085ee74
f010bce3:	a0 75 ee 85 f0       	mov    0xf085ee75,%al
f010bce8:	83 e0 f0             	and    $0xfffffff0,%eax
f010bceb:	83 c8 0e             	or     $0xe,%eax
f010bcee:	a2 75 ee 85 f0       	mov    %al,0xf085ee75
f010bcf3:	a0 75 ee 85 f0       	mov    0xf085ee75,%al
f010bcf8:	83 e0 ef             	and    $0xffffffef,%eax
f010bcfb:	a2 75 ee 85 f0       	mov    %al,0xf085ee75
f010bd00:	a0 75 ee 85 f0       	mov    0xf085ee75,%al
f010bd05:	83 c8 60             	or     $0x60,%eax
f010bd08:	a2 75 ee 85 f0       	mov    %al,0xf085ee75
f010bd0d:	a0 75 ee 85 f0       	mov    0xf085ee75,%al
f010bd12:	83 c8 80             	or     $0xffffff80,%eax
f010bd15:	a2 75 ee 85 f0       	mov    %al,0xf085ee75
f010bd1a:	b8 c6 ce 10 f0       	mov    $0xf010cec6,%eax
f010bd1f:	c1 e8 10             	shr    $0x10,%eax
f010bd22:	66 a3 76 ee 85 f0    	mov    %ax,0xf085ee76
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010bd28:	b8 ce ce 10 f0       	mov    $0xf010cece,%eax
f010bd2d:	66 a3 78 ee 85 f0    	mov    %ax,0xf085ee78
f010bd33:	66 c7 05 7a ee 85 f0 	movw   $0x8,0xf085ee7a
f010bd3a:	08 00 
f010bd3c:	a0 7c ee 85 f0       	mov    0xf085ee7c,%al
f010bd41:	83 e0 e0             	and    $0xffffffe0,%eax
f010bd44:	a2 7c ee 85 f0       	mov    %al,0xf085ee7c
f010bd49:	a0 7c ee 85 f0       	mov    0xf085ee7c,%al
f010bd4e:	83 e0 1f             	and    $0x1f,%eax
f010bd51:	a2 7c ee 85 f0       	mov    %al,0xf085ee7c
f010bd56:	a0 7d ee 85 f0       	mov    0xf085ee7d,%al
f010bd5b:	83 e0 f0             	and    $0xfffffff0,%eax
f010bd5e:	83 c8 0e             	or     $0xe,%eax
f010bd61:	a2 7d ee 85 f0       	mov    %al,0xf085ee7d
f010bd66:	a0 7d ee 85 f0       	mov    0xf085ee7d,%al
f010bd6b:	83 e0 ef             	and    $0xffffffef,%eax
f010bd6e:	a2 7d ee 85 f0       	mov    %al,0xf085ee7d
f010bd73:	a0 7d ee 85 f0       	mov    0xf085ee7d,%al
f010bd78:	83 c8 60             	or     $0x60,%eax
f010bd7b:	a2 7d ee 85 f0       	mov    %al,0xf085ee7d
f010bd80:	a0 7d ee 85 f0       	mov    0xf085ee7d,%al
f010bd85:	83 c8 80             	or     $0xffffff80,%eax
f010bd88:	a2 7d ee 85 f0       	mov    %al,0xf085ee7d
f010bd8d:	b8 ce ce 10 f0       	mov    $0xf010cece,%eax
f010bd92:	c1 e8 10             	shr    $0x10,%eax
f010bd95:	66 a3 7e ee 85 f0    	mov    %ax,0xf085ee7e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010bd9b:	b8 d2 ce 10 f0       	mov    $0xf010ced2,%eax
f010bda0:	66 a3 80 ee 85 f0    	mov    %ax,0xf085ee80
f010bda6:	66 c7 05 82 ee 85 f0 	movw   $0x8,0xf085ee82
f010bdad:	08 00 
f010bdaf:	a0 84 ee 85 f0       	mov    0xf085ee84,%al
f010bdb4:	83 e0 e0             	and    $0xffffffe0,%eax
f010bdb7:	a2 84 ee 85 f0       	mov    %al,0xf085ee84
f010bdbc:	a0 84 ee 85 f0       	mov    0xf085ee84,%al
f010bdc1:	83 e0 1f             	and    $0x1f,%eax
f010bdc4:	a2 84 ee 85 f0       	mov    %al,0xf085ee84
f010bdc9:	a0 85 ee 85 f0       	mov    0xf085ee85,%al
f010bdce:	83 e0 f0             	and    $0xfffffff0,%eax
f010bdd1:	83 c8 0e             	or     $0xe,%eax
f010bdd4:	a2 85 ee 85 f0       	mov    %al,0xf085ee85
f010bdd9:	a0 85 ee 85 f0       	mov    0xf085ee85,%al
f010bdde:	83 e0 ef             	and    $0xffffffef,%eax
f010bde1:	a2 85 ee 85 f0       	mov    %al,0xf085ee85
f010bde6:	a0 85 ee 85 f0       	mov    0xf085ee85,%al
f010bdeb:	83 c8 60             	or     $0x60,%eax
f010bdee:	a2 85 ee 85 f0       	mov    %al,0xf085ee85
f010bdf3:	a0 85 ee 85 f0       	mov    0xf085ee85,%al
f010bdf8:	83 c8 80             	or     $0xffffff80,%eax
f010bdfb:	a2 85 ee 85 f0       	mov    %al,0xf085ee85
f010be00:	b8 d2 ce 10 f0       	mov    $0xf010ced2,%eax
f010be05:	c1 e8 10             	shr    $0x10,%eax
f010be08:	66 a3 86 ee 85 f0    	mov    %ax,0xf085ee86
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010be0e:	b8 d6 ce 10 f0       	mov    $0xf010ced6,%eax
f010be13:	66 a3 88 ee 85 f0    	mov    %ax,0xf085ee88
f010be19:	66 c7 05 8a ee 85 f0 	movw   $0x8,0xf085ee8a
f010be20:	08 00 
f010be22:	a0 8c ee 85 f0       	mov    0xf085ee8c,%al
f010be27:	83 e0 e0             	and    $0xffffffe0,%eax
f010be2a:	a2 8c ee 85 f0       	mov    %al,0xf085ee8c
f010be2f:	a0 8c ee 85 f0       	mov    0xf085ee8c,%al
f010be34:	83 e0 1f             	and    $0x1f,%eax
f010be37:	a2 8c ee 85 f0       	mov    %al,0xf085ee8c
f010be3c:	a0 8d ee 85 f0       	mov    0xf085ee8d,%al
f010be41:	83 e0 f0             	and    $0xfffffff0,%eax
f010be44:	83 c8 0e             	or     $0xe,%eax
f010be47:	a2 8d ee 85 f0       	mov    %al,0xf085ee8d
f010be4c:	a0 8d ee 85 f0       	mov    0xf085ee8d,%al
f010be51:	83 e0 ef             	and    $0xffffffef,%eax
f010be54:	a2 8d ee 85 f0       	mov    %al,0xf085ee8d
f010be59:	a0 8d ee 85 f0       	mov    0xf085ee8d,%al
f010be5e:	83 c8 60             	or     $0x60,%eax
f010be61:	a2 8d ee 85 f0       	mov    %al,0xf085ee8d
f010be66:	a0 8d ee 85 f0       	mov    0xf085ee8d,%al
f010be6b:	83 c8 80             	or     $0xffffff80,%eax
f010be6e:	a2 8d ee 85 f0       	mov    %al,0xf085ee8d
f010be73:	b8 d6 ce 10 f0       	mov    $0xf010ced6,%eax
f010be78:	c1 e8 10             	shr    $0x10,%eax
f010be7b:	66 a3 8e ee 85 f0    	mov    %ax,0xf085ee8e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010be81:	b8 da ce 10 f0       	mov    $0xf010ceda,%eax
f010be86:	66 a3 a0 ee 85 f0    	mov    %ax,0xf085eea0
f010be8c:	66 c7 05 a2 ee 85 f0 	movw   $0x8,0xf085eea2
f010be93:	08 00 
f010be95:	a0 a4 ee 85 f0       	mov    0xf085eea4,%al
f010be9a:	83 e0 e0             	and    $0xffffffe0,%eax
f010be9d:	a2 a4 ee 85 f0       	mov    %al,0xf085eea4
f010bea2:	a0 a4 ee 85 f0       	mov    0xf085eea4,%al
f010bea7:	83 e0 1f             	and    $0x1f,%eax
f010beaa:	a2 a4 ee 85 f0       	mov    %al,0xf085eea4
f010beaf:	a0 a5 ee 85 f0       	mov    0xf085eea5,%al
f010beb4:	83 e0 f0             	and    $0xfffffff0,%eax
f010beb7:	83 c8 0e             	or     $0xe,%eax
f010beba:	a2 a5 ee 85 f0       	mov    %al,0xf085eea5
f010bebf:	a0 a5 ee 85 f0       	mov    0xf085eea5,%al
f010bec4:	83 e0 ef             	and    $0xffffffef,%eax
f010bec7:	a2 a5 ee 85 f0       	mov    %al,0xf085eea5
f010becc:	a0 a5 ee 85 f0       	mov    0xf085eea5,%al
f010bed1:	83 c8 60             	or     $0x60,%eax
f010bed4:	a2 a5 ee 85 f0       	mov    %al,0xf085eea5
f010bed9:	a0 a5 ee 85 f0       	mov    0xf085eea5,%al
f010bede:	83 c8 80             	or     $0xffffff80,%eax
f010bee1:	a2 a5 ee 85 f0       	mov    %al,0xf085eea5
f010bee6:	b8 da ce 10 f0       	mov    $0xf010ceda,%eax
f010beeb:	c1 e8 10             	shr    $0x10,%eax
f010beee:	66 a3 a6 ee 85 f0    	mov    %ax,0xf085eea6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010bef4:	b8 e0 ce 10 f0       	mov    $0xf010cee0,%eax
f010bef9:	66 a3 a8 ee 85 f0    	mov    %ax,0xf085eea8
f010beff:	66 c7 05 aa ee 85 f0 	movw   $0x8,0xf085eeaa
f010bf06:	08 00 
f010bf08:	a0 ac ee 85 f0       	mov    0xf085eeac,%al
f010bf0d:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf10:	a2 ac ee 85 f0       	mov    %al,0xf085eeac
f010bf15:	a0 ac ee 85 f0       	mov    0xf085eeac,%al
f010bf1a:	83 e0 1f             	and    $0x1f,%eax
f010bf1d:	a2 ac ee 85 f0       	mov    %al,0xf085eeac
f010bf22:	a0 ad ee 85 f0       	mov    0xf085eead,%al
f010bf27:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf2a:	83 c8 0e             	or     $0xe,%eax
f010bf2d:	a2 ad ee 85 f0       	mov    %al,0xf085eead
f010bf32:	a0 ad ee 85 f0       	mov    0xf085eead,%al
f010bf37:	83 e0 ef             	and    $0xffffffef,%eax
f010bf3a:	a2 ad ee 85 f0       	mov    %al,0xf085eead
f010bf3f:	a0 ad ee 85 f0       	mov    0xf085eead,%al
f010bf44:	83 c8 60             	or     $0x60,%eax
f010bf47:	a2 ad ee 85 f0       	mov    %al,0xf085eead
f010bf4c:	a0 ad ee 85 f0       	mov    0xf085eead,%al
f010bf51:	83 c8 80             	or     $0xffffff80,%eax
f010bf54:	a2 ad ee 85 f0       	mov    %al,0xf085eead
f010bf59:	b8 e0 ce 10 f0       	mov    $0xf010cee0,%eax
f010bf5e:	c1 e8 10             	shr    $0x10,%eax
f010bf61:	66 a3 ae ee 85 f0    	mov    %ax,0xf085eeae
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010bf67:	b8 e4 ce 10 f0       	mov    $0xf010cee4,%eax
f010bf6c:	66 a3 b0 ee 85 f0    	mov    %ax,0xf085eeb0
f010bf72:	66 c7 05 b2 ee 85 f0 	movw   $0x8,0xf085eeb2
f010bf79:	08 00 
f010bf7b:	a0 b4 ee 85 f0       	mov    0xf085eeb4,%al
f010bf80:	83 e0 e0             	and    $0xffffffe0,%eax
f010bf83:	a2 b4 ee 85 f0       	mov    %al,0xf085eeb4
f010bf88:	a0 b4 ee 85 f0       	mov    0xf085eeb4,%al
f010bf8d:	83 e0 1f             	and    $0x1f,%eax
f010bf90:	a2 b4 ee 85 f0       	mov    %al,0xf085eeb4
f010bf95:	a0 b5 ee 85 f0       	mov    0xf085eeb5,%al
f010bf9a:	83 e0 f0             	and    $0xfffffff0,%eax
f010bf9d:	83 c8 0e             	or     $0xe,%eax
f010bfa0:	a2 b5 ee 85 f0       	mov    %al,0xf085eeb5
f010bfa5:	a0 b5 ee 85 f0       	mov    0xf085eeb5,%al
f010bfaa:	83 e0 ef             	and    $0xffffffef,%eax
f010bfad:	a2 b5 ee 85 f0       	mov    %al,0xf085eeb5
f010bfb2:	a0 b5 ee 85 f0       	mov    0xf085eeb5,%al
f010bfb7:	83 c8 60             	or     $0x60,%eax
f010bfba:	a2 b5 ee 85 f0       	mov    %al,0xf085eeb5
f010bfbf:	a0 b5 ee 85 f0       	mov    0xf085eeb5,%al
f010bfc4:	83 c8 80             	or     $0xffffff80,%eax
f010bfc7:	a2 b5 ee 85 f0       	mov    %al,0xf085eeb5
f010bfcc:	b8 e4 ce 10 f0       	mov    $0xf010cee4,%eax
f010bfd1:	c1 e8 10             	shr    $0x10,%eax
f010bfd4:	66 a3 b6 ee 85 f0    	mov    %ax,0xf085eeb6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010bfda:	b8 ea ce 10 f0       	mov    $0xf010ceea,%eax
f010bfdf:	66 a3 b8 ee 85 f0    	mov    %ax,0xf085eeb8
f010bfe5:	66 c7 05 ba ee 85 f0 	movw   $0x8,0xf085eeba
f010bfec:	08 00 
f010bfee:	a0 bc ee 85 f0       	mov    0xf085eebc,%al
f010bff3:	83 e0 e0             	and    $0xffffffe0,%eax
f010bff6:	a2 bc ee 85 f0       	mov    %al,0xf085eebc
f010bffb:	a0 bc ee 85 f0       	mov    0xf085eebc,%al
f010c000:	83 e0 1f             	and    $0x1f,%eax
f010c003:	a2 bc ee 85 f0       	mov    %al,0xf085eebc
f010c008:	a0 bd ee 85 f0       	mov    0xf085eebd,%al
f010c00d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c010:	83 c8 0e             	or     $0xe,%eax
f010c013:	a2 bd ee 85 f0       	mov    %al,0xf085eebd
f010c018:	a0 bd ee 85 f0       	mov    0xf085eebd,%al
f010c01d:	83 e0 ef             	and    $0xffffffef,%eax
f010c020:	a2 bd ee 85 f0       	mov    %al,0xf085eebd
f010c025:	a0 bd ee 85 f0       	mov    0xf085eebd,%al
f010c02a:	83 c8 60             	or     $0x60,%eax
f010c02d:	a2 bd ee 85 f0       	mov    %al,0xf085eebd
f010c032:	a0 bd ee 85 f0       	mov    0xf085eebd,%al
f010c037:	83 c8 80             	or     $0xffffff80,%eax
f010c03a:	a2 bd ee 85 f0       	mov    %al,0xf085eebd
f010c03f:	b8 ea ce 10 f0       	mov    $0xf010ceea,%eax
f010c044:	c1 e8 10             	shr    $0x10,%eax
f010c047:	66 a3 be ee 85 f0    	mov    %ax,0xf085eebe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010c04d:	b8 f0 ce 10 f0       	mov    $0xf010cef0,%eax
f010c052:	66 a3 20 ef 85 f0    	mov    %ax,0xf085ef20
f010c058:	66 c7 05 22 ef 85 f0 	movw   $0x8,0xf085ef22
f010c05f:	08 00 
f010c061:	a0 24 ef 85 f0       	mov    0xf085ef24,%al
f010c066:	83 e0 e0             	and    $0xffffffe0,%eax
f010c069:	a2 24 ef 85 f0       	mov    %al,0xf085ef24
f010c06e:	a0 24 ef 85 f0       	mov    0xf085ef24,%al
f010c073:	83 e0 1f             	and    $0x1f,%eax
f010c076:	a2 24 ef 85 f0       	mov    %al,0xf085ef24
f010c07b:	a0 25 ef 85 f0       	mov    0xf085ef25,%al
f010c080:	83 e0 f0             	and    $0xfffffff0,%eax
f010c083:	83 c8 0e             	or     $0xe,%eax
f010c086:	a2 25 ef 85 f0       	mov    %al,0xf085ef25
f010c08b:	a0 25 ef 85 f0       	mov    0xf085ef25,%al
f010c090:	83 e0 ef             	and    $0xffffffef,%eax
f010c093:	a2 25 ef 85 f0       	mov    %al,0xf085ef25
f010c098:	a0 25 ef 85 f0       	mov    0xf085ef25,%al
f010c09d:	83 c8 60             	or     $0x60,%eax
f010c0a0:	a2 25 ef 85 f0       	mov    %al,0xf085ef25
f010c0a5:	a0 25 ef 85 f0       	mov    0xf085ef25,%al
f010c0aa:	83 c8 80             	or     $0xffffff80,%eax
f010c0ad:	a2 25 ef 85 f0       	mov    %al,0xf085ef25
f010c0b2:	b8 f0 ce 10 f0       	mov    $0xf010cef0,%eax
f010c0b7:	c1 e8 10             	shr    $0x10,%eax
f010c0ba:	66 a3 26 ef 85 f0    	mov    %ax,0xf085ef26
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010c0c0:	b8 f6 ce 10 f0       	mov    $0xf010cef6,%eax
f010c0c5:	66 a3 28 ef 85 f0    	mov    %ax,0xf085ef28
f010c0cb:	66 c7 05 2a ef 85 f0 	movw   $0x8,0xf085ef2a
f010c0d2:	08 00 
f010c0d4:	a0 2c ef 85 f0       	mov    0xf085ef2c,%al
f010c0d9:	83 e0 e0             	and    $0xffffffe0,%eax
f010c0dc:	a2 2c ef 85 f0       	mov    %al,0xf085ef2c
f010c0e1:	a0 2c ef 85 f0       	mov    0xf085ef2c,%al
f010c0e6:	83 e0 1f             	and    $0x1f,%eax
f010c0e9:	a2 2c ef 85 f0       	mov    %al,0xf085ef2c
f010c0ee:	a0 2d ef 85 f0       	mov    0xf085ef2d,%al
f010c0f3:	83 e0 f0             	and    $0xfffffff0,%eax
f010c0f6:	83 c8 0e             	or     $0xe,%eax
f010c0f9:	a2 2d ef 85 f0       	mov    %al,0xf085ef2d
f010c0fe:	a0 2d ef 85 f0       	mov    0xf085ef2d,%al
f010c103:	83 e0 ef             	and    $0xffffffef,%eax
f010c106:	a2 2d ef 85 f0       	mov    %al,0xf085ef2d
f010c10b:	a0 2d ef 85 f0       	mov    0xf085ef2d,%al
f010c110:	83 c8 60             	or     $0x60,%eax
f010c113:	a2 2d ef 85 f0       	mov    %al,0xf085ef2d
f010c118:	a0 2d ef 85 f0       	mov    0xf085ef2d,%al
f010c11d:	83 c8 80             	or     $0xffffff80,%eax
f010c120:	a2 2d ef 85 f0       	mov    %al,0xf085ef2d
f010c125:	b8 f6 ce 10 f0       	mov    $0xf010cef6,%eax
f010c12a:	c1 e8 10             	shr    $0x10,%eax
f010c12d:	66 a3 2e ef 85 f0    	mov    %ax,0xf085ef2e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010c133:	b8 fc ce 10 f0       	mov    $0xf010cefc,%eax
f010c138:	66 a3 30 ef 85 f0    	mov    %ax,0xf085ef30
f010c13e:	66 c7 05 32 ef 85 f0 	movw   $0x8,0xf085ef32
f010c145:	08 00 
f010c147:	a0 34 ef 85 f0       	mov    0xf085ef34,%al
f010c14c:	83 e0 e0             	and    $0xffffffe0,%eax
f010c14f:	a2 34 ef 85 f0       	mov    %al,0xf085ef34
f010c154:	a0 34 ef 85 f0       	mov    0xf085ef34,%al
f010c159:	83 e0 1f             	and    $0x1f,%eax
f010c15c:	a2 34 ef 85 f0       	mov    %al,0xf085ef34
f010c161:	a0 35 ef 85 f0       	mov    0xf085ef35,%al
f010c166:	83 e0 f0             	and    $0xfffffff0,%eax
f010c169:	83 c8 0e             	or     $0xe,%eax
f010c16c:	a2 35 ef 85 f0       	mov    %al,0xf085ef35
f010c171:	a0 35 ef 85 f0       	mov    0xf085ef35,%al
f010c176:	83 e0 ef             	and    $0xffffffef,%eax
f010c179:	a2 35 ef 85 f0       	mov    %al,0xf085ef35
f010c17e:	a0 35 ef 85 f0       	mov    0xf085ef35,%al
f010c183:	83 c8 60             	or     $0x60,%eax
f010c186:	a2 35 ef 85 f0       	mov    %al,0xf085ef35
f010c18b:	a0 35 ef 85 f0       	mov    0xf085ef35,%al
f010c190:	83 c8 80             	or     $0xffffff80,%eax
f010c193:	a2 35 ef 85 f0       	mov    %al,0xf085ef35
f010c198:	b8 fc ce 10 f0       	mov    $0xf010cefc,%eax
f010c19d:	c1 e8 10             	shr    $0x10,%eax
f010c1a0:	66 a3 36 ef 85 f0    	mov    %ax,0xf085ef36
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010c1a6:	b8 02 cf 10 f0       	mov    $0xf010cf02,%eax
f010c1ab:	66 a3 38 ef 85 f0    	mov    %ax,0xf085ef38
f010c1b1:	66 c7 05 3a ef 85 f0 	movw   $0x8,0xf085ef3a
f010c1b8:	08 00 
f010c1ba:	a0 3c ef 85 f0       	mov    0xf085ef3c,%al
f010c1bf:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1c2:	a2 3c ef 85 f0       	mov    %al,0xf085ef3c
f010c1c7:	a0 3c ef 85 f0       	mov    0xf085ef3c,%al
f010c1cc:	83 e0 1f             	and    $0x1f,%eax
f010c1cf:	a2 3c ef 85 f0       	mov    %al,0xf085ef3c
f010c1d4:	a0 3d ef 85 f0       	mov    0xf085ef3d,%al
f010c1d9:	83 e0 f0             	and    $0xfffffff0,%eax
f010c1dc:	83 c8 0e             	or     $0xe,%eax
f010c1df:	a2 3d ef 85 f0       	mov    %al,0xf085ef3d
f010c1e4:	a0 3d ef 85 f0       	mov    0xf085ef3d,%al
f010c1e9:	83 e0 ef             	and    $0xffffffef,%eax
f010c1ec:	a2 3d ef 85 f0       	mov    %al,0xf085ef3d
f010c1f1:	a0 3d ef 85 f0       	mov    0xf085ef3d,%al
f010c1f6:	83 c8 60             	or     $0x60,%eax
f010c1f9:	a2 3d ef 85 f0       	mov    %al,0xf085ef3d
f010c1fe:	a0 3d ef 85 f0       	mov    0xf085ef3d,%al
f010c203:	83 c8 80             	or     $0xffffff80,%eax
f010c206:	a2 3d ef 85 f0       	mov    %al,0xf085ef3d
f010c20b:	b8 02 cf 10 f0       	mov    $0xf010cf02,%eax
f010c210:	c1 e8 10             	shr    $0x10,%eax
f010c213:	66 a3 3e ef 85 f0    	mov    %ax,0xf085ef3e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010c219:	b8 08 cf 10 f0       	mov    $0xf010cf08,%eax
f010c21e:	66 a3 40 ef 85 f0    	mov    %ax,0xf085ef40
f010c224:	66 c7 05 42 ef 85 f0 	movw   $0x8,0xf085ef42
f010c22b:	08 00 
f010c22d:	a0 44 ef 85 f0       	mov    0xf085ef44,%al
f010c232:	83 e0 e0             	and    $0xffffffe0,%eax
f010c235:	a2 44 ef 85 f0       	mov    %al,0xf085ef44
f010c23a:	a0 44 ef 85 f0       	mov    0xf085ef44,%al
f010c23f:	83 e0 1f             	and    $0x1f,%eax
f010c242:	a2 44 ef 85 f0       	mov    %al,0xf085ef44
f010c247:	a0 45 ef 85 f0       	mov    0xf085ef45,%al
f010c24c:	83 e0 f0             	and    $0xfffffff0,%eax
f010c24f:	83 c8 0e             	or     $0xe,%eax
f010c252:	a2 45 ef 85 f0       	mov    %al,0xf085ef45
f010c257:	a0 45 ef 85 f0       	mov    0xf085ef45,%al
f010c25c:	83 e0 ef             	and    $0xffffffef,%eax
f010c25f:	a2 45 ef 85 f0       	mov    %al,0xf085ef45
f010c264:	a0 45 ef 85 f0       	mov    0xf085ef45,%al
f010c269:	83 c8 60             	or     $0x60,%eax
f010c26c:	a2 45 ef 85 f0       	mov    %al,0xf085ef45
f010c271:	a0 45 ef 85 f0       	mov    0xf085ef45,%al
f010c276:	83 c8 80             	or     $0xffffff80,%eax
f010c279:	a2 45 ef 85 f0       	mov    %al,0xf085ef45
f010c27e:	b8 08 cf 10 f0       	mov    $0xf010cf08,%eax
f010c283:	c1 e8 10             	shr    $0x10,%eax
f010c286:	66 a3 46 ef 85 f0    	mov    %ax,0xf085ef46
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010c28c:	b8 0e cf 10 f0       	mov    $0xf010cf0e,%eax
f010c291:	66 a3 48 ef 85 f0    	mov    %ax,0xf085ef48
f010c297:	66 c7 05 4a ef 85 f0 	movw   $0x8,0xf085ef4a
f010c29e:	08 00 
f010c2a0:	a0 4c ef 85 f0       	mov    0xf085ef4c,%al
f010c2a5:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2a8:	a2 4c ef 85 f0       	mov    %al,0xf085ef4c
f010c2ad:	a0 4c ef 85 f0       	mov    0xf085ef4c,%al
f010c2b2:	83 e0 1f             	and    $0x1f,%eax
f010c2b5:	a2 4c ef 85 f0       	mov    %al,0xf085ef4c
f010c2ba:	a0 4d ef 85 f0       	mov    0xf085ef4d,%al
f010c2bf:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2c2:	83 c8 0e             	or     $0xe,%eax
f010c2c5:	a2 4d ef 85 f0       	mov    %al,0xf085ef4d
f010c2ca:	a0 4d ef 85 f0       	mov    0xf085ef4d,%al
f010c2cf:	83 e0 ef             	and    $0xffffffef,%eax
f010c2d2:	a2 4d ef 85 f0       	mov    %al,0xf085ef4d
f010c2d7:	a0 4d ef 85 f0       	mov    0xf085ef4d,%al
f010c2dc:	83 c8 60             	or     $0x60,%eax
f010c2df:	a2 4d ef 85 f0       	mov    %al,0xf085ef4d
f010c2e4:	a0 4d ef 85 f0       	mov    0xf085ef4d,%al
f010c2e9:	83 c8 80             	or     $0xffffff80,%eax
f010c2ec:	a2 4d ef 85 f0       	mov    %al,0xf085ef4d
f010c2f1:	b8 0e cf 10 f0       	mov    $0xf010cf0e,%eax
f010c2f6:	c1 e8 10             	shr    $0x10,%eax
f010c2f9:	66 a3 4e ef 85 f0    	mov    %ax,0xf085ef4e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010c2ff:	b8 14 cf 10 f0       	mov    $0xf010cf14,%eax
f010c304:	66 a3 50 ef 85 f0    	mov    %ax,0xf085ef50
f010c30a:	66 c7 05 52 ef 85 f0 	movw   $0x8,0xf085ef52
f010c311:	08 00 
f010c313:	a0 54 ef 85 f0       	mov    0xf085ef54,%al
f010c318:	83 e0 e0             	and    $0xffffffe0,%eax
f010c31b:	a2 54 ef 85 f0       	mov    %al,0xf085ef54
f010c320:	a0 54 ef 85 f0       	mov    0xf085ef54,%al
f010c325:	83 e0 1f             	and    $0x1f,%eax
f010c328:	a2 54 ef 85 f0       	mov    %al,0xf085ef54
f010c32d:	a0 55 ef 85 f0       	mov    0xf085ef55,%al
f010c332:	83 e0 f0             	and    $0xfffffff0,%eax
f010c335:	83 c8 0e             	or     $0xe,%eax
f010c338:	a2 55 ef 85 f0       	mov    %al,0xf085ef55
f010c33d:	a0 55 ef 85 f0       	mov    0xf085ef55,%al
f010c342:	83 e0 ef             	and    $0xffffffef,%eax
f010c345:	a2 55 ef 85 f0       	mov    %al,0xf085ef55
f010c34a:	a0 55 ef 85 f0       	mov    0xf085ef55,%al
f010c34f:	83 c8 60             	or     $0x60,%eax
f010c352:	a2 55 ef 85 f0       	mov    %al,0xf085ef55
f010c357:	a0 55 ef 85 f0       	mov    0xf085ef55,%al
f010c35c:	83 c8 80             	or     $0xffffff80,%eax
f010c35f:	a2 55 ef 85 f0       	mov    %al,0xf085ef55
f010c364:	b8 14 cf 10 f0       	mov    $0xf010cf14,%eax
f010c369:	c1 e8 10             	shr    $0x10,%eax
f010c36c:	66 a3 56 ef 85 f0    	mov    %ax,0xf085ef56
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010c372:	b8 1a cf 10 f0       	mov    $0xf010cf1a,%eax
f010c377:	66 a3 58 ef 85 f0    	mov    %ax,0xf085ef58
f010c37d:	66 c7 05 5a ef 85 f0 	movw   $0x8,0xf085ef5a
f010c384:	08 00 
f010c386:	a0 5c ef 85 f0       	mov    0xf085ef5c,%al
f010c38b:	83 e0 e0             	and    $0xffffffe0,%eax
f010c38e:	a2 5c ef 85 f0       	mov    %al,0xf085ef5c
f010c393:	a0 5c ef 85 f0       	mov    0xf085ef5c,%al
f010c398:	83 e0 1f             	and    $0x1f,%eax
f010c39b:	a2 5c ef 85 f0       	mov    %al,0xf085ef5c
f010c3a0:	a0 5d ef 85 f0       	mov    0xf085ef5d,%al
f010c3a5:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3a8:	83 c8 0e             	or     $0xe,%eax
f010c3ab:	a2 5d ef 85 f0       	mov    %al,0xf085ef5d
f010c3b0:	a0 5d ef 85 f0       	mov    0xf085ef5d,%al
f010c3b5:	83 e0 ef             	and    $0xffffffef,%eax
f010c3b8:	a2 5d ef 85 f0       	mov    %al,0xf085ef5d
f010c3bd:	a0 5d ef 85 f0       	mov    0xf085ef5d,%al
f010c3c2:	83 c8 60             	or     $0x60,%eax
f010c3c5:	a2 5d ef 85 f0       	mov    %al,0xf085ef5d
f010c3ca:	a0 5d ef 85 f0       	mov    0xf085ef5d,%al
f010c3cf:	83 c8 80             	or     $0xffffff80,%eax
f010c3d2:	a2 5d ef 85 f0       	mov    %al,0xf085ef5d
f010c3d7:	b8 1a cf 10 f0       	mov    $0xf010cf1a,%eax
f010c3dc:	c1 e8 10             	shr    $0x10,%eax
f010c3df:	66 a3 5e ef 85 f0    	mov    %ax,0xf085ef5e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010c3e5:	b8 20 cf 10 f0       	mov    $0xf010cf20,%eax
f010c3ea:	66 a3 60 ef 85 f0    	mov    %ax,0xf085ef60
f010c3f0:	66 c7 05 62 ef 85 f0 	movw   $0x8,0xf085ef62
f010c3f7:	08 00 
f010c3f9:	a0 64 ef 85 f0       	mov    0xf085ef64,%al
f010c3fe:	83 e0 e0             	and    $0xffffffe0,%eax
f010c401:	a2 64 ef 85 f0       	mov    %al,0xf085ef64
f010c406:	a0 64 ef 85 f0       	mov    0xf085ef64,%al
f010c40b:	83 e0 1f             	and    $0x1f,%eax
f010c40e:	a2 64 ef 85 f0       	mov    %al,0xf085ef64
f010c413:	a0 65 ef 85 f0       	mov    0xf085ef65,%al
f010c418:	83 e0 f0             	and    $0xfffffff0,%eax
f010c41b:	83 c8 0e             	or     $0xe,%eax
f010c41e:	a2 65 ef 85 f0       	mov    %al,0xf085ef65
f010c423:	a0 65 ef 85 f0       	mov    0xf085ef65,%al
f010c428:	83 e0 ef             	and    $0xffffffef,%eax
f010c42b:	a2 65 ef 85 f0       	mov    %al,0xf085ef65
f010c430:	a0 65 ef 85 f0       	mov    0xf085ef65,%al
f010c435:	83 c8 60             	or     $0x60,%eax
f010c438:	a2 65 ef 85 f0       	mov    %al,0xf085ef65
f010c43d:	a0 65 ef 85 f0       	mov    0xf085ef65,%al
f010c442:	83 c8 80             	or     $0xffffff80,%eax
f010c445:	a2 65 ef 85 f0       	mov    %al,0xf085ef65
f010c44a:	b8 20 cf 10 f0       	mov    $0xf010cf20,%eax
f010c44f:	c1 e8 10             	shr    $0x10,%eax
f010c452:	66 a3 66 ef 85 f0    	mov    %ax,0xf085ef66
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010c458:	b8 26 cf 10 f0       	mov    $0xf010cf26,%eax
f010c45d:	66 a3 68 ef 85 f0    	mov    %ax,0xf085ef68
f010c463:	66 c7 05 6a ef 85 f0 	movw   $0x8,0xf085ef6a
f010c46a:	08 00 
f010c46c:	a0 6c ef 85 f0       	mov    0xf085ef6c,%al
f010c471:	83 e0 e0             	and    $0xffffffe0,%eax
f010c474:	a2 6c ef 85 f0       	mov    %al,0xf085ef6c
f010c479:	a0 6c ef 85 f0       	mov    0xf085ef6c,%al
f010c47e:	83 e0 1f             	and    $0x1f,%eax
f010c481:	a2 6c ef 85 f0       	mov    %al,0xf085ef6c
f010c486:	a0 6d ef 85 f0       	mov    0xf085ef6d,%al
f010c48b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c48e:	83 c8 0e             	or     $0xe,%eax
f010c491:	a2 6d ef 85 f0       	mov    %al,0xf085ef6d
f010c496:	a0 6d ef 85 f0       	mov    0xf085ef6d,%al
f010c49b:	83 e0 ef             	and    $0xffffffef,%eax
f010c49e:	a2 6d ef 85 f0       	mov    %al,0xf085ef6d
f010c4a3:	a0 6d ef 85 f0       	mov    0xf085ef6d,%al
f010c4a8:	83 c8 60             	or     $0x60,%eax
f010c4ab:	a2 6d ef 85 f0       	mov    %al,0xf085ef6d
f010c4b0:	a0 6d ef 85 f0       	mov    0xf085ef6d,%al
f010c4b5:	83 c8 80             	or     $0xffffff80,%eax
f010c4b8:	a2 6d ef 85 f0       	mov    %al,0xf085ef6d
f010c4bd:	b8 26 cf 10 f0       	mov    $0xf010cf26,%eax
f010c4c2:	c1 e8 10             	shr    $0x10,%eax
f010c4c5:	66 a3 6e ef 85 f0    	mov    %ax,0xf085ef6e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010c4cb:	b8 2c cf 10 f0       	mov    $0xf010cf2c,%eax
f010c4d0:	66 a3 70 ef 85 f0    	mov    %ax,0xf085ef70
f010c4d6:	66 c7 05 72 ef 85 f0 	movw   $0x8,0xf085ef72
f010c4dd:	08 00 
f010c4df:	a0 74 ef 85 f0       	mov    0xf085ef74,%al
f010c4e4:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4e7:	a2 74 ef 85 f0       	mov    %al,0xf085ef74
f010c4ec:	a0 74 ef 85 f0       	mov    0xf085ef74,%al
f010c4f1:	83 e0 1f             	and    $0x1f,%eax
f010c4f4:	a2 74 ef 85 f0       	mov    %al,0xf085ef74
f010c4f9:	a0 75 ef 85 f0       	mov    0xf085ef75,%al
f010c4fe:	83 e0 f0             	and    $0xfffffff0,%eax
f010c501:	83 c8 0e             	or     $0xe,%eax
f010c504:	a2 75 ef 85 f0       	mov    %al,0xf085ef75
f010c509:	a0 75 ef 85 f0       	mov    0xf085ef75,%al
f010c50e:	83 e0 ef             	and    $0xffffffef,%eax
f010c511:	a2 75 ef 85 f0       	mov    %al,0xf085ef75
f010c516:	a0 75 ef 85 f0       	mov    0xf085ef75,%al
f010c51b:	83 c8 60             	or     $0x60,%eax
f010c51e:	a2 75 ef 85 f0       	mov    %al,0xf085ef75
f010c523:	a0 75 ef 85 f0       	mov    0xf085ef75,%al
f010c528:	83 c8 80             	or     $0xffffff80,%eax
f010c52b:	a2 75 ef 85 f0       	mov    %al,0xf085ef75
f010c530:	b8 2c cf 10 f0       	mov    $0xf010cf2c,%eax
f010c535:	c1 e8 10             	shr    $0x10,%eax
f010c538:	66 a3 76 ef 85 f0    	mov    %ax,0xf085ef76
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010c53e:	b8 32 cf 10 f0       	mov    $0xf010cf32,%eax
f010c543:	66 a3 78 ef 85 f0    	mov    %ax,0xf085ef78
f010c549:	66 c7 05 7a ef 85 f0 	movw   $0x8,0xf085ef7a
f010c550:	08 00 
f010c552:	a0 7c ef 85 f0       	mov    0xf085ef7c,%al
f010c557:	83 e0 e0             	and    $0xffffffe0,%eax
f010c55a:	a2 7c ef 85 f0       	mov    %al,0xf085ef7c
f010c55f:	a0 7c ef 85 f0       	mov    0xf085ef7c,%al
f010c564:	83 e0 1f             	and    $0x1f,%eax
f010c567:	a2 7c ef 85 f0       	mov    %al,0xf085ef7c
f010c56c:	a0 7d ef 85 f0       	mov    0xf085ef7d,%al
f010c571:	83 e0 f0             	and    $0xfffffff0,%eax
f010c574:	83 c8 0e             	or     $0xe,%eax
f010c577:	a2 7d ef 85 f0       	mov    %al,0xf085ef7d
f010c57c:	a0 7d ef 85 f0       	mov    0xf085ef7d,%al
f010c581:	83 e0 ef             	and    $0xffffffef,%eax
f010c584:	a2 7d ef 85 f0       	mov    %al,0xf085ef7d
f010c589:	a0 7d ef 85 f0       	mov    0xf085ef7d,%al
f010c58e:	83 c8 60             	or     $0x60,%eax
f010c591:	a2 7d ef 85 f0       	mov    %al,0xf085ef7d
f010c596:	a0 7d ef 85 f0       	mov    0xf085ef7d,%al
f010c59b:	83 c8 80             	or     $0xffffff80,%eax
f010c59e:	a2 7d ef 85 f0       	mov    %al,0xf085ef7d
f010c5a3:	b8 32 cf 10 f0       	mov    $0xf010cf32,%eax
f010c5a8:	c1 e8 10             	shr    $0x10,%eax
f010c5ab:	66 a3 7e ef 85 f0    	mov    %ax,0xf085ef7e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010c5b1:	b8 38 cf 10 f0       	mov    $0xf010cf38,%eax
f010c5b6:	66 a3 80 ef 85 f0    	mov    %ax,0xf085ef80
f010c5bc:	66 c7 05 82 ef 85 f0 	movw   $0x8,0xf085ef82
f010c5c3:	08 00 
f010c5c5:	a0 84 ef 85 f0       	mov    0xf085ef84,%al
f010c5ca:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5cd:	a2 84 ef 85 f0       	mov    %al,0xf085ef84
f010c5d2:	a0 84 ef 85 f0       	mov    0xf085ef84,%al
f010c5d7:	83 e0 1f             	and    $0x1f,%eax
f010c5da:	a2 84 ef 85 f0       	mov    %al,0xf085ef84
f010c5df:	a0 85 ef 85 f0       	mov    0xf085ef85,%al
f010c5e4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c5e7:	83 c8 0e             	or     $0xe,%eax
f010c5ea:	a2 85 ef 85 f0       	mov    %al,0xf085ef85
f010c5ef:	a0 85 ef 85 f0       	mov    0xf085ef85,%al
f010c5f4:	83 e0 ef             	and    $0xffffffef,%eax
f010c5f7:	a2 85 ef 85 f0       	mov    %al,0xf085ef85
f010c5fc:	a0 85 ef 85 f0       	mov    0xf085ef85,%al
f010c601:	83 c8 60             	or     $0x60,%eax
f010c604:	a2 85 ef 85 f0       	mov    %al,0xf085ef85
f010c609:	a0 85 ef 85 f0       	mov    0xf085ef85,%al
f010c60e:	83 c8 80             	or     $0xffffff80,%eax
f010c611:	a2 85 ef 85 f0       	mov    %al,0xf085ef85
f010c616:	b8 38 cf 10 f0       	mov    $0xf010cf38,%eax
f010c61b:	c1 e8 10             	shr    $0x10,%eax
f010c61e:	66 a3 86 ef 85 f0    	mov    %ax,0xf085ef86
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010c624:	b8 3e cf 10 f0       	mov    $0xf010cf3e,%eax
f010c629:	66 a3 88 ef 85 f0    	mov    %ax,0xf085ef88
f010c62f:	66 c7 05 8a ef 85 f0 	movw   $0x8,0xf085ef8a
f010c636:	08 00 
f010c638:	a0 8c ef 85 f0       	mov    0xf085ef8c,%al
f010c63d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c640:	a2 8c ef 85 f0       	mov    %al,0xf085ef8c
f010c645:	a0 8c ef 85 f0       	mov    0xf085ef8c,%al
f010c64a:	83 e0 1f             	and    $0x1f,%eax
f010c64d:	a2 8c ef 85 f0       	mov    %al,0xf085ef8c
f010c652:	a0 8d ef 85 f0       	mov    0xf085ef8d,%al
f010c657:	83 e0 f0             	and    $0xfffffff0,%eax
f010c65a:	83 c8 0e             	or     $0xe,%eax
f010c65d:	a2 8d ef 85 f0       	mov    %al,0xf085ef8d
f010c662:	a0 8d ef 85 f0       	mov    0xf085ef8d,%al
f010c667:	83 e0 ef             	and    $0xffffffef,%eax
f010c66a:	a2 8d ef 85 f0       	mov    %al,0xf085ef8d
f010c66f:	a0 8d ef 85 f0       	mov    0xf085ef8d,%al
f010c674:	83 c8 60             	or     $0x60,%eax
f010c677:	a2 8d ef 85 f0       	mov    %al,0xf085ef8d
f010c67c:	a0 8d ef 85 f0       	mov    0xf085ef8d,%al
f010c681:	83 c8 80             	or     $0xffffff80,%eax
f010c684:	a2 8d ef 85 f0       	mov    %al,0xf085ef8d
f010c689:	b8 3e cf 10 f0       	mov    $0xf010cf3e,%eax
f010c68e:	c1 e8 10             	shr    $0x10,%eax
f010c691:	66 a3 8e ef 85 f0    	mov    %ax,0xf085ef8e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010c697:	b8 44 cf 10 f0       	mov    $0xf010cf44,%eax
f010c69c:	66 a3 90 ef 85 f0    	mov    %ax,0xf085ef90
f010c6a2:	66 c7 05 92 ef 85 f0 	movw   $0x8,0xf085ef92
f010c6a9:	08 00 
f010c6ab:	a0 94 ef 85 f0       	mov    0xf085ef94,%al
f010c6b0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c6b3:	a2 94 ef 85 f0       	mov    %al,0xf085ef94
f010c6b8:	a0 94 ef 85 f0       	mov    0xf085ef94,%al
f010c6bd:	83 e0 1f             	and    $0x1f,%eax
f010c6c0:	a2 94 ef 85 f0       	mov    %al,0xf085ef94
f010c6c5:	a0 95 ef 85 f0       	mov    0xf085ef95,%al
f010c6ca:	83 e0 f0             	and    $0xfffffff0,%eax
f010c6cd:	83 c8 0e             	or     $0xe,%eax
f010c6d0:	a2 95 ef 85 f0       	mov    %al,0xf085ef95
f010c6d5:	a0 95 ef 85 f0       	mov    0xf085ef95,%al
f010c6da:	83 e0 ef             	and    $0xffffffef,%eax
f010c6dd:	a2 95 ef 85 f0       	mov    %al,0xf085ef95
f010c6e2:	a0 95 ef 85 f0       	mov    0xf085ef95,%al
f010c6e7:	83 c8 60             	or     $0x60,%eax
f010c6ea:	a2 95 ef 85 f0       	mov    %al,0xf085ef95
f010c6ef:	a0 95 ef 85 f0       	mov    0xf085ef95,%al
f010c6f4:	83 c8 80             	or     $0xffffff80,%eax
f010c6f7:	a2 95 ef 85 f0       	mov    %al,0xf085ef95
f010c6fc:	b8 44 cf 10 f0       	mov    $0xf010cf44,%eax
f010c701:	c1 e8 10             	shr    $0x10,%eax
f010c704:	66 a3 96 ef 85 f0    	mov    %ax,0xf085ef96
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010c70a:	b8 4a cf 10 f0       	mov    $0xf010cf4a,%eax
f010c70f:	66 a3 98 ef 85 f0    	mov    %ax,0xf085ef98
f010c715:	66 c7 05 9a ef 85 f0 	movw   $0x8,0xf085ef9a
f010c71c:	08 00 
f010c71e:	a0 9c ef 85 f0       	mov    0xf085ef9c,%al
f010c723:	83 e0 e0             	and    $0xffffffe0,%eax
f010c726:	a2 9c ef 85 f0       	mov    %al,0xf085ef9c
f010c72b:	a0 9c ef 85 f0       	mov    0xf085ef9c,%al
f010c730:	83 e0 1f             	and    $0x1f,%eax
f010c733:	a2 9c ef 85 f0       	mov    %al,0xf085ef9c
f010c738:	a0 9d ef 85 f0       	mov    0xf085ef9d,%al
f010c73d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c740:	83 c8 0e             	or     $0xe,%eax
f010c743:	a2 9d ef 85 f0       	mov    %al,0xf085ef9d
f010c748:	a0 9d ef 85 f0       	mov    0xf085ef9d,%al
f010c74d:	83 e0 ef             	and    $0xffffffef,%eax
f010c750:	a2 9d ef 85 f0       	mov    %al,0xf085ef9d
f010c755:	a0 9d ef 85 f0       	mov    0xf085ef9d,%al
f010c75a:	83 c8 60             	or     $0x60,%eax
f010c75d:	a2 9d ef 85 f0       	mov    %al,0xf085ef9d
f010c762:	a0 9d ef 85 f0       	mov    0xf085ef9d,%al
f010c767:	83 c8 80             	or     $0xffffff80,%eax
f010c76a:	a2 9d ef 85 f0       	mov    %al,0xf085ef9d
f010c76f:	b8 4a cf 10 f0       	mov    $0xf010cf4a,%eax
f010c774:	c1 e8 10             	shr    $0x10,%eax
f010c777:	66 a3 9e ef 85 f0    	mov    %ax,0xf085ef9e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010c77d:	c7 05 44 f6 85 f0 00 	movl   $0xefc00000,0xf085f644
f010c784:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010c787:	66 c7 05 48 f6 85 f0 	movw   $0x10,0xf085f648
f010c78e:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010c790:	66 c7 05 e8 38 19 f0 	movw   $0x68,0xf01938e8
f010c797:	68 00 
f010c799:	b8 40 f6 85 f0       	mov    $0xf085f640,%eax
f010c79e:	66 a3 ea 38 19 f0    	mov    %ax,0xf01938ea
f010c7a4:	b8 40 f6 85 f0       	mov    $0xf085f640,%eax
f010c7a9:	c1 e8 10             	shr    $0x10,%eax
f010c7ac:	a2 ec 38 19 f0       	mov    %al,0xf01938ec
f010c7b1:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c7b6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7b9:	83 c8 09             	or     $0x9,%eax
f010c7bc:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7c1:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c7c6:	83 c8 10             	or     $0x10,%eax
f010c7c9:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7ce:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c7d3:	83 e0 9f             	and    $0xffffff9f,%eax
f010c7d6:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7db:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c7e0:	83 c8 80             	or     $0xffffff80,%eax
f010c7e3:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c7e8:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7ed:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7f0:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c7f5:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c7fa:	83 e0 ef             	and    $0xffffffef,%eax
f010c7fd:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c802:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c807:	83 e0 df             	and    $0xffffffdf,%eax
f010c80a:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c80f:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c814:	83 c8 40             	or     $0x40,%eax
f010c817:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c81c:	a0 ee 38 19 f0       	mov    0xf01938ee,%al
f010c821:	83 e0 7f             	and    $0x7f,%eax
f010c824:	a2 ee 38 19 f0       	mov    %al,0xf01938ee
f010c829:	b8 40 f6 85 f0       	mov    $0xf085f640,%eax
f010c82e:	c1 e8 18             	shr    $0x18,%eax
f010c831:	a2 ef 38 19 f0       	mov    %al,0xf01938ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010c836:	a0 ed 38 19 f0       	mov    0xf01938ed,%al
f010c83b:	83 e0 ef             	and    $0xffffffef,%eax
f010c83e:	a2 ed 38 19 f0       	mov    %al,0xf01938ed
f010c843:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c849:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010c84d:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010c850:	0f 01 1d 1c 3d 19 f0 	lidtl  0xf0193d1c
}
f010c857:	90                   	nop
f010c858:	c9                   	leave  
f010c859:	c3                   	ret    

f010c85a <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010c85a:	55                   	push   %ebp
f010c85b:	89 e5                	mov    %esp,%ebp
f010c85d:	53                   	push   %ebx
f010c85e:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010c861:	83 ec 08             	sub    $0x8,%esp
f010c864:	ff 75 08             	pushl  0x8(%ebp)
f010c867:	68 fb 76 13 f0       	push   $0xf01376fb
f010c86c:	e8 9d 44 ff ff       	call   f0100d0e <cprintf>
f010c871:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010c874:	8b 45 08             	mov    0x8(%ebp),%eax
f010c877:	83 ec 0c             	sub    $0xc,%esp
f010c87a:	50                   	push   %eax
f010c87b:	e8 fd 00 00 00       	call   f010c97d <print_regs>
f010c880:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010c883:	8b 45 08             	mov    0x8(%ebp),%eax
f010c886:	8b 40 20             	mov    0x20(%eax),%eax
f010c889:	0f b7 c0             	movzwl %ax,%eax
f010c88c:	83 ec 08             	sub    $0x8,%esp
f010c88f:	50                   	push   %eax
f010c890:	68 0d 77 13 f0       	push   $0xf013770d
f010c895:	e8 74 44 ff ff       	call   f0100d0e <cprintf>
f010c89a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010c89d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8a0:	8b 40 24             	mov    0x24(%eax),%eax
f010c8a3:	0f b7 c0             	movzwl %ax,%eax
f010c8a6:	83 ec 08             	sub    $0x8,%esp
f010c8a9:	50                   	push   %eax
f010c8aa:	68 20 77 13 f0       	push   $0xf0137720
f010c8af:	e8 5a 44 ff ff       	call   f0100d0e <cprintf>
f010c8b4:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010c8b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ba:	8b 58 28             	mov    0x28(%eax),%ebx
f010c8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8c0:	8b 40 28             	mov    0x28(%eax),%eax
f010c8c3:	83 ec 0c             	sub    $0xc,%esp
f010c8c6:	50                   	push   %eax
f010c8c7:	e8 d0 ee ff ff       	call   f010b79c <trapname>
f010c8cc:	83 c4 10             	add    $0x10,%esp
f010c8cf:	89 c2                	mov    %eax,%edx
f010c8d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8d4:	8b 40 28             	mov    0x28(%eax),%eax
f010c8d7:	53                   	push   %ebx
f010c8d8:	52                   	push   %edx
f010c8d9:	50                   	push   %eax
f010c8da:	68 33 77 13 f0       	push   $0xf0137733
f010c8df:	e8 2a 44 ff ff       	call   f0100d0e <cprintf>
f010c8e4:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010c8e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8ea:	8b 40 2c             	mov    0x2c(%eax),%eax
f010c8ed:	83 ec 08             	sub    $0x8,%esp
f010c8f0:	50                   	push   %eax
f010c8f1:	68 4a 77 13 f0       	push   $0xf013774a
f010c8f6:	e8 13 44 ff ff       	call   f0100d0e <cprintf>
f010c8fb:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010c8fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010c901:	8b 40 30             	mov    0x30(%eax),%eax
f010c904:	83 ec 08             	sub    $0x8,%esp
f010c907:	50                   	push   %eax
f010c908:	68 59 77 13 f0       	push   $0xf0137759
f010c90d:	e8 fc 43 ff ff       	call   f0100d0e <cprintf>
f010c912:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010c915:	8b 45 08             	mov    0x8(%ebp),%eax
f010c918:	8b 40 34             	mov    0x34(%eax),%eax
f010c91b:	0f b7 c0             	movzwl %ax,%eax
f010c91e:	83 ec 08             	sub    $0x8,%esp
f010c921:	50                   	push   %eax
f010c922:	68 68 77 13 f0       	push   $0xf0137768
f010c927:	e8 e2 43 ff ff       	call   f0100d0e <cprintf>
f010c92c:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010c92f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c932:	8b 40 38             	mov    0x38(%eax),%eax
f010c935:	83 ec 08             	sub    $0x8,%esp
f010c938:	50                   	push   %eax
f010c939:	68 7b 77 13 f0       	push   $0xf013777b
f010c93e:	e8 cb 43 ff ff       	call   f0100d0e <cprintf>
f010c943:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010c946:	8b 45 08             	mov    0x8(%ebp),%eax
f010c949:	8b 40 3c             	mov    0x3c(%eax),%eax
f010c94c:	83 ec 08             	sub    $0x8,%esp
f010c94f:	50                   	push   %eax
f010c950:	68 8a 77 13 f0       	push   $0xf013778a
f010c955:	e8 b4 43 ff ff       	call   f0100d0e <cprintf>
f010c95a:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010c95d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c960:	8b 40 40             	mov    0x40(%eax),%eax
f010c963:	0f b7 c0             	movzwl %ax,%eax
f010c966:	83 ec 08             	sub    $0x8,%esp
f010c969:	50                   	push   %eax
f010c96a:	68 99 77 13 f0       	push   $0xf0137799
f010c96f:	e8 9a 43 ff ff       	call   f0100d0e <cprintf>
f010c974:	83 c4 10             	add    $0x10,%esp
}
f010c977:	90                   	nop
f010c978:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010c97b:	c9                   	leave  
f010c97c:	c3                   	ret    

f010c97d <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010c97d:	55                   	push   %ebp
f010c97e:	89 e5                	mov    %esp,%ebp
f010c980:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010c983:	8b 45 08             	mov    0x8(%ebp),%eax
f010c986:	8b 00                	mov    (%eax),%eax
f010c988:	83 ec 08             	sub    $0x8,%esp
f010c98b:	50                   	push   %eax
f010c98c:	68 ac 77 13 f0       	push   $0xf01377ac
f010c991:	e8 78 43 ff ff       	call   f0100d0e <cprintf>
f010c996:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010c999:	8b 45 08             	mov    0x8(%ebp),%eax
f010c99c:	8b 40 04             	mov    0x4(%eax),%eax
f010c99f:	83 ec 08             	sub    $0x8,%esp
f010c9a2:	50                   	push   %eax
f010c9a3:	68 bb 77 13 f0       	push   $0xf01377bb
f010c9a8:	e8 61 43 ff ff       	call   f0100d0e <cprintf>
f010c9ad:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010c9b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9b3:	8b 40 08             	mov    0x8(%eax),%eax
f010c9b6:	83 ec 08             	sub    $0x8,%esp
f010c9b9:	50                   	push   %eax
f010c9ba:	68 ca 77 13 f0       	push   $0xf01377ca
f010c9bf:	e8 4a 43 ff ff       	call   f0100d0e <cprintf>
f010c9c4:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010c9c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9ca:	8b 40 0c             	mov    0xc(%eax),%eax
f010c9cd:	83 ec 08             	sub    $0x8,%esp
f010c9d0:	50                   	push   %eax
f010c9d1:	68 d9 77 13 f0       	push   $0xf01377d9
f010c9d6:	e8 33 43 ff ff       	call   f0100d0e <cprintf>
f010c9db:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010c9de:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9e1:	8b 40 10             	mov    0x10(%eax),%eax
f010c9e4:	83 ec 08             	sub    $0x8,%esp
f010c9e7:	50                   	push   %eax
f010c9e8:	68 e8 77 13 f0       	push   $0xf01377e8
f010c9ed:	e8 1c 43 ff ff       	call   f0100d0e <cprintf>
f010c9f2:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010c9f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9f8:	8b 40 14             	mov    0x14(%eax),%eax
f010c9fb:	83 ec 08             	sub    $0x8,%esp
f010c9fe:	50                   	push   %eax
f010c9ff:	68 f7 77 13 f0       	push   $0xf01377f7
f010ca04:	e8 05 43 ff ff       	call   f0100d0e <cprintf>
f010ca09:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010ca0c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca0f:	8b 40 18             	mov    0x18(%eax),%eax
f010ca12:	83 ec 08             	sub    $0x8,%esp
f010ca15:	50                   	push   %eax
f010ca16:	68 06 78 13 f0       	push   $0xf0137806
f010ca1b:	e8 ee 42 ff ff       	call   f0100d0e <cprintf>
f010ca20:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010ca23:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca26:	8b 40 1c             	mov    0x1c(%eax),%eax
f010ca29:	83 ec 08             	sub    $0x8,%esp
f010ca2c:	50                   	push   %eax
f010ca2d:	68 15 78 13 f0       	push   $0xf0137815
f010ca32:	e8 d7 42 ff ff       	call   f0100d0e <cprintf>
f010ca37:	83 c4 10             	add    $0x10,%esp
}
f010ca3a:	90                   	nop
f010ca3b:	c9                   	leave  
f010ca3c:	c3                   	ret    

f010ca3d <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010ca3d:	55                   	push   %ebp
f010ca3e:	89 e5                	mov    %esp,%ebp
f010ca40:	57                   	push   %edi
f010ca41:	56                   	push   %esi
f010ca42:	53                   	push   %ebx
f010ca43:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010ca46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca49:	8b 40 28             	mov    0x28(%eax),%eax
f010ca4c:	83 f8 0e             	cmp    $0xe,%eax
f010ca4f:	75 29                	jne    f010ca7a <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010ca51:	83 ec 0c             	sub    $0xc,%esp
f010ca54:	6a 01                	push   $0x1
f010ca56:	e8 fc 18 00 00       	call   f010e357 <isPageReplacmentAlgorithmLRU>
f010ca5b:	83 c4 10             	add    $0x10,%esp
f010ca5e:	85 c0                	test   %eax,%eax
f010ca60:	74 05                	je     f010ca67 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010ca62:	e8 ac 8f ff ff       	call   f0105a13 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010ca67:	83 ec 0c             	sub    $0xc,%esp
f010ca6a:	ff 75 08             	pushl  0x8(%ebp)
f010ca6d:	e8 51 02 00 00       	call   f010ccc3 <fault_handler>
f010ca72:	83 c4 10             	add    $0x10,%esp
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010ca75:	e9 bb 00 00 00       	jmp    f010cb35 <trap_dispatch+0xf8>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010ca7a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca7d:	8b 40 28             	mov    0x28(%eax),%eax
f010ca80:	83 f8 30             	cmp    $0x30,%eax
f010ca83:	75 42                	jne    f010cac7 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010ca85:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca88:	8b 78 04             	mov    0x4(%eax),%edi
f010ca8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca8e:	8b 30                	mov    (%eax),%esi
f010ca90:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca93:	8b 58 10             	mov    0x10(%eax),%ebx
f010ca96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca99:	8b 48 18             	mov    0x18(%eax),%ecx
f010ca9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ca9f:	8b 50 14             	mov    0x14(%eax),%edx
f010caa2:	8b 45 08             	mov    0x8(%ebp),%eax
f010caa5:	8b 40 1c             	mov    0x1c(%eax),%eax
f010caa8:	83 ec 08             	sub    $0x8,%esp
f010caab:	57                   	push   %edi
f010caac:	56                   	push   %esi
f010caad:	53                   	push   %ebx
f010caae:	51                   	push   %ecx
f010caaf:	52                   	push   %edx
f010cab0:	50                   	push   %eax
f010cab1:	e8 ec 0f 00 00       	call   f010daa2 <syscall>
f010cab6:	83 c4 20             	add    $0x20,%esp
f010cab9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010cabc:	8b 45 08             	mov    0x8(%ebp),%eax
f010cabf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010cac2:	89 50 1c             	mov    %edx,0x1c(%eax)
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010cac5:	eb 6e                	jmp    f010cb35 <trap_dispatch+0xf8>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010cac7:	8b 45 08             	mov    0x8(%ebp),%eax
f010caca:	8b 40 28             	mov    0x28(%eax),%eax
f010cacd:	83 f8 08             	cmp    $0x8,%eax
f010cad0:	75 17                	jne    f010cae9 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010cad2:	83 ec 04             	sub    $0x4,%esp
f010cad5:	68 24 78 13 f0       	push   $0xf0137824
f010cada:	68 e7 00 00 00       	push   $0xe7
f010cadf:	68 33 78 13 f0       	push   $0xf0137833
f010cae4:	e8 1c 37 ff ff       	call   f0100205 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010cae9:	8b 45 08             	mov    0x8(%ebp),%eax
f010caec:	8b 40 28             	mov    0x28(%eax),%eax
f010caef:	83 f8 20             	cmp    $0x20,%eax
f010caf2:	75 07                	jne    f010cafb <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010caf4:	e8 f9 8e ff ff       	call   f01059f2 <clock_interrupt_handler>
			panic("unhandled trap in user program");

			return;
		}
	}
	return;
f010caf9:	eb 3a                	jmp    f010cb35 <trap_dispatch+0xf8>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010cafb:	8b 45 08             	mov    0x8(%ebp),%eax
f010cafe:	8b 40 34             	mov    0x34(%eax),%eax
f010cb01:	66 83 f8 08          	cmp    $0x8,%ax
f010cb05:	75 17                	jne    f010cb1e <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010cb07:	83 ec 04             	sub    $0x4,%esp
f010cb0a:	68 44 78 13 f0       	push   $0xf0137844
f010cb0f:	68 f4 00 00 00       	push   $0xf4
f010cb14:	68 33 78 13 f0       	push   $0xf0137833
f010cb19:	e8 e7 36 ff ff       	call   f0100205 <_panic>
		}
		else {
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010cb1e:	83 ec 04             	sub    $0x4,%esp
f010cb21:	68 60 78 13 f0       	push   $0xf0137860
f010cb26:	68 f8 00 00 00       	push   $0xf8
f010cb2b:	68 33 78 13 f0       	push   $0xf0137833
f010cb30:	e8 d0 36 ff ff       	call   f0100205 <_panic>

			return;
		}
	}
	return;
}
f010cb35:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010cb38:	5b                   	pop    %ebx
f010cb39:	5e                   	pop    %esi
f010cb3a:	5f                   	pop    %edi
f010cb3b:	5d                   	pop    %ebp
f010cb3c:	c3                   	ret    

f010cb3d <trap>:

void trap(struct Trapframe *tf)
{
f010cb3d:	55                   	push   %ebp
f010cb3e:	89 e5                	mov    %esp,%ebp
f010cb40:	57                   	push   %edi
f010cb41:	56                   	push   %esi
f010cb42:	53                   	push   %ebx
f010cb43:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010cb46:	e8 30 76 ff ff       	call   f010417b <kclock_stop>

	int userTrap = 0;
f010cb4b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010cb52:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb55:	8b 40 34             	mov    0x34(%eax),%eax
f010cb58:	0f b7 c0             	movzwl %ax,%eax
f010cb5b:	83 e0 03             	and    $0x3,%eax
f010cb5e:	83 f8 03             	cmp    $0x3,%eax
f010cb61:	75 49                	jne    f010cbac <trap+0x6f>
		assert(curenv);
f010cb63:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cb68:	85 c0                	test   %eax,%eax
f010cb6a:	75 19                	jne    f010cb85 <trap+0x48>
f010cb6c:	68 7f 78 13 f0       	push   $0xf013787f
f010cb71:	68 86 78 13 f0       	push   $0xf0137886
f010cb76:	68 06 01 00 00       	push   $0x106
f010cb7b:	68 33 78 13 f0       	push   $0xf0137833
f010cb80:	e8 80 36 ff ff       	call   f0100205 <_panic>
		curenv->env_tf = *tf;
f010cb85:	8b 15 f4 ed 85 f0    	mov    0xf085edf4,%edx
f010cb8b:	8b 45 08             	mov    0x8(%ebp),%eax
f010cb8e:	89 c3                	mov    %eax,%ebx
f010cb90:	b8 11 00 00 00       	mov    $0x11,%eax
f010cb95:	89 d7                	mov    %edx,%edi
f010cb97:	89 de                	mov    %ebx,%esi
f010cb99:	89 c1                	mov    %eax,%ecx
f010cb9b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010cb9d:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cba2:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010cba5:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010cbac:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbaf:	8b 40 28             	mov    0x28(%eax),%eax
f010cbb2:	83 f8 20             	cmp    $0x20,%eax
f010cbb5:	75 40                	jne    f010cbf7 <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010cbb7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cbbb:	0f 84 a6 00 00 00    	je     f010cc67 <trap+0x12a>
		{
			assert(curenv);
f010cbc1:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cbc6:	85 c0                	test   %eax,%eax
f010cbc8:	75 19                	jne    f010cbe3 <trap+0xa6>
f010cbca:	68 7f 78 13 f0       	push   $0xf013787f
f010cbcf:	68 86 78 13 f0       	push   $0xf0137886
f010cbd4:	68 12 01 00 00       	push   $0x112
f010cbd9:	68 33 78 13 f0       	push   $0xf0137833
f010cbde:	e8 22 36 ff ff       	call   f0100205 <_panic>
			curenv->nClocks++ ;
f010cbe3:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cbe8:	8b 90 a4 05 00 00    	mov    0x5a4(%eax),%edx
f010cbee:	42                   	inc    %edx
f010cbef:	89 90 a4 05 00 00    	mov    %edx,0x5a4(%eax)
f010cbf5:	eb 70                	jmp    f010cc67 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010cbf7:	8b 45 08             	mov    0x8(%ebp),%eax
f010cbfa:	8b 40 28             	mov    0x28(%eax),%eax
f010cbfd:	83 f8 0e             	cmp    $0xe,%eax
f010cc00:	75 65                	jne    f010cc67 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010cc02:	a0 a8 f6 85 f0       	mov    0xf085f6a8,%al
f010cc07:	84 c0                	test   %al,%al
f010cc09:	74 5c                	je     f010cc67 <trap+0x12a>
			if (userTrap){
f010cc0b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cc0f:	74 2c                	je     f010cc3d <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010cc11:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cc16:	8b 15 f4 ed 85 f0    	mov    0xf085edf4,%edx
f010cc1c:	8b 52 30             	mov    0x30(%edx),%edx
f010cc1f:	89 d1                	mov    %edx,%ecx
f010cc21:	8a 15 a8 f6 85 f0    	mov    0xf085f6a8,%dl
f010cc27:	0f b6 d2             	movzbl %dl,%edx
f010cc2a:	01 ca                	add    %ecx,%edx
f010cc2c:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010cc2f:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cc34:	83 ec 0c             	sub    $0xc,%esp
f010cc37:	50                   	push   %eax
f010cc38:	e8 43 d4 ff ff       	call   f010a080 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010cc3d:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc40:	8b 40 30             	mov    0x30(%eax),%eax
f010cc43:	89 c2                	mov    %eax,%edx
f010cc45:	a0 a8 f6 85 f0       	mov    0xf085f6a8,%al
f010cc4a:	0f b6 c0             	movzbl %al,%eax
f010cc4d:	01 d0                	add    %edx,%eax
f010cc4f:	89 c2                	mov    %eax,%edx
f010cc51:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc54:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010cc57:	e8 4a 75 ff ff       	call   f01041a6 <kclock_resume>
				env_pop_tf(tf);
f010cc5c:	83 ec 0c             	sub    $0xc,%esp
f010cc5f:	ff 75 08             	pushl  0x8(%ebp)
f010cc62:	e8 7c d5 ff ff       	call   f010a1e3 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010cc67:	83 ec 0c             	sub    $0xc,%esp
f010cc6a:	ff 75 08             	pushl  0x8(%ebp)
f010cc6d:	e8 cb fd ff ff       	call   f010ca3d <trap_dispatch>
f010cc72:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010cc75:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cc79:	74 3d                	je     f010ccb8 <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010cc7b:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cc80:	85 c0                	test   %eax,%eax
f010cc82:	74 0d                	je     f010cc91 <trap+0x154>
f010cc84:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cc89:	8b 40 54             	mov    0x54(%eax),%eax
f010cc8c:	83 f8 02             	cmp    $0x2,%eax
f010cc8f:	74 19                	je     f010ccaa <trap+0x16d>
f010cc91:	68 9c 78 13 f0       	push   $0xf013789c
f010cc96:	68 86 78 13 f0       	push   $0xf0137886
f010cc9b:	68 27 01 00 00       	push   $0x127
f010cca0:	68 33 78 13 f0       	push   $0xf0137833
f010cca5:	e8 5b 35 ff ff       	call   f0100205 <_panic>
		env_run(curenv);
f010ccaa:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010ccaf:	83 ec 0c             	sub    $0xc,%esp
f010ccb2:	50                   	push   %eax
f010ccb3:	e8 c8 d3 ff ff       	call   f010a080 <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010ccb8:	83 ec 0c             	sub    $0xc,%esp
f010ccbb:	ff 75 08             	pushl  0x8(%ebp)
f010ccbe:	e8 20 d5 ff ff       	call   f010a1e3 <env_pop_tf>

f010ccc3 <fault_handler>:

/*2022*/
uint32 last_fault_va = 0;
int8 num_repeated_fault  = 0;
void fault_handler(struct Trapframe *tf)
{
f010ccc3:	55                   	push   %ebp
f010ccc4:	89 e5                	mov    %esp,%ebp
f010ccc6:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010ccc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010ccd0:	8b 45 08             	mov    0x8(%ebp),%eax
f010ccd3:	8b 40 34             	mov    0x34(%eax),%eax
f010ccd6:	0f b7 c0             	movzwl %ax,%eax
f010ccd9:	83 e0 03             	and    $0x3,%eax
f010ccdc:	83 f8 03             	cmp    $0x3,%eax
f010ccdf:	75 07                	jne    f010cce8 <fault_handler+0x25>
		userTrap = 1;
f010cce1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010cce8:	0f 20 d0             	mov    %cr2,%eax
f010cceb:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010ccee:	8b 45 e0             	mov    -0x20(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010ccf1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/******************************************************/
	/*2022*///If same fault va for 3 times, then panic
	if (last_fault_va == fault_va)
f010ccf4:	a1 20 f6 85 f0       	mov    0xf085f620,%eax
f010ccf9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ccfc:	75 2b                	jne    f010cd29 <fault_handler+0x66>
	{
		num_repeated_fault++ ;
f010ccfe:	a0 24 f6 85 f0       	mov    0xf085f624,%al
f010cd03:	40                   	inc    %eax
f010cd04:	a2 24 f6 85 f0       	mov    %al,0xf085f624
		if (num_repeated_fault == 3)
f010cd09:	a0 24 f6 85 f0       	mov    0xf085f624,%al
f010cd0e:	3c 03                	cmp    $0x3,%al
f010cd10:	75 1e                	jne    f010cd30 <fault_handler+0x6d>
			panic("Failed to handle fault at va=%x: same va is faulted for 3 successive times\n", fault_va);
f010cd12:	ff 75 ec             	pushl  -0x14(%ebp)
f010cd15:	68 cc 78 13 f0       	push   $0xf01378cc
f010cd1a:	68 47 01 00 00       	push   $0x147
f010cd1f:	68 33 78 13 f0       	push   $0xf0137833
f010cd24:	e8 dc 34 ff ff       	call   f0100205 <_panic>
	}
	else
	{
		num_repeated_fault = 0;
f010cd29:	c6 05 24 f6 85 f0 00 	movb   $0x0,0xf085f624
	}
	last_fault_va = fault_va ;
f010cd30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd33:	a3 20 f6 85 f0       	mov    %eax,0xf085f620
	/******************************************************/
	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010cd38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cd3c:	75 29                	jne    f010cd67 <fault_handler+0xa4>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010cd3e:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010cd45:	77 40                	ja     f010cd87 <fault_handler+0xc4>
f010cd47:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010cd4e:	76 37                	jbe    f010cd87 <fault_handler+0xc4>
			panic("Kernel: stack overflow exception!");
f010cd50:	83 ec 04             	sub    $0x4,%esp
f010cd53:	68 18 79 13 f0       	push   $0xf0137918
f010cd58:	68 53 01 00 00       	push   $0x153
f010cd5d:	68 33 78 13 f0       	push   $0xf0137833
f010cd62:	e8 9e 34 ff ff       	call   f0100205 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010cd67:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010cd6e:	76 17                	jbe    f010cd87 <fault_handler+0xc4>
			panic("User: stack underflow exception!");
f010cd70:	83 ec 04             	sub    $0x4,%esp
f010cd73:	68 3c 79 13 f0       	push   $0xf013793c
f010cd78:	68 59 01 00 00       	push   $0x159
f010cd7d:	68 33 78 13 f0       	push   $0xf0137833
f010cd82:	e8 7e 34 ff ff       	call   f0100205 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010cd87:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cd8c:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010cd8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd92:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cd95:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cd98:	c1 ea 16             	shr    $0x16,%edx
f010cd9b:	c1 e2 02             	shl    $0x2,%edx
f010cd9e:	01 d0                	add    %edx,%eax
f010cda0:	8b 00                	mov    (%eax),%eax
f010cda2:	83 e0 01             	and    $0x1,%eax
f010cda5:	85 c0                	test   %eax,%eax
f010cda7:	75 28                	jne    f010cdd1 <fault_handler+0x10e>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010cda9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdac:	8b 80 38 05 00 00    	mov    0x538(%eax),%eax
f010cdb2:	8d 50 01             	lea    0x1(%eax),%edx
f010cdb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdb8:	89 90 38 05 00 00    	mov    %edx,0x538(%eax)

		table_fault_handler(faulted_env, fault_va);
f010cdbe:	83 ec 08             	sub    $0x8,%esp
f010cdc1:	ff 75 ec             	pushl  -0x14(%ebp)
f010cdc4:	ff 75 e8             	pushl  -0x18(%ebp)
f010cdc7:	e8 70 16 00 00       	call   f010e43c <table_fault_handler>
f010cdcc:	83 c4 10             	add    $0x10,%esp
f010cdcf:	eb 7b                	jmp    f010ce4c <fault_handler+0x189>
	}
	else
	{
		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010cdd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cdd4:	8b 40 5c             	mov    0x5c(%eax),%eax
f010cdd7:	83 ec 08             	sub    $0x8,%esp
f010cdda:	ff 75 ec             	pushl  -0x14(%ebp)
f010cddd:	50                   	push   %eax
f010cdde:	e8 f0 b1 ff ff       	call   f0107fd3 <pt_get_page_permissions>
f010cde3:	83 c4 10             	add    $0x10,%esp
f010cde6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (perms & PERM_PRESENT)
f010cde9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cdec:	83 e0 01             	and    $0x1,%eax
f010cdef:	85 c0                	test   %eax,%eax
f010cdf1:	74 17                	je     f010ce0a <fault_handler+0x147>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010cdf3:	ff 75 ec             	pushl  -0x14(%ebp)
f010cdf6:	68 60 79 13 f0       	push   $0xf0137960
f010cdfb:	68 6e 01 00 00       	push   $0x16e
f010ce00:	68 33 78 13 f0       	push   $0xf0137833
f010ce05:	e8 fb 33 ff ff       	call   f0100205 <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010ce0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce0d:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f010ce13:	8d 50 01             	lea    0x1(%eax),%edx
f010ce16:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ce19:	89 90 34 05 00 00    	mov    %edx,0x534(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ce1f:	e8 f6 15 00 00       	call   f010e41a <isBufferingEnabled>
f010ce24:	84 c0                	test   %al,%al
f010ce26:	74 13                	je     f010ce3b <fault_handler+0x178>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ce28:	83 ec 08             	sub    $0x8,%esp
f010ce2b:	ff 75 ec             	pushl  -0x14(%ebp)
f010ce2e:	ff 75 e8             	pushl  -0x18(%ebp)
f010ce31:	e8 36 19 00 00       	call   f010e76c <__page_fault_handler_with_buffering>
f010ce36:	83 c4 10             	add    $0x10,%esp
f010ce39:	eb 11                	jmp    f010ce4c <fault_handler+0x189>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ce3b:	83 ec 08             	sub    $0x8,%esp
f010ce3e:	ff 75 ec             	pushl  -0x14(%ebp)
f010ce41:	ff 75 e8             	pushl  -0x18(%ebp)
f010ce44:	e8 14 16 00 00       	call   f010e45d <page_fault_handler>
f010ce49:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ce4c:	0f 20 d8             	mov    %cr3,%eax
f010ce4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ce52:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce55:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010ce58:	90                   	nop
f010ce59:	c9                   	leave  
f010ce5a:	c3                   	ret    
f010ce5b:	90                   	nop

f010ce5c <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010ce5c:	6a 0e                	push   $0xe
f010ce5e:	e9 ed 00 00 00       	jmp    f010cf50 <_alltraps>
f010ce63:	90                   	nop

f010ce64 <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010ce64:	6a 00                	push   $0x0
f010ce66:	6a 30                	push   $0x30
f010ce68:	e9 e3 00 00 00       	jmp    f010cf50 <_alltraps>
f010ce6d:	90                   	nop

f010ce6e <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010ce6e:	6a 08                	push   $0x8
f010ce70:	e9 db 00 00 00       	jmp    f010cf50 <_alltraps>
f010ce75:	90                   	nop

f010ce76 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010ce76:	6a 00                	push   $0x0
f010ce78:	6a 00                	push   $0x0
f010ce7a:	e9 d1 00 00 00       	jmp    f010cf50 <_alltraps>
f010ce7f:	90                   	nop

f010ce80 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010ce80:	6a 00                	push   $0x0
f010ce82:	6a 01                	push   $0x1
f010ce84:	e9 c7 00 00 00       	jmp    f010cf50 <_alltraps>
f010ce89:	90                   	nop

f010ce8a <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010ce8a:	6a 00                	push   $0x0
f010ce8c:	6a 02                	push   $0x2
f010ce8e:	e9 bd 00 00 00       	jmp    f010cf50 <_alltraps>
f010ce93:	90                   	nop

f010ce94 <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010ce94:	6a 00                	push   $0x0
f010ce96:	6a 03                	push   $0x3
f010ce98:	e9 b3 00 00 00       	jmp    f010cf50 <_alltraps>
f010ce9d:	90                   	nop

f010ce9e <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010ce9e:	6a 00                	push   $0x0
f010cea0:	6a 04                	push   $0x4
f010cea2:	e9 a9 00 00 00       	jmp    f010cf50 <_alltraps>
f010cea7:	90                   	nop

f010cea8 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010cea8:	6a 00                	push   $0x0
f010ceaa:	6a 05                	push   $0x5
f010ceac:	e9 9f 00 00 00       	jmp    f010cf50 <_alltraps>
f010ceb1:	90                   	nop

f010ceb2 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010ceb2:	6a 00                	push   $0x0
f010ceb4:	6a 06                	push   $0x6
f010ceb6:	e9 95 00 00 00       	jmp    f010cf50 <_alltraps>
f010cebb:	90                   	nop

f010cebc <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010cebc:	6a 00                	push   $0x0
f010cebe:	6a 07                	push   $0x7
f010cec0:	e9 8b 00 00 00       	jmp    f010cf50 <_alltraps>
f010cec5:	90                   	nop

f010cec6 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010cec6:	6a 0a                	push   $0xa
f010cec8:	e9 83 00 00 00       	jmp    f010cf50 <_alltraps>
f010cecd:	90                   	nop

f010cece <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010cece:	6a 0b                	push   $0xb
f010ced0:	eb 7e                	jmp    f010cf50 <_alltraps>

f010ced2 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010ced2:	6a 0c                	push   $0xc
f010ced4:	eb 7a                	jmp    f010cf50 <_alltraps>

f010ced6 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010ced6:	6a 0d                	push   $0xd
f010ced8:	eb 76                	jmp    f010cf50 <_alltraps>

f010ceda <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010ceda:	6a 00                	push   $0x0
f010cedc:	6a 10                	push   $0x10
f010cede:	eb 70                	jmp    f010cf50 <_alltraps>

f010cee0 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010cee0:	6a 11                	push   $0x11
f010cee2:	eb 6c                	jmp    f010cf50 <_alltraps>

f010cee4 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010cee4:	6a 00                	push   $0x0
f010cee6:	6a 12                	push   $0x12
f010cee8:	eb 66                	jmp    f010cf50 <_alltraps>

f010ceea <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010ceea:	6a 00                	push   $0x0
f010ceec:	6a 13                	push   $0x13
f010ceee:	eb 60                	jmp    f010cf50 <_alltraps>

f010cef0 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010cef0:	6a 00                	push   $0x0
f010cef2:	6a 20                	push   $0x20
f010cef4:	eb 5a                	jmp    f010cf50 <_alltraps>

f010cef6 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010cef6:	6a 00                	push   $0x0
f010cef8:	6a 21                	push   $0x21
f010cefa:	eb 54                	jmp    f010cf50 <_alltraps>

f010cefc <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010cefc:	6a 00                	push   $0x0
f010cefe:	6a 22                	push   $0x22
f010cf00:	eb 4e                	jmp    f010cf50 <_alltraps>

f010cf02 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010cf02:	6a 00                	push   $0x0
f010cf04:	6a 23                	push   $0x23
f010cf06:	eb 48                	jmp    f010cf50 <_alltraps>

f010cf08 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010cf08:	6a 00                	push   $0x0
f010cf0a:	6a 24                	push   $0x24
f010cf0c:	eb 42                	jmp    f010cf50 <_alltraps>

f010cf0e <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010cf0e:	6a 00                	push   $0x0
f010cf10:	6a 25                	push   $0x25
f010cf12:	eb 3c                	jmp    f010cf50 <_alltraps>

f010cf14 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010cf14:	6a 00                	push   $0x0
f010cf16:	6a 26                	push   $0x26
f010cf18:	eb 36                	jmp    f010cf50 <_alltraps>

f010cf1a <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010cf1a:	6a 00                	push   $0x0
f010cf1c:	6a 27                	push   $0x27
f010cf1e:	eb 30                	jmp    f010cf50 <_alltraps>

f010cf20 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010cf20:	6a 00                	push   $0x0
f010cf22:	6a 28                	push   $0x28
f010cf24:	eb 2a                	jmp    f010cf50 <_alltraps>

f010cf26 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010cf26:	6a 00                	push   $0x0
f010cf28:	6a 29                	push   $0x29
f010cf2a:	eb 24                	jmp    f010cf50 <_alltraps>

f010cf2c <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010cf2c:	6a 00                	push   $0x0
f010cf2e:	6a 2a                	push   $0x2a
f010cf30:	eb 1e                	jmp    f010cf50 <_alltraps>

f010cf32 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010cf32:	6a 00                	push   $0x0
f010cf34:	6a 2b                	push   $0x2b
f010cf36:	eb 18                	jmp    f010cf50 <_alltraps>

f010cf38 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010cf38:	6a 00                	push   $0x0
f010cf3a:	6a 2c                	push   $0x2c
f010cf3c:	eb 12                	jmp    f010cf50 <_alltraps>

f010cf3e <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010cf3e:	6a 00                	push   $0x0
f010cf40:	6a 2d                	push   $0x2d
f010cf42:	eb 0c                	jmp    f010cf50 <_alltraps>

f010cf44 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010cf44:	6a 00                	push   $0x0
f010cf46:	6a 2e                	push   $0x2e
f010cf48:	eb 06                	jmp    f010cf50 <_alltraps>

f010cf4a <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010cf4a:	6a 00                	push   $0x0
f010cf4c:	6a 2f                	push   $0x2f
f010cf4e:	eb 00                	jmp    f010cf50 <_alltraps>

f010cf50 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010cf50:	1e                   	push   %ds
push %es
f010cf51:	06                   	push   %es
pushal
f010cf52:	60                   	pusha  

mov $(GD_KD), %ax
f010cf53:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010cf57:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010cf59:	8e c0                	mov    %eax,%es

push %esp
f010cf5b:	54                   	push   %esp

call trap
f010cf5c:	e8 dc fb ff ff       	call   f010cb3d <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010cf61:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010cf62:	61                   	popa   
pop %es
f010cf63:	07                   	pop    %es
pop %ds
f010cf64:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010cf65:	83 c4 08             	add    $0x8,%esp

iret
f010cf68:	cf                   	iret   

f010cf69 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010cf69:	55                   	push   %ebp
f010cf6a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cf6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf6f:	8b 15 50 f7 85 f0    	mov    0xf085f750,%edx
f010cf75:	29 d0                	sub    %edx,%eax
f010cf77:	c1 f8 03             	sar    $0x3,%eax
f010cf7a:	89 c2                	mov    %eax,%edx
f010cf7c:	89 d0                	mov    %edx,%eax
f010cf7e:	c1 e0 02             	shl    $0x2,%eax
f010cf81:	01 d0                	add    %edx,%eax
f010cf83:	c1 e0 02             	shl    $0x2,%eax
f010cf86:	01 d0                	add    %edx,%eax
f010cf88:	c1 e0 02             	shl    $0x2,%eax
f010cf8b:	01 d0                	add    %edx,%eax
f010cf8d:	89 c1                	mov    %eax,%ecx
f010cf8f:	c1 e1 08             	shl    $0x8,%ecx
f010cf92:	01 c8                	add    %ecx,%eax
f010cf94:	89 c1                	mov    %eax,%ecx
f010cf96:	c1 e1 10             	shl    $0x10,%ecx
f010cf99:	01 c8                	add    %ecx,%eax
f010cf9b:	01 c0                	add    %eax,%eax
f010cf9d:	01 d0                	add    %edx,%eax
}
f010cf9f:	5d                   	pop    %ebp
f010cfa0:	c3                   	ret    

f010cfa1 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010cfa1:	55                   	push   %ebp
f010cfa2:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cfa4:	ff 75 08             	pushl  0x8(%ebp)
f010cfa7:	e8 bd ff ff ff       	call   f010cf69 <to_frame_number>
f010cfac:	83 c4 04             	add    $0x4,%esp
f010cfaf:	c1 e0 0c             	shl    $0xc,%eax
}
f010cfb2:	c9                   	leave  
f010cfb3:	c3                   	ret    

f010cfb4 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010cfb4:	55                   	push   %ebp
f010cfb5:	89 e5                	mov    %esp,%ebp
f010cfb7:	83 ec 18             	sub    $0x18,%esp
f010cfba:	8b 45 10             	mov    0x10(%ebp),%eax
f010cfbd:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010cfc0:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010cfc4:	74 26                	je     f010cfec <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010cfc6:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010cfcb:	8b 40 4c             	mov    0x4c(%eax),%eax
f010cfce:	8b 15 f4 ed 85 f0    	mov    0xf085edf4,%edx
f010cfd4:	81 c2 5c 05 00 00    	add    $0x55c,%edx
f010cfda:	83 ec 04             	sub    $0x4,%esp
f010cfdd:	50                   	push   %eax
f010cfde:	52                   	push   %edx
f010cfdf:	68 50 7b 13 f0       	push   $0xf0137b50
f010cfe4:	e8 25 3d ff ff       	call   f0100d0e <cprintf>
f010cfe9:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010cfec:	83 ec 04             	sub    $0x4,%esp
f010cfef:	ff 75 08             	pushl  0x8(%ebp)
f010cff2:	ff 75 0c             	pushl  0xc(%ebp)
f010cff5:	68 59 7b 13 f0       	push   $0xf0137b59
f010cffa:	e8 0f 3d ff ff       	call   f0100d0e <cprintf>
f010cfff:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010d002:	90                   	nop
f010d003:	c9                   	leave  
f010d004:	c3                   	ret    

f010d005 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010d005:	55                   	push   %ebp
f010d006:	89 e5                	mov    %esp,%ebp
f010d008:	83 ec 18             	sub    $0x18,%esp
f010d00b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d00e:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010d011:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010d015:	83 ec 08             	sub    $0x8,%esp
f010d018:	50                   	push   %eax
f010d019:	68 5e 7b 13 f0       	push   $0xf0137b5e
f010d01e:	e8 eb 3c ff ff       	call   f0100d0e <cprintf>
f010d023:	83 c4 10             	add    $0x10,%esp
}
f010d026:	90                   	nop
f010d027:	c9                   	leave  
f010d028:	c3                   	ret    

f010d029 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010d029:	55                   	push   %ebp
f010d02a:	89 e5                	mov    %esp,%ebp
f010d02c:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010d02f:	e8 14 3b ff ff       	call   f0100b48 <cons_getc2>
f010d034:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010d037:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d03a:	c9                   	leave  
f010d03b:	c3                   	ret    

f010d03c <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010d03c:	55                   	push   %ebp
f010d03d:	89 e5                	mov    %esp,%ebp
f010d03f:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010d042:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d047:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010d04a:	83 ec 0c             	sub    $0xc,%esp
f010d04d:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010d050:	50                   	push   %eax
f010d051:	e8 83 98 ff ff       	call   f01068d9 <allocate_frame>
f010d056:	83 c4 10             	add    $0x10,%esp
f010d059:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d05c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d060:	75 08                	jne    f010d06a <__sys_allocate_page+0x2e>
		return r ;
f010d062:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d065:	e9 e9 00 00 00       	jmp    f010d153 <__sys_allocate_page+0x117>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010d06a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d06d:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010d072:	77 0c                	ja     f010d080 <__sys_allocate_page+0x44>
f010d074:	8b 45 08             	mov    0x8(%ebp),%eax
f010d077:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d07c:	85 c0                	test   %eax,%eax
f010d07e:	74 0a                	je     f010d08a <__sys_allocate_page+0x4e>
		return E_INVAL;
f010d080:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d085:	e9 c9 00 00 00       	jmp    f010d153 <__sys_allocate_page+0x117>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010d08a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d08d:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010d092:	83 f8 04             	cmp    $0x4,%eax
f010d095:	74 0a                	je     f010d0a1 <__sys_allocate_page+0x65>
		return E_INVAL;
f010d097:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d09c:	e9 b2 00 00 00       	jmp    f010d153 <__sys_allocate_page+0x117>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010d0a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0a4:	83 ec 0c             	sub    $0xc,%esp
f010d0a7:	50                   	push   %eax
f010d0a8:	e8 f4 fe ff ff       	call   f010cfa1 <to_physical_address>
f010d0ad:	83 c4 10             	add    $0x10,%esp
f010d0b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
#if USE_KHEAP
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, USER_LIMIT, PERM_WRITEABLE);
f010d0b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0b9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d0bc:	6a 02                	push   $0x2
f010d0be:	68 00 00 80 ef       	push   $0xef800000
f010d0c3:	52                   	push   %edx
f010d0c4:	50                   	push   %eax
f010d0c5:	e8 5e 9c ff ff       	call   f0106d28 <map_frame>
f010d0ca:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010d0cd:	83 ec 04             	sub    $0x4,%esp
f010d0d0:	68 00 10 00 00       	push   $0x1000
f010d0d5:	6a 00                	push   $0x0
f010d0d7:	68 00 00 80 ef       	push   $0xef800000
f010d0dc:	e8 12 4b 02 00       	call   f0131bf3 <memset>
f010d0e1:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010d0e4:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d0e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d0ea:	8b 40 08             	mov    0x8(%eax),%eax
f010d0ed:	40                   	inc    %eax
f010d0ee:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, USER_LIMIT);
f010d0f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0f5:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d0f8:	83 ec 08             	sub    $0x8,%esp
f010d0fb:	68 00 00 80 ef       	push   $0xef800000
f010d100:	50                   	push   %eax
f010d101:	e8 57 9d ff ff       	call   f0106e5d <unmap_frame>
f010d106:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010d109:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d10c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d10f:	8b 40 08             	mov    0x8(%eax),%eax
f010d112:	48                   	dec    %eax
f010d113:	66 89 42 08          	mov    %ax,0x8(%edx)
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010d117:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d11a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d11d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d120:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d123:	ff 75 0c             	pushl  0xc(%ebp)
f010d126:	51                   	push   %ecx
f010d127:	52                   	push   %edx
f010d128:	50                   	push   %eax
f010d129:	e8 fa 9b ff ff       	call   f0106d28 <map_frame>
f010d12e:	83 c4 10             	add    $0x10,%esp
f010d131:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d134:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d138:	75 14                	jne    f010d14e <__sys_allocate_page+0x112>
	{
		decrement_references(ptr_frame_info);
f010d13a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d13d:	83 ec 0c             	sub    $0xc,%esp
f010d140:	50                   	push   %eax
f010d141:	e8 22 99 ff ff       	call   f0106a68 <decrement_references>
f010d146:	83 c4 10             	add    $0x10,%esp
		return r;
f010d149:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d14c:	eb 05                	jmp    f010d153 <__sys_allocate_page+0x117>
	}
	return 0 ;
f010d14e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d153:	c9                   	leave  
f010d154:	c3                   	ret    

f010d155 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010d155:	55                   	push   %ebp
f010d156:	89 e5                	mov    %esp,%ebp
f010d158:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d15b:	83 ec 04             	sub    $0x4,%esp
f010d15e:	68 61 7b 13 f0       	push   $0xf0137b61
f010d163:	68 b3 00 00 00       	push   $0xb3
f010d168:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010d16d:	e8 93 30 ff ff       	call   f0100205 <_panic>

f010d172 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d172:	55                   	push   %ebp
f010d173:	89 e5                	mov    %esp,%ebp
f010d175:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d178:	83 ec 04             	sub    $0x4,%esp
f010d17b:	68 94 7b 13 f0       	push   $0xf0137b94
f010d180:	68 c3 00 00 00       	push   $0xc3
f010d185:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010d18a:	e8 76 30 ff ff       	call   f0100205 <_panic>

f010d18f <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d18f:	55                   	push   %ebp
f010d190:	89 e5                	mov    %esp,%ebp
f010d192:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010d195:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d19a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d19d:	83 ec 04             	sub    $0x4,%esp
f010d1a0:	ff 75 0c             	pushl  0xc(%ebp)
f010d1a3:	ff 75 08             	pushl  0x8(%ebp)
f010d1a6:	50                   	push   %eax
f010d1a7:	e8 2f c0 ff ff       	call   f01091db <calculate_required_frames>
f010d1ac:	83 c4 10             	add    $0x10,%esp
}
f010d1af:	c9                   	leave  
f010d1b0:	c3                   	ret    

f010d1b1 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010d1b1:	55                   	push   %ebp
f010d1b2:	89 e5                	mov    %esp,%ebp
f010d1b4:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d1b7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d1ba:	83 ec 0c             	sub    $0xc,%esp
f010d1bd:	50                   	push   %eax
f010d1be:	e8 ff 9d ff ff       	call   f0106fc2 <calculate_available_frames>
f010d1c3:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010d1c6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d1c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d1cc:	01 d0                	add    %edx,%eax
}
f010d1ce:	c9                   	leave  
f010d1cf:	c3                   	ret    

f010d1d0 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010d1d0:	55                   	push   %ebp
f010d1d1:	89 e5                	mov    %esp,%ebp
f010d1d3:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d1d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d1d9:	83 ec 0c             	sub    $0xc,%esp
f010d1dc:	50                   	push   %eax
f010d1dd:	e8 e0 9d ff ff       	call   f0106fc2 <calculate_available_frames>
f010d1e2:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010d1e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d1e8:	c9                   	leave  
f010d1e9:	c3                   	ret    

f010d1ea <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010d1ea:	55                   	push   %ebp
f010d1eb:	89 e5                	mov    %esp,%ebp
f010d1ed:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010d1f0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d1f3:	83 ec 0c             	sub    $0xc,%esp
f010d1f6:	50                   	push   %eax
f010d1f7:	e8 c6 9d ff ff       	call   f0106fc2 <calculate_available_frames>
f010d1fc:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010d1ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010d202:	c9                   	leave  
f010d203:	c3                   	ret    

f010d204 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010d204:	55                   	push   %ebp
f010d205:	89 e5                	mov    %esp,%ebp
f010d207:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010d20a:	83 ec 0c             	sub    $0xc,%esp
f010d20d:	ff 75 08             	pushl  0x8(%ebp)
f010d210:	e8 fb 36 02 00       	call   f0130910 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010d215:	83 c4 10             	add    $0x10,%esp
}
f010d218:	c9                   	leave  
f010d219:	c3                   	ret    

f010d21a <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010d21a:	55                   	push   %ebp
f010d21b:	89 e5                	mov    %esp,%ebp
f010d21d:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010d220:	e8 43 36 02 00       	call   f0130868 <scarce_memory>
}
f010d225:	90                   	nop
f010d226:	c9                   	leave  
f010d227:	c3                   	ret    

f010d228 <sys_clearFFL>:

void sys_clearFFL()
{
f010d228:	55                   	push   %ebp
f010d229:	89 e5                	mov    %esp,%ebp
f010d22b:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010d22e:	a1 20 f7 85 f0       	mov    0xf085f720,%eax
f010d233:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010d236:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d23d:	eb 12                	jmp    f010d251 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010d23f:	83 ec 0c             	sub    $0xc,%esp
f010d242:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010d245:	50                   	push   %eax
f010d246:	e8 8e 96 ff ff       	call   f01068d9 <allocate_frame>
f010d24b:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010d24e:	ff 45 f4             	incl   -0xc(%ebp)
f010d251:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d254:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d257:	7c e6                	jl     f010d23f <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010d259:	90                   	nop
f010d25a:	c9                   	leave  
f010d25b:	c3                   	ret    

f010d25c <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010d25c:	55                   	push   %ebp
f010d25d:	89 e5                	mov    %esp,%ebp
f010d25f:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010d262:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d267:	83 ec 0c             	sub    $0xc,%esp
f010d26a:	50                   	push   %eax
f010d26b:	e8 9f 6a ff ff       	call   f0103d0f <pf_calculate_allocated_pages>
f010d270:	83 c4 10             	add    $0x10,%esp
}
f010d273:	c9                   	leave  
f010d274:	c3                   	ret    

f010d275 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010d275:	55                   	push   %ebp
f010d276:	89 e5                	mov    %esp,%ebp
f010d278:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010d27b:	e8 9a 11 00 00       	call   f010e41a <isBufferingEnabled>
f010d280:	84 c0                	test   %al,%al
f010d282:	74 19                	je     f010d29d <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010d284:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d289:	83 ec 04             	sub    $0x4,%esp
f010d28c:	ff 75 0c             	pushl  0xc(%ebp)
f010d28f:	ff 75 08             	pushl  0x8(%ebp)
f010d292:	50                   	push   %eax
f010d293:	e8 a5 c1 ff ff       	call   f010943d <__free_user_mem_with_buffering>
f010d298:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010d29b:	eb 18                	jmp    f010d2b5 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010d29d:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d2a2:	83 ec 04             	sub    $0x4,%esp
f010d2a5:	ff 75 0c             	pushl  0xc(%ebp)
f010d2a8:	ff 75 08             	pushl  0x8(%ebp)
f010d2ab:	50                   	push   %eax
f010d2ac:	e8 f0 bf ff ff       	call   f01092a1 <free_user_mem>
f010d2b1:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010d2b4:	90                   	nop
}
f010d2b5:	c9                   	leave  
f010d2b6:	c3                   	ret    

f010d2b7 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010d2b7:	55                   	push   %ebp
f010d2b8:	89 e5                	mov    %esp,%ebp
f010d2ba:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010d2bd:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d2c2:	83 ec 04             	sub    $0x4,%esp
f010d2c5:	ff 75 0c             	pushl  0xc(%ebp)
f010d2c8:	ff 75 08             	pushl  0x8(%ebp)
f010d2cb:	50                   	push   %eax
f010d2cc:	e8 b3 bf ff ff       	call   f0109284 <allocate_user_mem>
f010d2d1:	83 c4 10             	add    $0x10,%esp
	return;
f010d2d4:	90                   	nop
}
f010d2d5:	c9                   	leave  
f010d2d6:	c3                   	ret    

f010d2d7 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010d2d7:	55                   	push   %ebp
f010d2d8:	89 e5                	mov    %esp,%ebp
f010d2da:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010d2dd:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d2e2:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d2e5:	ff 75 10             	pushl  0x10(%ebp)
f010d2e8:	ff 75 0c             	pushl  0xc(%ebp)
f010d2eb:	ff 75 08             	pushl  0x8(%ebp)
f010d2ee:	50                   	push   %eax
f010d2ef:	e8 0a bd ff ff       	call   f0108ffe <allocate_chunk>
f010d2f4:	83 c4 10             	add    $0x10,%esp
	return;
f010d2f7:	90                   	nop
}
f010d2f8:	c9                   	leave  
f010d2f9:	c3                   	ret    

f010d2fa <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010d2fa:	55                   	push   %ebp
f010d2fb:	89 e5                	mov    %esp,%ebp
f010d2fd:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010d300:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d305:	ff 75 10             	pushl  0x10(%ebp)
f010d308:	ff 75 0c             	pushl  0xc(%ebp)
f010d30b:	ff 75 08             	pushl  0x8(%ebp)
f010d30e:	50                   	push   %eax
f010d30f:	e8 46 c1 ff ff       	call   f010945a <move_user_mem>
f010d314:	83 c4 10             	add    $0x10,%esp
	return;
f010d317:	90                   	nop
}
f010d318:	c9                   	leave  
f010d319:	c3                   	ret    

f010d31a <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010d31a:	55                   	push   %ebp
f010d31b:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010d31d:	a1 2c f7 85 f0       	mov    0xf085f72c,%eax
}
f010d322:	5d                   	pop    %ebp
f010d323:	c3                   	ret    

f010d324 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010d324:	55                   	push   %ebp
f010d325:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010d327:	8b 45 08             	mov    0x8(%ebp),%eax
f010d32a:	a3 2c f7 85 f0       	mov    %eax,0xf085f72c
}
f010d32f:	90                   	nop
f010d330:	5d                   	pop    %ebp
f010d331:	c3                   	ret    

f010d332 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010d332:	55                   	push   %ebp
f010d333:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010d335:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d33a:	8b 15 f4 ed 85 f0    	mov    0xf085edf4,%edx
f010d340:	8b 52 38             	mov    0x38(%edx),%edx
f010d343:	80 e6 fd             	and    $0xfd,%dh
f010d346:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d349:	90                   	nop
f010d34a:	5d                   	pop    %ebp
f010d34b:	c3                   	ret    

f010d34c <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010d34c:	55                   	push   %ebp
f010d34d:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010d34f:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d354:	8b 15 f4 ed 85 f0    	mov    0xf085edf4,%edx
f010d35a:	8b 52 38             	mov    0x38(%edx),%edx
f010d35d:	80 ce 02             	or     $0x2,%dh
f010d360:	89 50 38             	mov    %edx,0x38(%eax)
}
f010d363:	90                   	nop
f010d364:	5d                   	pop    %ebp
f010d365:	c3                   	ret    

f010d366 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010d366:	55                   	push   %ebp
f010d367:	89 e5                	mov    %esp,%ebp
f010d369:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010d36c:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d371:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d374:	83 ec 04             	sub    $0x4,%esp
f010d377:	ff 75 0c             	pushl  0xc(%ebp)
f010d37a:	ff 75 08             	pushl  0x8(%ebp)
f010d37d:	50                   	push   %eax
f010d37e:	e8 a8 17 00 00       	call   f010eb2b <createSemaphore>
f010d383:	83 c4 10             	add    $0x10,%esp
}
f010d386:	c9                   	leave  
f010d387:	c3                   	ret    

f010d388 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d388:	55                   	push   %ebp
f010d389:	89 e5                	mov    %esp,%ebp
f010d38b:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010d38e:	83 ec 08             	sub    $0x8,%esp
f010d391:	ff 75 0c             	pushl  0xc(%ebp)
f010d394:	ff 75 08             	pushl  0x8(%ebp)
f010d397:	e8 5b 18 00 00       	call   f010ebf7 <waitSemaphore>
f010d39c:	83 c4 10             	add    $0x10,%esp
}
f010d39f:	90                   	nop
f010d3a0:	c9                   	leave  
f010d3a1:	c3                   	ret    

f010d3a2 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d3a2:	55                   	push   %ebp
f010d3a3:	89 e5                	mov    %esp,%ebp
f010d3a5:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010d3a8:	83 ec 08             	sub    $0x8,%esp
f010d3ab:	ff 75 0c             	pushl  0xc(%ebp)
f010d3ae:	ff 75 08             	pushl  0x8(%ebp)
f010d3b1:	e8 20 19 00 00       	call   f010ecd6 <signalSemaphore>
f010d3b6:	83 c4 10             	add    $0x10,%esp
}
f010d3b9:	90                   	nop
f010d3ba:	c9                   	leave  
f010d3bb:	c3                   	ret    

f010d3bc <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010d3bc:	55                   	push   %ebp
f010d3bd:	89 e5                	mov    %esp,%ebp
f010d3bf:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010d3c2:	83 ec 08             	sub    $0x8,%esp
f010d3c5:	ff 75 0c             	pushl  0xc(%ebp)
f010d3c8:	ff 75 08             	pushl  0x8(%ebp)
f010d3cb:	e8 d3 15 00 00       	call   f010e9a3 <get_semaphore_object_ID>
f010d3d0:	83 c4 10             	add    $0x10,%esp
f010d3d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010d3d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d3da:	78 0c                	js     f010d3e8 <sys_getSemaphoreValue+0x2c>
f010d3dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3df:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f010d3e4:	39 c2                	cmp    %eax,%edx
f010d3e6:	72 19                	jb     f010d401 <sys_getSemaphoreValue+0x45>
f010d3e8:	68 b4 7b 13 f0       	push   $0xf0137bb4
f010d3ed:	68 d9 7b 13 f0       	push   $0xf0137bd9
f010d3f2:	68 4a 01 00 00       	push   $0x14a
f010d3f7:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010d3fc:	e8 04 2e ff ff       	call   f0100205 <_panic>

	return semaphores[semID].value ;
f010d401:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010d407:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d40a:	89 d0                	mov    %edx,%eax
f010d40c:	c1 e0 02             	shl    $0x2,%eax
f010d40f:	01 d0                	add    %edx,%eax
f010d411:	01 c0                	add    %eax,%eax
f010d413:	01 d0                	add    %edx,%eax
f010d415:	01 c0                	add    %eax,%eax
f010d417:	01 d0                	add    %edx,%eax
f010d419:	c1 e0 02             	shl    $0x2,%eax
f010d41c:	01 c8                	add    %ecx,%eax
f010d41e:	8b 40 54             	mov    0x54(%eax),%eax
}
f010d421:	c9                   	leave  
f010d422:	c3                   	ret    

f010d423 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010d423:	55                   	push   %ebp
f010d424:	89 e5                	mov    %esp,%ebp
f010d426:	83 ec 18             	sub    $0x18,%esp
f010d429:	8b 45 10             	mov    0x10(%ebp),%eax
f010d42c:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010d42f:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010d433:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d438:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d43b:	83 ec 0c             	sub    $0xc,%esp
f010d43e:	ff 75 14             	pushl  0x14(%ebp)
f010d441:	52                   	push   %edx
f010d442:	ff 75 0c             	pushl  0xc(%ebp)
f010d445:	ff 75 08             	pushl  0x8(%ebp)
f010d448:	50                   	push   %eax
f010d449:	e8 35 a1 ff ff       	call   f0107583 <createSharedObject>
f010d44e:	83 c4 20             	add    $0x20,%esp
}
f010d451:	c9                   	leave  
f010d452:	c3                   	ret    

f010d453 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010d453:	55                   	push   %ebp
f010d454:	89 e5                	mov    %esp,%ebp
f010d456:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010d459:	83 ec 08             	sub    $0x8,%esp
f010d45c:	ff 75 0c             	pushl  0xc(%ebp)
f010d45f:	ff 75 08             	pushl  0x8(%ebp)
f010d462:	e8 d6 a0 ff ff       	call   f010753d <getSizeOfSharedObject>
f010d467:	83 c4 10             	add    $0x10,%esp
}
f010d46a:	c9                   	leave  
f010d46b:	c3                   	ret    

f010d46c <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010d46c:	55                   	push   %ebp
f010d46d:	89 e5                	mov    %esp,%ebp
f010d46f:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010d472:	83 ec 04             	sub    $0x4,%esp
f010d475:	ff 75 10             	pushl  0x10(%ebp)
f010d478:	ff 75 0c             	pushl  0xc(%ebp)
f010d47b:	ff 75 08             	pushl  0x8(%ebp)
f010d47e:	e8 db a2 ff ff       	call   f010775e <getSharedObject>
f010d483:	83 c4 10             	add    $0x10,%esp
}
f010d486:	c9                   	leave  
f010d487:	c3                   	ret    

f010d488 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010d488:	55                   	push   %ebp
f010d489:	89 e5                	mov    %esp,%ebp
f010d48b:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010d48e:	83 ec 08             	sub    $0x8,%esp
f010d491:	ff 75 0c             	pushl  0xc(%ebp)
f010d494:	ff 75 08             	pushl  0x8(%ebp)
f010d497:	e8 4b a4 ff ff       	call   f01078e7 <freeSharedObject>
f010d49c:	83 c4 10             	add    $0x10,%esp
}
f010d49f:	c9                   	leave  
f010d4a0:	c3                   	ret    

f010d4a1 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010d4a1:	55                   	push   %ebp
f010d4a2:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010d4a4:	a1 24 f7 85 f0       	mov    0xf085f724,%eax
}
f010d4a9:	5d                   	pop    %ebp
f010d4aa:	c3                   	ret    

f010d4ab <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010d4ab:	55                   	push   %ebp
f010d4ac:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010d4ae:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d4b3:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d4b6:	5d                   	pop    %ebp
f010d4b7:	c3                   	ret    

f010d4b8 <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010d4b8:	55                   	push   %ebp
f010d4b9:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010d4bb:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d4c0:	89 c2                	mov    %eax,%edx
f010d4c2:	a1 f0 ed 85 f0       	mov    0xf085edf0,%eax
f010d4c7:	29 c2                	sub    %eax,%edx
f010d4c9:	89 d0                	mov    %edx,%eax
f010d4cb:	c1 f8 04             	sar    $0x4,%eax
f010d4ce:	89 c2                	mov    %eax,%edx
f010d4d0:	89 d0                	mov    %edx,%eax
f010d4d2:	c1 e0 03             	shl    $0x3,%eax
f010d4d5:	01 d0                	add    %edx,%eax
f010d4d7:	01 c0                	add    %eax,%eax
f010d4d9:	01 d0                	add    %edx,%eax
f010d4db:	c1 e0 03             	shl    $0x3,%eax
f010d4de:	01 d0                	add    %edx,%eax
f010d4e0:	89 c1                	mov    %eax,%ecx
f010d4e2:	c1 e1 08             	shl    $0x8,%ecx
f010d4e5:	01 c8                	add    %ecx,%eax
f010d4e7:	01 c0                	add    %eax,%eax
f010d4e9:	01 d0                	add    %edx,%eax
f010d4eb:	01 c0                	add    %eax,%eax
f010d4ed:	01 d0                	add    %edx,%eax
f010d4ef:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010d4f6:	01 d0                	add    %edx,%eax
f010d4f8:	89 c2                	mov    %eax,%edx
f010d4fa:	c1 e2 09             	shl    $0x9,%edx
f010d4fd:	29 c2                	sub    %eax,%edx
f010d4ff:	89 d0                	mov    %edx,%eax
f010d501:	f7 d8                	neg    %eax
}
f010d503:	5d                   	pop    %ebp
f010d504:	c3                   	ret    

f010d505 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010d505:	55                   	push   %ebp
f010d506:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010d508:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d50d:	8b 40 50             	mov    0x50(%eax),%eax
}
f010d510:	5d                   	pop    %ebp
f010d511:	c3                   	ret    

f010d512 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010d512:	55                   	push   %ebp
f010d513:	89 e5                	mov    %esp,%ebp
f010d515:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010d518:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d51c:	75 0a                	jne    f010d528 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010d51e:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d523:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d526:	eb 22                	jmp    f010d54a <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010d528:	83 ec 04             	sub    $0x4,%esp
f010d52b:	6a 00                	push   $0x0
f010d52d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010d530:	50                   	push   %eax
f010d531:	ff 75 08             	pushl  0x8(%ebp)
f010d534:	e8 e5 cb ff ff       	call   f010a11e <envid2env>
f010d539:	83 c4 10             	add    $0x10,%esp
f010d53c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d53f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d543:	79 05                	jns    f010d54a <sys_destroy_env+0x38>
	{
		return r;
f010d545:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d548:	eb 5e                	jmp    f010d5a8 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010d54a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d54d:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d552:	39 c2                	cmp    %eax,%edx
f010d554:	75 1b                	jne    f010d571 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010d556:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d55b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d55e:	83 ec 08             	sub    $0x8,%esp
f010d561:	50                   	push   %eax
f010d562:	68 ee 7b 13 f0       	push   $0xf0137bee
f010d567:	e8 a2 37 ff ff       	call   f0100d0e <cprintf>
f010d56c:	83 c4 10             	add    $0x10,%esp
f010d56f:	eb 20                	jmp    f010d591 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010d571:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d574:	8b 50 4c             	mov    0x4c(%eax),%edx
f010d577:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d57c:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d57f:	83 ec 04             	sub    $0x4,%esp
f010d582:	52                   	push   %edx
f010d583:	50                   	push   %eax
f010d584:	68 09 7c 13 f0       	push   $0xf0137c09
f010d589:	e8 80 37 ff ff       	call   f0100d0e <cprintf>
f010d58e:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010d591:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d594:	8b 40 4c             	mov    0x4c(%eax),%eax
f010d597:	83 ec 0c             	sub    $0xc,%esp
f010d59a:	50                   	push   %eax
f010d59b:	e8 86 80 ff ff       	call   f0105626 <sched_kill_env>
f010d5a0:	83 c4 10             	add    $0x10,%esp

	return 0;
f010d5a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d5a8:	c9                   	leave  
f010d5a9:	c3                   	ret    

f010d5aa <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010d5aa:	55                   	push   %ebp
f010d5ab:	89 e5                	mov    %esp,%ebp
f010d5ad:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010d5b0:	e8 4a cb ff ff       	call   f010a0ff <env_exit>
	//env_run_cmd_prmpt();
}
f010d5b5:	90                   	nop
f010d5b6:	c9                   	leave  
f010d5b7:	c3                   	ret    

f010d5b8 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010d5b8:	55                   	push   %ebp
f010d5b9:	89 e5                	mov    %esp,%ebp
f010d5bb:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010d5be:	ff 75 14             	pushl  0x14(%ebp)
f010d5c1:	ff 75 10             	pushl  0x10(%ebp)
f010d5c4:	ff 75 0c             	pushl  0xc(%ebp)
f010d5c7:	ff 75 08             	pushl  0x8(%ebp)
f010d5ca:	e8 a8 be ff ff       	call   f0109477 <env_create>
f010d5cf:	83 c4 10             	add    $0x10,%esp
f010d5d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010d5d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d5d9:	75 07                	jne    f010d5e2 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010d5db:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010d5e0:	eb 14                	jmp    f010d5f6 <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010d5e2:	83 ec 0c             	sub    $0xc,%esp
f010d5e5:	ff 75 f4             	pushl  -0xc(%ebp)
f010d5e8:	e8 fe 7b ff ff       	call   f01051eb <sched_new_env>
f010d5ed:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010d5f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5f3:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010d5f6:	c9                   	leave  
f010d5f7:	c3                   	ret    

f010d5f8 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010d5f8:	55                   	push   %ebp
f010d5f9:	89 e5                	mov    %esp,%ebp
f010d5fb:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010d5fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010d601:	83 ec 0c             	sub    $0xc,%esp
f010d604:	50                   	push   %eax
f010d605:	e8 fe 7b ff ff       	call   f0105208 <sched_run_env>
f010d60a:	83 c4 10             	add    $0x10,%esp
}
f010d60d:	90                   	nop
f010d60e:	c9                   	leave  
f010d60f:	c3                   	ret    

f010d610 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010d610:	55                   	push   %ebp
f010d611:	89 e5                	mov    %esp,%ebp
f010d613:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010d616:	0f 31                	rdtsc  
f010d618:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010d61b:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010d61e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d621:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d624:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d627:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010d62a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d62d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d630:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010d633:	89 01                	mov    %eax,(%ecx)
f010d635:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010d638:	8b 45 08             	mov    0x8(%ebp),%eax
f010d63b:	c9                   	leave  
f010d63c:	c2 04 00             	ret    $0x4

f010d63f <sys_rcr2>:

uint32 sys_rcr2()
{
f010d63f:	55                   	push   %ebp
f010d640:	89 e5                	mov    %esp,%ebp
f010d642:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010d645:	0f 20 d0             	mov    %cr2,%eax
f010d648:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010d64b:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010d64e:	90                   	nop
}
f010d64f:	c9                   	leave  
f010d650:	c3                   	ret    

f010d651 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010d651:	55                   	push   %ebp
f010d652:	89 e5                	mov    %esp,%ebp
f010d654:	83 ec 04             	sub    $0x4,%esp
f010d657:	8b 45 08             	mov    0x8(%ebp),%eax
f010d65a:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010d65d:	8a 45 fc             	mov    -0x4(%ebp),%al
f010d660:	a2 a8 f6 85 f0       	mov    %al,0xf085f6a8
}
f010d665:	90                   	nop
f010d666:	c9                   	leave  
f010d667:	c3                   	ret    

f010d668 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010d668:	55                   	push   %ebp
f010d669:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010d66b:	c7 05 b0 f8 85 f0 00 	movl   $0x0,0xf085f8b0
f010d672:	00 00 00 
}
f010d675:	90                   	nop
f010d676:	5d                   	pop    %ebp
f010d677:	c3                   	ret    

f010d678 <inctst>:
void inctst()
{
f010d678:	55                   	push   %ebp
f010d679:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010d67b:	a1 b0 f8 85 f0       	mov    0xf085f8b0,%eax
f010d680:	40                   	inc    %eax
f010d681:	a3 b0 f8 85 f0       	mov    %eax,0xf085f8b0
}
f010d686:	90                   	nop
f010d687:	5d                   	pop    %ebp
f010d688:	c3                   	ret    

f010d689 <gettst>:
uint32 gettst()
{
f010d689:	55                   	push   %ebp
f010d68a:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010d68c:	a1 b0 f8 85 f0       	mov    0xf085f8b0,%eax
}
f010d691:	5d                   	pop    %ebp
f010d692:	c3                   	ret    

f010d693 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010d693:	55                   	push   %ebp
f010d694:	89 e5                	mov    %esp,%ebp
f010d696:	83 ec 28             	sub    $0x28,%esp
f010d699:	8b 45 14             	mov    0x14(%ebp),%eax
f010d69c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010d69f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010d6a6:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010d6aa:	83 f8 65             	cmp    $0x65,%eax
f010d6ad:	74 5d                	je     f010d70c <tst+0x79>
f010d6af:	83 f8 65             	cmp    $0x65,%eax
f010d6b2:	7f 0a                	jg     f010d6be <tst+0x2b>
f010d6b4:	83 f8 62             	cmp    $0x62,%eax
f010d6b7:	74 73                	je     f010d72c <tst+0x99>
f010d6b9:	e9 91 00 00 00       	jmp    f010d74f <tst+0xbc>
f010d6be:	83 f8 67             	cmp    $0x67,%eax
f010d6c1:	74 29                	je     f010d6ec <tst+0x59>
f010d6c3:	83 f8 6c             	cmp    $0x6c,%eax
f010d6c6:	0f 85 83 00 00 00    	jne    f010d74f <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010d6cc:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6cf:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6d2:	73 09                	jae    f010d6dd <tst+0x4a>
			chk = 1;
f010d6d4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d6db:	eb 68                	jmp    f010d745 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010d6dd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d6e1:	74 62                	je     f010d745 <tst+0xb2>
			chk = 1;
f010d6e3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d6ea:	eb 59                	jmp    f010d745 <tst+0xb2>
	case 'g':
		if (n > v1)
f010d6ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010d6ef:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d6f2:	76 09                	jbe    f010d6fd <tst+0x6a>
			chk = 1;
f010d6f4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d6fb:	eb 4b                	jmp    f010d748 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010d6fd:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d701:	74 45                	je     f010d748 <tst+0xb5>
			chk = 1;
f010d703:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d70a:	eb 3c                	jmp    f010d748 <tst+0xb5>
	case 'e':
		if (n == v1)
f010d70c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d70f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d712:	75 09                	jne    f010d71d <tst+0x8a>
			chk = 1;
f010d714:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010d71b:	eb 2e                	jmp    f010d74b <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010d71d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010d721:	74 28                	je     f010d74b <tst+0xb8>
			chk = 1;
f010d723:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d72a:	eb 1f                	jmp    f010d74b <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010d72c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d72f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d732:	72 1a                	jb     f010d74e <tst+0xbb>
f010d734:	8b 45 08             	mov    0x8(%ebp),%eax
f010d737:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d73a:	77 12                	ja     f010d74e <tst+0xbb>
			chk = 1;
f010d73c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010d743:	eb 09                	jmp    f010d74e <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d745:	90                   	nop
f010d746:	eb 07                	jmp    f010d74f <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d748:	90                   	nop
f010d749:	eb 04                	jmp    f010d74f <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010d74b:	90                   	nop
f010d74c:	eb 01                	jmp    f010d74f <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010d74e:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010d74f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d753:	75 17                	jne    f010d76c <tst+0xd9>
f010d755:	83 ec 04             	sub    $0x4,%esp
f010d758:	68 21 7c 13 f0       	push   $0xf0137c21
f010d75d:	68 00 02 00 00       	push   $0x200
f010d762:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010d767:	e8 99 2a ff ff       	call   f0100205 <_panic>
	tstcnt++ ;
f010d76c:	a1 b0 f8 85 f0       	mov    0xf085f8b0,%eax
f010d771:	40                   	inc    %eax
f010d772:	a3 b0 f8 85 f0       	mov    %eax,0xf085f8b0
	return;
f010d777:	90                   	nop
}
f010d778:	c9                   	leave  
f010d779:	c3                   	ret    

f010d77a <chktst>:

void chktst(uint32 n)
{
f010d77a:	55                   	push   %ebp
f010d77b:	89 e5                	mov    %esp,%ebp
f010d77d:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010d780:	a1 b0 f8 85 f0       	mov    0xf085f8b0,%eax
f010d785:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d788:	75 12                	jne    f010d79c <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010d78a:	83 ec 0c             	sub    $0xc,%esp
f010d78d:	68 34 7c 13 f0       	push   $0xf0137c34
f010d792:	e8 77 35 ff ff       	call   f0100d0e <cprintf>
f010d797:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010d79a:	eb 17                	jmp    f010d7b3 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010d79c:	83 ec 04             	sub    $0x4,%esp
f010d79f:	68 60 7c 13 f0       	push   $0xf0137c60
f010d7a4:	68 0a 02 00 00       	push   $0x20a
f010d7a9:	68 7f 7b 13 f0       	push   $0xf0137b7f
f010d7ae:	e8 52 2a ff ff       	call   f0100205 <_panic>
}
f010d7b3:	c9                   	leave  
f010d7b4:	c3                   	ret    

f010d7b5 <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010d7b5:	55                   	push   %ebp
f010d7b6:	89 e5                	mov    %esp,%ebp
f010d7b8:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d7bb:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d7c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010d7c3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010d7ca:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010d7d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010d7d5:	0f 84 a5 00 00 00    	je     f010d880 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010d7db:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d7e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d7e5:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d7eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d7ee:	eb 4a                	jmp    f010d83a <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010d7f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d7f3:	8b 00                	mov    (%eax),%eax
f010d7f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d7f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010d7fb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d800:	89 c2                	mov    %eax,%edx
f010d802:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d805:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d80c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d80f:	01 c8                	add    %ecx,%eax
f010d811:	8b 00                	mov    (%eax),%eax
f010d813:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d816:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d819:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d81e:	39 c2                	cmp    %eax,%edx
f010d820:	74 09                	je     f010d82b <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010d822:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010d829:	eb 3e                	jmp    f010d869 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010d82b:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d82e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d831:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d837:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d83a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d83e:	74 08                	je     f010d848 <sys_check_LRU_lists+0x93>
f010d840:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d843:	8b 40 10             	mov    0x10(%eax),%eax
f010d846:	eb 05                	jmp    f010d84d <sys_check_LRU_lists+0x98>
f010d848:	b8 00 00 00 00       	mov    $0x0,%eax
f010d84d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d850:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d856:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d859:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d85f:	85 c0                	test   %eax,%eax
f010d861:	75 8d                	jne    f010d7f0 <sys_check_LRU_lists+0x3b>
f010d863:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d867:	75 87                	jne    f010d7f0 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010d869:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d86c:	8b 90 d4 05 00 00    	mov    0x5d4(%eax),%edx
f010d872:	8b 45 10             	mov    0x10(%ebp),%eax
f010d875:	39 c2                	cmp    %eax,%edx
f010d877:	74 07                	je     f010d880 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010d879:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010d880:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010d884:	0f 84 a5 00 00 00    	je     f010d92f <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010d88a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d891:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d894:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d89a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d89d:	eb 4a                	jmp    f010d8e9 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010d89f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8a2:	8b 00                	mov    (%eax),%eax
f010d8a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d8a7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d8aa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d8af:	89 c2                	mov    %eax,%edx
f010d8b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d8b4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d8bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8be:	01 c8                	add    %ecx,%eax
f010d8c0:	8b 00                	mov    (%eax),%eax
f010d8c2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010d8c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d8c8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d8cd:	39 c2                	cmp    %eax,%edx
f010d8cf:	74 09                	je     f010d8da <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010d8d1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010d8d8:	eb 3e                	jmp    f010d918 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010d8da:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d8dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d8e0:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d8e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d8e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d8ed:	74 08                	je     f010d8f7 <sys_check_LRU_lists+0x142>
f010d8ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d8f2:	8b 40 10             	mov    0x10(%eax),%eax
f010d8f5:	eb 05                	jmp    f010d8fc <sys_check_LRU_lists+0x147>
f010d8f7:	b8 00 00 00 00       	mov    $0x0,%eax
f010d8fc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010d8ff:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010d905:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d908:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010d90e:	85 c0                	test   %eax,%eax
f010d910:	75 8d                	jne    f010d89f <sys_check_LRU_lists+0xea>
f010d912:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d916:	75 87                	jne    f010d89f <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010d918:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d91b:	8b 90 e4 05 00 00    	mov    0x5e4(%eax),%edx
f010d921:	8b 45 14             	mov    0x14(%ebp),%eax
f010d924:	39 c2                	cmp    %eax,%edx
f010d926:	74 07                	je     f010d92f <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010d928:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010d92f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d932:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010d935:	c9                   	leave  
f010d936:	c3                   	ret    

f010d937 <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010d937:	55                   	push   %ebp
f010d938:	89 e5                	mov    %esp,%ebp
f010d93a:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010d93d:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010d942:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010d945:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d94c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d94f:	8b 80 c8 05 00 00    	mov    0x5c8(%eax),%eax
f010d955:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d958:	eb 65                	jmp    f010d9bf <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010d95a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d961:	eb 3a                	jmp    f010d99d <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010d963:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d966:	8b 00                	mov    (%eax),%eax
f010d968:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010d96b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d96e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d973:	89 c2                	mov    %eax,%edx
f010d975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d978:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010d97f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d982:	01 c8                	add    %ecx,%eax
f010d984:	8b 00                	mov    (%eax),%eax
f010d986:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d989:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d98c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010d991:	39 c2                	cmp    %eax,%edx
f010d993:	75 05                	jne    f010d99a <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010d995:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010d998:	eb 0b                	jmp    f010d9a5 <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010d99a:	ff 45 f4             	incl   -0xc(%ebp)
f010d99d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d9a0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010d9a3:	7c be                	jl     f010d963 <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010d9a5:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010d9a9:	7e 08                	jle    f010d9b3 <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010d9ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d9ae:	e9 ed 00 00 00       	jmp    f010daa0 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010d9b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9b6:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d9bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010d9bf:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d9c3:	74 08                	je     f010d9cd <sys_check_LRU_lists_free+0x96>
f010d9c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d9c8:	8b 40 10             	mov    0x10(%eax),%eax
f010d9cb:	eb 05                	jmp    f010d9d2 <sys_check_LRU_lists_free+0x9b>
f010d9cd:	b8 00 00 00 00       	mov    $0x0,%eax
f010d9d2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d9d5:	89 82 d0 05 00 00    	mov    %eax,0x5d0(%edx)
f010d9db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9de:	8b 80 d0 05 00 00    	mov    0x5d0(%eax),%eax
f010d9e4:	85 c0                	test   %eax,%eax
f010d9e6:	0f 85 6e ff ff ff    	jne    f010d95a <sys_check_LRU_lists_free+0x23>
f010d9ec:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010d9f0:	0f 85 64 ff ff ff    	jne    f010d95a <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010d9f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d9f9:	8b 80 d8 05 00 00    	mov    0x5d8(%eax),%eax
f010d9ff:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010da02:	eb 62                	jmp    f010da66 <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010da04:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010da0b:	eb 3a                	jmp    f010da47 <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010da0d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010da10:	8b 00                	mov    (%eax),%eax
f010da12:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010da15:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010da18:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010da1d:	89 c2                	mov    %eax,%edx
f010da1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da22:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010da29:	8b 45 08             	mov    0x8(%ebp),%eax
f010da2c:	01 c8                	add    %ecx,%eax
f010da2e:	8b 00                	mov    (%eax),%eax
f010da30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010da33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010da36:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010da3b:	39 c2                	cmp    %eax,%edx
f010da3d:	75 05                	jne    f010da44 <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010da3f:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010da42:	eb 0b                	jmp    f010da4f <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010da44:	ff 45 f0             	incl   -0x10(%ebp)
f010da47:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da4a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010da4d:	7c be                	jl     f010da0d <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010da4f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010da53:	7e 05                	jle    f010da5a <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010da55:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010da58:	eb 46                	jmp    f010daa0 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010da5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da5d:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010da63:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010da66:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010da6a:	74 08                	je     f010da74 <sys_check_LRU_lists_free+0x13d>
f010da6c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010da6f:	8b 40 10             	mov    0x10(%eax),%eax
f010da72:	eb 05                	jmp    f010da79 <sys_check_LRU_lists_free+0x142>
f010da74:	b8 00 00 00 00       	mov    $0x0,%eax
f010da79:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da7c:	89 82 e0 05 00 00    	mov    %eax,0x5e0(%edx)
f010da82:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010da85:	8b 80 e0 05 00 00    	mov    0x5e0(%eax),%eax
f010da8b:	85 c0                	test   %eax,%eax
f010da8d:	0f 85 71 ff ff ff    	jne    f010da04 <sys_check_LRU_lists_free+0xcd>
f010da93:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010da97:	0f 85 67 ff ff ff    	jne    f010da04 <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010da9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010daa0:	c9                   	leave  
f010daa1:	c3                   	ret    

f010daa2 <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010daa2:	55                   	push   %ebp
f010daa3:	89 e5                	mov    %esp,%ebp
f010daa5:	56                   	push   %esi
f010daa6:	53                   	push   %ebx
f010daa7:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010daaa:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010daae:	0f 87 0e 04 00 00    	ja     f010dec2 <syscall+0x420>
f010dab4:	8b 45 08             	mov    0x8(%ebp),%eax
f010dab7:	c1 e0 02             	shl    $0x2,%eax
f010daba:	05 7c 7c 13 f0       	add    $0xf0137c7c,%eax
f010dabf:	8b 00                	mov    (%eax),%eax
f010dac1:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010dac3:	8b 45 14             	mov    0x14(%ebp),%eax
f010dac6:	0f b6 d0             	movzbl %al,%edx
f010dac9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dacc:	83 ec 04             	sub    $0x4,%esp
f010dacf:	52                   	push   %edx
f010dad0:	ff 75 10             	pushl  0x10(%ebp)
f010dad3:	50                   	push   %eax
f010dad4:	e8 db f4 ff ff       	call   f010cfb4 <sys_cputs>
f010dad9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dadc:	b8 00 00 00 00       	mov    $0x0,%eax
f010dae1:	e9 e1 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010dae6:	e8 3e f5 ff ff       	call   f010d029 <sys_cgetc>
f010daeb:	e9 d7 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010daf0:	83 ec 08             	sub    $0x8,%esp
f010daf3:	ff 75 10             	pushl  0x10(%ebp)
f010daf6:	ff 75 0c             	pushl  0xc(%ebp)
f010daf9:	e8 91 f6 ff ff       	call   f010d18f <sys_calculate_required_frames>
f010dafe:	83 c4 10             	add    $0x10,%esp
f010db01:	e9 c1 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010db06:	e8 a6 f6 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f010db0b:	e9 b7 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010db10:	e8 bb f6 ff ff       	call   f010d1d0 <sys_calculate_modified_frames>
f010db15:	e9 ad 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010db1a:	e8 cb f6 ff ff       	call   f010d1ea <sys_calculate_notmod_frames>
f010db1f:	e9 a3 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010db24:	e8 33 f7 ff ff       	call   f010d25c <sys_pf_calculate_allocated_pages>
f010db29:	e9 99 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010db2e:	83 ec 0c             	sub    $0xc,%esp
f010db31:	ff 75 0c             	pushl  0xc(%ebp)
f010db34:	e8 cb f6 ff ff       	call   f010d204 <sys_calculate_pages_tobe_removed_ready_exit>
f010db39:	83 c4 10             	add    $0x10,%esp
f010db3c:	e9 86 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010db41:	e8 d4 f6 ff ff       	call   f010d21a <sys_scarce_memory>
		return 0;
f010db46:	b8 00 00 00 00       	mov    $0x0,%eax
f010db4b:	e9 77 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010db50:	83 ec 08             	sub    $0x8,%esp
f010db53:	ff 75 10             	pushl  0x10(%ebp)
f010db56:	ff 75 0c             	pushl  0xc(%ebp)
f010db59:	e8 17 f7 ff ff       	call   f010d275 <sys_free_user_mem>
f010db5e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db61:	b8 00 00 00 00       	mov    $0x0,%eax
f010db66:	e9 5c 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010db6b:	8b 55 10             	mov    0x10(%ebp),%edx
f010db6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db71:	83 ec 08             	sub    $0x8,%esp
f010db74:	52                   	push   %edx
f010db75:	50                   	push   %eax
f010db76:	e8 c1 f4 ff ff       	call   f010d03c <__sys_allocate_page>
f010db7b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010db7e:	b8 00 00 00 00       	mov    $0x0,%eax
f010db83:	e9 3f 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010db88:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010db8b:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010db8e:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010db91:	8b 55 10             	mov    0x10(%ebp),%edx
f010db94:	8b 45 0c             	mov    0xc(%ebp),%eax
f010db97:	83 ec 0c             	sub    $0xc,%esp
f010db9a:	56                   	push   %esi
f010db9b:	53                   	push   %ebx
f010db9c:	51                   	push   %ecx
f010db9d:	52                   	push   %edx
f010db9e:	50                   	push   %eax
f010db9f:	e8 b1 f5 ff ff       	call   f010d155 <__sys_map_frame>
f010dba4:	83 c4 20             	add    $0x20,%esp
		return 0;
f010dba7:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbac:	e9 16 03 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010dbb1:	8b 55 10             	mov    0x10(%ebp),%edx
f010dbb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dbb7:	83 ec 08             	sub    $0x8,%esp
f010dbba:	52                   	push   %edx
f010dbbb:	50                   	push   %eax
f010dbbc:	e8 b1 f5 ff ff       	call   f010d172 <__sys_unmap_frame>
f010dbc1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbc4:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbc9:	e9 f9 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010dbce:	83 ec 04             	sub    $0x4,%esp
f010dbd1:	ff 75 14             	pushl  0x14(%ebp)
f010dbd4:	ff 75 10             	pushl  0x10(%ebp)
f010dbd7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbda:	e8 f8 f6 ff ff       	call   f010d2d7 <sys_allocate_chunk>
f010dbdf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dbe2:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbe7:	e9 db 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010dbec:	e8 41 f7 ff ff       	call   f010d332 <sys_disable_interrupt>
		return 0;
f010dbf1:	b8 00 00 00 00       	mov    $0x0,%eax
f010dbf6:	e9 cc 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010dbfb:	e8 4c f7 ff ff       	call   f010d34c <sys_enable_interrupt>
		return 0;
f010dc00:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc05:	e9 bd 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dc0a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc0d:	0f be c0             	movsbl %al,%eax
f010dc10:	83 ec 0c             	sub    $0xc,%esp
f010dc13:	50                   	push   %eax
f010dc14:	e8 ec f3 ff ff       	call   f010d005 <sys_cputc>
f010dc19:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc1c:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc21:	e9 a1 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010dc26:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc29:	0f be c0             	movsbl %al,%eax
f010dc2c:	83 ec 0c             	sub    $0xc,%esp
f010dc2f:	50                   	push   %eax
f010dc30:	e8 f3 f5 ff ff       	call   f010d228 <sys_clearFFL>
f010dc35:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc38:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc3d:	e9 85 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010dc42:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc45:	83 ec 08             	sub    $0x8,%esp
f010dc48:	ff 75 10             	pushl  0x10(%ebp)
f010dc4b:	50                   	push   %eax
f010dc4c:	e8 15 f7 ff ff       	call   f010d366 <sys_createSemaphore>
f010dc51:	83 c4 10             	add    $0x10,%esp
f010dc54:	e9 6e 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010dc59:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc5f:	83 ec 08             	sub    $0x8,%esp
f010dc62:	52                   	push   %edx
f010dc63:	50                   	push   %eax
f010dc64:	e8 1f f7 ff ff       	call   f010d388 <sys_waitSemaphore>
f010dc69:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc6c:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc71:	e9 51 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010dc76:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc79:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc7c:	83 ec 08             	sub    $0x8,%esp
f010dc7f:	52                   	push   %edx
f010dc80:	50                   	push   %eax
f010dc81:	e8 1c f7 ff ff       	call   f010d3a2 <sys_signalSemaphore>
f010dc86:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dc89:	b8 00 00 00 00       	mov    $0x0,%eax
f010dc8e:	e9 34 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010dc93:	8b 55 10             	mov    0x10(%ebp),%edx
f010dc96:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dc99:	83 ec 08             	sub    $0x8,%esp
f010dc9c:	52                   	push   %edx
f010dc9d:	50                   	push   %eax
f010dc9e:	e8 19 f7 ff ff       	call   f010d3bc <sys_getSemaphoreValue>
f010dca3:	83 c4 10             	add    $0x10,%esp
f010dca6:	e9 1c 02 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010dcab:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010dcae:	8b 45 14             	mov    0x14(%ebp),%eax
f010dcb1:	0f b6 d0             	movzbl %al,%edx
f010dcb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcb7:	51                   	push   %ecx
f010dcb8:	52                   	push   %edx
f010dcb9:	ff 75 10             	pushl  0x10(%ebp)
f010dcbc:	50                   	push   %eax
f010dcbd:	e8 61 f7 ff ff       	call   f010d423 <sys_createSharedObject>
f010dcc2:	83 c4 10             	add    $0x10,%esp
f010dcc5:	e9 fd 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010dcca:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dccd:	8b 55 10             	mov    0x10(%ebp),%edx
f010dcd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcd3:	83 ec 04             	sub    $0x4,%esp
f010dcd6:	51                   	push   %ecx
f010dcd7:	52                   	push   %edx
f010dcd8:	50                   	push   %eax
f010dcd9:	e8 8e f7 ff ff       	call   f010d46c <sys_getSharedObject>
f010dcde:	83 c4 10             	add    $0x10,%esp
f010dce1:	e9 e1 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010dce6:	8b 55 10             	mov    0x10(%ebp),%edx
f010dce9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dcec:	83 ec 08             	sub    $0x8,%esp
f010dcef:	52                   	push   %edx
f010dcf0:	50                   	push   %eax
f010dcf1:	e8 92 f7 ff ff       	call   f010d488 <sys_freeSharedObject>
f010dcf6:	83 c4 10             	add    $0x10,%esp
f010dcf9:	e9 c9 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010dcfe:	8b 55 10             	mov    0x10(%ebp),%edx
f010dd01:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd04:	83 ec 08             	sub    $0x8,%esp
f010dd07:	52                   	push   %edx
f010dd08:	50                   	push   %eax
f010dd09:	e8 45 f7 ff ff       	call   f010d453 <sys_getSizeOfSharedObject>
f010dd0e:	83 c4 10             	add    $0x10,%esp
f010dd11:	e9 b1 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010dd16:	e8 86 f7 ff ff       	call   f010d4a1 <sys_getMaxShares>
f010dd1b:	e9 a7 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010dd20:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd23:	ff 75 18             	pushl  0x18(%ebp)
f010dd26:	ff 75 14             	pushl  0x14(%ebp)
f010dd29:	ff 75 10             	pushl  0x10(%ebp)
f010dd2c:	50                   	push   %eax
f010dd2d:	e8 86 f8 ff ff       	call   f010d5b8 <sys_create_env>
f010dd32:	83 c4 10             	add    $0x10,%esp
f010dd35:	e9 8d 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010dd3a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd3d:	83 ec 0c             	sub    $0xc,%esp
f010dd40:	50                   	push   %eax
f010dd41:	e8 b2 f8 ff ff       	call   f010d5f8 <sys_run_env>
f010dd46:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dd49:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd4e:	e9 74 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010dd53:	e8 60 f7 ff ff       	call   f010d4b8 <sys_getenvindex>
f010dd58:	e9 6a 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010dd5d:	e8 49 f7 ff ff       	call   f010d4ab <sys_getenvid>
f010dd62:	e9 60 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010dd67:	e8 99 f7 ff ff       	call   f010d505 <sys_getparentenvid>
f010dd6c:	e9 56 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010dd71:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dd74:	83 ec 0c             	sub    $0xc,%esp
f010dd77:	50                   	push   %eax
f010dd78:	e8 95 f7 ff ff       	call   f010d512 <sys_destroy_env>
f010dd7d:	83 c4 10             	add    $0x10,%esp
f010dd80:	e9 42 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010dd85:	e8 20 f8 ff ff       	call   f010d5aa <sys_exit_env>
		return 0;
f010dd8a:	b8 00 00 00 00       	mov    $0x0,%eax
f010dd8f:	e9 33 01 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010dd94:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010dd97:	83 ec 0c             	sub    $0xc,%esp
f010dd9a:	50                   	push   %eax
f010dd9b:	e8 70 f8 ff ff       	call   f010d610 <sys_get_virtual_time>
f010dda0:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010dda3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dda6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010dda9:	8b 45 10             	mov    0x10(%ebp),%eax
f010ddac:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010ddaf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ddb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ddb5:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010ddb7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010ddba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddbd:	89 10                	mov    %edx,(%eax)
		return 0;
f010ddbf:	b8 00 00 00 00       	mov    $0x0,%eax
f010ddc4:	e9 fe 00 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010ddc9:	83 ec 04             	sub    $0x4,%esp
f010ddcc:	ff 75 14             	pushl  0x14(%ebp)
f010ddcf:	ff 75 10             	pushl  0x10(%ebp)
f010ddd2:	ff 75 0c             	pushl  0xc(%ebp)
f010ddd5:	e8 20 f5 ff ff       	call   f010d2fa <sys_move_user_mem>
f010ddda:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dddd:	b8 00 00 00 00       	mov    $0x0,%eax
f010dde2:	e9 e0 00 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010dde7:	e8 53 f8 ff ff       	call   f010d63f <sys_rcr2>
f010ddec:	e9 d6 00 00 00       	jmp    f010dec7 <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010ddf1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ddf4:	0f b6 c0             	movzbl %al,%eax
f010ddf7:	83 ec 0c             	sub    $0xc,%esp
f010ddfa:	50                   	push   %eax
f010ddfb:	e8 51 f8 ff ff       	call   f010d651 <sys_bypassPageFault>
f010de00:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de03:	b8 00 00 00 00       	mov    $0x0,%eax
f010de08:	e9 ba 00 00 00       	jmp    f010dec7 <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010de0d:	e8 56 f8 ff ff       	call   f010d668 <rsttst>
		return 0;
f010de12:	b8 00 00 00 00       	mov    $0x0,%eax
f010de17:	e9 ab 00 00 00       	jmp    f010dec7 <syscall+0x425>
	case SYS_inctst:
		inctst();
f010de1c:	e8 57 f8 ff ff       	call   f010d678 <inctst>
		return 0;
f010de21:	b8 00 00 00 00       	mov    $0x0,%eax
f010de26:	e9 9c 00 00 00       	jmp    f010dec7 <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010de2b:	83 ec 0c             	sub    $0xc,%esp
f010de2e:	ff 75 0c             	pushl  0xc(%ebp)
f010de31:	e8 44 f9 ff ff       	call   f010d77a <chktst>
f010de36:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de39:	b8 00 00 00 00       	mov    $0x0,%eax
f010de3e:	e9 84 00 00 00       	jmp    f010dec7 <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010de43:	e8 41 f8 ff ff       	call   f010d689 <gettst>
f010de48:	eb 7d                	jmp    f010dec7 <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010de4a:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010de4d:	8b 45 18             	mov    0x18(%ebp),%eax
f010de50:	0f be c0             	movsbl %al,%eax
f010de53:	83 ec 0c             	sub    $0xc,%esp
f010de56:	52                   	push   %edx
f010de57:	50                   	push   %eax
f010de58:	ff 75 14             	pushl  0x14(%ebp)
f010de5b:	ff 75 10             	pushl  0x10(%ebp)
f010de5e:	ff 75 0c             	pushl  0xc(%ebp)
f010de61:	e8 2d f8 ff ff       	call   f010d693 <tst>
f010de66:	83 c4 20             	add    $0x20,%esp
		return 0;
f010de69:	b8 00 00 00 00       	mov    $0x0,%eax
f010de6e:	eb 57                	jmp    f010dec7 <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010de70:	e8 a5 f4 ff ff       	call   f010d31a <sys_get_heap_strategy>
f010de75:	eb 50                	jmp    f010dec7 <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010de77:	83 ec 0c             	sub    $0xc,%esp
f010de7a:	ff 75 0c             	pushl  0xc(%ebp)
f010de7d:	e8 a2 f4 ff ff       	call   f010d324 <sys_set_uheap_strategy>
f010de82:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de85:	b8 00 00 00 00       	mov    $0x0,%eax
f010de8a:	eb 3b                	jmp    f010dec7 <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010de8c:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010de8f:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010de92:	8b 55 10             	mov    0x10(%ebp),%edx
f010de95:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de98:	53                   	push   %ebx
f010de99:	51                   	push   %ecx
f010de9a:	52                   	push   %edx
f010de9b:	50                   	push   %eax
f010de9c:	e8 14 f9 ff ff       	call   f010d7b5 <sys_check_LRU_lists>
f010dea1:	83 c4 10             	add    $0x10,%esp
f010dea4:	eb 21                	jmp    f010dec7 <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010dea6:	8b 55 10             	mov    0x10(%ebp),%edx
f010dea9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010deac:	83 ec 08             	sub    $0x8,%esp
f010deaf:	52                   	push   %edx
f010deb0:	50                   	push   %eax
f010deb1:	e8 81 fa ff ff       	call   f010d937 <sys_check_LRU_lists_free>
f010deb6:	83 c4 10             	add    $0x10,%esp
f010deb9:	eb 0c                	jmp    f010dec7 <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010debb:	b8 03 00 00 00       	mov    $0x3,%eax
f010dec0:	eb 05                	jmp    f010dec7 <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010dec2:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010dec7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010deca:	5b                   	pop    %ebx
f010decb:	5e                   	pop    %esi
f010decc:	5d                   	pop    %ebp
f010decd:	c3                   	ret    

f010dece <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010dece:	55                   	push   %ebp
f010decf:	89 e5                	mov    %esp,%ebp
f010ded1:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010ded4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ded7:	8b 00                	mov    (%eax),%eax
f010ded9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dedc:	8b 45 10             	mov    0x10(%ebp),%eax
f010dedf:	8b 00                	mov    (%eax),%eax
f010dee1:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dee4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010deeb:	e9 ca 00 00 00       	jmp    f010dfba <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010def0:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010def3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010def6:	01 d0                	add    %edx,%eax
f010def8:	89 c2                	mov    %eax,%edx
f010defa:	c1 ea 1f             	shr    $0x1f,%edx
f010defd:	01 d0                	add    %edx,%eax
f010deff:	d1 f8                	sar    %eax
f010df01:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010df04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010df07:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010df0a:	eb 03                	jmp    f010df0f <stab_binsearch+0x41>
			m--;
f010df0c:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010df0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df12:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010df15:	7c 1e                	jl     f010df35 <stab_binsearch+0x67>
f010df17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df1a:	89 d0                	mov    %edx,%eax
f010df1c:	01 c0                	add    %eax,%eax
f010df1e:	01 d0                	add    %edx,%eax
f010df20:	c1 e0 02             	shl    $0x2,%eax
f010df23:	89 c2                	mov    %eax,%edx
f010df25:	8b 45 08             	mov    0x8(%ebp),%eax
f010df28:	01 d0                	add    %edx,%eax
f010df2a:	8a 40 04             	mov    0x4(%eax),%al
f010df2d:	0f b6 c0             	movzbl %al,%eax
f010df30:	3b 45 14             	cmp    0x14(%ebp),%eax
f010df33:	75 d7                	jne    f010df0c <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010df35:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df38:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010df3b:	7d 09                	jge    f010df46 <stab_binsearch+0x78>
			l = true_m + 1;
f010df3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010df40:	40                   	inc    %eax
f010df41:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010df44:	eb 74                	jmp    f010dfba <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010df46:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010df4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df50:	89 d0                	mov    %edx,%eax
f010df52:	01 c0                	add    %eax,%eax
f010df54:	01 d0                	add    %edx,%eax
f010df56:	c1 e0 02             	shl    $0x2,%eax
f010df59:	89 c2                	mov    %eax,%edx
f010df5b:	8b 45 08             	mov    0x8(%ebp),%eax
f010df5e:	01 d0                	add    %edx,%eax
f010df60:	8b 40 08             	mov    0x8(%eax),%eax
f010df63:	3b 45 18             	cmp    0x18(%ebp),%eax
f010df66:	73 11                	jae    f010df79 <stab_binsearch+0xab>
			*region_left = m;
f010df68:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df6b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df6e:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010df70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010df73:	40                   	inc    %eax
f010df74:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010df77:	eb 41                	jmp    f010dfba <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010df79:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010df7c:	89 d0                	mov    %edx,%eax
f010df7e:	01 c0                	add    %eax,%eax
f010df80:	01 d0                	add    %edx,%eax
f010df82:	c1 e0 02             	shl    $0x2,%eax
f010df85:	89 c2                	mov    %eax,%edx
f010df87:	8b 45 08             	mov    0x8(%ebp),%eax
f010df8a:	01 d0                	add    %edx,%eax
f010df8c:	8b 40 08             	mov    0x8(%eax),%eax
f010df8f:	3b 45 18             	cmp    0x18(%ebp),%eax
f010df92:	76 14                	jbe    f010dfa8 <stab_binsearch+0xda>
			*region_right = m - 1;
f010df94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010df97:	8d 50 ff             	lea    -0x1(%eax),%edx
f010df9a:	8b 45 10             	mov    0x10(%ebp),%eax
f010df9d:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010df9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dfa2:	48                   	dec    %eax
f010dfa3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010dfa6:	eb 12                	jmp    f010dfba <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010dfa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfab:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dfae:	89 10                	mov    %edx,(%eax)
			l = m;
f010dfb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dfb3:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010dfb6:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010dfba:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010dfbd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010dfc0:	0f 8e 2a ff ff ff    	jle    f010def0 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010dfc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dfca:	75 0f                	jne    f010dfdb <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010dfcc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfcf:	8b 00                	mov    (%eax),%eax
f010dfd1:	8d 50 ff             	lea    -0x1(%eax),%edx
f010dfd4:	8b 45 10             	mov    0x10(%ebp),%eax
f010dfd7:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010dfd9:	eb 3d                	jmp    f010e018 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dfdb:	8b 45 10             	mov    0x10(%ebp),%eax
f010dfde:	8b 00                	mov    (%eax),%eax
f010dfe0:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010dfe3:	eb 03                	jmp    f010dfe8 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010dfe5:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010dfe8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfeb:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010dfed:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010dff0:	7d 1e                	jge    f010e010 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010dff2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010dff5:	89 d0                	mov    %edx,%eax
f010dff7:	01 c0                	add    %eax,%eax
f010dff9:	01 d0                	add    %edx,%eax
f010dffb:	c1 e0 02             	shl    $0x2,%eax
f010dffe:	89 c2                	mov    %eax,%edx
f010e000:	8b 45 08             	mov    0x8(%ebp),%eax
f010e003:	01 d0                	add    %edx,%eax
f010e005:	8a 40 04             	mov    0x4(%eax),%al
f010e008:	0f b6 c0             	movzbl %al,%eax
f010e00b:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e00e:	75 d5                	jne    f010dfe5 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010e010:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e013:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e016:	89 10                	mov    %edx,(%eax)
	}
}
f010e018:	90                   	nop
f010e019:	c9                   	leave  
f010e01a:	c3                   	ret    

f010e01b <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010e01b:	55                   	push   %ebp
f010e01c:	89 e5                	mov    %esp,%ebp
f010e01e:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010e021:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e024:	c7 00 40 7d 13 f0    	movl   $0xf0137d40,(%eax)
	info->eip_line = 0;
f010e02a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e02d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010e034:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e037:	c7 40 08 40 7d 13 f0 	movl   $0xf0137d40,0x8(%eax)
	info->eip_fn_namelen = 9;
f010e03e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e041:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010e048:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e04b:	8b 55 08             	mov    0x8(%ebp),%edx
f010e04e:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010e051:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e054:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010e05b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e05e:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010e063:	76 1e                	jbe    f010e083 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010e065:	c7 45 f4 e8 d8 13 f0 	movl   $0xf013d8e8,-0xc(%ebp)
		stab_end = __STAB_END__;
f010e06c:	c7 45 f0 d8 d8 17 f0 	movl   $0xf017d8d8,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010e073:	c7 45 ec d9 d8 17 f0 	movl   $0xf017d8d9,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010e07a:	c7 45 e8 12 a4 18 f0 	movl   $0xf018a412,-0x18(%ebp)
f010e081:	eb 2a                	jmp    f010e0ad <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010e083:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010e08a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e08d:	8b 00                	mov    (%eax),%eax
f010e08f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010e092:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e095:	8b 40 04             	mov    0x4(%eax),%eax
f010e098:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010e09b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e09e:	8b 40 08             	mov    0x8(%eax),%eax
f010e0a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010e0a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e0a7:	8b 40 0c             	mov    0xc(%eax),%eax
f010e0aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010e0ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e0b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e0b3:	76 0a                	jbe    f010e0bf <debuginfo_eip+0xa4>
f010e0b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e0b8:	48                   	dec    %eax
f010e0b9:	8a 00                	mov    (%eax),%al
f010e0bb:	84 c0                	test   %al,%al
f010e0bd:	74 0a                	je     f010e0c9 <debuginfo_eip+0xae>
		return -1;
f010e0bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e0c4:	e9 01 02 00 00       	jmp    f010e2ca <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010e0c9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010e0d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e0d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0d6:	29 c2                	sub    %eax,%edx
f010e0d8:	89 d0                	mov    %edx,%eax
f010e0da:	c1 f8 02             	sar    $0x2,%eax
f010e0dd:	89 c2                	mov    %eax,%edx
f010e0df:	89 d0                	mov    %edx,%eax
f010e0e1:	c1 e0 02             	shl    $0x2,%eax
f010e0e4:	01 d0                	add    %edx,%eax
f010e0e6:	c1 e0 02             	shl    $0x2,%eax
f010e0e9:	01 d0                	add    %edx,%eax
f010e0eb:	c1 e0 02             	shl    $0x2,%eax
f010e0ee:	01 d0                	add    %edx,%eax
f010e0f0:	89 c1                	mov    %eax,%ecx
f010e0f2:	c1 e1 08             	shl    $0x8,%ecx
f010e0f5:	01 c8                	add    %ecx,%eax
f010e0f7:	89 c1                	mov    %eax,%ecx
f010e0f9:	c1 e1 10             	shl    $0x10,%ecx
f010e0fc:	01 c8                	add    %ecx,%eax
f010e0fe:	01 c0                	add    %eax,%eax
f010e100:	01 d0                	add    %edx,%eax
f010e102:	48                   	dec    %eax
f010e103:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010e106:	ff 75 08             	pushl  0x8(%ebp)
f010e109:	6a 64                	push   $0x64
f010e10b:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e10e:	50                   	push   %eax
f010e10f:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e112:	50                   	push   %eax
f010e113:	ff 75 f4             	pushl  -0xc(%ebp)
f010e116:	e8 b3 fd ff ff       	call   f010dece <stab_binsearch>
f010e11b:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010e11e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e121:	85 c0                	test   %eax,%eax
f010e123:	75 0a                	jne    f010e12f <debuginfo_eip+0x114>
		return -1;
f010e125:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e12a:	e9 9b 01 00 00       	jmp    f010e2ca <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010e12f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e132:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010e135:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e138:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010e13b:	ff 75 08             	pushl  0x8(%ebp)
f010e13e:	6a 24                	push   $0x24
f010e140:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e143:	50                   	push   %eax
f010e144:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e147:	50                   	push   %eax
f010e148:	ff 75 f4             	pushl  -0xc(%ebp)
f010e14b:	e8 7e fd ff ff       	call   f010dece <stab_binsearch>
f010e150:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010e153:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e156:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e159:	39 c2                	cmp    %eax,%edx
f010e15b:	0f 8f 86 00 00 00    	jg     f010e1e7 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e161:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e164:	89 c2                	mov    %eax,%edx
f010e166:	89 d0                	mov    %edx,%eax
f010e168:	01 c0                	add    %eax,%eax
f010e16a:	01 d0                	add    %edx,%eax
f010e16c:	c1 e0 02             	shl    $0x2,%eax
f010e16f:	89 c2                	mov    %eax,%edx
f010e171:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e174:	01 d0                	add    %edx,%eax
f010e176:	8b 00                	mov    (%eax),%eax
f010e178:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e17b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e17e:	29 d1                	sub    %edx,%ecx
f010e180:	89 ca                	mov    %ecx,%edx
f010e182:	39 d0                	cmp    %edx,%eax
f010e184:	73 22                	jae    f010e1a8 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e186:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e189:	89 c2                	mov    %eax,%edx
f010e18b:	89 d0                	mov    %edx,%eax
f010e18d:	01 c0                	add    %eax,%eax
f010e18f:	01 d0                	add    %edx,%eax
f010e191:	c1 e0 02             	shl    $0x2,%eax
f010e194:	89 c2                	mov    %eax,%edx
f010e196:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e199:	01 d0                	add    %edx,%eax
f010e19b:	8b 10                	mov    (%eax),%edx
f010e19d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e1a0:	01 c2                	add    %eax,%edx
f010e1a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1a5:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e1a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e1ab:	89 c2                	mov    %eax,%edx
f010e1ad:	89 d0                	mov    %edx,%eax
f010e1af:	01 c0                	add    %eax,%eax
f010e1b1:	01 d0                	add    %edx,%eax
f010e1b3:	c1 e0 02             	shl    $0x2,%eax
f010e1b6:	89 c2                	mov    %eax,%edx
f010e1b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e1bb:	01 d0                	add    %edx,%eax
f010e1bd:	8b 50 08             	mov    0x8(%eax),%edx
f010e1c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1c3:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e1c6:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1cc:	8b 40 10             	mov    0x10(%eax),%eax
f010e1cf:	29 c2                	sub    %eax,%edx
f010e1d1:	89 d0                	mov    %edx,%eax
f010e1d3:	c1 f8 02             	sar    $0x2,%eax
f010e1d6:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e1d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e1dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e1df:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e1e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e1e5:	eb 15                	jmp    f010e1fc <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e1e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1ea:	8b 55 08             	mov    0x8(%ebp),%edx
f010e1ed:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e1f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e1f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e1f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e1f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e1fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1ff:	8b 40 08             	mov    0x8(%eax),%eax
f010e202:	83 ec 08             	sub    $0x8,%esp
f010e205:	6a 3a                	push   $0x3a
f010e207:	50                   	push   %eax
f010e208:	e8 ba 39 02 00       	call   f0131bc7 <strfind>
f010e20d:	83 c4 10             	add    $0x10,%esp
f010e210:	89 c2                	mov    %eax,%edx
f010e212:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e215:	8b 40 08             	mov    0x8(%eax),%eax
f010e218:	29 c2                	sub    %eax,%edx
f010e21a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e21d:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e220:	eb 03                	jmp    f010e225 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e222:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e225:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e228:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e22b:	7c 4e                	jl     f010e27b <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e22d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e230:	89 d0                	mov    %edx,%eax
f010e232:	01 c0                	add    %eax,%eax
f010e234:	01 d0                	add    %edx,%eax
f010e236:	c1 e0 02             	shl    $0x2,%eax
f010e239:	89 c2                	mov    %eax,%edx
f010e23b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e23e:	01 d0                	add    %edx,%eax
f010e240:	8a 40 04             	mov    0x4(%eax),%al
f010e243:	3c 84                	cmp    $0x84,%al
f010e245:	74 34                	je     f010e27b <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e247:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e24a:	89 d0                	mov    %edx,%eax
f010e24c:	01 c0                	add    %eax,%eax
f010e24e:	01 d0                	add    %edx,%eax
f010e250:	c1 e0 02             	shl    $0x2,%eax
f010e253:	89 c2                	mov    %eax,%edx
f010e255:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e258:	01 d0                	add    %edx,%eax
f010e25a:	8a 40 04             	mov    0x4(%eax),%al
f010e25d:	3c 64                	cmp    $0x64,%al
f010e25f:	75 c1                	jne    f010e222 <debuginfo_eip+0x207>
f010e261:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e264:	89 d0                	mov    %edx,%eax
f010e266:	01 c0                	add    %eax,%eax
f010e268:	01 d0                	add    %edx,%eax
f010e26a:	c1 e0 02             	shl    $0x2,%eax
f010e26d:	89 c2                	mov    %eax,%edx
f010e26f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e272:	01 d0                	add    %edx,%eax
f010e274:	8b 40 08             	mov    0x8(%eax),%eax
f010e277:	85 c0                	test   %eax,%eax
f010e279:	74 a7                	je     f010e222 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e27b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e27e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e281:	7c 42                	jl     f010e2c5 <debuginfo_eip+0x2aa>
f010e283:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e286:	89 d0                	mov    %edx,%eax
f010e288:	01 c0                	add    %eax,%eax
f010e28a:	01 d0                	add    %edx,%eax
f010e28c:	c1 e0 02             	shl    $0x2,%eax
f010e28f:	89 c2                	mov    %eax,%edx
f010e291:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e294:	01 d0                	add    %edx,%eax
f010e296:	8b 00                	mov    (%eax),%eax
f010e298:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e29b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e29e:	29 d1                	sub    %edx,%ecx
f010e2a0:	89 ca                	mov    %ecx,%edx
f010e2a2:	39 d0                	cmp    %edx,%eax
f010e2a4:	73 1f                	jae    f010e2c5 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e2a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e2a9:	89 d0                	mov    %edx,%eax
f010e2ab:	01 c0                	add    %eax,%eax
f010e2ad:	01 d0                	add    %edx,%eax
f010e2af:	c1 e0 02             	shl    $0x2,%eax
f010e2b2:	89 c2                	mov    %eax,%edx
f010e2b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e2b7:	01 d0                	add    %edx,%eax
f010e2b9:	8b 10                	mov    (%eax),%edx
f010e2bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2be:	01 c2                	add    %eax,%edx
f010e2c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2c3:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e2c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e2ca:	c9                   	leave  
f010e2cb:	c3                   	ret    

f010e2cc <setPageReplacmentAlgorithmLRU>:

//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE) {
f010e2cc:	55                   	push   %ebp
f010e2cd:	89 e5                	mov    %esp,%ebp
f010e2cf:	83 ec 08             	sub    $0x8,%esp
	assert(
f010e2d2:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e2d6:	74 1c                	je     f010e2f4 <setPageReplacmentAlgorithmLRU+0x28>
f010e2d8:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e2dc:	74 16                	je     f010e2f4 <setPageReplacmentAlgorithmLRU+0x28>
f010e2de:	68 4c 7d 13 f0       	push   $0xf0137d4c
f010e2e3:	68 96 7d 13 f0       	push   $0xf0137d96
f010e2e8:	6a 18                	push   $0x18
f010e2ea:	68 ab 7d 13 f0       	push   $0xf0137dab
f010e2ef:	e8 11 1f ff ff       	call   f0100205 <_panic>
			LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
	_PageRepAlgoType = LRU_TYPE;
f010e2f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2f7:	a3 84 f7 85 f0       	mov    %eax,0xf085f784
}
f010e2fc:	90                   	nop
f010e2fd:	c9                   	leave  
f010e2fe:	c3                   	ret    

f010e2ff <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK() {
f010e2ff:	55                   	push   %ebp
f010e300:	89 e5                	mov    %esp,%ebp
	_PageRepAlgoType = PG_REP_CLOCK;
f010e302:	c7 05 84 f7 85 f0 03 	movl   $0x3,0xf085f784
f010e309:	00 00 00 
}
f010e30c:	90                   	nop
f010e30d:	5d                   	pop    %ebp
f010e30e:	c3                   	ret    

f010e30f <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO() {
f010e30f:	55                   	push   %ebp
f010e310:	89 e5                	mov    %esp,%ebp
	_PageRepAlgoType = PG_REP_FIFO;
f010e312:	c7 05 84 f7 85 f0 04 	movl   $0x4,0xf085f784
f010e319:	00 00 00 
}
f010e31c:	90                   	nop
f010e31d:	5d                   	pop    %ebp
f010e31e:	c3                   	ret    

f010e31f <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK() {
f010e31f:	55                   	push   %ebp
f010e320:	89 e5                	mov    %esp,%ebp
	_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;
f010e322:	c7 05 84 f7 85 f0 05 	movl   $0x5,0xf085f784
f010e329:	00 00 00 
}
f010e32c:	90                   	nop
f010e32d:	5d                   	pop    %ebp
f010e32e:	c3                   	ret    

f010e32f <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/void setPageReplacmentAlgorithmDynamicLocal() {
f010e32f:	55                   	push   %ebp
f010e330:	89 e5                	mov    %esp,%ebp
	_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;
f010e332:	c7 05 84 f7 85 f0 07 	movl   $0x7,0xf085f784
f010e339:	00 00 00 
}
f010e33c:	90                   	nop
f010e33d:	5d                   	pop    %ebp
f010e33e:	c3                   	ret    

f010e33f <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps) {
f010e33f:	55                   	push   %ebp
f010e340:	89 e5                	mov    %esp,%ebp
	_PageRepAlgoType = PG_REP_NchanceCLOCK;
f010e342:	c7 05 84 f7 85 f0 06 	movl   $0x6,0xf085f784
f010e349:	00 00 00 
	page_WS_max_sweeps = PageWSMaxSweeps;
f010e34c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e34f:	a3 e0 f6 85 f0       	mov    %eax,0xf085f6e0
}
f010e354:	90                   	nop
f010e355:	5d                   	pop    %ebp
f010e356:	c3                   	ret    

f010e357 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE) {
f010e357:	55                   	push   %ebp
f010e358:	89 e5                	mov    %esp,%ebp
	return _PageRepAlgoType == LRU_TYPE ? 1 : 0;
f010e35a:	8b 15 84 f7 85 f0    	mov    0xf085f784,%edx
f010e360:	8b 45 08             	mov    0x8(%ebp),%eax
f010e363:	39 c2                	cmp    %eax,%edx
f010e365:	0f 94 c0             	sete   %al
f010e368:	0f b6 c0             	movzbl %al,%eax
}
f010e36b:	5d                   	pop    %ebp
f010e36c:	c3                   	ret    

f010e36d <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK() {
f010e36d:	55                   	push   %ebp
f010e36e:	89 e5                	mov    %esp,%ebp
	if (_PageRepAlgoType == PG_REP_CLOCK)
f010e370:	a1 84 f7 85 f0       	mov    0xf085f784,%eax
f010e375:	83 f8 03             	cmp    $0x3,%eax
f010e378:	75 07                	jne    f010e381 <isPageReplacmentAlgorithmCLOCK+0x14>
		return 1;
f010e37a:	b8 01 00 00 00       	mov    $0x1,%eax
f010e37f:	eb 05                	jmp    f010e386 <isPageReplacmentAlgorithmCLOCK+0x19>
	return 0;
f010e381:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e386:	5d                   	pop    %ebp
f010e387:	c3                   	ret    

f010e388 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO() {
f010e388:	55                   	push   %ebp
f010e389:	89 e5                	mov    %esp,%ebp
	if (_PageRepAlgoType == PG_REP_FIFO)
f010e38b:	a1 84 f7 85 f0       	mov    0xf085f784,%eax
f010e390:	83 f8 04             	cmp    $0x4,%eax
f010e393:	75 07                	jne    f010e39c <isPageReplacmentAlgorithmFIFO+0x14>
		return 1;
f010e395:	b8 01 00 00 00       	mov    $0x1,%eax
f010e39a:	eb 05                	jmp    f010e3a1 <isPageReplacmentAlgorithmFIFO+0x19>
	return 0;
f010e39c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e3a1:	5d                   	pop    %ebp
f010e3a2:	c3                   	ret    

f010e3a3 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK() {
f010e3a3:	55                   	push   %ebp
f010e3a4:	89 e5                	mov    %esp,%ebp
	if (_PageRepAlgoType == PG_REP_MODIFIEDCLOCK)
f010e3a6:	a1 84 f7 85 f0       	mov    0xf085f784,%eax
f010e3ab:	83 f8 05             	cmp    $0x5,%eax
f010e3ae:	75 07                	jne    f010e3b7 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
		return 1;
f010e3b0:	b8 01 00 00 00       	mov    $0x1,%eax
f010e3b5:	eb 05                	jmp    f010e3bc <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
	return 0;
f010e3b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e3bc:	5d                   	pop    %ebp
f010e3bd:	c3                   	ret    

f010e3be <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/uint32 isPageReplacmentAlgorithmDynamicLocal() {
f010e3be:	55                   	push   %ebp
f010e3bf:	89 e5                	mov    %esp,%ebp
	if (_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL)
f010e3c1:	a1 84 f7 85 f0       	mov    0xf085f784,%eax
f010e3c6:	83 f8 07             	cmp    $0x7,%eax
f010e3c9:	75 07                	jne    f010e3d2 <isPageReplacmentAlgorithmDynamicLocal+0x14>
		return 1;
f010e3cb:	b8 01 00 00 00       	mov    $0x1,%eax
f010e3d0:	eb 05                	jmp    f010e3d7 <isPageReplacmentAlgorithmDynamicLocal+0x19>
	return 0;
f010e3d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e3d7:	5d                   	pop    %ebp
f010e3d8:	c3                   	ret    

f010e3d9 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/uint32 isPageReplacmentAlgorithmNchanceCLOCK() {
f010e3d9:	55                   	push   %ebp
f010e3da:	89 e5                	mov    %esp,%ebp
	if (_PageRepAlgoType == PG_REP_NchanceCLOCK)
f010e3dc:	a1 84 f7 85 f0       	mov    0xf085f784,%eax
f010e3e1:	83 f8 06             	cmp    $0x6,%eax
f010e3e4:	75 07                	jne    f010e3ed <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
		return 1;
f010e3e6:	b8 01 00 00 00       	mov    $0x1,%eax
f010e3eb:	eb 05                	jmp    f010e3f2 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
	return 0;
f010e3ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e3f2:	5d                   	pop    %ebp
f010e3f3:	c3                   	ret    

f010e3f4 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt) {
f010e3f4:	55                   	push   %ebp
f010e3f5:	89 e5                	mov    %esp,%ebp
	_EnableModifiedBuffer = enableIt;
f010e3f7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3fa:	a3 4c f7 85 f0       	mov    %eax,0xf085f74c
}
f010e3ff:	90                   	nop
f010e400:	5d                   	pop    %ebp
f010e401:	c3                   	ret    

f010e402 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled() {
f010e402:	55                   	push   %ebp
f010e403:	89 e5                	mov    %esp,%ebp
	return _EnableModifiedBuffer;
f010e405:	a1 4c f7 85 f0       	mov    0xf085f74c,%eax
}
f010e40a:	5d                   	pop    %ebp
f010e40b:	c3                   	ret    

f010e40c <enableBuffering>:

void enableBuffering(uint32 enableIt) {
f010e40c:	55                   	push   %ebp
f010e40d:	89 e5                	mov    %esp,%ebp
	_EnableBuffering = enableIt;
f010e40f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e412:	a3 8c f7 85 f0       	mov    %eax,0xf085f78c
}
f010e417:	90                   	nop
f010e418:	5d                   	pop    %ebp
f010e419:	c3                   	ret    

f010e41a <isBufferingEnabled>:
uint8 isBufferingEnabled() {
f010e41a:	55                   	push   %ebp
f010e41b:	89 e5                	mov    %esp,%ebp
	return _EnableBuffering;
f010e41d:	a1 8c f7 85 f0       	mov    0xf085f78c,%eax
}
f010e422:	5d                   	pop    %ebp
f010e423:	c3                   	ret    

f010e424 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) {
f010e424:	55                   	push   %ebp
f010e425:	89 e5                	mov    %esp,%ebp
	_ModifiedBufferLength = length;
f010e427:	8b 45 08             	mov    0x8(%ebp),%eax
f010e42a:	a3 ac f7 85 f0       	mov    %eax,0xf085f7ac
}
f010e42f:	90                   	nop
f010e430:	5d                   	pop    %ebp
f010e431:	c3                   	ret    

f010e432 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() {
f010e432:	55                   	push   %ebp
f010e433:	89 e5                	mov    %esp,%ebp
	return _ModifiedBufferLength;
f010e435:	a1 ac f7 85 f0       	mov    0xf085f7ac,%eax
}
f010e43a:	5d                   	pop    %ebp
f010e43b:	c3                   	ret    

f010e43c <table_fault_handler>:
//===============================
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va) {
f010e43c:	55                   	push   %ebp
f010e43d:	89 e5                	mov    %esp,%ebp
f010e43f:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
#if USE_KHEAP
	{
		ptr_table = create_page_table(curenv->env_page_directory,
f010e442:	8b 45 08             	mov    0x8(%ebp),%eax
f010e445:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e448:	83 ec 08             	sub    $0x8,%esp
f010e44b:	ff 75 0c             	pushl  0xc(%ebp)
f010e44e:	50                   	push   %eax
f010e44f:	e8 9a 87 ff ff       	call   f0106bee <create_page_table>
f010e454:	83 c4 10             	add    $0x10,%esp
f010e457:	89 45 f4             	mov    %eax,-0xc(%ebp)
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}
#endif
}
f010e45a:	90                   	nop
f010e45b:	c9                   	leave  
f010e45c:	c3                   	ret    

f010e45d <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va) {
f010e45d:	55                   	push   %ebp
f010e45e:	89 e5                	mov    %esp,%ebp
f010e460:	83 ec 48             	sub    $0x48,%esp
	//TODO: [PROJECT MS3] [page_fault_handler] page_fault_handler

	// Write your code here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");

	fault_va = ROUNDDOWN(fault_va,PAGE_SIZE);
f010e463:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e469:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e46c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010e471:	89 45 0c             	mov    %eax,0xc(%ebp)
	struct FrameInfo *ptr_frame_info = NULL;
f010e474:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 *ptr_page_table = NULL;
f010e47b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	uint32 *ptr_page_table2 = NULL;
f010e482:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32* page_directory = curenv->env_page_directory;
f010e489:	8b 45 08             	mov    0x8(%ebp),%eax
f010e48c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010e48f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 perm;
	int isModified=-1;
f010e492:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
	int isUsed=-1;
f010e499:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%ebp)
	uint32 empty;

	if ((env_page_ws_get_size(curenv)) == (curenv->page_WS_max_size))
f010e4a0:	83 ec 0c             	sub    $0xc,%esp
f010e4a3:	ff 75 08             	pushl  0x8(%ebp)
f010e4a6:	e8 e6 9c ff ff       	call   f0108191 <env_page_ws_get_size>
f010e4ab:	83 c4 10             	add    $0x10,%esp
f010e4ae:	89 c2                	mov    %eax,%edx
f010e4b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4b3:	8b 40 74             	mov    0x74(%eax),%eax
f010e4b6:	39 c2                	cmp    %eax,%edx
f010e4b8:	0f 85 46 01 00 00    	jne    f010e604 <page_fault_handler+0x1a7>
	{

		uint32 va=0;
f010e4be:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		while (1)
		{
			va = env_page_ws_get_virtual_address(curenv,curenv->page_last_WS_index);
f010e4c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010e4c8:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e4ce:	83 ec 08             	sub    $0x8,%esp
f010e4d1:	50                   	push   %eax
f010e4d2:	ff 75 08             	pushl  0x8(%ebp)
f010e4d5:	e8 83 9e ff ff       	call   f010835d <env_page_ws_get_virtual_address>
f010e4da:	83 c4 10             	add    $0x10,%esp
f010e4dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			get_page_table(page_directory, va, (&ptr_page_table2));
f010e4e0:	83 ec 04             	sub    $0x4,%esp
f010e4e3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e4e6:	50                   	push   %eax
f010e4e7:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e4ea:	ff 75 f0             	pushl  -0x10(%ebp)
f010e4ed:	e8 a6 85 ff ff       	call   f0106a98 <get_page_table>
f010e4f2:	83 c4 10             	add    $0x10,%esp
			ptr_frame_info = get_frame_info(page_directory, va,
f010e4f5:	83 ec 04             	sub    $0x4,%esp
f010e4f8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010e4fb:	50                   	push   %eax
f010e4fc:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e4ff:	ff 75 f0             	pushl  -0x10(%ebp)
f010e502:	e8 e6 88 ff ff       	call   f0106ded <get_frame_info>
f010e507:	83 c4 10             	add    $0x10,%esp
f010e50a:	89 45 c8             	mov    %eax,-0x38(%ebp)
					&ptr_page_table2);

			perm = pt_get_page_permissions(page_directory, va);
f010e50d:	83 ec 08             	sub    $0x8,%esp
f010e510:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e513:	ff 75 f0             	pushl  -0x10(%ebp)
f010e516:	e8 b8 9a ff ff       	call   f0107fd3 <pt_get_page_permissions>
f010e51b:	83 c4 10             	add    $0x10,%esp
f010e51e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			isModified = ((perm & PERM_MODIFIED) ? 1 : 0);
f010e521:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e524:	83 e0 40             	and    $0x40,%eax
f010e527:	85 c0                	test   %eax,%eax
f010e529:	0f 95 c0             	setne  %al
f010e52c:	0f b6 c0             	movzbl %al,%eax
f010e52f:	89 45 ec             	mov    %eax,-0x14(%ebp)
			isUsed = ((perm & PERM_USED) ? 1 : 0);
f010e532:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e535:	83 e0 20             	and    $0x20,%eax
f010e538:	85 c0                	test   %eax,%eax
f010e53a:	0f 95 c0             	setne  %al
f010e53d:	0f b6 c0             	movzbl %al,%eax
f010e540:	89 45 e8             	mov    %eax,-0x18(%ebp)

			if (isUsed == 0)
f010e543:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010e547:	75 7a                	jne    f010e5c3 <page_fault_handler+0x166>
			{

				if (isModified == 1)
f010e549:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010e54d:	75 43                	jne    f010e592 <page_fault_handler+0x135>
				{
					int update = pf_update_env_page(curenv, va, ptr_frame_info);
f010e54f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e552:	83 ec 04             	sub    $0x4,%esp
f010e555:	50                   	push   %eax
f010e556:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e559:	ff 75 08             	pushl  0x8(%ebp)
f010e55c:	e8 5e 52 ff ff       	call   f01037bf <pf_update_env_page>
f010e561:	83 c4 10             	add    $0x10,%esp
f010e564:	89 45 dc             	mov    %eax,-0x24(%ebp)
					unmap_frame(page_directory, va);
f010e567:	83 ec 08             	sub    $0x8,%esp
f010e56a:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e56d:	ff 75 f0             	pushl  -0x10(%ebp)
f010e570:	e8 e8 88 ff ff       	call   f0106e5d <unmap_frame>
f010e575:	83 c4 10             	add    $0x10,%esp
					env_page_ws_clear_entry(curenv,curenv->page_last_WS_index);
f010e578:	8b 45 08             	mov    0x8(%ebp),%eax
f010e57b:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e581:	83 ec 08             	sub    $0x8,%esp
f010e584:	50                   	push   %eax
f010e585:	ff 75 08             	pushl  0x8(%ebp)
f010e588:	e8 59 9d ff ff       	call   f01082e6 <env_page_ws_clear_entry>
f010e58d:	83 c4 10             	add    $0x10,%esp
						break;
f010e590:	eb 72                	jmp    f010e604 <page_fault_handler+0x1a7>

				} else if (isModified == 0)
f010e592:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010e596:	75 43                	jne    f010e5db <page_fault_handler+0x17e>
				{

					unmap_frame(page_directory, va);
f010e598:	83 ec 08             	sub    $0x8,%esp
f010e59b:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e59e:	ff 75 f0             	pushl  -0x10(%ebp)
f010e5a1:	e8 b7 88 ff ff       	call   f0106e5d <unmap_frame>
f010e5a6:	83 c4 10             	add    $0x10,%esp
					env_page_ws_clear_entry(curenv, curenv->page_last_WS_index);
f010e5a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5ac:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e5b2:	83 ec 08             	sub    $0x8,%esp
f010e5b5:	50                   	push   %eax
f010e5b6:	ff 75 08             	pushl  0x8(%ebp)
f010e5b9:	e8 28 9d ff ff       	call   f01082e6 <env_page_ws_clear_entry>
f010e5be:	83 c4 10             	add    $0x10,%esp
					break;
f010e5c1:	eb 41                	jmp    f010e604 <page_fault_handler+0x1a7>
				}
			}
			else if (isUsed == 1)
f010e5c3:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010e5c7:	75 12                	jne    f010e5db <page_fault_handler+0x17e>
			{
				pt_set_page_permissions(page_directory, va, 0, PERM_USED);
f010e5c9:	6a 20                	push   $0x20
f010e5cb:	6a 00                	push   $0x0
f010e5cd:	ff 75 e4             	pushl  -0x1c(%ebp)
f010e5d0:	ff 75 f0             	pushl  -0x10(%ebp)
f010e5d3:	e8 ae 98 ff ff       	call   f0107e86 <pt_set_page_permissions>
f010e5d8:	83 c4 10             	add    $0x10,%esp

			}
			curenv->page_last_WS_index = (curenv->page_last_WS_index + 1)% (curenv->page_WS_max_size);
f010e5db:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5de:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e5e4:	8d 50 01             	lea    0x1(%eax),%edx
f010e5e7:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5ea:	8b 48 74             	mov    0x74(%eax),%ecx
f010e5ed:	89 d0                	mov    %edx,%eax
f010e5ef:	ba 00 00 00 00       	mov    $0x0,%edx
f010e5f4:	f7 f1                	div    %ecx
f010e5f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e5f9:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
		}
f010e5ff:	e9 c1 fe ff ff       	jmp    f010e4c5 <page_fault_handler+0x68>
	}

	if ((env_page_ws_get_size(curenv)) < (curenv->page_WS_max_size))
f010e604:	83 ec 0c             	sub    $0xc,%esp
f010e607:	ff 75 08             	pushl  0x8(%ebp)
f010e60a:	e8 82 9b ff ff       	call   f0108191 <env_page_ws_get_size>
f010e60f:	83 c4 10             	add    $0x10,%esp
f010e612:	89 c2                	mov    %eax,%edx
f010e614:	8b 45 08             	mov    0x8(%ebp),%eax
f010e617:	8b 40 74             	mov    0x74(%eax),%eax
f010e61a:	39 c2                	cmp    %eax,%edx
f010e61c:	0f 83 47 01 00 00    	jae    f010e769 <page_fault_handler+0x30c>
	{
		get_page_table(page_directory, fault_va, (&ptr_page_table));
f010e622:	83 ec 04             	sub    $0x4,%esp
f010e625:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010e628:	50                   	push   %eax
f010e629:	ff 75 0c             	pushl  0xc(%ebp)
f010e62c:	ff 75 f0             	pushl  -0x10(%ebp)
f010e62f:	e8 64 84 ff ff       	call   f0106a98 <get_page_table>
f010e634:	83 c4 10             	add    $0x10,%esp

		//	allocate
		allocate_frame(&ptr_frame_info);
f010e637:	83 ec 0c             	sub    $0xc,%esp
f010e63a:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010e63d:	50                   	push   %eax
f010e63e:	e8 96 82 ff ff       	call   f01068d9 <allocate_frame>
f010e643:	83 c4 10             	add    $0x10,%esp
		map_frame(page_directory, ptr_frame_info, fault_va,PERM_USER | PERM_WRITEABLE);
f010e646:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e649:	6a 06                	push   $0x6
f010e64b:	ff 75 0c             	pushl  0xc(%ebp)
f010e64e:	50                   	push   %eax
f010e64f:	ff 75 f0             	pushl  -0x10(%ebp)
f010e652:	e8 d1 86 ff ff       	call   f0106d28 <map_frame>
f010e657:	83 c4 10             	add    $0x10,%esp

		//	read
		int read = pf_read_env_page(curenv, (void*)fault_va);
f010e65a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e65d:	83 ec 08             	sub    $0x8,%esp
f010e660:	50                   	push   %eax
f010e661:	ff 75 08             	pushl  0x8(%ebp)
f010e664:	e8 b8 53 ff ff       	call   f0103a21 <pf_read_env_page>
f010e669:	83 c4 10             	add    $0x10,%esp
f010e66c:	89 45 d8             	mov    %eax,-0x28(%ebp)

		//page ! exist
		if (read == E_PAGE_NOT_EXIST_IN_PF)
f010e66f:	83 7d d8 f7          	cmpl   $0xfffffff7,-0x28(%ebp)
f010e673:	75 68                	jne    f010e6dd <page_fault_handler+0x280>
		{
			//if    not stack or heap

			if (!((USER_HEAP_START <= fault_va && fault_va<USER_HEAP_MAX)|| (USTACKTOP > fault_va && fault_va>=USTACKBOTTOM)))
f010e675:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e678:	85 c0                	test   %eax,%eax
f010e67a:	79 09                	jns    f010e685 <page_fault_handler+0x228>
f010e67c:	81 7d 0c ff ff ff 9f 	cmpl   $0x9fffffff,0xc(%ebp)
f010e683:	76 58                	jbe    f010e6dd <page_fault_handler+0x280>
f010e685:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f010e68c:	77 27                	ja     f010e6b5 <page_fault_handler+0x258>
f010e68e:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010e695:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e698:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010e69d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010e6a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e6a3:	ba 00 00 00 00       	mov    $0x0,%edx
f010e6a8:	f7 75 d4             	divl   -0x2c(%ebp)
f010e6ab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e6ae:	29 d0                	sub    %edx,%eax
f010e6b0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010e6b3:	76 28                	jbe    f010e6dd <page_fault_handler+0x280>
			{
				unmap_frame(page_directory, fault_va);
f010e6b5:	83 ec 08             	sub    $0x8,%esp
f010e6b8:	ff 75 0c             	pushl  0xc(%ebp)
f010e6bb:	ff 75 f0             	pushl  -0x10(%ebp)
f010e6be:	e8 9a 87 ff ff       	call   f0106e5d <unmap_frame>
f010e6c3:	83 c4 10             	add    $0x10,%esp
				panic("ILLEGAL MEMORY ACCESS");
f010e6c6:	83 ec 04             	sub    $0x4,%esp
f010e6c9:	68 c5 7d 13 f0       	push   $0xf0137dc5
f010e6ce:	68 c6 00 00 00       	push   $0xc6
f010e6d3:	68 ab 7d 13 f0       	push   $0xf0137dab
f010e6d8:	e8 28 1b ff ff       	call   f0100205 <_panic>
			}

		}

		while (1) {
			empty = env_page_ws_is_entry_empty(curenv,
f010e6dd:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6e0:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e6e6:	83 ec 08             	sub    $0x8,%esp
f010e6e9:	50                   	push   %eax
f010e6ea:	ff 75 08             	pushl  0x8(%ebp)
f010e6ed:	e8 f5 9c ff ff       	call   f01083e7 <env_page_ws_is_entry_empty>
f010e6f2:	83 c4 10             	add    $0x10,%esp
f010e6f5:	89 45 cc             	mov    %eax,-0x34(%ebp)
					curenv->page_last_WS_index);

			if (empty == 1) {
f010e6f8:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f010e6fc:	75 42                	jne    f010e740 <page_fault_handler+0x2e3>
				env_page_ws_set_entry(curenv, curenv->page_last_WS_index,fault_va);
f010e6fe:	8b 45 08             	mov    0x8(%ebp),%eax
f010e701:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e707:	83 ec 04             	sub    $0x4,%esp
f010e70a:	ff 75 0c             	pushl  0xc(%ebp)
f010e70d:	50                   	push   %eax
f010e70e:	ff 75 08             	pushl  0x8(%ebp)
f010e711:	e8 2f 9b ff ff       	call   f0108245 <env_page_ws_set_entry>
f010e716:	83 c4 10             	add    $0x10,%esp
				curenv->page_last_WS_index = (curenv->page_last_WS_index + 1)% (curenv->page_WS_max_size);
f010e719:	8b 45 08             	mov    0x8(%ebp),%eax
f010e71c:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e722:	8d 50 01             	lea    0x1(%eax),%edx
f010e725:	8b 45 08             	mov    0x8(%ebp),%eax
f010e728:	8b 48 74             	mov    0x74(%eax),%ecx
f010e72b:	89 d0                	mov    %edx,%eax
f010e72d:	ba 00 00 00 00       	mov    $0x0,%edx
f010e732:	f7 f1                	div    %ecx
f010e734:	8b 45 08             	mov    0x8(%ebp),%eax
f010e737:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)
				break;
f010e73d:	90                   	nop

		}
	}

	//refer to the project presentation and documentation for details
}
f010e73e:	eb 29                	jmp    f010e769 <page_fault_handler+0x30c>
			if (empty == 1) {
				env_page_ws_set_entry(curenv, curenv->page_last_WS_index,fault_va);
				curenv->page_last_WS_index = (curenv->page_last_WS_index + 1)% (curenv->page_WS_max_size);
				break;
			}
			curenv->page_last_WS_index = (curenv->page_last_WS_index + 1)% (curenv->page_WS_max_size);
f010e740:	8b 45 08             	mov    0x8(%ebp),%eax
f010e743:	8b 80 2c 05 00 00    	mov    0x52c(%eax),%eax
f010e749:	8d 50 01             	lea    0x1(%eax),%edx
f010e74c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e74f:	8b 48 74             	mov    0x74(%eax),%ecx
f010e752:	89 d0                	mov    %edx,%eax
f010e754:	ba 00 00 00 00       	mov    $0x0,%edx
f010e759:	f7 f1                	div    %ecx
f010e75b:	8b 45 08             	mov    0x8(%ebp),%eax
f010e75e:	89 90 2c 05 00 00    	mov    %edx,0x52c(%eax)

		}
f010e764:	e9 74 ff ff ff       	jmp    f010e6dd <page_fault_handler+0x280>
	}

	//refer to the project presentation and documentation for details
}
f010e769:	90                   	nop
f010e76a:	c9                   	leave  
f010e76b:	c3                   	ret    

f010e76c <__page_fault_handler_with_buffering>:

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va) {
f010e76c:	55                   	push   %ebp
f010e76d:	89 e5                	mov    %esp,%ebp
f010e76f:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010e772:	83 ec 04             	sub    $0x4,%esp
f010e775:	68 dc 7d 13 f0       	push   $0xf0137ddc
f010e77a:	68 de 00 00 00       	push   $0xde
f010e77f:	68 ab 7d 13 f0       	push   $0xf0137dab
f010e784:	e8 7c 1a ff ff       	call   f0100205 <_panic>

f010e789 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010e789:	55                   	push   %ebp
f010e78a:	89 e5                	mov    %esp,%ebp
f010e78c:	83 ec 18             	sub    $0x18,%esp
#if USE_KHEAP
	MAX_SEMAPHORES = numOfSemaphores ;
f010e78f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e792:	a3 b0 f6 85 f0       	mov    %eax,0xf085f6b0
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010e797:	8b 55 08             	mov    0x8(%ebp),%edx
f010e79a:	89 d0                	mov    %edx,%eax
f010e79c:	c1 e0 02             	shl    $0x2,%eax
f010e79f:	01 d0                	add    %edx,%eax
f010e7a1:	01 c0                	add    %eax,%eax
f010e7a3:	01 d0                	add    %edx,%eax
f010e7a5:	01 c0                	add    %eax,%eax
f010e7a7:	01 d0                	add    %edx,%eax
f010e7a9:	c1 e0 02             	shl    $0x2,%eax
f010e7ac:	83 ec 0c             	sub    $0xc,%esp
f010e7af:	50                   	push   %eax
f010e7b0:	e8 af 93 ff ff       	call   f0107b64 <kmalloc>
f010e7b5:	83 c4 10             	add    $0x10,%esp
f010e7b8:	a3 08 f7 85 f0       	mov    %eax,0xf085f708
	if (semaphores == NULL)
f010e7bd:	a1 08 f7 85 f0       	mov    0xf085f708,%eax
f010e7c2:	85 c0                	test   %eax,%eax
f010e7c4:	75 14                	jne    f010e7da <create_semaphores_array+0x51>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010e7c6:	83 ec 04             	sub    $0x4,%esp
f010e7c9:	68 20 7e 13 f0       	push   $0xf0137e20
f010e7ce:	6a 1e                	push   $0x1e
f010e7d0:	68 60 7e 13 f0       	push   $0xf0137e60
f010e7d5:	e8 2b 1a ff ff       	call   f0100205 <_panic>
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e7da:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e7e1:	e9 bd 00 00 00       	jmp    f010e8a3 <create_semaphores_array+0x11a>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010e7e6:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e7ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e7ef:	89 d0                	mov    %edx,%eax
f010e7f1:	c1 e0 02             	shl    $0x2,%eax
f010e7f4:	01 d0                	add    %edx,%eax
f010e7f6:	01 c0                	add    %eax,%eax
f010e7f8:	01 d0                	add    %edx,%eax
f010e7fa:	01 c0                	add    %eax,%eax
f010e7fc:	01 d0                	add    %edx,%eax
f010e7fe:	c1 e0 02             	shl    $0x2,%eax
f010e801:	01 c8                	add    %ecx,%eax
f010e803:	83 ec 04             	sub    $0x4,%esp
f010e806:	6a 5c                	push   $0x5c
f010e808:	6a 00                	push   $0x0
f010e80a:	50                   	push   %eax
f010e80b:	e8 e3 33 02 00       	call   f0131bf3 <memset>
f010e810:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010e813:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e819:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e81c:	89 d0                	mov    %edx,%eax
f010e81e:	c1 e0 02             	shl    $0x2,%eax
f010e821:	01 d0                	add    %edx,%eax
f010e823:	01 c0                	add    %eax,%eax
f010e825:	01 d0                	add    %edx,%eax
f010e827:	01 c0                	add    %eax,%eax
f010e829:	01 d0                	add    %edx,%eax
f010e82b:	c1 e0 02             	shl    $0x2,%eax
f010e82e:	01 c8                	add    %ecx,%eax
f010e830:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010e834:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e83a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e83d:	89 d0                	mov    %edx,%eax
f010e83f:	c1 e0 02             	shl    $0x2,%eax
f010e842:	01 d0                	add    %edx,%eax
f010e844:	01 c0                	add    %eax,%eax
f010e846:	01 d0                	add    %edx,%eax
f010e848:	01 c0                	add    %eax,%eax
f010e84a:	01 d0                	add    %edx,%eax
f010e84c:	c1 e0 02             	shl    $0x2,%eax
f010e84f:	01 c8                	add    %ecx,%eax
f010e851:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010e858:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e85e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e861:	89 d0                	mov    %edx,%eax
f010e863:	c1 e0 02             	shl    $0x2,%eax
f010e866:	01 d0                	add    %edx,%eax
f010e868:	01 c0                	add    %eax,%eax
f010e86a:	01 d0                	add    %edx,%eax
f010e86c:	01 c0                	add    %eax,%eax
f010e86e:	01 d0                	add    %edx,%eax
f010e870:	c1 e0 02             	shl    $0x2,%eax
f010e873:	01 c8                	add    %ecx,%eax
f010e875:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010e87c:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e882:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e885:	89 d0                	mov    %edx,%eax
f010e887:	c1 e0 02             	shl    $0x2,%eax
f010e88a:	01 d0                	add    %edx,%eax
f010e88c:	01 c0                	add    %eax,%eax
f010e88e:	01 d0                	add    %edx,%eax
f010e890:	01 c0                	add    %eax,%eax
f010e892:	01 d0                	add    %edx,%eax
f010e894:	c1 e0 02             	shl    $0x2,%eax
f010e897:	01 c8                	add    %ecx,%eax
f010e899:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e8a0:	ff 45 f4             	incl   -0xc(%ebp)
f010e8a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e8a6:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f010e8ab:	39 c2                	cmp    %eax,%edx
f010e8ad:	0f 82 33 ff ff ff    	jb     f010e7e6 <create_semaphores_array+0x5d>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010e8b3:	90                   	nop
f010e8b4:	c9                   	leave  
f010e8b5:	c3                   	ret    

f010e8b6 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010e8b6:	55                   	push   %ebp
f010e8b7:	89 e5                	mov    %esp,%ebp
f010e8b9:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010e8bc:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e8c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010e8ca:	eb 2f                	jmp    f010e8fb <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010e8cc:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e8d2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e8d5:	89 d0                	mov    %edx,%eax
f010e8d7:	c1 e0 02             	shl    $0x2,%eax
f010e8da:	01 d0                	add    %edx,%eax
f010e8dc:	01 c0                	add    %eax,%eax
f010e8de:	01 d0                	add    %edx,%eax
f010e8e0:	01 c0                	add    %eax,%eax
f010e8e2:	01 d0                	add    %edx,%eax
f010e8e4:	c1 e0 02             	shl    $0x2,%eax
f010e8e7:	01 c8                	add    %ecx,%eax
f010e8e9:	8a 40 58             	mov    0x58(%eax),%al
f010e8ec:	84 c0                	test   %al,%al
f010e8ee:	74 08                	je     f010e8f8 <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010e8f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e8f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010e8f6:	eb 0f                	jmp    f010e907 <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010e8f8:	ff 45 f0             	incl   -0x10(%ebp)
f010e8fb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e8fe:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f010e903:	39 c2                	cmp    %eax,%edx
f010e905:	72 c5                	jb     f010e8cc <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010e907:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010e90b:	75 4d                	jne    f010e95a <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		#if USE_KHEAP
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010e90d:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f010e912:	01 c0                	add    %eax,%eax
f010e914:	89 c2                	mov    %eax,%edx
f010e916:	a1 08 f7 85 f0       	mov    0xf085f708,%eax
f010e91b:	83 ec 08             	sub    $0x8,%esp
f010e91e:	52                   	push   %edx
f010e91f:	50                   	push   %eax
f010e920:	e8 44 95 ff ff       	call   f0107e69 <krealloc>
f010e925:	83 c4 10             	add    $0x10,%esp
f010e928:	a3 08 f7 85 f0       	mov    %eax,0xf085f708
			if (semaphores == NULL)
f010e92d:	a1 08 f7 85 f0       	mov    0xf085f708,%eax
f010e932:	85 c0                	test   %eax,%eax
f010e934:	75 10                	jne    f010e946 <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010e936:	8b 45 08             	mov    0x8(%ebp),%eax
f010e939:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010e93f:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010e944:	eb 5b                	jmp    f010e9a1 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010e946:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f010e94b:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010e94e:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f010e953:	01 c0                	add    %eax,%eax
f010e955:	a3 b0 f6 85 f0       	mov    %eax,0xf085f6b0
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010e95a:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e960:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e963:	89 d0                	mov    %edx,%eax
f010e965:	c1 e0 02             	shl    $0x2,%eax
f010e968:	01 d0                	add    %edx,%eax
f010e96a:	01 c0                	add    %eax,%eax
f010e96c:	01 d0                	add    %edx,%eax
f010e96e:	01 c0                	add    %eax,%eax
f010e970:	01 d0                	add    %edx,%eax
f010e972:	c1 e0 02             	shl    $0x2,%eax
f010e975:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010e978:	8b 45 08             	mov    0x8(%ebp),%eax
f010e97b:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010e97d:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e983:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e986:	89 d0                	mov    %edx,%eax
f010e988:	c1 e0 02             	shl    $0x2,%eax
f010e98b:	01 d0                	add    %edx,%eax
f010e98d:	01 c0                	add    %eax,%eax
f010e98f:	01 d0                	add    %edx,%eax
f010e991:	01 c0                	add    %eax,%eax
f010e993:	01 d0                	add    %edx,%eax
f010e995:	c1 e0 02             	shl    $0x2,%eax
f010e998:	01 c8                	add    %ecx,%eax
f010e99a:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010e99e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010e9a1:	c9                   	leave  
f010e9a2:	c3                   	ret    

f010e9a3 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010e9a3:	55                   	push   %ebp
f010e9a4:	89 e5                	mov    %esp,%ebp
f010e9a6:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010e9a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010e9b0:	e9 84 00 00 00       	jmp    f010ea39 <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010e9b5:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e9bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9be:	89 d0                	mov    %edx,%eax
f010e9c0:	c1 e0 02             	shl    $0x2,%eax
f010e9c3:	01 d0                	add    %edx,%eax
f010e9c5:	01 c0                	add    %eax,%eax
f010e9c7:	01 d0                	add    %edx,%eax
f010e9c9:	01 c0                	add    %eax,%eax
f010e9cb:	01 d0                	add    %edx,%eax
f010e9cd:	c1 e0 02             	shl    $0x2,%eax
f010e9d0:	01 c8                	add    %ecx,%eax
f010e9d2:	8a 40 58             	mov    0x58(%eax),%al
f010e9d5:	84 c0                	test   %al,%al
f010e9d7:	75 5c                	jne    f010ea35 <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010e9d9:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010e9df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e9e2:	89 d0                	mov    %edx,%eax
f010e9e4:	c1 e0 02             	shl    $0x2,%eax
f010e9e7:	01 d0                	add    %edx,%eax
f010e9e9:	01 c0                	add    %eax,%eax
f010e9eb:	01 d0                	add    %edx,%eax
f010e9ed:	01 c0                	add    %eax,%eax
f010e9ef:	01 d0                	add    %edx,%eax
f010e9f1:	c1 e0 02             	shl    $0x2,%eax
f010e9f4:	01 c8                	add    %ecx,%eax
f010e9f6:	8b 00                	mov    (%eax),%eax
f010e9f8:	3b 45 08             	cmp    0x8(%ebp),%eax
f010e9fb:	75 39                	jne    f010ea36 <get_semaphore_object_ID+0x93>
f010e9fd:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ea03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea06:	89 d0                	mov    %edx,%eax
f010ea08:	c1 e0 02             	shl    $0x2,%eax
f010ea0b:	01 d0                	add    %edx,%eax
f010ea0d:	01 c0                	add    %eax,%eax
f010ea0f:	01 d0                	add    %edx,%eax
f010ea11:	01 c0                	add    %eax,%eax
f010ea13:	01 d0                	add    %edx,%eax
f010ea15:	c1 e0 02             	shl    $0x2,%eax
f010ea18:	01 c8                	add    %ecx,%eax
f010ea1a:	83 c0 04             	add    $0x4,%eax
f010ea1d:	83 ec 08             	sub    $0x8,%esp
f010ea20:	50                   	push   %eax
f010ea21:	ff 75 0c             	pushl  0xc(%ebp)
f010ea24:	e8 e8 30 02 00       	call   f0131b11 <strcmp>
f010ea29:	83 c4 10             	add    $0x10,%esp
f010ea2c:	85 c0                	test   %eax,%eax
f010ea2e:	75 06                	jne    f010ea36 <get_semaphore_object_ID+0x93>
		{
			return i;
f010ea30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ea33:	eb 19                	jmp    f010ea4e <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010ea35:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010ea36:	ff 45 f4             	incl   -0xc(%ebp)
f010ea39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ea3c:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f010ea41:	39 c2                	cmp    %eax,%edx
f010ea43:	0f 82 6c ff ff ff    	jb     f010e9b5 <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010ea49:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010ea4e:	c9                   	leave  
f010ea4f:	c3                   	ret    

f010ea50 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010ea50:	55                   	push   %ebp
f010ea51:	89 e5                	mov    %esp,%ebp
f010ea53:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010ea56:	a1 b0 f6 85 f0       	mov    0xf085f6b0,%eax
f010ea5b:	39 45 08             	cmp    %eax,0x8(%ebp)
f010ea5e:	72 0a                	jb     f010ea6a <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010ea60:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010ea65:	e9 bf 00 00 00       	jmp    f010eb29 <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010ea6a:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ea70:	8b 55 08             	mov    0x8(%ebp),%edx
f010ea73:	89 d0                	mov    %edx,%eax
f010ea75:	c1 e0 02             	shl    $0x2,%eax
f010ea78:	01 d0                	add    %edx,%eax
f010ea7a:	01 c0                	add    %eax,%eax
f010ea7c:	01 d0                	add    %edx,%eax
f010ea7e:	01 c0                	add    %eax,%eax
f010ea80:	01 d0                	add    %edx,%eax
f010ea82:	c1 e0 02             	shl    $0x2,%eax
f010ea85:	01 c8                	add    %ecx,%eax
f010ea87:	83 ec 04             	sub    $0x4,%esp
f010ea8a:	6a 5c                	push   $0x5c
f010ea8c:	6a 00                	push   $0x0
f010ea8e:	50                   	push   %eax
f010ea8f:	e8 5f 31 02 00       	call   f0131bf3 <memset>
f010ea94:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010ea97:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ea9d:	8b 55 08             	mov    0x8(%ebp),%edx
f010eaa0:	89 d0                	mov    %edx,%eax
f010eaa2:	c1 e0 02             	shl    $0x2,%eax
f010eaa5:	01 d0                	add    %edx,%eax
f010eaa7:	01 c0                	add    %eax,%eax
f010eaa9:	01 d0                	add    %edx,%eax
f010eaab:	01 c0                	add    %eax,%eax
f010eaad:	01 d0                	add    %edx,%eax
f010eaaf:	c1 e0 02             	shl    $0x2,%eax
f010eab2:	01 c8                	add    %ecx,%eax
f010eab4:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010eab8:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010eabe:	8b 55 08             	mov    0x8(%ebp),%edx
f010eac1:	89 d0                	mov    %edx,%eax
f010eac3:	c1 e0 02             	shl    $0x2,%eax
f010eac6:	01 d0                	add    %edx,%eax
f010eac8:	01 c0                	add    %eax,%eax
f010eaca:	01 d0                	add    %edx,%eax
f010eacc:	01 c0                	add    %eax,%eax
f010eace:	01 d0                	add    %edx,%eax
f010ead0:	c1 e0 02             	shl    $0x2,%eax
f010ead3:	01 c8                	add    %ecx,%eax
f010ead5:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010eadc:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010eae2:	8b 55 08             	mov    0x8(%ebp),%edx
f010eae5:	89 d0                	mov    %edx,%eax
f010eae7:	c1 e0 02             	shl    $0x2,%eax
f010eaea:	01 d0                	add    %edx,%eax
f010eaec:	01 c0                	add    %eax,%eax
f010eaee:	01 d0                	add    %edx,%eax
f010eaf0:	01 c0                	add    %eax,%eax
f010eaf2:	01 d0                	add    %edx,%eax
f010eaf4:	c1 e0 02             	shl    $0x2,%eax
f010eaf7:	01 c8                	add    %ecx,%eax
f010eaf9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010eb00:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010eb06:	8b 55 08             	mov    0x8(%ebp),%edx
f010eb09:	89 d0                	mov    %edx,%eax
f010eb0b:	c1 e0 02             	shl    $0x2,%eax
f010eb0e:	01 d0                	add    %edx,%eax
f010eb10:	01 c0                	add    %eax,%eax
f010eb12:	01 d0                	add    %edx,%eax
f010eb14:	01 c0                	add    %eax,%eax
f010eb16:	01 d0                	add    %edx,%eax
f010eb18:	c1 e0 02             	shl    $0x2,%eax
f010eb1b:	01 c8                	add    %ecx,%eax
f010eb1d:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010eb24:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010eb29:	c9                   	leave  
f010eb2a:	c3                   	ret    

f010eb2b <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010eb2b:	55                   	push   %ebp
f010eb2c:	89 e5                	mov    %esp,%ebp
f010eb2e:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] createSemaphore
	// your code is here, remove the panic and write your code
	//panic("createSemaphore() is not implemented yet...!!");

	int exist=get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010eb31:	83 ec 08             	sub    $0x8,%esp
f010eb34:	ff 75 0c             	pushl  0xc(%ebp)
f010eb37:	ff 75 08             	pushl  0x8(%ebp)
f010eb3a:	e8 64 fe ff ff       	call   f010e9a3 <get_semaphore_object_ID>
f010eb3f:	83 c4 10             	add    $0x10,%esp
f010eb42:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Semaphore *allocatedObject;
	int succeed = 0;
f010eb45:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	if(exist==E_SEMAPHORE_NOT_EXISTS){
f010eb4c:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010eb50:	0f 85 9a 00 00 00    	jne    f010ebf0 <createSemaphore+0xc5>

		succeed = allocate_semaphore_object(&allocatedObject);
f010eb56:	83 ec 0c             	sub    $0xc,%esp
f010eb59:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010eb5c:	50                   	push   %eax
f010eb5d:	e8 54 fd ff ff       	call   f010e8b6 <allocate_semaphore_object>
f010eb62:	83 c4 10             	add    $0x10,%esp
f010eb65:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if (succeed != E_NO_SEMAPHORE){
f010eb68:	83 7d f0 f5          	cmpl   $0xfffffff5,-0x10(%ebp)
f010eb6c:	74 7b                	je     f010ebe9 <createSemaphore+0xbe>

			semaphores[succeed].ownerID=ownerEnvID;
f010eb6e:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010eb74:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010eb77:	89 d0                	mov    %edx,%eax
f010eb79:	c1 e0 02             	shl    $0x2,%eax
f010eb7c:	01 d0                	add    %edx,%eax
f010eb7e:	01 c0                	add    %eax,%eax
f010eb80:	01 d0                	add    %edx,%eax
f010eb82:	01 c0                	add    %eax,%eax
f010eb84:	01 d0                	add    %edx,%eax
f010eb86:	c1 e0 02             	shl    $0x2,%eax
f010eb89:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010eb8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb8f:	89 02                	mov    %eax,(%edx)
			strcpy(semaphores[succeed].name,semaphoreName);
f010eb91:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010eb97:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010eb9a:	89 d0                	mov    %edx,%eax
f010eb9c:	c1 e0 02             	shl    $0x2,%eax
f010eb9f:	01 d0                	add    %edx,%eax
f010eba1:	01 c0                	add    %eax,%eax
f010eba3:	01 d0                	add    %edx,%eax
f010eba5:	01 c0                	add    %eax,%eax
f010eba7:	01 d0                	add    %edx,%eax
f010eba9:	c1 e0 02             	shl    $0x2,%eax
f010ebac:	01 c8                	add    %ecx,%eax
f010ebae:	83 c0 04             	add    $0x4,%eax
f010ebb1:	83 ec 08             	sub    $0x8,%esp
f010ebb4:	ff 75 0c             	pushl  0xc(%ebp)
f010ebb7:	50                   	push   %eax
f010ebb8:	e8 97 2e 02 00       	call   f0131a54 <strcpy>
f010ebbd:	83 c4 10             	add    $0x10,%esp
			semaphores[succeed].value=(int)initialValue;
f010ebc0:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ebc6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ebc9:	89 d0                	mov    %edx,%eax
f010ebcb:	c1 e0 02             	shl    $0x2,%eax
f010ebce:	01 d0                	add    %edx,%eax
f010ebd0:	01 c0                	add    %eax,%eax
f010ebd2:	01 d0                	add    %edx,%eax
f010ebd4:	01 c0                	add    %eax,%eax
f010ebd6:	01 d0                	add    %edx,%eax
f010ebd8:	c1 e0 02             	shl    $0x2,%eax
f010ebdb:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010ebde:	8b 45 10             	mov    0x10(%ebp),%eax
f010ebe1:	89 42 54             	mov    %eax,0x54(%edx)

			return succeed;
f010ebe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ebe7:	eb 0c                	jmp    f010ebf5 <createSemaphore+0xca>
		}
		else{return E_NO_SEMAPHORE;}
f010ebe9:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010ebee:	eb 05                	jmp    f010ebf5 <createSemaphore+0xca>
	}
	else{return E_SEMAPHORE_EXISTS;}
f010ebf0:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
	//	b) E_SEMAPHORE_EXISTS if the semaphore is already exists
	//	c) E_NO_SEMAPHORE if the the array of semaphores is full

	//change this "return" according to your answer
	return 0;
}
f010ebf5:	c9                   	leave  
f010ebf6:	c3                   	ret    

f010ebf7 <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010ebf7:	55                   	push   %ebp
f010ebf8:	89 e5                	mov    %esp,%ebp
f010ebfa:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] waitSemaphore
	// your code is here, remove the panic and write your code
	//panic("waitSemaphore() is not implemented yet...!!");

	struct Env* myenv = curenv; //The calling environment
f010ebfd:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f010ec02:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int id =  get_semaphore_object_ID(ownerEnvID,semaphoreName);
f010ec05:	83 ec 08             	sub    $0x8,%esp
f010ec08:	ff 75 0c             	pushl  0xc(%ebp)
f010ec0b:	ff 75 08             	pushl  0x8(%ebp)
f010ec0e:	e8 90 fd ff ff       	call   f010e9a3 <get_semaphore_object_ID>
f010ec13:	83 c4 10             	add    $0x10,%esp
f010ec16:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(id != E_SEMAPHORE_NOT_EXISTS ) {
f010ec19:	83 7d f0 f3          	cmpl   $0xfffffff3,-0x10(%ebp)
f010ec1d:	0f 84 ae 00 00 00    	je     f010ecd1 <waitSemaphore+0xda>
		semaphores[id].value--;
f010ec23:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ec29:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec2c:	89 d0                	mov    %edx,%eax
f010ec2e:	c1 e0 02             	shl    $0x2,%eax
f010ec31:	01 d0                	add    %edx,%eax
f010ec33:	01 c0                	add    %eax,%eax
f010ec35:	01 d0                	add    %edx,%eax
f010ec37:	01 c0                	add    %eax,%eax
f010ec39:	01 d0                	add    %edx,%eax
f010ec3b:	c1 e0 02             	shl    $0x2,%eax
f010ec3e:	01 c8                	add    %ecx,%eax
f010ec40:	8b 50 54             	mov    0x54(%eax),%edx
f010ec43:	4a                   	dec    %edx
f010ec44:	89 50 54             	mov    %edx,0x54(%eax)
		struct Env_Queue* queue=& semaphores [id].env_queue;
f010ec47:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ec4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec50:	89 d0                	mov    %edx,%eax
f010ec52:	c1 e0 02             	shl    $0x2,%eax
f010ec55:	01 d0                	add    %edx,%eax
f010ec57:	01 c0                	add    %eax,%eax
f010ec59:	01 d0                	add    %edx,%eax
f010ec5b:	01 c0                	add    %eax,%eax
f010ec5d:	01 d0                	add    %edx,%eax
f010ec5f:	c1 e0 02             	shl    $0x2,%eax
f010ec62:	01 c8                	add    %ecx,%eax
f010ec64:	83 c0 44             	add    $0x44,%eax
f010ec67:	89 45 ec             	mov    %eax,-0x14(%ebp)

		if(semaphores [id].value<0){
f010ec6a:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ec70:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec73:	89 d0                	mov    %edx,%eax
f010ec75:	c1 e0 02             	shl    $0x2,%eax
f010ec78:	01 d0                	add    %edx,%eax
f010ec7a:	01 c0                	add    %eax,%eax
f010ec7c:	01 d0                	add    %edx,%eax
f010ec7e:	01 c0                	add    %eax,%eax
f010ec80:	01 d0                	add    %edx,%eax
f010ec82:	c1 e0 02             	shl    $0x2,%eax
f010ec85:	01 c8                	add    %ecx,%eax
f010ec87:	8b 40 54             	mov    0x54(%eax),%eax
f010ec8a:	85 c0                	test   %eax,%eax
f010ec8c:	79 43                	jns    f010ecd1 <waitSemaphore+0xda>
			enqueue(&(semaphores [id].env_queue),myenv);
f010ec8e:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ec94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ec97:	89 d0                	mov    %edx,%eax
f010ec99:	c1 e0 02             	shl    $0x2,%eax
f010ec9c:	01 d0                	add    %edx,%eax
f010ec9e:	01 c0                	add    %eax,%eax
f010eca0:	01 d0                	add    %edx,%eax
f010eca2:	01 c0                	add    %eax,%eax
f010eca4:	01 d0                	add    %edx,%eax
f010eca6:	c1 e0 02             	shl    $0x2,%eax
f010eca9:	01 c8                	add    %ecx,%eax
f010ecab:	83 c0 44             	add    $0x44,%eax
f010ecae:	83 ec 08             	sub    $0x8,%esp
f010ecb1:	ff 75 f4             	pushl  -0xc(%ebp)
f010ecb4:	50                   	push   %eax
f010ecb5:	e8 ca 57 ff ff       	call   f0104484 <enqueue>
f010ecba:	83 c4 10             	add    $0x10,%esp
			myenv->env_status=ENV_BLOCKED;
f010ecbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ecc0:	c7 40 54 03 00 00 00 	movl   $0x3,0x54(%eax)
			curenv=NULL;
f010ecc7:	c7 05 f4 ed 85 f0 00 	movl   $0x0,0xf085edf4
f010ecce:	00 00 00 
			}
		}
	fos_scheduler();
f010ecd1:	e8 37 5a ff ff       	call   f010470d <fos_scheduler>

f010ecd6 <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010ecd6:	55                   	push   %ebp
f010ecd7:	89 e5                	mov    %esp,%ebp
f010ecd9:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS3] [SEMAPHORES] signalSemaphore
	// your code is here, remove the panic and write your code
	//panic("signalSemaphore() is not implemented yet...!!");

	int id = get_semaphore_object_ID((int32)ownerEnvID,semaphoreName);
f010ecdc:	83 ec 08             	sub    $0x8,%esp
f010ecdf:	ff 75 0c             	pushl  0xc(%ebp)
f010ece2:	ff 75 08             	pushl  0x8(%ebp)
f010ece5:	e8 b9 fc ff ff       	call   f010e9a3 <get_semaphore_object_ID>
f010ecea:	83 c4 10             	add    $0x10,%esp
f010eced:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(id != E_SEMAPHORE_NOT_EXISTS ) {
f010ecf0:	83 7d f4 f3          	cmpl   $0xfffffff3,-0xc(%ebp)
f010ecf4:	0f 84 b2 00 00 00    	je     f010edac <signalSemaphore+0xd6>
		semaphores [id].value++;
f010ecfa:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ed00:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed03:	89 d0                	mov    %edx,%eax
f010ed05:	c1 e0 02             	shl    $0x2,%eax
f010ed08:	01 d0                	add    %edx,%eax
f010ed0a:	01 c0                	add    %eax,%eax
f010ed0c:	01 d0                	add    %edx,%eax
f010ed0e:	01 c0                	add    %eax,%eax
f010ed10:	01 d0                	add    %edx,%eax
f010ed12:	c1 e0 02             	shl    $0x2,%eax
f010ed15:	01 c8                	add    %ecx,%eax
f010ed17:	8b 50 54             	mov    0x54(%eax),%edx
f010ed1a:	42                   	inc    %edx
f010ed1b:	89 50 54             	mov    %edx,0x54(%eax)
		struct Env_Queue* queue=& semaphores [id].env_queue;
f010ed1e:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ed24:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed27:	89 d0                	mov    %edx,%eax
f010ed29:	c1 e0 02             	shl    $0x2,%eax
f010ed2c:	01 d0                	add    %edx,%eax
f010ed2e:	01 c0                	add    %eax,%eax
f010ed30:	01 d0                	add    %edx,%eax
f010ed32:	01 c0                	add    %eax,%eax
f010ed34:	01 d0                	add    %edx,%eax
f010ed36:	c1 e0 02             	shl    $0x2,%eax
f010ed39:	01 c8                	add    %ecx,%eax
f010ed3b:	83 c0 44             	add    $0x44,%eax
f010ed3e:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(semaphores [id].value<=0){
f010ed41:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ed47:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed4a:	89 d0                	mov    %edx,%eax
f010ed4c:	c1 e0 02             	shl    $0x2,%eax
f010ed4f:	01 d0                	add    %edx,%eax
f010ed51:	01 c0                	add    %eax,%eax
f010ed53:	01 d0                	add    %edx,%eax
f010ed55:	01 c0                	add    %eax,%eax
f010ed57:	01 d0                	add    %edx,%eax
f010ed59:	c1 e0 02             	shl    $0x2,%eax
f010ed5c:	01 c8                	add    %ecx,%eax
f010ed5e:	8b 40 54             	mov    0x54(%eax),%eax
f010ed61:	85 c0                	test   %eax,%eax
f010ed63:	7f 47                	jg     f010edac <signalSemaphore+0xd6>
			struct Env* deq = dequeue(&(semaphores [id].env_queue));
f010ed65:	8b 0d 08 f7 85 f0    	mov    0xf085f708,%ecx
f010ed6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed6e:	89 d0                	mov    %edx,%eax
f010ed70:	c1 e0 02             	shl    $0x2,%eax
f010ed73:	01 d0                	add    %edx,%eax
f010ed75:	01 c0                	add    %eax,%eax
f010ed77:	01 d0                	add    %edx,%eax
f010ed79:	01 c0                	add    %eax,%eax
f010ed7b:	01 d0                	add    %edx,%eax
f010ed7d:	c1 e0 02             	shl    $0x2,%eax
f010ed80:	01 c8                	add    %ecx,%eax
f010ed82:	83 c0 44             	add    $0x44,%eax
f010ed85:	83 ec 0c             	sub    $0xc,%esp
f010ed88:	50                   	push   %eax
f010ed89:	e8 87 57 ff ff       	call   f0104515 <dequeue>
f010ed8e:	83 c4 10             	add    $0x10,%esp
f010ed91:	89 45 ec             	mov    %eax,-0x14(%ebp)
			sched_insert_ready(deq);
f010ed94:	83 ec 0c             	sub    $0xc,%esp
f010ed97:	ff 75 ec             	pushl  -0x14(%ebp)
f010ed9a:	e8 94 5b ff ff       	call   f0104933 <sched_insert_ready>
f010ed9f:	83 c4 10             	add    $0x10,%esp
			deq->env_status=ENV_READY;
f010eda2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eda5:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
	//	2) Increment its value
	//	3) If less than or equal 0, release a blocked environment, by
	//		a) removing it from semaphore queue		[refer to helper functions in doc]
	//		b) adding it to ready queue				[refer to helper functions in doc]
	//		c) changing its status to ENV_READY
}
f010edac:	90                   	nop
f010edad:	c9                   	leave  
f010edae:	c3                   	ret    

f010edaf <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010edaf:	55                   	push   %ebp
f010edb0:	89 e5                	mov    %esp,%ebp
f010edb2:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010edb5:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010edbc:	83 ec 0c             	sub    $0xc,%esp
f010edbf:	ff 75 ec             	pushl  -0x14(%ebp)
f010edc2:	e8 a8 37 02 00       	call   f013256f <initialize_MemBlocksList>
f010edc7:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010edca:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010edcf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010edd2:	74 17                	je     f010edeb <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010edd4:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010edd9:	50                   	push   %eax
f010edda:	68 80 7e 13 f0       	push   $0xf0137e80
f010eddf:	6a 1f                	push   $0x1f
f010ede1:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ede6:	e8 1a 14 ff ff       	call   f0100205 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010edeb:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010edf0:	85 c0                	test   %eax,%eax
f010edf2:	74 17                	je     f010ee0b <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010edf4:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010edf9:	50                   	push   %eax
f010edfa:	68 f8 7e 13 f0       	push   $0xf0137ef8
f010edff:	6a 26                	push   $0x26
f010ee01:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ee06:	e8 fa 13 ff ff       	call   f0100205 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010ee0b:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010ee10:	85 c0                	test   %eax,%eax
f010ee12:	74 17                	je     f010ee2b <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010ee14:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010ee19:	50                   	push   %eax
f010ee1a:	68 48 7f 13 f0       	push   $0xf0137f48
f010ee1f:	6a 2c                	push   $0x2c
f010ee21:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ee26:	e8 da 13 ff ff       	call   f0100205 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010ee2b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010ee32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ee39:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f010ee3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ee41:	eb 29                	jmp    f010ee6c <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010ee43:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010ee46:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee49:	8b 50 0c             	mov    0xc(%eax),%edx
f010ee4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee4f:	8b 40 08             	mov    0x8(%eax),%eax
f010ee52:	83 ec 04             	sub    $0x4,%esp
f010ee55:	52                   	push   %edx
f010ee56:	50                   	push   %eax
f010ee57:	68 98 7f 13 f0       	push   $0xf0137f98
f010ee5c:	e8 ad 1e ff ff       	call   f0100d0e <cprintf>
f010ee61:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010ee64:	a1 9c f7 85 f0       	mov    0xf085f79c,%eax
f010ee69:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010ee6c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ee70:	74 07                	je     f010ee79 <test_initialize_MemBlocksList+0xca>
f010ee72:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ee75:	8b 00                	mov    (%eax),%eax
f010ee77:	eb 05                	jmp    f010ee7e <test_initialize_MemBlocksList+0xcf>
f010ee79:	b8 00 00 00 00       	mov    $0x0,%eax
f010ee7e:	a3 9c f7 85 f0       	mov    %eax,0xf085f79c
f010ee83:	a1 9c f7 85 f0       	mov    0xf085f79c,%eax
f010ee88:	85 c0                	test   %eax,%eax
f010ee8a:	75 b7                	jne    f010ee43 <test_initialize_MemBlocksList+0x94>
f010ee8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ee90:	75 b1                	jne    f010ee43 <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010ee92:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010ee97:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ee9a:	74 14                	je     f010eeb0 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010ee9c:	83 ec 04             	sub    $0x4,%esp
f010ee9f:	68 b8 7f 13 f0       	push   $0xf0137fb8
f010eea4:	6a 38                	push   $0x38
f010eea6:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010eeab:	e8 55 13 ff ff       	call   f0100205 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010eeb0:	83 ec 0c             	sub    $0xc,%esp
f010eeb3:	68 10 80 13 f0       	push   $0xf0138010
f010eeb8:	e8 51 1e ff ff       	call   f0100d0e <cprintf>
f010eebd:	83 c4 10             	add    $0x10,%esp
}
f010eec0:	90                   	nop
f010eec1:	c9                   	leave  
f010eec2:	c3                   	ret    

f010eec3 <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010eec3:	55                   	push   %ebp
f010eec4:	89 e5                	mov    %esp,%ebp
f010eec6:	57                   	push   %edi
f010eec7:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010eecd:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eed4:	83 ec 0c             	sub    $0xc,%esp
f010eed7:	ff 75 f4             	pushl  -0xc(%ebp)
f010eeda:	e8 90 36 02 00       	call   f013256f <initialize_MemBlocksList>
f010eedf:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eee2:	c7 05 c4 f6 85 f0 00 	movl   $0x0,0xf085f6c4
f010eee9:	00 00 00 
f010eeec:	c7 05 c8 f6 85 f0 00 	movl   $0x0,0xf085f6c8
f010eef3:	00 00 00 
f010eef6:	c7 05 d0 f6 85 f0 00 	movl   $0x0,0xf085f6d0
f010eefd:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010ef00:	c7 05 60 f7 85 f0 00 	movl   $0x0,0xf085f760
f010ef07:	00 00 00 
f010ef0a:	c7 05 64 f7 85 f0 00 	movl   $0x0,0xf085f764
f010ef11:	00 00 00 
f010ef14:	c7 05 6c f7 85 f0 00 	movl   $0x0,0xf085f76c
f010ef1b:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010ef1e:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010ef21:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ef26:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef2b:	89 d7                	mov    %edx,%edi
f010ef2d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010ef2f:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010ef32:	b9 05 00 00 00       	mov    $0x5,%ecx
f010ef37:	b8 00 00 00 00       	mov    $0x0,%eax
f010ef3c:	89 d7                	mov    %edx,%edi
f010ef3e:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010ef40:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010ef47:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010ef4e:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010ef55:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010ef5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef5f:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010ef62:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ef65:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010ef68:	83 ec 0c             	sub    $0xc,%esp
f010ef6b:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010ef6e:	50                   	push   %eax
f010ef6f:	e8 30 37 02 00       	call   f01326a4 <insert_sorted_allocList>
f010ef74:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010ef77:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010ef7e:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010ef83:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ef86:	74 14                	je     f010ef9c <test_insert_sorted_allocList+0xd9>
f010ef88:	83 ec 04             	sub    $0x4,%esp
f010ef8b:	68 5c 80 13 f0       	push   $0xf013805c
f010ef90:	6a 56                	push   $0x56
f010ef92:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ef97:	e8 69 12 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010ef9c:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010efa1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010efa4:	74 14                	je     f010efba <test_insert_sorted_allocList+0xf7>
f010efa6:	83 ec 04             	sub    $0x4,%esp
f010efa9:	68 a8 80 13 f0       	push   $0xf01380a8
f010efae:	6a 59                	push   $0x59
f010efb0:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010efb5:	e8 4b 12 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010efba:	83 ec 0c             	sub    $0xc,%esp
f010efbd:	ff 75 f0             	pushl  -0x10(%ebp)
f010efc0:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010efc3:	50                   	push   %eax
f010efc4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010efc7:	50                   	push   %eax
f010efc8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010efcb:	50                   	push   %eax
f010efcc:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010efd1:	e8 7d 26 00 00       	call   f0111653 <check_list_data>
f010efd6:	83 c4 20             	add    $0x20,%esp
f010efd9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010efdc:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010efe0:	74 14                	je     f010eff6 <test_insert_sorted_allocList+0x133>
f010efe2:	83 ec 04             	sub    $0x4,%esp
f010efe5:	68 f8 80 13 f0       	push   $0xf01380f8
f010efea:	6a 5d                	push   $0x5d
f010efec:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010eff1:	e8 0f 12 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010eff6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010eff9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010effc:	74 14                	je     f010f012 <test_insert_sorted_allocList+0x14f>
f010effe:	83 ec 04             	sub    $0x4,%esp
f010f001:	68 48 81 13 f0       	push   $0xf0138148
f010f006:	6a 5e                	push   $0x5e
f010f008:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f00d:	e8 f3 11 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010f012:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010f019:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010f020:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f023:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010f026:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f029:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010f02c:	83 ec 0c             	sub    $0xc,%esp
f010f02f:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010f032:	50                   	push   %eax
f010f033:	e8 6c 36 02 00       	call   f01326a4 <insert_sorted_allocList>
f010f038:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010f03b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f042:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010f047:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f04a:	74 14                	je     f010f060 <test_insert_sorted_allocList+0x19d>
f010f04c:	83 ec 04             	sub    $0x4,%esp
f010f04f:	68 5c 80 13 f0       	push   $0xf013805c
f010f054:	6a 6d                	push   $0x6d
f010f056:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f05b:	e8 a5 11 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f060:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010f065:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f068:	74 14                	je     f010f07e <test_insert_sorted_allocList+0x1bb>
f010f06a:	83 ec 04             	sub    $0x4,%esp
f010f06d:	68 a8 80 13 f0       	push   $0xf01380a8
f010f072:	6a 70                	push   $0x70
f010f074:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f079:	e8 87 11 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f07e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f085:	83 ec 0c             	sub    $0xc,%esp
f010f088:	ff 75 f0             	pushl  -0x10(%ebp)
f010f08b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f08e:	50                   	push   %eax
f010f08f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f092:	50                   	push   %eax
f010f093:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f096:	50                   	push   %eax
f010f097:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010f09c:	e8 b2 25 00 00       	call   f0111653 <check_list_data>
f010f0a1:	83 c4 20             	add    $0x20,%esp
f010f0a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f0a7:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f0ab:	74 14                	je     f010f0c1 <test_insert_sorted_allocList+0x1fe>
f010f0ad:	83 ec 04             	sub    $0x4,%esp
f010f0b0:	68 f8 80 13 f0       	push   $0xf01380f8
f010f0b5:	6a 75                	push   $0x75
f010f0b7:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f0bc:	e8 44 11 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f0c1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f0c4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f0c7:	74 14                	je     f010f0dd <test_insert_sorted_allocList+0x21a>
f010f0c9:	83 ec 04             	sub    $0x4,%esp
f010f0cc:	68 48 81 13 f0       	push   $0xf0138148
f010f0d1:	6a 76                	push   $0x76
f010f0d3:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f0d8:	e8 28 11 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010f0dd:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010f0e4:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010f0eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f0ee:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010f0f1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f0f4:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010f0f7:	83 ec 0c             	sub    $0xc,%esp
f010f0fa:	8d 45 90             	lea    -0x70(%ebp),%eax
f010f0fd:	50                   	push   %eax
f010f0fe:	e8 a1 35 02 00       	call   f01326a4 <insert_sorted_allocList>
f010f103:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010f106:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f10d:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010f112:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f115:	74 17                	je     f010f12e <test_insert_sorted_allocList+0x26b>
f010f117:	83 ec 04             	sub    $0x4,%esp
f010f11a:	68 5c 80 13 f0       	push   $0xf013805c
f010f11f:	68 85 00 00 00       	push   $0x85
f010f124:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f129:	e8 d7 10 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010f12e:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010f133:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f136:	74 17                	je     f010f14f <test_insert_sorted_allocList+0x28c>
f010f138:	83 ec 04             	sub    $0x4,%esp
f010f13b:	68 94 81 13 f0       	push   $0xf0138194
f010f140:	68 88 00 00 00       	push   $0x88
f010f145:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f14a:	e8 b6 10 ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f14f:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f156:	83 ec 0c             	sub    $0xc,%esp
f010f159:	ff 75 f0             	pushl  -0x10(%ebp)
f010f15c:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f15f:	50                   	push   %eax
f010f160:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f163:	50                   	push   %eax
f010f164:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f167:	50                   	push   %eax
f010f168:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010f16d:	e8 e1 24 00 00       	call   f0111653 <check_list_data>
f010f172:	83 c4 20             	add    $0x20,%esp
f010f175:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f178:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f17c:	74 17                	je     f010f195 <test_insert_sorted_allocList+0x2d2>
f010f17e:	83 ec 04             	sub    $0x4,%esp
f010f181:	68 f8 80 13 f0       	push   $0xf01380f8
f010f186:	68 8d 00 00 00       	push   $0x8d
f010f18b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f190:	e8 70 10 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f195:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f198:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f19b:	74 17                	je     f010f1b4 <test_insert_sorted_allocList+0x2f1>
f010f19d:	83 ec 04             	sub    $0x4,%esp
f010f1a0:	68 48 81 13 f0       	push   $0xf0138148
f010f1a5:	68 8e 00 00 00       	push   $0x8e
f010f1aa:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f1af:	e8 51 10 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010f1b4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010f1bb:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010f1c2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f1c5:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010f1c8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f1cb:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010f1ce:	83 ec 0c             	sub    $0xc,%esp
f010f1d1:	8d 45 80             	lea    -0x80(%ebp),%eax
f010f1d4:	50                   	push   %eax
f010f1d5:	e8 ca 34 02 00       	call   f01326a4 <insert_sorted_allocList>
f010f1da:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010f1dd:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f1e4:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010f1e9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f1ec:	74 17                	je     f010f205 <test_insert_sorted_allocList+0x342>
f010f1ee:	83 ec 04             	sub    $0x4,%esp
f010f1f1:	68 5c 80 13 f0       	push   $0xf013805c
f010f1f6:	68 9c 00 00 00       	push   $0x9c
f010f1fb:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f200:	e8 00 10 ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f205:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010f20a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f20d:	74 17                	je     f010f226 <test_insert_sorted_allocList+0x363>
f010f20f:	83 ec 04             	sub    $0x4,%esp
f010f212:	68 a8 80 13 f0       	push   $0xf01380a8
f010f217:	68 9f 00 00 00       	push   $0x9f
f010f21c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f221:	e8 df 0f ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f226:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f22d:	83 ec 0c             	sub    $0xc,%esp
f010f230:	ff 75 f0             	pushl  -0x10(%ebp)
f010f233:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f236:	50                   	push   %eax
f010f237:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f23a:	50                   	push   %eax
f010f23b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f23e:	50                   	push   %eax
f010f23f:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010f244:	e8 0a 24 00 00       	call   f0111653 <check_list_data>
f010f249:	83 c4 20             	add    $0x20,%esp
f010f24c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f24f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f253:	74 17                	je     f010f26c <test_insert_sorted_allocList+0x3a9>
f010f255:	83 ec 04             	sub    $0x4,%esp
f010f258:	68 f8 80 13 f0       	push   $0xf01380f8
f010f25d:	68 a4 00 00 00       	push   $0xa4
f010f262:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f267:	e8 99 0f ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f26c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f26f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f272:	74 17                	je     f010f28b <test_insert_sorted_allocList+0x3c8>
f010f274:	83 ec 04             	sub    $0x4,%esp
f010f277:	68 48 81 13 f0       	push   $0xf0138148
f010f27c:	68 a5 00 00 00       	push   $0xa5
f010f281:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f286:	e8 7a 0f ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010f28b:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010f292:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010f299:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f29c:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010f2a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f2a5:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010f2ab:	83 ec 0c             	sub    $0xc,%esp
f010f2ae:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010f2b4:	50                   	push   %eax
f010f2b5:	e8 ea 33 02 00       	call   f01326a4 <insert_sorted_allocList>
f010f2ba:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010f2bd:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010f2c4:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010f2c9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f2cc:	74 17                	je     f010f2e5 <test_insert_sorted_allocList+0x422>
f010f2ce:	83 ec 04             	sub    $0x4,%esp
f010f2d1:	68 5c 80 13 f0       	push   $0xf013805c
f010f2d6:	68 b3 00 00 00       	push   $0xb3
f010f2db:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f2e0:	e8 20 0f ff ff       	call   f0100205 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010f2e5:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010f2ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f2ed:	74 17                	je     f010f306 <test_insert_sorted_allocList+0x443>
f010f2ef:	83 ec 04             	sub    $0x4,%esp
f010f2f2:	68 a8 80 13 f0       	push   $0xf01380a8
f010f2f7:	68 b6 00 00 00       	push   $0xb6
f010f2fc:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f301:	e8 ff 0e ff ff       	call   f0100205 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010f306:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f30d:	83 ec 0c             	sub    $0xc,%esp
f010f310:	ff 75 f0             	pushl  -0x10(%ebp)
f010f313:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f316:	50                   	push   %eax
f010f317:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f31a:	50                   	push   %eax
f010f31b:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010f31e:	50                   	push   %eax
f010f31f:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010f324:	e8 2a 23 00 00       	call   f0111653 <check_list_data>
f010f329:	83 c4 20             	add    $0x20,%esp
f010f32c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010f32f:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010f333:	74 17                	je     f010f34c <test_insert_sorted_allocList+0x489>
f010f335:	83 ec 04             	sub    $0x4,%esp
f010f338:	68 f8 80 13 f0       	push   $0xf01380f8
f010f33d:	68 bb 00 00 00       	push   $0xbb
f010f342:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f347:	e8 b9 0e ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010f34c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f34f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f352:	74 17                	je     f010f36b <test_insert_sorted_allocList+0x4a8>
f010f354:	83 ec 04             	sub    $0x4,%esp
f010f357:	68 48 81 13 f0       	push   $0xf0138148
f010f35c:	68 bc 00 00 00       	push   $0xbc
f010f361:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f366:	e8 9a 0e ff ff       	call   f0100205 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010f36b:	83 ec 0c             	sub    $0xc,%esp
f010f36e:	68 e4 81 13 f0       	push   $0xf01381e4
f010f373:	e8 96 19 ff ff       	call   f0100d0e <cprintf>
f010f378:	83 c4 10             	add    $0x10,%esp
}
f010f37b:	90                   	nop
f010f37c:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010f37f:	c9                   	leave  
f010f380:	c3                   	ret    

f010f381 <test_find_block>:

void test_find_block()
{
f010f381:	55                   	push   %ebp
f010f382:	89 e5                	mov    %esp,%ebp
f010f384:	57                   	push   %edi
f010f385:	56                   	push   %esi
f010f386:	53                   	push   %ebx
f010f387:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010f38d:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f394:	83 ec 0c             	sub    $0xc,%esp
f010f397:	ff 75 e0             	pushl  -0x20(%ebp)
f010f39a:	e8 d0 31 02 00       	call   f013256f <initialize_MemBlocksList>
f010f39f:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010f3a2:	c7 05 60 f7 85 f0 00 	movl   $0x0,0xf085f760
f010f3a9:	00 00 00 
f010f3ac:	c7 05 64 f7 85 f0 00 	movl   $0x0,0xf085f764
f010f3b3:	00 00 00 
f010f3b6:	c7 05 6c f7 85 f0 00 	movl   $0x0,0xf085f76c
f010f3bd:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010f3c0:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010f3c3:	bb 5c 83 13 f0       	mov    $0xf013835c,%ebx
f010f3c8:	ba 06 00 00 00       	mov    $0x6,%edx
f010f3cd:	89 c7                	mov    %eax,%edi
f010f3cf:	89 de                	mov    %ebx,%esi
f010f3d1:	89 d1                	mov    %edx,%ecx
f010f3d3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010f3d5:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010f3d8:	bb 74 83 13 f0       	mov    $0xf0138374,%ebx
f010f3dd:	ba 06 00 00 00       	mov    $0x6,%edx
f010f3e2:	89 c7                	mov    %eax,%edi
f010f3e4:	89 de                	mov    %ebx,%esi
f010f3e6:	89 d1                	mov    %edx,%ecx
f010f3e8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010f3ea:	c7 05 c4 f6 85 f0 00 	movl   $0x0,0xf085f6c4
f010f3f1:	00 00 00 
f010f3f4:	c7 05 c8 f6 85 f0 00 	movl   $0x0,0xf085f6c8
f010f3fb:	00 00 00 
f010f3fe:	c7 05 d0 f6 85 f0 00 	movl   $0x0,0xf085f6d0
f010f405:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f408:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f40f:	e9 5f 01 00 00       	jmp    f010f573 <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010f414:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f417:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010f41b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f41e:	c1 e2 04             	shl    $0x4,%edx
f010f421:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f424:	01 da                	add    %ebx,%edx
f010f426:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010f42c:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010f42e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f431:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010f435:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f438:	c1 e2 04             	shl    $0x4,%edx
f010f43b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f43e:	01 f2                	add    %esi,%edx
f010f440:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010f446:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f448:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f44c:	0f 85 92 00 00 00    	jne    f010f4e4 <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010f452:	a1 c4 f6 85 f0       	mov    0xf085f6c4,%eax
f010f457:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f45a:	c1 e2 04             	shl    $0x4,%edx
f010f45d:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f460:	01 fa                	add    %edi,%edx
f010f462:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010f468:	89 02                	mov    %eax,(%edx)
f010f46a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f46d:	c1 e0 04             	shl    $0x4,%eax
f010f470:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f473:	01 d8                	add    %ebx,%eax
f010f475:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f47a:	8b 00                	mov    (%eax),%eax
f010f47c:	85 c0                	test   %eax,%eax
f010f47e:	74 18                	je     f010f498 <test_find_block+0x117>
f010f480:	a1 c4 f6 85 f0       	mov    0xf085f6c4,%eax
f010f485:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f48b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f48e:	c1 e1 04             	shl    $0x4,%ecx
f010f491:	01 ca                	add    %ecx,%edx
f010f493:	89 50 04             	mov    %edx,0x4(%eax)
f010f496:	eb 13                	jmp    f010f4ab <test_find_block+0x12a>
f010f498:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f49e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4a1:	c1 e2 04             	shl    $0x4,%edx
f010f4a4:	01 d0                	add    %edx,%eax
f010f4a6:	a3 c8 f6 85 f0       	mov    %eax,0xf085f6c8
f010f4ab:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f4b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4b4:	c1 e2 04             	shl    $0x4,%edx
f010f4b7:	01 d0                	add    %edx,%eax
f010f4b9:	a3 c4 f6 85 f0       	mov    %eax,0xf085f6c4
f010f4be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4c1:	c1 e0 04             	shl    $0x4,%eax
f010f4c4:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f4c7:	01 f0                	add    %esi,%eax
f010f4c9:	2d 98 00 00 00       	sub    $0x98,%eax
f010f4ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f4d4:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010f4d9:	40                   	inc    %eax
f010f4da:	a3 d0 f6 85 f0       	mov    %eax,0xf085f6d0
f010f4df:	e9 8c 00 00 00       	jmp    f010f570 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010f4e4:	a1 c8 f6 85 f0       	mov    0xf085f6c8,%eax
f010f4e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f4ec:	c1 e2 04             	shl    $0x4,%edx
f010f4ef:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f4f2:	01 fa                	add    %edi,%edx
f010f4f4:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010f4fa:	89 02                	mov    %eax,(%edx)
f010f4fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f4ff:	c1 e0 04             	shl    $0x4,%eax
f010f502:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f505:	01 d8                	add    %ebx,%eax
f010f507:	2d 98 00 00 00       	sub    $0x98,%eax
f010f50c:	8b 00                	mov    (%eax),%eax
f010f50e:	85 c0                	test   %eax,%eax
f010f510:	74 17                	je     f010f529 <test_find_block+0x1a8>
f010f512:	a1 c8 f6 85 f0       	mov    0xf085f6c8,%eax
f010f517:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010f51d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f520:	c1 e1 04             	shl    $0x4,%ecx
f010f523:	01 ca                	add    %ecx,%edx
f010f525:	89 10                	mov    %edx,(%eax)
f010f527:	eb 13                	jmp    f010f53c <test_find_block+0x1bb>
f010f529:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f52f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f532:	c1 e2 04             	shl    $0x4,%edx
f010f535:	01 d0                	add    %edx,%eax
f010f537:	a3 c4 f6 85 f0       	mov    %eax,0xf085f6c4
f010f53c:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010f542:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f545:	c1 e2 04             	shl    $0x4,%edx
f010f548:	01 d0                	add    %edx,%eax
f010f54a:	a3 c8 f6 85 f0       	mov    %eax,0xf085f6c8
f010f54f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f552:	c1 e0 04             	shl    $0x4,%eax
f010f555:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f558:	01 f0                	add    %esi,%eax
f010f55a:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010f55f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f565:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010f56a:	40                   	inc    %eax
f010f56b:	a3 d0 f6 85 f0       	mov    %eax,0xf085f6d0
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010f570:	ff 45 e4             	incl   -0x1c(%ebp)
f010f573:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010f577:	0f 8e 97 fe ff ff    	jle    f010f414 <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010f57d:	83 ec 08             	sub    $0x8,%esp
f010f580:	68 00 10 00 00       	push   $0x1000
f010f585:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010f58a:	e8 bd 30 02 00       	call   f013264c <find_block>
f010f58f:	83 c4 10             	add    $0x10,%esp
f010f592:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010f595:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f599:	74 17                	je     f010f5b2 <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010f59b:	83 ec 04             	sub    $0x4,%esp
f010f59e:	68 24 82 13 f0       	push   $0xf0138224
f010f5a3:	68 de 00 00 00       	push   $0xde
f010f5a8:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f5ad:	e8 53 0c ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010f5b2:	83 ec 08             	sub    $0x8,%esp
f010f5b5:	6a 00                	push   $0x0
f010f5b7:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010f5bc:	e8 8b 30 02 00       	call   f013264c <find_block>
f010f5c1:	83 c4 10             	add    $0x10,%esp
f010f5c4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010f5c7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f5cb:	74 17                	je     f010f5e4 <test_find_block+0x263>
f010f5cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5d0:	8b 40 0c             	mov    0xc(%eax),%eax
f010f5d3:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f5d8:	75 0a                	jne    f010f5e4 <test_find_block+0x263>
f010f5da:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f5dd:	8b 40 08             	mov    0x8(%eax),%eax
f010f5e0:	85 c0                	test   %eax,%eax
f010f5e2:	74 17                	je     f010f5fb <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f5e4:	83 ec 04             	sub    $0x4,%esp
f010f5e7:	68 88 82 13 f0       	push   $0xf0138288
f010f5ec:	68 e3 00 00 00       	push   $0xe3
f010f5f1:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f5f6:	e8 0a 0c ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010f5fb:	83 ec 08             	sub    $0x8,%esp
f010f5fe:	68 00 70 00 00       	push   $0x7000
f010f603:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010f608:	e8 3f 30 02 00       	call   f013264c <find_block>
f010f60d:	83 c4 10             	add    $0x10,%esp
f010f610:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010f613:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f617:	74 1a                	je     f010f633 <test_find_block+0x2b2>
f010f619:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f61c:	8b 40 0c             	mov    0xc(%eax),%eax
f010f61f:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f624:	75 0d                	jne    f010f633 <test_find_block+0x2b2>
f010f626:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f629:	8b 40 08             	mov    0x8(%eax),%eax
f010f62c:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f631:	74 17                	je     f010f64a <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f633:	83 ec 04             	sub    $0x4,%esp
f010f636:	68 88 82 13 f0       	push   $0xf0138288
f010f63b:	68 e8 00 00 00       	push   $0xe8
f010f640:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f645:	e8 bb 0b ff ff       	call   f0100205 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010f64a:	83 ec 08             	sub    $0x8,%esp
f010f64d:	68 00 a4 01 00       	push   $0x1a400
f010f652:	68 c4 f6 85 f0       	push   $0xf085f6c4
f010f657:	e8 f0 2f 02 00       	call   f013264c <find_block>
f010f65c:	83 c4 10             	add    $0x10,%esp
f010f65f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010f662:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f666:	74 1a                	je     f010f682 <test_find_block+0x301>
f010f668:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f66b:	8b 40 0c             	mov    0xc(%eax),%eax
f010f66e:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010f673:	75 0d                	jne    f010f682 <test_find_block+0x301>
f010f675:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f678:	8b 40 08             	mov    0x8(%eax),%eax
f010f67b:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010f680:	74 17                	je     f010f699 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010f682:	83 ec 04             	sub    $0x4,%esp
f010f685:	68 88 82 13 f0       	push   $0xf0138288
f010f68a:	68 ed 00 00 00       	push   $0xed
f010f68f:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f694:	e8 6c 0b ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010f699:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010f69e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f6a1:	75 09                	jne    f010f6ac <test_find_block+0x32b>
f010f6a3:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010f6a8:	85 c0                	test   %eax,%eax
f010f6aa:	74 17                	je     f010f6c3 <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010f6ac:	83 ec 04             	sub    $0x4,%esp
f010f6af:	68 bc 82 13 f0       	push   $0xf01382bc
f010f6b4:	68 f2 00 00 00       	push   $0xf2
f010f6b9:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f6be:	e8 42 0b ff ff       	call   f0100205 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010f6c3:	83 ec 0c             	sub    $0xc,%esp
f010f6c6:	68 20 83 13 f0       	push   $0xf0138320
f010f6cb:	e8 3e 16 ff ff       	call   f0100d0e <cprintf>
f010f6d0:	83 c4 10             	add    $0x10,%esp
}
f010f6d3:	90                   	nop
f010f6d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f6d7:	5b                   	pop    %ebx
f010f6d8:	5e                   	pop    %esi
f010f6d9:	5f                   	pop    %edi
f010f6da:	5d                   	pop    %ebp
f010f6db:	c3                   	ret    

f010f6dc <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010f6dc:	55                   	push   %ebp
f010f6dd:	89 e5                	mov    %esp,%ebp
f010f6df:	57                   	push   %edi
f010f6e0:	56                   	push   %esi
f010f6e1:	53                   	push   %ebx
f010f6e2:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010f6e8:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f6ef:	83 ec 0c             	sub    $0xc,%esp
f010f6f2:	ff 75 e0             	pushl  -0x20(%ebp)
f010f6f5:	e8 75 2e 02 00       	call   f013256f <initialize_MemBlocksList>
f010f6fa:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f6fd:	c7 05 c4 f6 85 f0 00 	movl   $0x0,0xf085f6c4
f010f704:	00 00 00 
f010f707:	c7 05 c8 f6 85 f0 00 	movl   $0x0,0xf085f6c8
f010f70e:	00 00 00 
f010f711:	c7 05 d0 f6 85 f0 00 	movl   $0x0,0xf085f6d0
f010f718:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010f71b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f71e:	bb 00 86 13 f0       	mov    $0xf0138600,%ebx
f010f723:	ba 08 00 00 00       	mov    $0x8,%edx
f010f728:	89 c7                	mov    %eax,%edi
f010f72a:	89 de                	mov    %ebx,%esi
f010f72c:	89 d1                	mov    %edx,%ecx
f010f72e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010f730:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f733:	bb 20 86 13 f0       	mov    $0xf0138620,%ebx
f010f738:	ba 08 00 00 00       	mov    $0x8,%edx
f010f73d:	89 c7                	mov    %eax,%edi
f010f73f:	89 de                	mov    %ebx,%esi
f010f741:	89 d1                	mov    %edx,%ecx
f010f743:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010f745:	c7 05 60 f7 85 f0 00 	movl   $0x0,0xf085f760
f010f74c:	00 00 00 
f010f74f:	c7 05 64 f7 85 f0 00 	movl   $0x0,0xf085f764
f010f756:	00 00 00 
f010f759:	c7 05 6c f7 85 f0 00 	movl   $0x0,0xf085f76c
f010f760:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f763:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010f76a:	e9 5f 01 00 00       	jmp    f010f8ce <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010f76f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f772:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010f776:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f779:	c1 e2 04             	shl    $0x4,%edx
f010f77c:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f77f:	01 da                	add    %ebx,%edx
f010f781:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010f787:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010f789:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f78c:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010f790:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f793:	c1 e2 04             	shl    $0x4,%edx
f010f796:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f799:	01 f2                	add    %esi,%edx
f010f79b:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010f7a1:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010f7a3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010f7a7:	0f 85 92 00 00 00    	jne    f010f83f <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010f7ad:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f010f7b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7b5:	c1 e2 04             	shl    $0x4,%edx
f010f7b8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f7bb:	01 fa                	add    %edi,%edx
f010f7bd:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010f7c3:	89 02                	mov    %eax,(%edx)
f010f7c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f7c8:	c1 e0 04             	shl    $0x4,%eax
f010f7cb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f7ce:	01 d8                	add    %ebx,%eax
f010f7d0:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f7d5:	8b 00                	mov    (%eax),%eax
f010f7d7:	85 c0                	test   %eax,%eax
f010f7d9:	74 18                	je     f010f7f3 <test_alloc_block_FF+0x117>
f010f7db:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f010f7e0:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f7e6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f7e9:	c1 e1 04             	shl    $0x4,%ecx
f010f7ec:	01 ca                	add    %ecx,%edx
f010f7ee:	89 50 04             	mov    %edx,0x4(%eax)
f010f7f1:	eb 13                	jmp    f010f806 <test_alloc_block_FF+0x12a>
f010f7f3:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f7f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f7fc:	c1 e2 04             	shl    $0x4,%edx
f010f7ff:	01 d0                	add    %edx,%eax
f010f801:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f010f806:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f80c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f80f:	c1 e2 04             	shl    $0x4,%edx
f010f812:	01 d0                	add    %edx,%eax
f010f814:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f010f819:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f81c:	c1 e0 04             	shl    $0x4,%eax
f010f81f:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f822:	01 f0                	add    %esi,%eax
f010f824:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f829:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f82f:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010f834:	40                   	inc    %eax
f010f835:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
f010f83a:	e9 8c 00 00 00       	jmp    f010f8cb <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010f83f:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f010f844:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f847:	c1 e2 04             	shl    $0x4,%edx
f010f84a:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010f84d:	01 fa                	add    %edi,%edx
f010f84f:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010f855:	89 02                	mov    %eax,(%edx)
f010f857:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f85a:	c1 e0 04             	shl    $0x4,%eax
f010f85d:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010f860:	01 d8                	add    %ebx,%eax
f010f862:	2d d0 00 00 00       	sub    $0xd0,%eax
f010f867:	8b 00                	mov    (%eax),%eax
f010f869:	85 c0                	test   %eax,%eax
f010f86b:	74 17                	je     f010f884 <test_alloc_block_FF+0x1a8>
f010f86d:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f010f872:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010f878:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010f87b:	c1 e1 04             	shl    $0x4,%ecx
f010f87e:	01 ca                	add    %ecx,%edx
f010f880:	89 10                	mov    %edx,(%eax)
f010f882:	eb 13                	jmp    f010f897 <test_alloc_block_FF+0x1bb>
f010f884:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f88a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f88d:	c1 e2 04             	shl    $0x4,%edx
f010f890:	01 d0                	add    %edx,%eax
f010f892:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f010f897:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010f89d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010f8a0:	c1 e2 04             	shl    $0x4,%edx
f010f8a3:	01 d0                	add    %edx,%eax
f010f8a5:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f010f8aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f8ad:	c1 e0 04             	shl    $0x4,%eax
f010f8b0:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010f8b3:	01 f0                	add    %esi,%eax
f010f8b5:	2d d4 00 00 00       	sub    $0xd4,%eax
f010f8ba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010f8c0:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010f8c5:	40                   	inc    %eax
f010f8c6:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010f8cb:	ff 45 e4             	incl   -0x1c(%ebp)
f010f8ce:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010f8d2:	0f 8e 97 fe ff ff    	jle    f010f76f <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010f8d8:	83 ec 0c             	sub    $0xc,%esp
f010f8db:	68 00 00 30 00       	push   $0x300000
f010f8e0:	e8 1c 30 02 00       	call   f0132901 <alloc_block_FF>
f010f8e5:	83 c4 10             	add    $0x10,%esp
f010f8e8:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010f8eb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f8ef:	74 17                	je     f010f908 <test_alloc_block_FF+0x22c>
f010f8f1:	83 ec 04             	sub    $0x4,%esp
f010f8f4:	68 8c 83 13 f0       	push   $0xf013838c
f010f8f9:	68 15 01 00 00       	push   $0x115
f010f8fe:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f903:	e8 fd 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f908:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010f90d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f910:	75 13                	jne    f010f925 <test_alloc_block_FF+0x249>
f010f912:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010f917:	83 f8 08             	cmp    $0x8,%eax
f010f91a:	75 09                	jne    f010f925 <test_alloc_block_FF+0x249>
f010f91c:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010f921:	85 c0                	test   %eax,%eax
f010f923:	74 17                	je     f010f93c <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010f925:	83 ec 04             	sub    $0x4,%esp
f010f928:	68 00 84 13 f0       	push   $0xf0138400
f010f92d:	68 19 01 00 00       	push   $0x119
f010f932:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f937:	e8 c9 08 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010f93c:	83 ec 0c             	sub    $0xc,%esp
f010f93f:	68 00 24 00 00       	push   $0x2400
f010f944:	e8 b8 2f 02 00       	call   f0132901 <alloc_block_FF>
f010f949:	83 c4 10             	add    $0x10,%esp
f010f94c:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010f94f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f953:	74 1a                	je     f010f96f <test_alloc_block_FF+0x293>
f010f955:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f958:	8b 40 0c             	mov    0xc(%eax),%eax
f010f95b:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010f960:	75 0d                	jne    f010f96f <test_alloc_block_FF+0x293>
f010f962:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f965:	8b 40 08             	mov    0x8(%eax),%eax
f010f968:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010f96d:	74 17                	je     f010f986 <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010f96f:	83 ec 04             	sub    $0x4,%esp
f010f972:	68 78 84 13 f0       	push   $0xf0138478
f010f977:	68 21 01 00 00       	push   $0x121
f010f97c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f981:	e8 7f 08 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f986:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010f98b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010f98e:	75 13                	jne    f010f9a3 <test_alloc_block_FF+0x2c7>
f010f990:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010f995:	83 f8 07             	cmp    $0x7,%eax
f010f998:	75 09                	jne    f010f9a3 <test_alloc_block_FF+0x2c7>
f010f99a:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010f99f:	85 c0                	test   %eax,%eax
f010f9a1:	74 17                	je     f010f9ba <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f9a3:	83 ec 04             	sub    $0x4,%esp
f010f9a6:	68 bc 84 13 f0       	push   $0xf01384bc
f010f9ab:	68 25 01 00 00       	push   $0x125
f010f9b0:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010f9b5:	e8 4b 08 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010f9ba:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f9c1:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010f9c4:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010f9cb:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010f9d2:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f9d9:	83 ec 0c             	sub    $0xc,%esp
f010f9dc:	ff 75 d8             	pushl  -0x28(%ebp)
f010f9df:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f9e5:	50                   	push   %eax
f010f9e6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9e9:	50                   	push   %eax
f010f9ea:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f9ed:	50                   	push   %eax
f010f9ee:	68 60 f7 85 f0       	push   $0xf085f760
f010f9f3:	e8 5b 1c 00 00       	call   f0111653 <check_list_data>
f010f9f8:	83 c4 20             	add    $0x20,%esp
f010f9fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010f9fe:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fa02:	74 17                	je     f010fa1b <test_alloc_block_FF+0x33f>
f010fa04:	83 ec 04             	sub    $0x4,%esp
f010fa07:	68 20 85 13 f0       	push   $0xf0138520
f010fa0c:	68 2d 01 00 00       	push   $0x12d
f010fa11:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fa16:	e8 ea 07 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010fa1b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fa21:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fa24:	74 17                	je     f010fa3d <test_alloc_block_FF+0x361>
f010fa26:	83 ec 04             	sub    $0x4,%esp
f010fa29:	68 6c 85 13 f0       	push   $0xf013856c
f010fa2e:	68 2e 01 00 00       	push   $0x12e
f010fa33:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fa38:	e8 c8 07 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010fa3d:	83 ec 0c             	sub    $0xc,%esp
f010fa40:	68 00 00 10 00       	push   $0x100000
f010fa45:	e8 b7 2e 02 00       	call   f0132901 <alloc_block_FF>
f010fa4a:	83 c4 10             	add    $0x10,%esp
f010fa4d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fa50:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fa54:	74 1a                	je     f010fa70 <test_alloc_block_FF+0x394>
f010fa56:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa59:	8b 40 0c             	mov    0xc(%eax),%eax
f010fa5c:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fa61:	75 0d                	jne    f010fa70 <test_alloc_block_FF+0x394>
f010fa63:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fa66:	8b 40 08             	mov    0x8(%eax),%eax
f010fa69:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010fa6e:	74 17                	je     f010fa87 <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010fa70:	83 ec 04             	sub    $0x4,%esp
f010fa73:	68 78 84 13 f0       	push   $0xf0138478
f010fa78:	68 36 01 00 00       	push   $0x136
f010fa7d:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fa82:	e8 7e 07 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fa87:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010fa8c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010fa8f:	4a                   	dec    %edx
f010fa90:	39 d0                	cmp    %edx,%eax
f010fa92:	75 13                	jne    f010faa7 <test_alloc_block_FF+0x3cb>
f010fa94:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010fa99:	83 f8 07             	cmp    $0x7,%eax
f010fa9c:	75 09                	jne    f010faa7 <test_alloc_block_FF+0x3cb>
f010fa9e:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010faa3:	85 c0                	test   %eax,%eax
f010faa5:	74 17                	je     f010fabe <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010faa7:	83 ec 04             	sub    $0x4,%esp
f010faaa:	68 bc 84 13 f0       	push   $0xf01384bc
f010faaf:	68 3a 01 00 00       	push   $0x13a
f010fab4:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fab9:	e8 47 07 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010fabe:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010fac5:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010fac8:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010facf:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010fad6:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fadd:	83 ec 0c             	sub    $0xc,%esp
f010fae0:	ff 75 d8             	pushl  -0x28(%ebp)
f010fae3:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010fae9:	50                   	push   %eax
f010faea:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010faed:	50                   	push   %eax
f010faee:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010faf1:	50                   	push   %eax
f010faf2:	68 60 f7 85 f0       	push   $0xf085f760
f010faf7:	e8 57 1b 00 00       	call   f0111653 <check_list_data>
f010fafc:	83 c4 20             	add    $0x20,%esp
f010faff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010fb02:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fb06:	74 17                	je     f010fb1f <test_alloc_block_FF+0x443>
f010fb08:	83 ec 04             	sub    $0x4,%esp
f010fb0b:	68 20 85 13 f0       	push   $0xf0138520
f010fb10:	68 42 01 00 00       	push   $0x142
f010fb15:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fb1a:	e8 e6 06 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010fb1f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010fb25:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fb28:	74 17                	je     f010fb41 <test_alloc_block_FF+0x465>
f010fb2a:	83 ec 04             	sub    $0x4,%esp
f010fb2d:	68 6c 85 13 f0       	push   $0xf013856c
f010fb32:	68 43 01 00 00       	push   $0x143
f010fb37:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fb3c:	e8 c4 06 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010fb41:	83 ec 0c             	sub    $0xc,%esp
f010fb44:	68 b8 85 13 f0       	push   $0xf01385b8
f010fb49:	e8 c0 11 ff ff       	call   f0100d0e <cprintf>
f010fb4e:	83 c4 10             	add    $0x10,%esp
}
f010fb51:	90                   	nop
f010fb52:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010fb55:	5b                   	pop    %ebx
f010fb56:	5e                   	pop    %esi
f010fb57:	5f                   	pop    %edi
f010fb58:	5d                   	pop    %ebp
f010fb59:	c3                   	ret    

f010fb5a <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010fb5a:	55                   	push   %ebp
f010fb5b:	89 e5                	mov    %esp,%ebp
f010fb5d:	57                   	push   %edi
f010fb5e:	56                   	push   %esi
f010fb5f:	53                   	push   %ebx
f010fb60:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010fb66:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010fb6d:	83 ec 0c             	sub    $0xc,%esp
f010fb70:	ff 75 e0             	pushl  -0x20(%ebp)
f010fb73:	e8 f7 29 02 00       	call   f013256f <initialize_MemBlocksList>
f010fb78:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010fb7b:	c7 05 c4 f6 85 f0 00 	movl   $0x0,0xf085f6c4
f010fb82:	00 00 00 
f010fb85:	c7 05 c8 f6 85 f0 00 	movl   $0x0,0xf085f6c8
f010fb8c:	00 00 00 
f010fb8f:	c7 05 d0 f6 85 f0 00 	movl   $0x0,0xf085f6d0
f010fb96:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010fb99:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fb9c:	bb 34 88 13 f0       	mov    $0xf0138834,%ebx
f010fba1:	ba 07 00 00 00       	mov    $0x7,%edx
f010fba6:	89 c7                	mov    %eax,%edi
f010fba8:	89 de                	mov    %ebx,%esi
f010fbaa:	89 d1                	mov    %edx,%ecx
f010fbac:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010fbae:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fbb1:	bb 50 88 13 f0       	mov    $0xf0138850,%ebx
f010fbb6:	ba 07 00 00 00       	mov    $0x7,%edx
f010fbbb:	89 c7                	mov    %eax,%edi
f010fbbd:	89 de                	mov    %ebx,%esi
f010fbbf:	89 d1                	mov    %edx,%ecx
f010fbc1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010fbc3:	c7 05 60 f7 85 f0 00 	movl   $0x0,0xf085f760
f010fbca:	00 00 00 
f010fbcd:	c7 05 64 f7 85 f0 00 	movl   $0x0,0xf085f764
f010fbd4:	00 00 00 
f010fbd7:	c7 05 6c f7 85 f0 00 	movl   $0x0,0xf085f76c
f010fbde:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fbe1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010fbe8:	e9 5f 01 00 00       	jmp    f010fd4c <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010fbed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fbf0:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010fbf4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fbf7:	c1 e2 04             	shl    $0x4,%edx
f010fbfa:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fbfd:	01 da                	add    %ebx,%edx
f010fbff:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010fc05:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010fc07:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc0a:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010fc0e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc11:	c1 e2 04             	shl    $0x4,%edx
f010fc14:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fc17:	01 f2                	add    %esi,%edx
f010fc19:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010fc1f:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010fc21:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010fc25:	0f 85 92 00 00 00    	jne    f010fcbd <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010fc2b:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f010fc30:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc33:	c1 e2 04             	shl    $0x4,%edx
f010fc36:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fc39:	01 fa                	add    %edi,%edx
f010fc3b:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010fc41:	89 02                	mov    %eax,(%edx)
f010fc43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc46:	c1 e0 04             	shl    $0x4,%eax
f010fc49:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fc4c:	01 d8                	add    %ebx,%eax
f010fc4e:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fc53:	8b 00                	mov    (%eax),%eax
f010fc55:	85 c0                	test   %eax,%eax
f010fc57:	74 18                	je     f010fc71 <test_alloc_block_BF+0x117>
f010fc59:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f010fc5e:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fc64:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fc67:	c1 e1 04             	shl    $0x4,%ecx
f010fc6a:	01 ca                	add    %ecx,%edx
f010fc6c:	89 50 04             	mov    %edx,0x4(%eax)
f010fc6f:	eb 13                	jmp    f010fc84 <test_alloc_block_BF+0x12a>
f010fc71:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fc77:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc7a:	c1 e2 04             	shl    $0x4,%edx
f010fc7d:	01 d0                	add    %edx,%eax
f010fc7f:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f010fc84:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fc8a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fc8d:	c1 e2 04             	shl    $0x4,%edx
f010fc90:	01 d0                	add    %edx,%eax
f010fc92:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f010fc97:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc9a:	c1 e0 04             	shl    $0x4,%eax
f010fc9d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fca0:	01 f0                	add    %esi,%eax
f010fca2:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fca7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fcad:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010fcb2:	40                   	inc    %eax
f010fcb3:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
f010fcb8:	e9 8c 00 00 00       	jmp    f010fd49 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010fcbd:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f010fcc2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fcc5:	c1 e2 04             	shl    $0x4,%edx
f010fcc8:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010fccb:	01 fa                	add    %edi,%edx
f010fccd:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010fcd3:	89 02                	mov    %eax,(%edx)
f010fcd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcd8:	c1 e0 04             	shl    $0x4,%eax
f010fcdb:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010fcde:	01 d8                	add    %ebx,%eax
f010fce0:	2d b8 00 00 00       	sub    $0xb8,%eax
f010fce5:	8b 00                	mov    (%eax),%eax
f010fce7:	85 c0                	test   %eax,%eax
f010fce9:	74 17                	je     f010fd02 <test_alloc_block_BF+0x1a8>
f010fceb:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f010fcf0:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010fcf6:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010fcf9:	c1 e1 04             	shl    $0x4,%ecx
f010fcfc:	01 ca                	add    %ecx,%edx
f010fcfe:	89 10                	mov    %edx,(%eax)
f010fd00:	eb 13                	jmp    f010fd15 <test_alloc_block_BF+0x1bb>
f010fd02:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fd08:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd0b:	c1 e2 04             	shl    $0x4,%edx
f010fd0e:	01 d0                	add    %edx,%eax
f010fd10:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f010fd15:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010fd1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010fd1e:	c1 e2 04             	shl    $0x4,%edx
f010fd21:	01 d0                	add    %edx,%eax
f010fd23:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f010fd28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd2b:	c1 e0 04             	shl    $0x4,%eax
f010fd2e:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010fd31:	01 f0                	add    %esi,%eax
f010fd33:	2d bc 00 00 00       	sub    $0xbc,%eax
f010fd38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010fd3e:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010fd43:	40                   	inc    %eax
f010fd44:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010fd49:	ff 45 e4             	incl   -0x1c(%ebp)
f010fd4c:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010fd50:	0f 8e 97 fe ff ff    	jle    f010fbed <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010fd56:	83 ec 0c             	sub    $0xc,%esp
f010fd59:	68 00 00 40 00       	push   $0x400000
f010fd5e:	e8 51 2e 02 00       	call   f0132bb4 <alloc_block_BF>
f010fd63:	83 c4 10             	add    $0x10,%esp
f010fd66:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010fd69:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fd6d:	74 17                	je     f010fd86 <test_alloc_block_BF+0x22c>
f010fd6f:	83 ec 04             	sub    $0x4,%esp
f010fd72:	68 40 86 13 f0       	push   $0xf0138640
f010fd77:	68 66 01 00 00       	push   $0x166
f010fd7c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fd81:	e8 7f 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fd86:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010fd8b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fd8e:	75 13                	jne    f010fda3 <test_alloc_block_BF+0x249>
f010fd90:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010fd95:	83 f8 07             	cmp    $0x7,%eax
f010fd98:	75 09                	jne    f010fda3 <test_alloc_block_BF+0x249>
f010fd9a:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010fd9f:	85 c0                	test   %eax,%eax
f010fda1:	74 17                	je     f010fdba <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010fda3:	83 ec 04             	sub    $0x4,%esp
f010fda6:	68 00 84 13 f0       	push   $0xf0138400
f010fdab:	68 6a 01 00 00       	push   $0x16a
f010fdb0:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fdb5:	e8 4b 04 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010fdba:	83 ec 0c             	sub    $0xc,%esp
f010fdbd:	68 00 00 10 00       	push   $0x100000
f010fdc2:	e8 ed 2d 02 00       	call   f0132bb4 <alloc_block_BF>
f010fdc7:	83 c4 10             	add    $0x10,%esp
f010fdca:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010fdcd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fdd1:	74 1a                	je     f010fded <test_alloc_block_BF+0x293>
f010fdd3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdd6:	8b 40 0c             	mov    0xc(%eax),%eax
f010fdd9:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fdde:	75 0d                	jne    f010fded <test_alloc_block_BF+0x293>
f010fde0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fde3:	8b 40 08             	mov    0x8(%eax),%eax
f010fde6:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010fdeb:	74 17                	je     f010fe04 <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fded:	83 ec 04             	sub    $0x4,%esp
f010fdf0:	68 b4 86 13 f0       	push   $0xf01386b4
f010fdf5:	68 72 01 00 00       	push   $0x172
f010fdfa:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fdff:	e8 01 04 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010fe04:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010fe09:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010fe0c:	75 13                	jne    f010fe21 <test_alloc_block_BF+0x2c7>
f010fe0e:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010fe13:	83 f8 06             	cmp    $0x6,%eax
f010fe16:	75 09                	jne    f010fe21 <test_alloc_block_BF+0x2c7>
f010fe18:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010fe1d:	85 c0                	test   %eax,%eax
f010fe1f:	74 17                	je     f010fe38 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe21:	83 ec 04             	sub    $0x4,%esp
f010fe24:	68 f8 86 13 f0       	push   $0xf01386f8
f010fe29:	68 76 01 00 00       	push   $0x176
f010fe2e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fe33:	e8 cd 03 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010fe38:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010fe3f:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010fe42:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010fe49:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010fe50:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010fe57:	83 ec 0c             	sub    $0xc,%esp
f010fe5a:	ff 75 d8             	pushl  -0x28(%ebp)
f010fe5d:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010fe63:	50                   	push   %eax
f010fe64:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010fe67:	50                   	push   %eax
f010fe68:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010fe6b:	50                   	push   %eax
f010fe6c:	68 60 f7 85 f0       	push   $0xf085f760
f010fe71:	e8 dd 17 00 00       	call   f0111653 <check_list_data>
f010fe76:	83 c4 20             	add    $0x20,%esp
f010fe79:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010fe7c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010fe80:	74 17                	je     f010fe99 <test_alloc_block_BF+0x33f>
f010fe82:	83 ec 04             	sub    $0x4,%esp
f010fe85:	68 5c 87 13 f0       	push   $0xf013875c
f010fe8a:	68 7e 01 00 00       	push   $0x17e
f010fe8f:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010fe94:	e8 6c 03 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010fe99:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010fe9f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010fea2:	74 17                	je     f010febb <test_alloc_block_BF+0x361>
f010fea4:	83 ec 04             	sub    $0x4,%esp
f010fea7:	68 a8 87 13 f0       	push   $0xf01387a8
f010feac:	68 7f 01 00 00       	push   $0x17f
f010feb1:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010feb6:	e8 4a 03 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010febb:	83 ec 0c             	sub    $0xc,%esp
f010febe:	68 00 00 10 00       	push   $0x100000
f010fec3:	e8 ec 2c 02 00       	call   f0132bb4 <alloc_block_BF>
f010fec8:	83 c4 10             	add    $0x10,%esp
f010fecb:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010fece:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010fed2:	74 1a                	je     f010feee <test_alloc_block_BF+0x394>
f010fed4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fed7:	8b 40 0c             	mov    0xc(%eax),%eax
f010feda:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010fedf:	75 0d                	jne    f010feee <test_alloc_block_BF+0x394>
f010fee1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fee4:	8b 40 08             	mov    0x8(%eax),%eax
f010fee7:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010feec:	74 17                	je     f010ff05 <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010feee:	83 ec 04             	sub    $0x4,%esp
f010fef1:	68 b4 86 13 f0       	push   $0xf01386b4
f010fef6:	68 87 01 00 00       	push   $0x187
f010fefb:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ff00:	e8 00 03 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ff05:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f010ff0a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ff0d:	4a                   	dec    %edx
f010ff0e:	39 d0                	cmp    %edx,%eax
f010ff10:	75 13                	jne    f010ff25 <test_alloc_block_BF+0x3cb>
f010ff12:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f010ff17:	83 f8 06             	cmp    $0x6,%eax
f010ff1a:	75 09                	jne    f010ff25 <test_alloc_block_BF+0x3cb>
f010ff1c:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f010ff21:	85 c0                	test   %eax,%eax
f010ff23:	74 17                	je     f010ff3c <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ff25:	83 ec 04             	sub    $0x4,%esp
f010ff28:	68 f8 86 13 f0       	push   $0xf01386f8
f010ff2d:	68 8b 01 00 00       	push   $0x18b
f010ff32:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ff37:	e8 c9 02 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ff3c:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ff43:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010ff46:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010ff4d:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010ff54:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ff5b:	83 ec 0c             	sub    $0xc,%esp
f010ff5e:	ff 75 d8             	pushl  -0x28(%ebp)
f010ff61:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ff67:	50                   	push   %eax
f010ff68:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ff6b:	50                   	push   %eax
f010ff6c:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010ff6f:	50                   	push   %eax
f010ff70:	68 60 f7 85 f0       	push   $0xf085f760
f010ff75:	e8 d9 16 00 00       	call   f0111653 <check_list_data>
f010ff7a:	83 c4 20             	add    $0x20,%esp
f010ff7d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010ff80:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ff84:	74 17                	je     f010ff9d <test_alloc_block_BF+0x443>
f010ff86:	83 ec 04             	sub    $0x4,%esp
f010ff89:	68 5c 87 13 f0       	push   $0xf013875c
f010ff8e:	68 93 01 00 00       	push   $0x193
f010ff93:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ff98:	e8 68 02 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010ff9d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ffa3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ffa6:	74 17                	je     f010ffbf <test_alloc_block_BF+0x465>
f010ffa8:	83 ec 04             	sub    $0x4,%esp
f010ffab:	68 a8 87 13 f0       	push   $0xf01387a8
f010ffb0:	68 94 01 00 00       	push   $0x194
f010ffb5:	68 d4 7e 13 f0       	push   $0xf0137ed4
f010ffba:	e8 46 02 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010ffbf:	83 ec 0c             	sub    $0xc,%esp
f010ffc2:	68 00 0c 00 00       	push   $0xc00
f010ffc7:	e8 e8 2b 02 00       	call   f0132bb4 <alloc_block_BF>
f010ffcc:	83 c4 10             	add    $0x10,%esp
f010ffcf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010ffd2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ffd6:	74 1a                	je     f010fff2 <test_alloc_block_BF+0x498>
f010ffd8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffdb:	8b 40 0c             	mov    0xc(%eax),%eax
f010ffde:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010ffe3:	75 0d                	jne    f010fff2 <test_alloc_block_BF+0x498>
f010ffe5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ffe8:	8b 40 08             	mov    0x8(%eax),%eax
f010ffeb:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010fff0:	74 17                	je     f0110009 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010fff2:	83 ec 04             	sub    $0x4,%esp
f010fff5:	68 b4 86 13 f0       	push   $0xf01386b4
f010fffa:	68 9c 01 00 00       	push   $0x19c
f010ffff:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110004:	e8 fc 01 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110009:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f011000e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110011:	83 ea 02             	sub    $0x2,%edx
f0110014:	39 d0                	cmp    %edx,%eax
f0110016:	75 13                	jne    f011002b <test_alloc_block_BF+0x4d1>
f0110018:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f011001d:	83 f8 06             	cmp    $0x6,%eax
f0110020:	75 09                	jne    f011002b <test_alloc_block_BF+0x4d1>
f0110022:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0110027:	85 c0                	test   %eax,%eax
f0110029:	74 17                	je     f0110042 <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011002b:	83 ec 04             	sub    $0x4,%esp
f011002e:	68 f8 86 13 f0       	push   $0xf01386f8
f0110033:	68 a0 01 00 00       	push   $0x1a0
f0110038:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011003d:	e8 c3 01 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110042:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0110049:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f011004c:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f0110053:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f011005a:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110061:	83 ec 0c             	sub    $0xc,%esp
f0110064:	ff 75 d8             	pushl  -0x28(%ebp)
f0110067:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f011006d:	50                   	push   %eax
f011006e:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0110071:	50                   	push   %eax
f0110072:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0110075:	50                   	push   %eax
f0110076:	68 60 f7 85 f0       	push   $0xf085f760
f011007b:	e8 d3 15 00 00       	call   f0111653 <check_list_data>
f0110080:	83 c4 20             	add    $0x20,%esp
f0110083:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f0110086:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011008a:	74 17                	je     f01100a3 <test_alloc_block_BF+0x549>
f011008c:	83 ec 04             	sub    $0x4,%esp
f011008f:	68 5c 87 13 f0       	push   $0xf013875c
f0110094:	68 a8 01 00 00       	push   $0x1a8
f0110099:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011009e:	e8 62 01 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f01100a3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01100a9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01100ac:	74 17                	je     f01100c5 <test_alloc_block_BF+0x56b>
f01100ae:	83 ec 04             	sub    $0x4,%esp
f01100b1:	68 a8 87 13 f0       	push   $0xf01387a8
f01100b6:	68 a9 01 00 00       	push   $0x1a9
f01100bb:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01100c0:	e8 40 01 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f01100c5:	83 ec 0c             	sub    $0xc,%esp
f01100c8:	68 00 08 00 00       	push   $0x800
f01100cd:	e8 e2 2a 02 00       	call   f0132bb4 <alloc_block_BF>
f01100d2:	83 c4 10             	add    $0x10,%esp
f01100d5:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f01100d8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01100dc:	74 17                	je     f01100f5 <test_alloc_block_BF+0x59b>
f01100de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100e1:	8b 40 0c             	mov    0xc(%eax),%eax
f01100e4:	3d 00 08 00 00       	cmp    $0x800,%eax
f01100e9:	75 0a                	jne    f01100f5 <test_alloc_block_BF+0x59b>
f01100eb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01100ee:	8b 40 08             	mov    0x8(%eax),%eax
f01100f1:	85 c0                	test   %eax,%eax
f01100f3:	74 17                	je     f011010c <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f01100f5:	83 ec 04             	sub    $0x4,%esp
f01100f8:	68 b4 86 13 f0       	push   $0xf01386b4
f01100fd:	68 b1 01 00 00       	push   $0x1b1
f0110102:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110107:	e8 f9 00 ff ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011010c:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110111:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110114:	83 ea 02             	sub    $0x2,%edx
f0110117:	39 d0                	cmp    %edx,%eax
f0110119:	75 13                	jne    f011012e <test_alloc_block_BF+0x5d4>
f011011b:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0110120:	83 f8 05             	cmp    $0x5,%eax
f0110123:	75 09                	jne    f011012e <test_alloc_block_BF+0x5d4>
f0110125:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f011012a:	85 c0                	test   %eax,%eax
f011012c:	74 17                	je     f0110145 <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f011012e:	83 ec 04             	sub    $0x4,%esp
f0110131:	68 f8 86 13 f0       	push   $0xf01386f8
f0110136:	68 b5 01 00 00       	push   $0x1b5
f011013b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110140:	e8 c0 00 ff ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f0110145:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f011014c:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f011014f:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f0110156:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f011015d:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f0110164:	83 ec 0c             	sub    $0xc,%esp
f0110167:	ff 75 d8             	pushl  -0x28(%ebp)
f011016a:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0110170:	50                   	push   %eax
f0110171:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0110174:	50                   	push   %eax
f0110175:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0110178:	50                   	push   %eax
f0110179:	68 60 f7 85 f0       	push   $0xf085f760
f011017e:	e8 d0 14 00 00       	call   f0111653 <check_list_data>
f0110183:	83 c4 20             	add    $0x20,%esp
f0110186:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f0110189:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011018d:	74 17                	je     f01101a6 <test_alloc_block_BF+0x64c>
f011018f:	83 ec 04             	sub    $0x4,%esp
f0110192:	68 5c 87 13 f0       	push   $0xf013875c
f0110197:	68 bd 01 00 00       	push   $0x1bd
f011019c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01101a1:	e8 5f 00 ff ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f01101a6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01101ac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01101af:	74 17                	je     f01101c8 <test_alloc_block_BF+0x66e>
f01101b1:	83 ec 04             	sub    $0x4,%esp
f01101b4:	68 a8 87 13 f0       	push   $0xf01387a8
f01101b9:	68 be 01 00 00       	push   $0x1be
f01101be:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01101c3:	e8 3d 00 ff ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f01101c8:	83 ec 0c             	sub    $0xc,%esp
f01101cb:	68 f4 87 13 f0       	push   $0xf01387f4
f01101d0:	e8 39 0b ff ff       	call   f0100d0e <cprintf>
f01101d5:	83 c4 10             	add    $0x10,%esp
}
f01101d8:	90                   	nop
f01101d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01101dc:	5b                   	pop    %ebx
f01101dd:	5e                   	pop    %esi
f01101de:	5f                   	pop    %edi
f01101df:	5d                   	pop    %ebp
f01101e0:	c3                   	ret    

f01101e1 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f01101e1:	55                   	push   %ebp
f01101e2:	89 e5                	mov    %esp,%ebp
f01101e4:	57                   	push   %edi
f01101e5:	56                   	push   %esi
f01101e6:	53                   	push   %ebx
f01101e7:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f01101ed:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f01101f4:	83 ec 0c             	sub    $0xc,%esp
f01101f7:	ff 75 e0             	pushl  -0x20(%ebp)
f01101fa:	e8 70 23 02 00       	call   f013256f <initialize_MemBlocksList>
f01101ff:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110202:	c7 05 c4 f6 85 f0 00 	movl   $0x0,0xf085f6c4
f0110209:	00 00 00 
f011020c:	c7 05 c8 f6 85 f0 00 	movl   $0x0,0xf085f6c8
f0110213:	00 00 00 
f0110216:	c7 05 d0 f6 85 f0 00 	movl   $0x0,0xf085f6d0
f011021d:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f0110220:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110223:	bb 00 86 13 f0       	mov    $0xf0138600,%ebx
f0110228:	ba 08 00 00 00       	mov    $0x8,%edx
f011022d:	89 c7                	mov    %eax,%edi
f011022f:	89 de                	mov    %ebx,%esi
f0110231:	89 d1                	mov    %edx,%ecx
f0110233:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f0110235:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110238:	bb 60 8a 13 f0       	mov    $0xf0138a60,%ebx
f011023d:	ba 08 00 00 00       	mov    $0x8,%edx
f0110242:	89 c7                	mov    %eax,%edi
f0110244:	89 de                	mov    %ebx,%esi
f0110246:	89 d1                	mov    %edx,%ecx
f0110248:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f011024a:	c7 05 60 f7 85 f0 00 	movl   $0x0,0xf085f760
f0110251:	00 00 00 
f0110254:	c7 05 64 f7 85 f0 00 	movl   $0x0,0xf085f764
f011025b:	00 00 00 
f011025e:	c7 05 6c f7 85 f0 00 	movl   $0x0,0xf085f76c
f0110265:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f0110268:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011026f:	e9 5f 01 00 00       	jmp    f01103d3 <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f0110274:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110277:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f011027b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011027e:	c1 e2 04             	shl    $0x4,%edx
f0110281:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f0110284:	01 da                	add    %ebx,%edx
f0110286:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f011028c:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f011028e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110291:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f0110295:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110298:	c1 e2 04             	shl    $0x4,%edx
f011029b:	8d 75 e8             	lea    -0x18(%ebp),%esi
f011029e:	01 f2                	add    %esi,%edx
f01102a0:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f01102a6:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f01102a8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01102ac:	0f 85 92 00 00 00    	jne    f0110344 <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f01102b2:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f01102b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01102ba:	c1 e2 04             	shl    $0x4,%edx
f01102bd:	8d 7d e8             	lea    -0x18(%ebp),%edi
f01102c0:	01 fa                	add    %edi,%edx
f01102c2:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f01102c8:	89 02                	mov    %eax,(%edx)
f01102ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01102cd:	c1 e0 04             	shl    $0x4,%eax
f01102d0:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f01102d3:	01 d8                	add    %ebx,%eax
f01102d5:	2d d4 00 00 00       	sub    $0xd4,%eax
f01102da:	8b 00                	mov    (%eax),%eax
f01102dc:	85 c0                	test   %eax,%eax
f01102de:	74 18                	je     f01102f8 <test_alloc_block_NF+0x117>
f01102e0:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f01102e5:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f01102eb:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f01102ee:	c1 e1 04             	shl    $0x4,%ecx
f01102f1:	01 ca                	add    %ecx,%edx
f01102f3:	89 50 04             	mov    %edx,0x4(%eax)
f01102f6:	eb 13                	jmp    f011030b <test_alloc_block_NF+0x12a>
f01102f8:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01102fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110301:	c1 e2 04             	shl    $0x4,%edx
f0110304:	01 d0                	add    %edx,%eax
f0110306:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f011030b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f0110311:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110314:	c1 e2 04             	shl    $0x4,%edx
f0110317:	01 d0                	add    %edx,%eax
f0110319:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f011031e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110321:	c1 e0 04             	shl    $0x4,%eax
f0110324:	8d 75 e8             	lea    -0x18(%ebp),%esi
f0110327:	01 f0                	add    %esi,%eax
f0110329:	2d d0 00 00 00       	sub    $0xd0,%eax
f011032e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0110334:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0110339:	40                   	inc    %eax
f011033a:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
f011033f:	e9 8c 00 00 00       	jmp    f01103d0 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f0110344:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f0110349:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011034c:	c1 e2 04             	shl    $0x4,%edx
f011034f:	8d 7d e8             	lea    -0x18(%ebp),%edi
f0110352:	01 fa                	add    %edi,%edx
f0110354:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f011035a:	89 02                	mov    %eax,(%edx)
f011035c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011035f:	c1 e0 04             	shl    $0x4,%eax
f0110362:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f0110365:	01 d8                	add    %ebx,%eax
f0110367:	2d d0 00 00 00       	sub    $0xd0,%eax
f011036c:	8b 00                	mov    (%eax),%eax
f011036e:	85 c0                	test   %eax,%eax
f0110370:	74 17                	je     f0110389 <test_alloc_block_NF+0x1a8>
f0110372:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f0110377:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f011037d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f0110380:	c1 e1 04             	shl    $0x4,%ecx
f0110383:	01 ca                	add    %ecx,%edx
f0110385:	89 10                	mov    %edx,(%eax)
f0110387:	eb 13                	jmp    f011039c <test_alloc_block_NF+0x1bb>
f0110389:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011038f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110392:	c1 e2 04             	shl    $0x4,%edx
f0110395:	01 d0                	add    %edx,%eax
f0110397:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f011039c:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f01103a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01103a5:	c1 e2 04             	shl    $0x4,%edx
f01103a8:	01 d0                	add    %edx,%eax
f01103aa:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f01103af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01103b2:	c1 e0 04             	shl    $0x4,%eax
f01103b5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f01103b8:	01 f0                	add    %esi,%eax
f01103ba:	2d d4 00 00 00       	sub    $0xd4,%eax
f01103bf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01103c5:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01103ca:	40                   	inc    %eax
f01103cb:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f01103d0:	ff 45 e4             	incl   -0x1c(%ebp)
f01103d3:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f01103d7:	0f 8e 97 fe ff ff    	jle    f0110274 <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f01103dd:	83 ec 0c             	sub    $0xc,%esp
f01103e0:	68 00 00 a0 00       	push   $0xa00000
f01103e5:	e8 cd 29 02 00       	call   f0132db7 <alloc_block_NF>
f01103ea:	83 c4 10             	add    $0x10,%esp
f01103ed:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f01103f0:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01103f4:	74 17                	je     f011040d <test_alloc_block_NF+0x22c>
f01103f6:	83 ec 04             	sub    $0x4,%esp
f01103f9:	68 6c 88 13 f0       	push   $0xf013886c
f01103fe:	68 e1 01 00 00       	push   $0x1e1
f0110403:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110408:	e8 f8 fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011040d:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110412:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110415:	75 13                	jne    f011042a <test_alloc_block_NF+0x249>
f0110417:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f011041c:	83 f8 08             	cmp    $0x8,%eax
f011041f:	75 09                	jne    f011042a <test_alloc_block_NF+0x249>
f0110421:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0110426:	85 c0                	test   %eax,%eax
f0110428:	74 17                	je     f0110441 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f011042a:	83 ec 04             	sub    $0x4,%esp
f011042d:	68 00 84 13 f0       	push   $0xf0138400
f0110432:	68 e5 01 00 00       	push   $0x1e5
f0110437:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011043c:	e8 c4 fd fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f0110441:	83 ec 0c             	sub    $0xc,%esp
f0110444:	68 00 28 00 00       	push   $0x2800
f0110449:	e8 69 29 02 00       	call   f0132db7 <alloc_block_NF>
f011044e:	83 c4 10             	add    $0x10,%esp
f0110451:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f0110454:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110458:	74 1a                	je     f0110474 <test_alloc_block_NF+0x293>
f011045a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011045d:	8b 40 0c             	mov    0xc(%eax),%eax
f0110460:	3d 00 28 00 00       	cmp    $0x2800,%eax
f0110465:	75 0d                	jne    f0110474 <test_alloc_block_NF+0x293>
f0110467:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011046a:	8b 40 08             	mov    0x8(%eax),%eax
f011046d:	3d 00 70 00 00       	cmp    $0x7000,%eax
f0110472:	74 17                	je     f011048b <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110474:	83 ec 04             	sub    $0x4,%esp
f0110477:	68 e0 88 13 f0       	push   $0xf01388e0
f011047c:	68 ed 01 00 00       	push   $0x1ed
f0110481:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110486:	e8 7a fd fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011048b:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110490:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110493:	75 13                	jne    f01104a8 <test_alloc_block_NF+0x2c7>
f0110495:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f011049a:	83 f8 07             	cmp    $0x7,%eax
f011049d:	75 09                	jne    f01104a8 <test_alloc_block_NF+0x2c7>
f011049f:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01104a4:	85 c0                	test   %eax,%eax
f01104a6:	74 17                	je     f01104bf <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01104a8:	83 ec 04             	sub    $0x4,%esp
f01104ab:	68 24 89 13 f0       	push   $0xf0138924
f01104b0:	68 f1 01 00 00       	push   $0x1f1
f01104b5:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01104ba:	e8 46 fd fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f01104bf:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01104c6:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f01104c9:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f01104d0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f01104d7:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01104de:	83 ec 0c             	sub    $0xc,%esp
f01104e1:	ff 75 d8             	pushl  -0x28(%ebp)
f01104e4:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01104ea:	50                   	push   %eax
f01104eb:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01104ee:	50                   	push   %eax
f01104ef:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01104f2:	50                   	push   %eax
f01104f3:	68 60 f7 85 f0       	push   $0xf085f760
f01104f8:	e8 56 11 00 00       	call   f0111653 <check_list_data>
f01104fd:	83 c4 20             	add    $0x20,%esp
f0110500:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110503:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110507:	74 17                	je     f0110520 <test_alloc_block_NF+0x33f>
f0110509:	83 ec 04             	sub    $0x4,%esp
f011050c:	68 88 89 13 f0       	push   $0xf0138988
f0110511:	68 f9 01 00 00       	push   $0x1f9
f0110516:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011051b:	e8 e5 fc fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110520:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110526:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110529:	74 17                	je     f0110542 <test_alloc_block_NF+0x361>
f011052b:	83 ec 04             	sub    $0x4,%esp
f011052e:	68 d4 89 13 f0       	push   $0xf01389d4
f0110533:	68 fa 01 00 00       	push   $0x1fa
f0110538:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011053d:	e8 c3 fc fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f0110542:	83 ec 0c             	sub    $0xc,%esp
f0110545:	68 00 00 20 00       	push   $0x200000
f011054a:	e8 68 28 02 00       	call   f0132db7 <alloc_block_NF>
f011054f:	83 c4 10             	add    $0x10,%esp
f0110552:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f0110555:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110559:	74 1a                	je     f0110575 <test_alloc_block_NF+0x394>
f011055b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011055e:	8b 40 0c             	mov    0xc(%eax),%eax
f0110561:	3d 00 00 20 00       	cmp    $0x200000,%eax
f0110566:	75 0d                	jne    f0110575 <test_alloc_block_NF+0x394>
f0110568:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011056b:	8b 40 08             	mov    0x8(%eax),%eax
f011056e:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f0110573:	74 17                	je     f011058c <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110575:	83 ec 04             	sub    $0x4,%esp
f0110578:	68 e0 88 13 f0       	push   $0xf01388e0
f011057d:	68 03 02 00 00       	push   $0x203
f0110582:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110587:	e8 79 fc fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011058c:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110591:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110594:	75 13                	jne    f01105a9 <test_alloc_block_NF+0x3c8>
f0110596:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f011059b:	83 f8 06             	cmp    $0x6,%eax
f011059e:	75 09                	jne    f01105a9 <test_alloc_block_NF+0x3c8>
f01105a0:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01105a5:	85 c0                	test   %eax,%eax
f01105a7:	74 17                	je     f01105c0 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01105a9:	83 ec 04             	sub    $0x4,%esp
f01105ac:	68 24 89 13 f0       	push   $0xf0138924
f01105b1:	68 07 02 00 00       	push   $0x207
f01105b6:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01105bb:	e8 45 fc fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01105c0:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01105c7:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01105ca:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f01105d1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f01105d8:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01105df:	83 ec 0c             	sub    $0xc,%esp
f01105e2:	ff 75 d8             	pushl  -0x28(%ebp)
f01105e5:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01105eb:	50                   	push   %eax
f01105ec:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01105ef:	50                   	push   %eax
f01105f0:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01105f3:	50                   	push   %eax
f01105f4:	68 60 f7 85 f0       	push   $0xf085f760
f01105f9:	e8 55 10 00 00       	call   f0111653 <check_list_data>
f01105fe:	83 c4 20             	add    $0x20,%esp
f0110601:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110604:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110608:	74 17                	je     f0110621 <test_alloc_block_NF+0x440>
f011060a:	83 ec 04             	sub    $0x4,%esp
f011060d:	68 88 89 13 f0       	push   $0xf0138988
f0110612:	68 0f 02 00 00       	push   $0x20f
f0110617:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011061c:	e8 e4 fb fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110621:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110627:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011062a:	74 17                	je     f0110643 <test_alloc_block_NF+0x462>
f011062c:	83 ec 04             	sub    $0x4,%esp
f011062f:	68 d4 89 13 f0       	push   $0xf01389d4
f0110634:	68 10 02 00 00       	push   $0x210
f0110639:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011063e:	e8 c2 fb fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f0110643:	83 ec 0c             	sub    $0xc,%esp
f0110646:	68 00 00 08 00       	push   $0x80000
f011064b:	e8 67 27 02 00       	call   f0132db7 <alloc_block_NF>
f0110650:	83 c4 10             	add    $0x10,%esp
f0110653:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f0110656:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011065a:	74 1a                	je     f0110676 <test_alloc_block_NF+0x495>
f011065c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011065f:	8b 40 0c             	mov    0xc(%eax),%eax
f0110662:	3d 00 00 08 00       	cmp    $0x80000,%eax
f0110667:	75 0d                	jne    f0110676 <test_alloc_block_NF+0x495>
f0110669:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011066c:	8b 40 08             	mov    0x8(%eax),%eax
f011066f:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f0110674:	74 17                	je     f011068d <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110676:	83 ec 04             	sub    $0x4,%esp
f0110679:	68 e0 88 13 f0       	push   $0xf01388e0
f011067e:	68 19 02 00 00       	push   $0x219
f0110683:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110688:	e8 78 fb fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011068d:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110692:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110695:	4a                   	dec    %edx
f0110696:	39 d0                	cmp    %edx,%eax
f0110698:	75 13                	jne    f01106ad <test_alloc_block_NF+0x4cc>
f011069a:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f011069f:	83 f8 06             	cmp    $0x6,%eax
f01106a2:	75 09                	jne    f01106ad <test_alloc_block_NF+0x4cc>
f01106a4:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01106a9:	85 c0                	test   %eax,%eax
f01106ab:	74 17                	je     f01106c4 <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01106ad:	83 ec 04             	sub    $0x4,%esp
f01106b0:	68 24 89 13 f0       	push   $0xf0138924
f01106b5:	68 1d 02 00 00       	push   $0x21d
f01106ba:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01106bf:	e8 41 fb fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01106c4:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01106cb:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01106ce:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f01106d5:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f01106dc:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01106e3:	83 ec 0c             	sub    $0xc,%esp
f01106e6:	ff 75 d8             	pushl  -0x28(%ebp)
f01106e9:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01106ef:	50                   	push   %eax
f01106f0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01106f3:	50                   	push   %eax
f01106f4:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01106f7:	50                   	push   %eax
f01106f8:	68 60 f7 85 f0       	push   $0xf085f760
f01106fd:	e8 51 0f 00 00       	call   f0111653 <check_list_data>
f0110702:	83 c4 20             	add    $0x20,%esp
f0110705:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110708:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f011070c:	74 17                	je     f0110725 <test_alloc_block_NF+0x544>
f011070e:	83 ec 04             	sub    $0x4,%esp
f0110711:	68 88 89 13 f0       	push   $0xf0138988
f0110716:	68 25 02 00 00       	push   $0x225
f011071b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110720:	e8 e0 fa fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110725:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011072b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011072e:	74 17                	je     f0110747 <test_alloc_block_NF+0x566>
f0110730:	83 ec 04             	sub    $0x4,%esp
f0110733:	68 d4 89 13 f0       	push   $0xf01389d4
f0110738:	68 26 02 00 00       	push   $0x226
f011073d:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110742:	e8 be fa fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f0110747:	83 ec 0c             	sub    $0xc,%esp
f011074a:	68 00 fc 07 00       	push   $0x7fc00
f011074f:	e8 63 26 02 00       	call   f0132db7 <alloc_block_NF>
f0110754:	83 c4 10             	add    $0x10,%esp
f0110757:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f011075a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011075e:	74 1a                	je     f011077a <test_alloc_block_NF+0x599>
f0110760:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110763:	8b 40 0c             	mov    0xc(%eax),%eax
f0110766:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f011076b:	75 0d                	jne    f011077a <test_alloc_block_NF+0x599>
f011076d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110770:	8b 40 08             	mov    0x8(%eax),%eax
f0110773:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f0110778:	74 17                	je     f0110791 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011077a:	83 ec 04             	sub    $0x4,%esp
f011077d:	68 e0 88 13 f0       	push   $0xf01388e0
f0110782:	68 2f 02 00 00       	push   $0x22f
f0110787:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011078c:	e8 74 fa fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110791:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110796:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0110799:	83 ea 02             	sub    $0x2,%edx
f011079c:	39 d0                	cmp    %edx,%eax
f011079e:	75 13                	jne    f01107b3 <test_alloc_block_NF+0x5d2>
f01107a0:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01107a5:	83 f8 06             	cmp    $0x6,%eax
f01107a8:	75 09                	jne    f01107b3 <test_alloc_block_NF+0x5d2>
f01107aa:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01107af:	85 c0                	test   %eax,%eax
f01107b1:	74 17                	je     f01107ca <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01107b3:	83 ec 04             	sub    $0x4,%esp
f01107b6:	68 24 89 13 f0       	push   $0xf0138924
f01107bb:	68 33 02 00 00       	push   $0x233
f01107c0:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01107c5:	e8 3b fa fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01107ca:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01107d1:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f01107d4:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f01107db:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f01107e2:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01107e9:	83 ec 0c             	sub    $0xc,%esp
f01107ec:	ff 75 d8             	pushl  -0x28(%ebp)
f01107ef:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01107f5:	50                   	push   %eax
f01107f6:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01107f9:	50                   	push   %eax
f01107fa:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01107fd:	50                   	push   %eax
f01107fe:	68 60 f7 85 f0       	push   $0xf085f760
f0110803:	e8 4b 0e 00 00       	call   f0111653 <check_list_data>
f0110808:	83 c4 20             	add    $0x20,%esp
f011080b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f011080e:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110812:	74 17                	je     f011082b <test_alloc_block_NF+0x64a>
f0110814:	83 ec 04             	sub    $0x4,%esp
f0110817:	68 88 89 13 f0       	push   $0xf0138988
f011081c:	68 3b 02 00 00       	push   $0x23b
f0110821:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110826:	e8 da f9 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f011082b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110831:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110834:	74 17                	je     f011084d <test_alloc_block_NF+0x66c>
f0110836:	83 ec 04             	sub    $0x4,%esp
f0110839:	68 d4 89 13 f0       	push   $0xf01389d4
f011083e:	68 3c 02 00 00       	push   $0x23c
f0110843:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110848:	e8 b8 f9 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f011084d:	83 ec 0c             	sub    $0xc,%esp
f0110850:	68 00 0c 00 00       	push   $0xc00
f0110855:	e8 5d 25 02 00       	call   f0132db7 <alloc_block_NF>
f011085a:	83 c4 10             	add    $0x10,%esp
f011085d:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f0110860:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110864:	74 17                	je     f011087d <test_alloc_block_NF+0x69c>
f0110866:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110869:	8b 40 0c             	mov    0xc(%eax),%eax
f011086c:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f0110871:	75 0a                	jne    f011087d <test_alloc_block_NF+0x69c>
f0110873:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110876:	8b 40 08             	mov    0x8(%eax),%eax
f0110879:	85 c0                	test   %eax,%eax
f011087b:	74 17                	je     f0110894 <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f011087d:	83 ec 04             	sub    $0x4,%esp
f0110880:	68 e0 88 13 f0       	push   $0xf01388e0
f0110885:	68 45 02 00 00       	push   $0x245
f011088a:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011088f:	e8 71 f9 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f0110894:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110899:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011089c:	83 ea 02             	sub    $0x2,%edx
f011089f:	39 d0                	cmp    %edx,%eax
f01108a1:	75 13                	jne    f01108b6 <test_alloc_block_NF+0x6d5>
f01108a3:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01108a8:	83 f8 05             	cmp    $0x5,%eax
f01108ab:	75 09                	jne    f01108b6 <test_alloc_block_NF+0x6d5>
f01108ad:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01108b2:	85 c0                	test   %eax,%eax
f01108b4:	74 17                	je     f01108cd <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01108b6:	83 ec 04             	sub    $0x4,%esp
f01108b9:	68 24 89 13 f0       	push   $0xf0138924
f01108be:	68 49 02 00 00       	push   $0x249
f01108c3:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01108c8:	e8 38 f9 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01108cd:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01108d4:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01108d7:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f01108de:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f01108e5:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01108ec:	83 ec 0c             	sub    $0xc,%esp
f01108ef:	ff 75 d8             	pushl  -0x28(%ebp)
f01108f2:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01108f8:	50                   	push   %eax
f01108f9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01108fc:	50                   	push   %eax
f01108fd:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110900:	50                   	push   %eax
f0110901:	68 60 f7 85 f0       	push   $0xf085f760
f0110906:	e8 48 0d 00 00       	call   f0111653 <check_list_data>
f011090b:	83 c4 20             	add    $0x20,%esp
f011090e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110911:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110915:	74 17                	je     f011092e <test_alloc_block_NF+0x74d>
f0110917:	83 ec 04             	sub    $0x4,%esp
f011091a:	68 88 89 13 f0       	push   $0xf0138988
f011091f:	68 51 02 00 00       	push   $0x251
f0110924:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110929:	e8 d7 f8 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f011092e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110934:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110937:	74 17                	je     f0110950 <test_alloc_block_NF+0x76f>
f0110939:	83 ec 04             	sub    $0x4,%esp
f011093c:	68 d4 89 13 f0       	push   $0xf01389d4
f0110941:	68 52 02 00 00       	push   $0x252
f0110946:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011094b:	e8 b5 f8 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f0110950:	83 ec 0c             	sub    $0xc,%esp
f0110953:	68 00 04 00 00       	push   $0x400
f0110958:	e8 5a 24 02 00       	call   f0132db7 <alloc_block_NF>
f011095d:	83 c4 10             	add    $0x10,%esp
f0110960:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f0110963:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0110967:	74 1a                	je     f0110983 <test_alloc_block_NF+0x7a2>
f0110969:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011096c:	8b 40 0c             	mov    0xc(%eax),%eax
f011096f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110974:	75 0d                	jne    f0110983 <test_alloc_block_NF+0x7a2>
f0110976:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110979:	8b 40 08             	mov    0x8(%eax),%eax
f011097c:	3d 00 20 00 00       	cmp    $0x2000,%eax
f0110981:	74 17                	je     f011099a <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f0110983:	83 ec 04             	sub    $0x4,%esp
f0110986:	68 e0 88 13 f0       	push   $0xf01388e0
f011098b:	68 5b 02 00 00       	push   $0x25b
f0110990:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110995:	e8 6b f8 fe ff       	call   f0100205 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f011099a:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f011099f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01109a2:	83 ea 03             	sub    $0x3,%edx
f01109a5:	39 d0                	cmp    %edx,%eax
f01109a7:	75 13                	jne    f01109bc <test_alloc_block_NF+0x7db>
f01109a9:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01109ae:	83 f8 05             	cmp    $0x5,%eax
f01109b1:	75 09                	jne    f01109bc <test_alloc_block_NF+0x7db>
f01109b3:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01109b8:	85 c0                	test   %eax,%eax
f01109ba:	74 17                	je     f01109d3 <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01109bc:	83 ec 04             	sub    $0x4,%esp
f01109bf:	68 24 89 13 f0       	push   $0xf0138924
f01109c4:	68 5f 02 00 00       	push   $0x25f
f01109c9:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01109ce:	e8 32 f8 fe ff       	call   f0100205 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f01109d3:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f01109da:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f01109dd:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f01109e4:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f01109eb:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f01109f2:	83 ec 0c             	sub    $0xc,%esp
f01109f5:	ff 75 d8             	pushl  -0x28(%ebp)
f01109f8:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f01109fe:	50                   	push   %eax
f01109ff:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110a02:	50                   	push   %eax
f0110a03:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0110a06:	50                   	push   %eax
f0110a07:	68 60 f7 85 f0       	push   $0xf085f760
f0110a0c:	e8 42 0c 00 00       	call   f0111653 <check_list_data>
f0110a11:	83 c4 20             	add    $0x20,%esp
f0110a14:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f0110a17:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f0110a1b:	74 17                	je     f0110a34 <test_alloc_block_NF+0x853>
f0110a1d:	83 ec 04             	sub    $0x4,%esp
f0110a20:	68 88 89 13 f0       	push   $0xf0138988
f0110a25:	68 67 02 00 00       	push   $0x267
f0110a2a:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110a2f:	e8 d1 f7 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f0110a34:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0110a3a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110a3d:	74 17                	je     f0110a56 <test_alloc_block_NF+0x875>
f0110a3f:	83 ec 04             	sub    $0x4,%esp
f0110a42:	68 d4 89 13 f0       	push   $0xf01389d4
f0110a47:	68 68 02 00 00       	push   $0x268
f0110a4c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110a51:	e8 af f7 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f0110a56:	83 ec 0c             	sub    $0xc,%esp
f0110a59:	68 20 8a 13 f0       	push   $0xf0138a20
f0110a5e:	e8 ab 02 ff ff       	call   f0100d0e <cprintf>
f0110a63:	83 c4 10             	add    $0x10,%esp

}
f0110a66:	90                   	nop
f0110a67:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110a6a:	5b                   	pop    %ebx
f0110a6b:	5e                   	pop    %esi
f0110a6c:	5f                   	pop    %edi
f0110a6d:	5d                   	pop    %ebp
f0110a6e:	c3                   	ret    

f0110a6f <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f0110a6f:	55                   	push   %ebp
f0110a70:	89 e5                	mov    %esp,%ebp
f0110a72:	57                   	push   %edi
f0110a73:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f0110a79:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f0110a80:	83 ec 0c             	sub    $0xc,%esp
f0110a83:	ff 75 f4             	pushl  -0xc(%ebp)
f0110a86:	e8 e4 1a 02 00       	call   f013256f <initialize_MemBlocksList>
f0110a8b:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f0110a8e:	c7 05 c4 f6 85 f0 00 	movl   $0x0,0xf085f6c4
f0110a95:	00 00 00 
f0110a98:	c7 05 c8 f6 85 f0 00 	movl   $0x0,0xf085f6c8
f0110a9f:	00 00 00 
f0110aa2:	c7 05 d0 f6 85 f0 00 	movl   $0x0,0xf085f6d0
f0110aa9:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f0110aac:	c7 05 60 f7 85 f0 00 	movl   $0x0,0xf085f760
f0110ab3:	00 00 00 
f0110ab6:	c7 05 64 f7 85 f0 00 	movl   $0x0,0xf085f764
f0110abd:	00 00 00 
f0110ac0:	c7 05 6c f7 85 f0 00 	movl   $0x0,0xf085f76c
f0110ac7:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f0110aca:	8d 55 c0             	lea    -0x40(%ebp),%edx
f0110acd:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110ad2:	b8 00 00 00 00       	mov    $0x0,%eax
f0110ad7:	89 d7                	mov    %edx,%edi
f0110ad9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f0110adb:	8d 55 98             	lea    -0x68(%ebp),%edx
f0110ade:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0110ae3:	b8 00 00 00 00       	mov    $0x0,%eax
f0110ae8:	89 d7                	mov    %edx,%edi
f0110aea:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f0110aec:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f0110af3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f0110afa:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f0110b01:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b04:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f0110b0b:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110b0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b0f:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110b16:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110b17:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b1a:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110b1e:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f0110b21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110b24:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110b28:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f0110b2b:	83 ec 0c             	sub    $0xc,%esp
f0110b2e:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0110b31:	50                   	push   %eax
f0110b32:	e8 9d 22 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f0110b37:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f0110b3a:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0110b3f:	85 c0                	test   %eax,%eax
f0110b41:	75 14                	jne    f0110b57 <test_insert_sorted_with_merge_freeList+0xe8>
f0110b43:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110b48:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110b4b:	75 0a                	jne    f0110b57 <test_insert_sorted_with_merge_freeList+0xe8>
f0110b4d:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0110b52:	83 f8 01             	cmp    $0x1,%eax
f0110b55:	74 17                	je     f0110b6e <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110b57:	83 ec 04             	sub    $0x4,%esp
f0110b5a:	68 80 8a 13 f0       	push   $0xf0138a80
f0110b5f:	68 88 02 00 00       	push   $0x288
f0110b64:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110b69:	e8 97 f6 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the free list content
	size = 0;
f0110b6e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f0110b75:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110b7c:	83 ec 0c             	sub    $0xc,%esp
f0110b7f:	ff 75 f0             	pushl  -0x10(%ebp)
f0110b82:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110b85:	50                   	push   %eax
f0110b86:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110b89:	50                   	push   %eax
f0110b8a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110b8d:	50                   	push   %eax
f0110b8e:	68 60 f7 85 f0       	push   $0xf085f760
f0110b93:	e8 bb 0a 00 00       	call   f0111653 <check_list_data>
f0110b98:	83 c4 20             	add    $0x20,%esp
f0110b9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110b9e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ba2:	74 17                	je     f0110bbb <test_insert_sorted_with_merge_freeList+0x14c>
f0110ba4:	83 ec 04             	sub    $0x4,%esp
f0110ba7:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110bac:	68 8e 02 00 00       	push   $0x28e
f0110bb1:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110bb6:	e8 4a f6 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110bbb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110bbe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110bc1:	74 17                	je     f0110bda <test_insert_sorted_with_merge_freeList+0x16b>
f0110bc3:	83 ec 04             	sub    $0x4,%esp
f0110bc6:	68 40 8b 13 f0       	push   $0xf0138b40
f0110bcb:	68 8f 02 00 00       	push   $0x28f
f0110bd0:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110bd5:	e8 2b f6 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f0110bda:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f0110be1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110be4:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f0110beb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f0110bec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bef:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f0110bf6:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110bf7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bfa:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110bfe:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f0110c04:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110c07:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110c0b:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f0110c0e:	83 ec 0c             	sub    $0xc,%esp
f0110c11:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110c17:	50                   	push   %eax
f0110c18:	e8 b7 21 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f0110c1d:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f0110c20:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0110c25:	85 c0                	test   %eax,%eax
f0110c27:	75 14                	jne    f0110c3d <test_insert_sorted_with_merge_freeList+0x1ce>
f0110c29:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110c2e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110c31:	75 0a                	jne    f0110c3d <test_insert_sorted_with_merge_freeList+0x1ce>
f0110c33:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0110c38:	83 f8 02             	cmp    $0x2,%eax
f0110c3b:	74 17                	je     f0110c54 <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110c3d:	83 ec 04             	sub    $0x4,%esp
f0110c40:	68 80 8a 13 f0       	push   $0xf0138a80
f0110c45:	68 9e 02 00 00       	push   $0x29e
f0110c4a:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110c4f:	e8 b1 f5 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110c54:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f0110c5b:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110c62:	83 ec 0c             	sub    $0xc,%esp
f0110c65:	ff 75 f0             	pushl  -0x10(%ebp)
f0110c68:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110c6b:	50                   	push   %eax
f0110c6c:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110c6f:	50                   	push   %eax
f0110c70:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110c73:	50                   	push   %eax
f0110c74:	68 60 f7 85 f0       	push   $0xf085f760
f0110c79:	e8 d5 09 00 00       	call   f0111653 <check_list_data>
f0110c7e:	83 c4 20             	add    $0x20,%esp
f0110c81:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110c84:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110c88:	74 17                	je     f0110ca1 <test_insert_sorted_with_merge_freeList+0x232>
f0110c8a:	83 ec 04             	sub    $0x4,%esp
f0110c8d:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110c92:	68 a4 02 00 00       	push   $0x2a4
f0110c97:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110c9c:	e8 64 f5 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110ca1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110ca4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110ca7:	74 17                	je     f0110cc0 <test_insert_sorted_with_merge_freeList+0x251>
f0110ca9:	83 ec 04             	sub    $0x4,%esp
f0110cac:	68 40 8b 13 f0       	push   $0xf0138b40
f0110cb1:	68 a5 02 00 00       	push   $0x2a5
f0110cb6:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110cbb:	e8 45 f5 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f0110cc0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f0110cc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cca:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f0110cd1:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0110cd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110cd5:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0110cdc:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110cdd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ce0:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110ce4:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f0110cea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ced:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110cf1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f0110cf7:	83 ec 0c             	sub    $0xc,%esp
f0110cfa:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0110d00:	50                   	push   %eax
f0110d01:	e8 ce 20 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f0110d06:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f0110d09:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0110d0e:	85 c0                	test   %eax,%eax
f0110d10:	75 14                	jne    f0110d26 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110d12:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110d17:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110d1a:	75 0a                	jne    f0110d26 <test_insert_sorted_with_merge_freeList+0x2b7>
f0110d1c:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0110d21:	83 f8 03             	cmp    $0x3,%eax
f0110d24:	74 17                	je     f0110d3d <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110d26:	83 ec 04             	sub    $0x4,%esp
f0110d29:	68 80 8a 13 f0       	push   $0xf0138a80
f0110d2e:	68 b4 02 00 00       	push   $0x2b4
f0110d33:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110d38:	e8 c8 f4 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110d3d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f0110d44:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110d4b:	83 ec 0c             	sub    $0xc,%esp
f0110d4e:	ff 75 f0             	pushl  -0x10(%ebp)
f0110d51:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110d54:	50                   	push   %eax
f0110d55:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110d58:	50                   	push   %eax
f0110d59:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110d5c:	50                   	push   %eax
f0110d5d:	68 60 f7 85 f0       	push   $0xf085f760
f0110d62:	e8 ec 08 00 00       	call   f0111653 <check_list_data>
f0110d67:	83 c4 20             	add    $0x20,%esp
f0110d6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110d6d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110d71:	74 17                	je     f0110d8a <test_insert_sorted_with_merge_freeList+0x31b>
f0110d73:	83 ec 04             	sub    $0x4,%esp
f0110d76:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110d7b:	68 ba 02 00 00       	push   $0x2ba
f0110d80:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110d85:	e8 7b f4 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110d8a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110d8d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110d90:	74 17                	je     f0110da9 <test_insert_sorted_with_merge_freeList+0x33a>
f0110d92:	83 ec 04             	sub    $0x4,%esp
f0110d95:	68 40 8b 13 f0       	push   $0xf0138b40
f0110d9a:	68 bb 02 00 00       	push   $0x2bb
f0110d9f:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110da4:	e8 5c f4 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f0110da9:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f0110db0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110db3:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f0110dba:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f0110dbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dbe:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0110dc5:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110dc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dc9:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110dcd:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f0110dd3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110dd6:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110dda:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f0110de0:	83 ec 0c             	sub    $0xc,%esp
f0110de3:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0110de9:	50                   	push   %eax
f0110dea:	e8 e5 1f 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f0110def:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110df2:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0110df7:	85 c0                	test   %eax,%eax
f0110df9:	75 14                	jne    f0110e0f <test_insert_sorted_with_merge_freeList+0x3a0>
f0110dfb:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110e00:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0110e03:	75 0a                	jne    f0110e0f <test_insert_sorted_with_merge_freeList+0x3a0>
f0110e05:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0110e0a:	83 f8 04             	cmp    $0x4,%eax
f0110e0d:	74 17                	je     f0110e26 <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110e0f:	83 ec 04             	sub    $0x4,%esp
f0110e12:	68 80 8a 13 f0       	push   $0xf0138a80
f0110e17:	68 ca 02 00 00       	push   $0x2ca
f0110e1c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110e21:	e8 df f3 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110e26:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110e2d:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110e34:	83 ec 0c             	sub    $0xc,%esp
f0110e37:	ff 75 f0             	pushl  -0x10(%ebp)
f0110e3a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110e3d:	50                   	push   %eax
f0110e3e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110e41:	50                   	push   %eax
f0110e42:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110e45:	50                   	push   %eax
f0110e46:	68 60 f7 85 f0       	push   $0xf085f760
f0110e4b:	e8 03 08 00 00       	call   f0111653 <check_list_data>
f0110e50:	83 c4 20             	add    $0x20,%esp
f0110e53:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110e56:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110e5a:	74 17                	je     f0110e73 <test_insert_sorted_with_merge_freeList+0x404>
f0110e5c:	83 ec 04             	sub    $0x4,%esp
f0110e5f:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110e64:	68 d0 02 00 00       	push   $0x2d0
f0110e69:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110e6e:	e8 92 f3 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110e73:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110e76:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110e79:	74 17                	je     f0110e92 <test_insert_sorted_with_merge_freeList+0x423>
f0110e7b:	83 ec 04             	sub    $0x4,%esp
f0110e7e:	68 40 8b 13 f0       	push   $0xf0138b40
f0110e83:	68 d1 02 00 00       	push   $0x2d1
f0110e88:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110e8d:	e8 73 f3 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f0110e92:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f0110e99:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110e9c:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f0110ea3:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f0110ea4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ea7:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f0110eae:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0110eaf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110eb2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0110eb6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f0110ebc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ebf:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110ec3:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f0110ec9:	83 ec 0c             	sub    $0xc,%esp
f0110ecc:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f0110ed2:	50                   	push   %eax
f0110ed3:	e8 fc 1e 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f0110ed8:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0110edb:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0110ee0:	85 c0                	test   %eax,%eax
f0110ee2:	75 17                	jne    f0110efb <test_insert_sorted_with_merge_freeList+0x48c>
f0110ee4:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0110ee9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110eec:	42                   	inc    %edx
f0110eed:	39 d0                	cmp    %edx,%eax
f0110eef:	75 0a                	jne    f0110efb <test_insert_sorted_with_merge_freeList+0x48c>
f0110ef1:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0110ef6:	83 f8 04             	cmp    $0x4,%eax
f0110ef9:	74 17                	je     f0110f12 <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0110efb:	83 ec 04             	sub    $0x4,%esp
f0110efe:	68 80 8a 13 f0       	push   $0xf0138a80
f0110f03:	68 e3 02 00 00       	push   $0x2e3
f0110f08:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110f0d:	e8 f3 f2 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0110f12:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0110f19:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0110f20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f23:	8d 50 ff             	lea    -0x1(%eax),%edx
f0110f26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f29:	48                   	dec    %eax
f0110f2a:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0110f2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f31:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0110f35:	01 c8                	add    %ecx,%eax
f0110f37:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0110f3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f3e:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0110f45:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0110f46:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110f49:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0110f50:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0110f51:	83 ec 0c             	sub    $0xc,%esp
f0110f54:	ff 75 f0             	pushl  -0x10(%ebp)
f0110f57:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110f5a:	50                   	push   %eax
f0110f5b:	8d 45 98             	lea    -0x68(%ebp),%eax
f0110f5e:	50                   	push   %eax
f0110f5f:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0110f62:	50                   	push   %eax
f0110f63:	68 60 f7 85 f0       	push   $0xf085f760
f0110f68:	e8 e6 06 00 00       	call   f0111653 <check_list_data>
f0110f6d:	83 c4 20             	add    $0x20,%esp
f0110f70:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0110f73:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110f77:	74 17                	je     f0110f90 <test_insert_sorted_with_merge_freeList+0x521>
f0110f79:	83 ec 04             	sub    $0x4,%esp
f0110f7c:	68 ec 8a 13 f0       	push   $0xf0138aec
f0110f81:	68 ec 02 00 00       	push   $0x2ec
f0110f86:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110f8b:	e8 75 f2 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0110f90:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110f93:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0110f96:	74 17                	je     f0110faf <test_insert_sorted_with_merge_freeList+0x540>
f0110f98:	83 ec 04             	sub    $0x4,%esp
f0110f9b:	68 40 8b 13 f0       	push   $0xf0138b40
f0110fa0:	68 ed 02 00 00       	push   $0x2ed
f0110fa5:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110faa:	e8 56 f2 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0110faf:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0110fb6:	83 ec 0c             	sub    $0xc,%esp
f0110fb9:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0110fbc:	50                   	push   %eax
f0110fbd:	e8 5d 07 00 00       	call   f011171f <check_avaliable_list_data>
f0110fc2:	83 c4 10             	add    $0x10,%esp
f0110fc5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0110fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0110fcb:	8d 50 01             	lea    0x1(%eax),%edx
f0110fce:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0110fd1:	39 c2                	cmp    %eax,%edx
f0110fd3:	74 17                	je     f0110fec <test_insert_sorted_with_merge_freeList+0x57d>
f0110fd5:	83 ec 04             	sub    $0x4,%esp
f0110fd8:	68 94 8b 13 f0       	push   $0xf0138b94
f0110fdd:	68 f2 02 00 00       	push   $0x2f2
f0110fe2:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0110fe7:	e8 19 f2 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0110fec:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110ff0:	74 17                	je     f0111009 <test_insert_sorted_with_merge_freeList+0x59a>
f0110ff2:	83 ec 04             	sub    $0x4,%esp
f0110ff5:	68 ec 8b 13 f0       	push   $0xf0138bec
f0110ffa:	68 f3 02 00 00       	push   $0x2f3
f0110fff:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111004:	e8 fc f1 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f0111009:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f0111010:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111013:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f011101a:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f011101b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011101e:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f0111025:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111026:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111029:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011102d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f0111033:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111036:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011103a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f0111040:	83 ec 0c             	sub    $0xc,%esp
f0111043:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0111049:	50                   	push   %eax
f011104a:	e8 85 1d 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f011104f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0111052:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0111057:	85 c0                	test   %eax,%eax
f0111059:	75 19                	jne    f0111074 <test_insert_sorted_with_merge_freeList+0x605>
f011105b:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0111060:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111063:	83 c2 02             	add    $0x2,%edx
f0111066:	39 d0                	cmp    %edx,%eax
f0111068:	75 0a                	jne    f0111074 <test_insert_sorted_with_merge_freeList+0x605>
f011106a:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f011106f:	83 f8 04             	cmp    $0x4,%eax
f0111072:	74 17                	je     f011108b <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111074:	83 ec 04             	sub    $0x4,%esp
f0111077:	68 80 8a 13 f0       	push   $0xf0138a80
f011107c:	68 05 03 00 00       	push   $0x305
f0111081:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111086:	e8 7a f1 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011108b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0111092:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f0111099:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011109c:	8d 50 ff             	lea    -0x1(%eax),%edx
f011109f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110a2:	48                   	dec    %eax
f01110a3:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01110a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110aa:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01110ae:	01 c8                	add    %ecx,%eax
f01110b0:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01110b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110b7:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01110be:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01110bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01110c2:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01110c9:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01110ca:	83 ec 0c             	sub    $0xc,%esp
f01110cd:	ff 75 f0             	pushl  -0x10(%ebp)
f01110d0:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01110d3:	50                   	push   %eax
f01110d4:	8d 45 98             	lea    -0x68(%ebp),%eax
f01110d7:	50                   	push   %eax
f01110d8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01110db:	50                   	push   %eax
f01110dc:	68 60 f7 85 f0       	push   $0xf085f760
f01110e1:	e8 6d 05 00 00       	call   f0111653 <check_list_data>
f01110e6:	83 c4 20             	add    $0x20,%esp
f01110e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01110ec:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01110f0:	74 17                	je     f0111109 <test_insert_sorted_with_merge_freeList+0x69a>
f01110f2:	83 ec 04             	sub    $0x4,%esp
f01110f5:	68 ec 8a 13 f0       	push   $0xf0138aec
f01110fa:	68 0e 03 00 00       	push   $0x30e
f01110ff:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111104:	e8 fc f0 fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111109:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011110c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011110f:	74 17                	je     f0111128 <test_insert_sorted_with_merge_freeList+0x6b9>
f0111111:	83 ec 04             	sub    $0x4,%esp
f0111114:	68 40 8b 13 f0       	push   $0xf0138b40
f0111119:	68 0f 03 00 00       	push   $0x30f
f011111e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111123:	e8 dd f0 fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f0111128:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f011112f:	83 ec 0c             	sub    $0xc,%esp
f0111132:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111135:	50                   	push   %eax
f0111136:	e8 e4 05 00 00       	call   f011171f <check_avaliable_list_data>
f011113b:	83 c4 10             	add    $0x10,%esp
f011113e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0111141:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111144:	8d 50 02             	lea    0x2(%eax),%edx
f0111147:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011114a:	39 c2                	cmp    %eax,%edx
f011114c:	74 17                	je     f0111165 <test_insert_sorted_with_merge_freeList+0x6f6>
f011114e:	83 ec 04             	sub    $0x4,%esp
f0111151:	68 94 8b 13 f0       	push   $0xf0138b94
f0111156:	68 14 03 00 00       	push   $0x314
f011115b:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111160:	e8 a0 f0 fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111165:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111169:	74 17                	je     f0111182 <test_insert_sorted_with_merge_freeList+0x713>
f011116b:	83 ec 04             	sub    $0x4,%esp
f011116e:	68 ec 8b 13 f0       	push   $0xf0138bec
f0111173:	68 15 03 00 00       	push   $0x315
f0111178:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011117d:	e8 83 f0 fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f0111182:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111189:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011118c:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111193:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f0111194:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111197:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f011119e:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f011119f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111a2:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01111a6:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f01111ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01111af:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01111b3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f01111b9:	83 ec 0c             	sub    $0xc,%esp
f01111bc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01111c2:	50                   	push   %eax
f01111c3:	e8 0c 1c 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f01111c8:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f01111cb:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01111d0:	85 c0                	test   %eax,%eax
f01111d2:	75 19                	jne    f01111ed <test_insert_sorted_with_merge_freeList+0x77e>
f01111d4:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f01111d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01111dc:	83 c2 03             	add    $0x3,%edx
f01111df:	39 d0                	cmp    %edx,%eax
f01111e1:	75 0a                	jne    f01111ed <test_insert_sorted_with_merge_freeList+0x77e>
f01111e3:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01111e8:	83 f8 04             	cmp    $0x4,%eax
f01111eb:	74 17                	je     f0111204 <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f01111ed:	83 ec 04             	sub    $0x4,%esp
f01111f0:	68 80 8a 13 f0       	push   $0xf0138a80
f01111f5:	68 28 03 00 00       	push   $0x328
f01111fa:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01111ff:	e8 01 f0 fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0111204:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f011120b:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f0111212:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111215:	8d 50 01             	lea    0x1(%eax),%edx
f0111218:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011121b:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f011121f:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f0111223:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111226:	8d 50 01             	lea    0x1(%eax),%edx
f0111229:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011122c:	40                   	inc    %eax
f011122d:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111231:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111234:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111238:	01 c8                	add    %ecx,%eax
f011123a:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f011123e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111241:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111248:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111249:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011124c:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111253:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111254:	83 ec 0c             	sub    $0xc,%esp
f0111257:	ff 75 f0             	pushl  -0x10(%ebp)
f011125a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011125d:	50                   	push   %eax
f011125e:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111261:	50                   	push   %eax
f0111262:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111265:	50                   	push   %eax
f0111266:	68 60 f7 85 f0       	push   $0xf085f760
f011126b:	e8 e3 03 00 00       	call   f0111653 <check_list_data>
f0111270:	83 c4 20             	add    $0x20,%esp
f0111273:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111276:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011127a:	74 17                	je     f0111293 <test_insert_sorted_with_merge_freeList+0x824>
f011127c:	83 ec 04             	sub    $0x4,%esp
f011127f:	68 ec 8a 13 f0       	push   $0xf0138aec
f0111284:	68 32 03 00 00       	push   $0x332
f0111289:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011128e:	e8 72 ef fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f0111293:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111296:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111299:	74 17                	je     f01112b2 <test_insert_sorted_with_merge_freeList+0x843>
f011129b:	83 ec 04             	sub    $0x4,%esp
f011129e:	68 40 8b 13 f0       	push   $0xf0138b40
f01112a3:	68 33 03 00 00       	push   $0x333
f01112a8:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01112ad:	e8 53 ef fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01112b2:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01112b9:	83 ec 0c             	sub    $0xc,%esp
f01112bc:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01112bf:	50                   	push   %eax
f01112c0:	e8 5a 04 00 00       	call   f011171f <check_avaliable_list_data>
f01112c5:	83 c4 10             	add    $0x10,%esp
f01112c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01112cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01112ce:	8d 50 03             	lea    0x3(%eax),%edx
f01112d1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01112d4:	39 c2                	cmp    %eax,%edx
f01112d6:	74 17                	je     f01112ef <test_insert_sorted_with_merge_freeList+0x880>
f01112d8:	83 ec 04             	sub    $0x4,%esp
f01112db:	68 94 8b 13 f0       	push   $0xf0138b94
f01112e0:	68 38 03 00 00       	push   $0x338
f01112e5:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01112ea:	e8 16 ef fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f01112ef:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01112f3:	74 17                	je     f011130c <test_insert_sorted_with_merge_freeList+0x89d>
f01112f5:	83 ec 04             	sub    $0x4,%esp
f01112f8:	68 ec 8b 13 f0       	push   $0xf0138bec
f01112fd:	68 39 03 00 00       	push   $0x339
f0111302:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111307:	e8 f9 ee fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f011130c:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f0111313:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111316:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f011131d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f011131e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111321:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f0111328:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f0111329:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011132c:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f0111330:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f0111336:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111339:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f011133d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f0111343:	83 ec 0c             	sub    $0xc,%esp
f0111346:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f011134c:	50                   	push   %eax
f011134d:	e8 82 1a 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f0111352:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f0111355:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f011135a:	85 c0                	test   %eax,%eax
f011135c:	75 19                	jne    f0111377 <test_insert_sorted_with_merge_freeList+0x908>
f011135e:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0111363:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111366:	83 c2 04             	add    $0x4,%edx
f0111369:	39 d0                	cmp    %edx,%eax
f011136b:	75 0a                	jne    f0111377 <test_insert_sorted_with_merge_freeList+0x908>
f011136d:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0111372:	83 f8 04             	cmp    $0x4,%eax
f0111375:	74 17                	je     f011138e <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111377:	83 ec 04             	sub    $0x4,%esp
f011137a:	68 80 8a 13 f0       	push   $0xf0138a80
f011137f:	68 4c 03 00 00       	push   $0x34c
f0111384:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111389:	e8 77 ee fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f011138e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f0111395:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f011139c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011139f:	8d 50 01             	lea    0x1(%eax),%edx
f01113a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113a5:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01113a9:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f01113ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113b0:	8d 50 01             	lea    0x1(%eax),%edx
f01113b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113b6:	40                   	inc    %eax
f01113b7:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f01113bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113be:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01113c2:	01 c8                	add    %ecx,%eax
f01113c4:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f01113c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113cb:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f01113d2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f01113d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113d6:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f01113dd:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f01113de:	83 ec 0c             	sub    $0xc,%esp
f01113e1:	ff 75 f0             	pushl  -0x10(%ebp)
f01113e4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01113e7:	50                   	push   %eax
f01113e8:	8d 45 98             	lea    -0x68(%ebp),%eax
f01113eb:	50                   	push   %eax
f01113ec:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01113ef:	50                   	push   %eax
f01113f0:	68 60 f7 85 f0       	push   $0xf085f760
f01113f5:	e8 59 02 00 00       	call   f0111653 <check_list_data>
f01113fa:	83 c4 20             	add    $0x20,%esp
f01113fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f0111400:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111404:	74 17                	je     f011141d <test_insert_sorted_with_merge_freeList+0x9ae>
f0111406:	83 ec 04             	sub    $0x4,%esp
f0111409:	68 ec 8a 13 f0       	push   $0xf0138aec
f011140e:	68 56 03 00 00       	push   $0x356
f0111413:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111418:	e8 e8 ed fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f011141d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111420:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111423:	74 17                	je     f011143c <test_insert_sorted_with_merge_freeList+0x9cd>
f0111425:	83 ec 04             	sub    $0x4,%esp
f0111428:	68 40 8b 13 f0       	push   $0xf0138b40
f011142d:	68 57 03 00 00       	push   $0x357
f0111432:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111437:	e8 c9 ed fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f011143c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f0111443:	83 ec 0c             	sub    $0xc,%esp
f0111446:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0111449:	50                   	push   %eax
f011144a:	e8 d0 02 00 00       	call   f011171f <check_avaliable_list_data>
f011144f:	83 c4 10             	add    $0x10,%esp
f0111452:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f0111455:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111458:	8d 50 04             	lea    0x4(%eax),%edx
f011145b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011145e:	39 c2                	cmp    %eax,%edx
f0111460:	74 17                	je     f0111479 <test_insert_sorted_with_merge_freeList+0xa0a>
f0111462:	83 ec 04             	sub    $0x4,%esp
f0111465:	68 94 8b 13 f0       	push   $0xf0138b94
f011146a:	68 5c 03 00 00       	push   $0x35c
f011146f:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111474:	e8 8c ed fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111479:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011147d:	74 17                	je     f0111496 <test_insert_sorted_with_merge_freeList+0xa27>
f011147f:	83 ec 04             	sub    $0x4,%esp
f0111482:	68 ec 8b 13 f0       	push   $0xf0138bec
f0111487:	68 5d 03 00 00       	push   $0x35d
f011148c:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111491:	e8 6f ed fe ff       	call   f0100205 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f0111496:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f011149d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01114a0:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f01114a7:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f01114a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01114ab:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f01114b2:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f01114b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01114b6:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f01114ba:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f01114c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01114c3:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f01114c7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f01114cd:	83 ec 0c             	sub    $0xc,%esp
f01114d0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01114d6:	50                   	push   %eax
f01114d7:	e8 f8 18 02 00       	call   f0132dd4 <insert_sorted_with_merge_freeList>
f01114dc:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f01114df:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01114e4:	85 c0                	test   %eax,%eax
f01114e6:	75 19                	jne    f0111501 <test_insert_sorted_with_merge_freeList+0xa92>
f01114e8:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f01114ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01114f0:	83 c2 06             	add    $0x6,%edx
f01114f3:	39 d0                	cmp    %edx,%eax
f01114f5:	75 0a                	jne    f0111501 <test_insert_sorted_with_merge_freeList+0xa92>
f01114f7:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01114fc:	83 f8 03             	cmp    $0x3,%eax
f01114ff:	74 17                	je     f0111518 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f0111501:	83 ec 04             	sub    $0x4,%esp
f0111504:	68 80 8a 13 f0       	push   $0xf0138a80
f0111509:	68 70 03 00 00       	push   $0x370
f011150e:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111513:	e8 ed ec fe ff       	call   f0100205 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f0111518:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f011151f:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f0111526:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111529:	48                   	dec    %eax
f011152a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111531:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f0111532:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111535:	8d 50 ff             	lea    -0x1(%eax),%edx
f0111538:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011153b:	48                   	dec    %eax
f011153c:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f0111540:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111543:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111547:	01 c1                	add    %eax,%ecx
f0111549:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011154c:	40                   	inc    %eax
f011154d:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f0111551:	01 c8                	add    %ecx,%eax
f0111553:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f0111557:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011155a:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111561:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f0111562:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111565:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f011156c:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f011156d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111570:	40                   	inc    %eax
f0111571:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f0111578:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f0111579:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011157c:	40                   	inc    %eax
f011157d:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f0111584:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f0111585:	83 ec 0c             	sub    $0xc,%esp
f0111588:	ff 75 f0             	pushl  -0x10(%ebp)
f011158b:	8d 45 94             	lea    -0x6c(%ebp),%eax
f011158e:	50                   	push   %eax
f011158f:	8d 45 98             	lea    -0x68(%ebp),%eax
f0111592:	50                   	push   %eax
f0111593:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0111596:	50                   	push   %eax
f0111597:	68 60 f7 85 f0       	push   $0xf085f760
f011159c:	e8 b2 00 00 00       	call   f0111653 <check_list_data>
f01115a1:	83 c4 20             	add    $0x20,%esp
f01115a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f01115a7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01115ab:	74 17                	je     f01115c4 <test_insert_sorted_with_merge_freeList+0xb55>
f01115ad:	83 ec 04             	sub    $0x4,%esp
f01115b0:	68 ec 8a 13 f0       	push   $0xf0138aec
f01115b5:	68 7c 03 00 00       	push   $0x37c
f01115ba:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01115bf:	e8 41 ec fe ff       	call   f0100205 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f01115c4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01115c7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01115ca:	74 17                	je     f01115e3 <test_insert_sorted_with_merge_freeList+0xb74>
f01115cc:	83 ec 04             	sub    $0x4,%esp
f01115cf:	68 40 8b 13 f0       	push   $0xf0138b40
f01115d4:	68 7d 03 00 00       	push   $0x37d
f01115d9:	68 d4 7e 13 f0       	push   $0xf0137ed4
f01115de:	e8 22 ec fe ff       	call   f0100205 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f01115e3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f01115ea:	83 ec 0c             	sub    $0xc,%esp
f01115ed:	8d 45 94             	lea    -0x6c(%ebp),%eax
f01115f0:	50                   	push   %eax
f01115f1:	e8 29 01 00 00       	call   f011171f <check_avaliable_list_data>
f01115f6:	83 c4 10             	add    $0x10,%esp
f01115f9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f01115fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01115ff:	8d 50 06             	lea    0x6(%eax),%edx
f0111602:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111605:	39 c2                	cmp    %eax,%edx
f0111607:	74 17                	je     f0111620 <test_insert_sorted_with_merge_freeList+0xbb1>
f0111609:	83 ec 04             	sub    $0x4,%esp
f011160c:	68 94 8b 13 f0       	push   $0xf0138b94
f0111611:	68 82 03 00 00       	push   $0x382
f0111616:	68 d4 7e 13 f0       	push   $0xf0137ed4
f011161b:	e8 e5 eb fe ff       	call   f0100205 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f0111620:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111624:	74 17                	je     f011163d <test_insert_sorted_with_merge_freeList+0xbce>
f0111626:	83 ec 04             	sub    $0x4,%esp
f0111629:	68 ec 8b 13 f0       	push   $0xf0138bec
f011162e:	68 83 03 00 00       	push   $0x383
f0111633:	68 d4 7e 13 f0       	push   $0xf0137ed4
f0111638:	e8 c8 eb fe ff       	call   f0100205 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f011163d:	83 ec 0c             	sub    $0xc,%esp
f0111640:	68 48 8c 13 f0       	push   $0xf0138c48
f0111645:	e8 c4 f6 fe ff       	call   f0100d0e <cprintf>
f011164a:	83 c4 10             	add    $0x10,%esp

}
f011164d:	90                   	nop
f011164e:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0111651:	c9                   	leave  
f0111652:	c3                   	ret    

f0111653 <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f0111653:	55                   	push   %ebp
f0111654:	89 e5                	mov    %esp,%ebp
f0111656:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111659:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0111660:	8b 45 14             	mov    0x14(%ebp),%eax
f0111663:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f0111669:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f0111670:	8b 45 08             	mov    0x8(%ebp),%eax
f0111673:	8b 00                	mov    (%eax),%eax
f0111675:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0111678:	eb 6e                	jmp    f01116e8 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f011167a:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f011167d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0111680:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111687:	8b 45 10             	mov    0x10(%ebp),%eax
f011168a:	01 d0                	add    %edx,%eax
f011168c:	8b 00                	mov    (%eax),%eax
f011168e:	85 c0                	test   %eax,%eax
f0111690:	74 e8                	je     f011167a <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f0111692:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111695:	8b 50 08             	mov    0x8(%eax),%edx
f0111698:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011169b:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01116a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01116a5:	01 c8                	add    %ecx,%eax
f01116a7:	8b 00                	mov    (%eax),%eax
f01116a9:	39 c2                	cmp    %eax,%edx
f01116ab:	75 1b                	jne    f01116c8 <check_list_data+0x75>
f01116ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01116b0:	8b 50 0c             	mov    0xc(%eax),%edx
f01116b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01116b6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01116bd:	8b 45 10             	mov    0x10(%ebp),%eax
f01116c0:	01 c8                	add    %ecx,%eax
f01116c2:	8b 00                	mov    (%eax),%eax
f01116c4:	39 c2                	cmp    %eax,%edx
f01116c6:	74 07                	je     f01116cf <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f01116c8:	b8 00 00 00 00       	mov    $0x0,%eax
f01116cd:	eb 4e                	jmp    f011171d <check_list_data+0xca>
		}
		(*size)++;
f01116cf:	8b 45 14             	mov    0x14(%ebp),%eax
f01116d2:	8b 00                	mov    (%eax),%eax
f01116d4:	8d 50 01             	lea    0x1(%eax),%edx
f01116d7:	8b 45 14             	mov    0x14(%ebp),%eax
f01116da:	89 10                	mov    %edx,(%eax)
		i++;
f01116dc:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f01116df:	8b 45 08             	mov    0x8(%ebp),%eax
f01116e2:	8b 40 08             	mov    0x8(%eax),%eax
f01116e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01116e8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01116ec:	74 07                	je     f01116f5 <check_list_data+0xa2>
f01116ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01116f1:	8b 00                	mov    (%eax),%eax
f01116f3:	eb 05                	jmp    f01116fa <check_list_data+0xa7>
f01116f5:	b8 00 00 00 00       	mov    $0x0,%eax
f01116fa:	8b 55 08             	mov    0x8(%ebp),%edx
f01116fd:	89 42 08             	mov    %eax,0x8(%edx)
f0111700:	8b 45 08             	mov    0x8(%ebp),%eax
f0111703:	8b 40 08             	mov    0x8(%eax),%eax
f0111706:	85 c0                	test   %eax,%eax
f0111708:	0f 85 6f ff ff ff    	jne    f011167d <check_list_data+0x2a>
f011170e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111712:	0f 85 65 ff ff ff    	jne    f011167d <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0111718:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011171d:	c9                   	leave  
f011171e:	c3                   	ret    

f011171f <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f011171f:	55                   	push   %ebp
f0111720:	89 e5                	mov    %esp,%ebp
f0111722:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f0111725:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f011172c:	8b 45 08             	mov    0x8(%ebp),%eax
f011172f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111735:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f011173a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011173d:	eb 30                	jmp    f011176f <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f011173f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111742:	8b 40 08             	mov    0x8(%eax),%eax
f0111745:	85 c0                	test   %eax,%eax
f0111747:	75 0a                	jne    f0111753 <check_avaliable_list_data+0x34>
f0111749:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011174c:	8b 40 0c             	mov    0xc(%eax),%eax
f011174f:	85 c0                	test   %eax,%eax
f0111751:	74 07                	je     f011175a <check_avaliable_list_data+0x3b>
		{
			return 0;
f0111753:	b8 00 00 00 00       	mov    $0x0,%eax
f0111758:	eb 40                	jmp    f011179a <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f011175a:	8b 45 08             	mov    0x8(%ebp),%eax
f011175d:	8b 00                	mov    (%eax),%eax
f011175f:	8d 50 01             	lea    0x1(%eax),%edx
f0111762:	8b 45 08             	mov    0x8(%ebp),%eax
f0111765:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f0111767:	a1 9c f7 85 f0       	mov    0xf085f79c,%eax
f011176c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011176f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111773:	74 07                	je     f011177c <check_avaliable_list_data+0x5d>
f0111775:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0111778:	8b 00                	mov    (%eax),%eax
f011177a:	eb 05                	jmp    f0111781 <check_avaliable_list_data+0x62>
f011177c:	b8 00 00 00 00       	mov    $0x0,%eax
f0111781:	a3 9c f7 85 f0       	mov    %eax,0xf085f79c
f0111786:	a1 9c f7 85 f0       	mov    0xf085f79c,%eax
f011178b:	85 c0                	test   %eax,%eax
f011178d:	75 b0                	jne    f011173f <check_avaliable_list_data+0x20>
f011178f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0111793:	75 aa                	jne    f011173f <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f0111795:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011179a:	c9                   	leave  
f011179b:	c3                   	ret    

f011179c <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f011179c:	55                   	push   %ebp
f011179d:	89 e5                	mov    %esp,%ebp
f011179f:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f01117a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f01117a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01117ac:	8b 00                	mov    (%eax),%eax
f01117ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01117b1:	eb 27                	jmp    f01117da <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f01117b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01117b6:	8b 50 0c             	mov    0xc(%eax),%edx
f01117b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01117bc:	8b 40 08             	mov    0x8(%eax),%eax
f01117bf:	83 ec 04             	sub    $0x4,%esp
f01117c2:	52                   	push   %edx
f01117c3:	50                   	push   %eax
f01117c4:	68 98 7f 13 f0       	push   $0xf0137f98
f01117c9:	e8 40 f5 fe ff       	call   f0100d0e <cprintf>
f01117ce:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01117d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01117d4:	8b 40 08             	mov    0x8(%eax),%eax
f01117d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01117da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01117de:	74 07                	je     f01117e7 <show_list_content+0x4b>
f01117e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01117e3:	8b 00                	mov    (%eax),%eax
f01117e5:	eb 05                	jmp    f01117ec <show_list_content+0x50>
f01117e7:	b8 00 00 00 00       	mov    $0x0,%eax
f01117ec:	8b 55 08             	mov    0x8(%ebp),%edx
f01117ef:	89 42 08             	mov    %eax,0x8(%edx)
f01117f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01117f5:	8b 40 08             	mov    0x8(%eax),%eax
f01117f8:	85 c0                	test   %eax,%eax
f01117fa:	75 b7                	jne    f01117b3 <show_list_content+0x17>
f01117fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111800:	75 b1                	jne    f01117b3 <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f0111802:	90                   	nop
f0111803:	c9                   	leave  
f0111804:	c3                   	ret    

f0111805 <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f0111805:	55                   	push   %ebp
f0111806:	89 e5                	mov    %esp,%ebp
f0111808:	57                   	push   %edi
f0111809:	56                   	push   %esi
f011180a:	53                   	push   %ebx
f011180b:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0111811:	83 ec 0c             	sub    $0xc,%esp
f0111814:	68 9c 8c 13 f0       	push   $0xf0138c9c
f0111819:	e8 f0 f4 fe ff       	call   f0100d0e <cprintf>
f011181e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0111821:	83 ec 0c             	sub    $0xc,%esp
f0111824:	68 c0 8c 13 f0       	push   $0xf0138cc0
f0111829:	e8 e0 f4 fe ff       	call   f0100d0e <cprintf>
f011182e:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0111831:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0111838:	83 ec 0c             	sub    $0xc,%esp
f011183b:	68 dc 8c 13 f0       	push   $0xf0138cdc
f0111840:	e8 c9 f4 fe ff       	call   f0100d0e <cprintf>
f0111845:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0111848:	8d 45 80             	lea    -0x80(%ebp),%eax
f011184b:	bb 96 8d 13 f0       	mov    $0xf0138d96,%ebx
f0111850:	ba 03 00 00 00       	mov    $0x3,%edx
f0111855:	89 c7                	mov    %eax,%edi
f0111857:	89 de                	mov    %ebx,%esi
f0111859:	89 d1                	mov    %edx,%ecx
f011185b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011185d:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0111860:	b9 16 00 00 00       	mov    $0x16,%ecx
f0111865:	b8 00 00 00 00       	mov    $0x0,%eax
f011186a:	89 d7                	mov    %edx,%edi
f011186c:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f011186e:	83 ec 0c             	sub    $0xc,%esp
f0111871:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111874:	50                   	push   %eax
f0111875:	e8 f6 f4 fe ff       	call   f0100d70 <execute_command>
f011187a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011187d:	83 ec 0c             	sub    $0xc,%esp
f0111880:	68 0a 8d 13 f0       	push   $0xf0138d0a
f0111885:	e8 84 f4 fe ff       	call   f0100d0e <cprintf>
f011188a:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f011188d:	83 ec 0c             	sub    $0xc,%esp
f0111890:	68 20 8d 13 f0       	push   $0xf0138d20
f0111895:	e8 74 f4 fe ff       	call   f0100d0e <cprintf>
f011189a:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f011189d:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f01118a4:	65 00 00 
f01118a7:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f01118ad:	b9 18 00 00 00       	mov    $0x18,%ecx
f01118b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01118b7:	89 d7                	mov    %edx,%edi
f01118b9:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f01118bb:	83 ec 0c             	sub    $0xc,%esp
f01118be:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01118c4:	50                   	push   %eax
f01118c5:	e8 a6 f4 fe ff       	call   f0100d70 <execute_command>
f01118ca:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01118cd:	83 ec 0c             	sub    $0xc,%esp
f01118d0:	68 0a 8d 13 f0       	push   $0xf0138d0a
f01118d5:	e8 34 f4 fe ff       	call   f0100d0e <cprintf>
f01118da:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01118dd:	83 ec 0c             	sub    $0xc,%esp
f01118e0:	68 48 8d 13 f0       	push   $0xf0138d48
f01118e5:	e8 24 f4 fe ff       	call   f0100d0e <cprintf>
f01118ea:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f01118ed:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f01118f4:	75 00 00 
f01118f7:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01118fd:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111902:	b8 00 00 00 00       	mov    $0x0,%eax
f0111907:	89 d7                	mov    %edx,%edi
f0111909:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f011190b:	83 ec 0c             	sub    $0xc,%esp
f011190e:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f0111914:	50                   	push   %eax
f0111915:	e8 56 f4 fe ff       	call   f0100d70 <execute_command>
f011191a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011191d:	83 ec 0c             	sub    $0xc,%esp
f0111920:	68 0a 8d 13 f0       	push   $0xf0138d0a
f0111925:	e8 e4 f3 fe ff       	call   f0100d0e <cprintf>
f011192a:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f011192d:	83 ec 0c             	sub    $0xc,%esp
f0111930:	68 70 8d 13 f0       	push   $0xf0138d70
f0111935:	e8 d4 f3 fe ff       	call   f0100d0e <cprintf>
f011193a:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f011193d:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f0111944:	6d 6d 00 
f0111947:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f011194d:	b9 18 00 00 00       	mov    $0x18,%ecx
f0111952:	b8 00 00 00 00       	mov    $0x0,%eax
f0111957:	89 d7                	mov    %edx,%edi
f0111959:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f011195b:	83 ec 0c             	sub    $0xc,%esp
f011195e:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f0111964:	50                   	push   %eax
f0111965:	e8 06 f4 fe ff       	call   f0100d70 <execute_command>
f011196a:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f011196d:	83 ec 0c             	sub    $0xc,%esp
f0111970:	68 0a 8d 13 f0       	push   $0xf0138d0a
f0111975:	e8 94 f3 fe ff       	call   f0100d0e <cprintf>
f011197a:	83 c4 10             	add    $0x10,%esp
	return 0;
f011197d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111982:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111985:	5b                   	pop    %ebx
f0111986:	5e                   	pop    %esi
f0111987:	5f                   	pop    %edi
f0111988:	5d                   	pop    %ebp
f0111989:	c3                   	ret    

f011198a <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f011198a:	55                   	push   %ebp
f011198b:	89 e5                	mov    %esp,%ebp
f011198d:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111990:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111997:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f011199e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01119a5:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01119aa:	ff 75 ec             	pushl  -0x14(%ebp)
f01119ad:	ff 75 f0             	pushl  -0x10(%ebp)
f01119b0:	ff 75 f4             	pushl  -0xc(%ebp)
f01119b3:	50                   	push   %eax
f01119b4:	e8 cd 64 ff ff       	call   f0107e86 <pt_set_page_permissions>
f01119b9:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01119bc:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01119c1:	ff 75 ec             	pushl  -0x14(%ebp)
f01119c4:	ff 75 f0             	pushl  -0x10(%ebp)
f01119c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01119ca:	50                   	push   %eax
f01119cb:	e8 9e 4e 00 00       	call   f011686e <CP>
f01119d0:	83 c4 10             	add    $0x10,%esp
f01119d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01119d6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01119da:	74 14                	je     f01119f0 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01119dc:	83 ec 04             	sub    $0x4,%esp
f01119df:	68 fc 8d 13 f0       	push   $0xf0138dfc
f01119e4:	6a 5a                	push   $0x5a
f01119e6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01119eb:	e8 15 e8 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01119f0:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01119f7:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01119fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a05:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111a0a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a0d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a10:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a13:	50                   	push   %eax
f0111a14:	e8 6d 64 ff ff       	call   f0107e86 <pt_set_page_permissions>
f0111a19:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a1c:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111a21:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a24:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a27:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a2a:	50                   	push   %eax
f0111a2b:	e8 3e 4e 00 00       	call   f011686e <CP>
f0111a30:	83 c4 10             	add    $0x10,%esp
f0111a33:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a36:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a3a:	74 14                	je     f0111a50 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111a3c:	83 ec 04             	sub    $0x4,%esp
f0111a3f:	68 3c 8e 13 f0       	push   $0xf0138e3c
f0111a44:	6a 66                	push   $0x66
f0111a46:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111a4b:	e8 b5 e7 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111a50:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111a57:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111a5e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a65:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111a6a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a6d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a70:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a73:	50                   	push   %eax
f0111a74:	e8 0d 64 ff ff       	call   f0107e86 <pt_set_page_permissions>
f0111a79:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111a7c:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111a81:	ff 75 ec             	pushl  -0x14(%ebp)
f0111a84:	ff 75 f0             	pushl  -0x10(%ebp)
f0111a87:	ff 75 f4             	pushl  -0xc(%ebp)
f0111a8a:	50                   	push   %eax
f0111a8b:	e8 de 4d 00 00       	call   f011686e <CP>
f0111a90:	83 c4 10             	add    $0x10,%esp
f0111a93:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111a96:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111a9a:	74 14                	je     f0111ab0 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0111a9c:	83 ec 04             	sub    $0x4,%esp
f0111a9f:	68 60 8e 13 f0       	push   $0xf0138e60
f0111aa4:	6a 71                	push   $0x71
f0111aa6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111aab:	e8 55 e7 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0111ab0:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0111ab7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0111abe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111ac5:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111aca:	ff 75 ec             	pushl  -0x14(%ebp)
f0111acd:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ad0:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ad3:	50                   	push   %eax
f0111ad4:	e8 ad 63 ff ff       	call   f0107e86 <pt_set_page_permissions>
f0111ad9:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111adc:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111ae1:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ae4:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ae7:	ff 75 f4             	pushl  -0xc(%ebp)
f0111aea:	50                   	push   %eax
f0111aeb:	e8 7e 4d 00 00       	call   f011686e <CP>
f0111af0:	83 c4 10             	add    $0x10,%esp
f0111af3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111af6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111afa:	74 14                	je     f0111b10 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0111afc:	83 ec 04             	sub    $0x4,%esp
f0111aff:	68 84 8e 13 f0       	push   $0xf0138e84
f0111b04:	6a 7d                	push   $0x7d
f0111b06:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111b0b:	e8 f5 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0111b10:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0111b17:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0111b1e:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b25:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111b2a:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b2d:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b30:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b33:	50                   	push   %eax
f0111b34:	e8 4d 63 ff ff       	call   f0107e86 <pt_set_page_permissions>
f0111b39:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b3c:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111b41:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b44:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b47:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b4a:	50                   	push   %eax
f0111b4b:	e8 1e 4d 00 00       	call   f011686e <CP>
f0111b50:	83 c4 10             	add    $0x10,%esp
f0111b53:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111b56:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111b5a:	74 17                	je     f0111b73 <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0111b5c:	83 ec 04             	sub    $0x4,%esp
f0111b5f:	68 a8 8e 13 f0       	push   $0xf0138ea8
f0111b64:	68 89 00 00 00       	push   $0x89
f0111b69:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111b6e:	e8 92 e6 fe ff       	call   f0100205 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0111b73:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0111b7a:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0111b81:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b88:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111b8d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111b90:	ff 75 f0             	pushl  -0x10(%ebp)
f0111b93:	ff 75 f4             	pushl  -0xc(%ebp)
f0111b96:	50                   	push   %eax
f0111b97:	e8 ea 62 ff ff       	call   f0107e86 <pt_set_page_permissions>
f0111b9c:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111b9f:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111ba4:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ba7:	ff 75 f0             	pushl  -0x10(%ebp)
f0111baa:	ff 75 f4             	pushl  -0xc(%ebp)
f0111bad:	50                   	push   %eax
f0111bae:	e8 bb 4c 00 00       	call   f011686e <CP>
f0111bb3:	83 c4 10             	add    $0x10,%esp
f0111bb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111bb9:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111bbd:	74 17                	je     f0111bd6 <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0111bbf:	83 ec 04             	sub    $0x4,%esp
f0111bc2:	68 cc 8e 13 f0       	push   $0xf0138ecc
f0111bc7:	68 95 00 00 00       	push   $0x95
f0111bcc:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111bd1:	e8 2f e6 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0111bd6:	83 ec 0c             	sub    $0xc,%esp
f0111bd9:	68 f8 8e 13 f0       	push   $0xf0138ef8
f0111bde:	e8 2b f1 fe ff       	call   f0100d0e <cprintf>
f0111be3:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111be6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111beb:	c9                   	leave  
f0111bec:	c3                   	ret    

f0111bed <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0111bed:	55                   	push   %ebp
f0111bee:	89 e5                	mov    %esp,%ebp
f0111bf0:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0111bf3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111bfa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111c01:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111c08:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111c0d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111c10:	ff 75 f0             	pushl  -0x10(%ebp)
f0111c13:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c16:	50                   	push   %eax
f0111c17:	e8 6a 62 ff ff       	call   f0107e86 <pt_set_page_permissions>
f0111c1c:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0111c1f:	83 ec 04             	sub    $0x4,%esp
f0111c22:	68 48 8f 13 f0       	push   $0xf0138f48
f0111c27:	68 a2 00 00 00       	push   $0xa2
f0111c2c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111c31:	e8 cf e5 fe ff       	call   f0100205 <_panic>

f0111c36 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0111c36:	55                   	push   %ebp
f0111c37:	89 e5                	mov    %esp,%ebp
f0111c39:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0111c3c:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0111c43:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111c48:	83 ec 08             	sub    $0x8,%esp
f0111c4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c4e:	50                   	push   %eax
f0111c4f:	e8 7f 63 ff ff       	call   f0107fd3 <pt_get_page_permissions>
f0111c54:	83 c4 10             	add    $0x10,%esp
f0111c57:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0111c5a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0111c5e:	74 17                	je     f0111c77 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0111c60:	83 ec 04             	sub    $0x4,%esp
f0111c63:	68 e4 8f 13 f0       	push   $0xf0138fe4
f0111c68:	68 b0 00 00 00       	push   $0xb0
f0111c6d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111c72:	e8 8e e5 fe ff       	call   f0100205 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0111c77:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111c7e:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111c83:	83 ec 08             	sub    $0x8,%esp
f0111c86:	ff 75 f4             	pushl  -0xc(%ebp)
f0111c89:	50                   	push   %eax
f0111c8a:	e8 44 63 ff ff       	call   f0107fd3 <pt_get_page_permissions>
f0111c8f:	83 c4 10             	add    $0x10,%esp
f0111c92:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0111c95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111c99:	74 17                	je     f0111cb2 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0111c9b:	83 ec 04             	sub    $0x4,%esp
f0111c9e:	68 08 90 13 f0       	push   $0xf0139008
f0111ca3:	68 b8 00 00 00       	push   $0xb8
f0111ca8:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111cad:	e8 53 e5 fe ff       	call   f0100205 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0111cb2:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111cb9:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111cbe:	83 ec 08             	sub    $0x8,%esp
f0111cc1:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cc4:	50                   	push   %eax
f0111cc5:	e8 09 63 ff ff       	call   f0107fd3 <pt_get_page_permissions>
f0111cca:	83 c4 10             	add    $0x10,%esp
f0111ccd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111cd0:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111cd4:	74 17                	je     f0111ced <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0111cd6:	83 ec 04             	sub    $0x4,%esp
f0111cd9:	68 2c 90 13 f0       	push   $0xf013902c
f0111cde:	68 c0 00 00 00       	push   $0xc0
f0111ce3:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111ce8:	e8 18 e5 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF1000000;
f0111ced:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111cf4:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111cf9:	83 ec 08             	sub    $0x8,%esp
f0111cfc:	ff 75 f4             	pushl  -0xc(%ebp)
f0111cff:	50                   	push   %eax
f0111d00:	e8 ce 62 ff ff       	call   f0107fd3 <pt_get_page_permissions>
f0111d05:	83 c4 10             	add    $0x10,%esp
f0111d08:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0111d0b:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0111d0f:	74 17                	je     f0111d28 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0111d11:	83 ec 04             	sub    $0x4,%esp
f0111d14:	68 50 90 13 f0       	push   $0xf0139050
f0111d19:	68 c7 00 00 00       	push   $0xc7
f0111d1e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111d23:	e8 dd e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111d28:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0111d2f:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111d34:	83 ec 08             	sub    $0x8,%esp
f0111d37:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d3a:	50                   	push   %eax
f0111d3b:	e8 93 62 ff ff       	call   f0107fd3 <pt_get_page_permissions>
f0111d40:	83 c4 10             	add    $0x10,%esp
f0111d43:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0111d46:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0111d4a:	74 17                	je     f0111d63 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0111d4c:	83 ec 04             	sub    $0x4,%esp
f0111d4f:	68 74 90 13 f0       	push   $0xf0139074
f0111d54:	68 ce 00 00 00       	push   $0xce
f0111d59:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111d5e:	e8 a2 e4 fe ff       	call   f0100205 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0111d63:	83 ec 0c             	sub    $0xc,%esp
f0111d66:	68 98 90 13 f0       	push   $0xf0139098
f0111d6b:	e8 9e ef fe ff       	call   f0100d0e <cprintf>
f0111d70:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111d73:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111d78:	c9                   	leave  
f0111d79:	c3                   	ret    

f0111d7a <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0111d7a:	55                   	push   %ebp
f0111d7b:	89 e5                	mov    %esp,%ebp
f0111d7d:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0111d80:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111d87:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111d8c:	83 ec 08             	sub    $0x8,%esp
f0111d8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0111d92:	50                   	push   %eax
f0111d93:	e8 95 62 ff ff       	call   f010802d <pt_clear_page_table_entry>
f0111d98:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0111d9b:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111da0:	83 ec 08             	sub    $0x8,%esp
f0111da3:	ff 75 f4             	pushl  -0xc(%ebp)
f0111da6:	50                   	push   %eax
f0111da7:	e8 1e 4a 00 00       	call   f01167ca <CE>
f0111dac:	83 c4 10             	add    $0x10,%esp
f0111daf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111db2:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111db6:	74 17                	je     f0111dcf <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0111db8:	83 ec 04             	sub    $0x4,%esp
f0111dbb:	68 e0 90 13 f0       	push   $0xf01390e0
f0111dc0:	68 de 00 00 00       	push   $0xde
f0111dc5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111dca:	e8 36 e4 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0001000;
f0111dcf:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111dd6:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111ddb:	83 ec 08             	sub    $0x8,%esp
f0111dde:	ff 75 f4             	pushl  -0xc(%ebp)
f0111de1:	50                   	push   %eax
f0111de2:	e8 46 62 ff ff       	call   f010802d <pt_clear_page_table_entry>
f0111de7:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111dea:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111def:	83 ec 08             	sub    $0x8,%esp
f0111df2:	ff 75 f4             	pushl  -0xc(%ebp)
f0111df5:	50                   	push   %eax
f0111df6:	e8 cf 49 00 00       	call   f01167ca <CE>
f0111dfb:	83 c4 10             	add    $0x10,%esp
f0111dfe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e01:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e05:	74 17                	je     f0111e1e <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0111e07:	83 ec 04             	sub    $0x4,%esp
f0111e0a:	68 0c 91 13 f0       	push   $0xf013910c
f0111e0f:	68 e6 00 00 00       	push   $0xe6
f0111e14:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111e19:	e8 e7 e3 fe ff       	call   f0100205 <_panic>
	}

	va = 0xEF800000;
f0111e1e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e25:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111e2a:	83 ec 08             	sub    $0x8,%esp
f0111e2d:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e30:	50                   	push   %eax
f0111e31:	e8 f7 61 ff ff       	call   f010802d <pt_clear_page_table_entry>
f0111e36:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e39:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111e3e:	83 ec 08             	sub    $0x8,%esp
f0111e41:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e44:	50                   	push   %eax
f0111e45:	e8 80 49 00 00       	call   f01167ca <CE>
f0111e4a:	83 c4 10             	add    $0x10,%esp
f0111e4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e50:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111e54:	74 17                	je     f0111e6d <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0111e56:	83 ec 04             	sub    $0x4,%esp
f0111e59:	68 38 91 13 f0       	push   $0xf0139138
f0111e5e:	68 ee 00 00 00       	push   $0xee
f0111e63:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111e68:	e8 98 e3 fe ff       	call   f0100205 <_panic>
	}

	va = 0xF0000000;
f0111e6d:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111e74:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111e79:	83 ec 08             	sub    $0x8,%esp
f0111e7c:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e7f:	50                   	push   %eax
f0111e80:	e8 a8 61 ff ff       	call   f010802d <pt_clear_page_table_entry>
f0111e85:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0111e88:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111e8d:	83 ec 08             	sub    $0x8,%esp
f0111e90:	ff 75 f4             	pushl  -0xc(%ebp)
f0111e93:	50                   	push   %eax
f0111e94:	e8 31 49 00 00       	call   f01167ca <CE>
f0111e99:	83 c4 10             	add    $0x10,%esp
f0111e9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0111e9f:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0111ea3:	74 17                	je     f0111ebc <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0111ea5:	83 ec 04             	sub    $0x4,%esp
f0111ea8:	68 64 91 13 f0       	push   $0xf0139164
f0111ead:	68 f6 00 00 00       	push   $0xf6
f0111eb2:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111eb7:	e8 49 e3 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0111ebc:	83 ec 0c             	sub    $0xc,%esp
f0111ebf:	68 90 91 13 f0       	push   $0xf0139190
f0111ec4:	e8 45 ee fe ff       	call   f0100d0e <cprintf>
f0111ec9:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111ecc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111ed1:	c9                   	leave  
f0111ed2:	c3                   	ret    

f0111ed3 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0111ed3:	55                   	push   %ebp
f0111ed4:	89 e5                	mov    %esp,%ebp
f0111ed6:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0111ed9:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0111ee0:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111ee5:	83 ec 08             	sub    $0x8,%esp
f0111ee8:	ff 75 f4             	pushl  -0xc(%ebp)
f0111eeb:	50                   	push   %eax
f0111eec:	e8 3c 61 ff ff       	call   f010802d <pt_clear_page_table_entry>
f0111ef1:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0111ef4:	83 ec 04             	sub    $0x4,%esp
f0111ef7:	68 dc 91 13 f0       	push   $0xf01391dc
f0111efc:	68 01 01 00 00       	push   $0x101
f0111f01:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111f06:	e8 fa e2 fe ff       	call   f0100205 <_panic>

f0111f0b <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0111f0b:	55                   	push   %ebp
f0111f0c:	89 e5                	mov    %esp,%ebp
f0111f0e:	57                   	push   %edi
f0111f0f:	56                   	push   %esi
f0111f10:	53                   	push   %ebx
f0111f11:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f0111f17:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0111f1e:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f0111f25:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111f2a:	83 ec 0c             	sub    $0xc,%esp
f0111f2d:	50                   	push   %eax
f0111f2e:	e8 79 49 00 00       	call   f01168ac <ClearUserSpace>
f0111f33:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f0111f36:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0111f3d:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111f42:	83 ec 08             	sub    $0x8,%esp
f0111f45:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f48:	50                   	push   %eax
f0111f49:	e8 53 61 ff ff       	call   f01080a1 <virtual_to_physical>
f0111f4e:	83 c4 10             	add    $0x10,%esp
f0111f51:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f0111f54:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0111f58:	74 17                	je     f0111f71 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0111f5a:	83 ec 04             	sub    $0x4,%esp
f0111f5d:	68 74 92 13 f0       	push   $0xf0139274
f0111f62:	68 16 01 00 00       	push   $0x116
f0111f67:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111f6c:	e8 94 e2 fe ff       	call   f0100205 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0111f71:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111f78:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111f7d:	83 ec 08             	sub    $0x8,%esp
f0111f80:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f83:	50                   	push   %eax
f0111f84:	e8 18 61 ff ff       	call   f01080a1 <virtual_to_physical>
f0111f89:	83 c4 10             	add    $0x10,%esp
f0111f8c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0111f8f:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0111f94:	83 ec 08             	sub    $0x8,%esp
f0111f97:	ff 75 dc             	pushl  -0x24(%ebp)
f0111f9a:	50                   	push   %eax
f0111f9b:	e8 0b 48 00 00       	call   f01167ab <CA>
f0111fa0:	83 c4 10             	add    $0x10,%esp
f0111fa3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0111fa6:	74 17                	je     f0111fbf <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f0111fa8:	83 ec 04             	sub    $0x4,%esp
f0111fab:	68 ac 92 13 f0       	push   $0xf01392ac
f0111fb0:	68 1f 01 00 00       	push   $0x11f
f0111fb5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0111fba:	e8 46 e2 fe ff       	call   f0100205 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f0111fbf:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111fc5:	bb 78 94 13 f0       	mov    $0xf0139478,%ebx
f0111fca:	ba 0d 00 00 00       	mov    $0xd,%edx
f0111fcf:	89 c7                	mov    %eax,%edi
f0111fd1:	89 de                	mov    %ebx,%esi
f0111fd3:	89 d1                	mov    %edx,%ecx
f0111fd5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111fd7:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0111fda:	b9 57 00 00 00       	mov    $0x57,%ecx
f0111fdf:	b0 00                	mov    $0x0,%al
f0111fe1:	89 d7                	mov    %edx,%edi
f0111fe3:	f3 aa                	rep stos %al,%es:(%edi)
f0111fe5:	83 ec 0c             	sub    $0xc,%esp
f0111fe8:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0111fee:	50                   	push   %eax
f0111fef:	e8 7c ed fe ff       	call   f0100d70 <execute_command>
f0111ff4:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f0111ff7:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0111ffe:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0112003:	83 ec 08             	sub    $0x8,%esp
f0112006:	ff 75 dc             	pushl  -0x24(%ebp)
f0112009:	50                   	push   %eax
f011200a:	e8 92 60 ff ff       	call   f01080a1 <virtual_to_physical>
f011200f:	83 c4 10             	add    $0x10,%esp
f0112012:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112015:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f011201a:	83 ec 08             	sub    $0x8,%esp
f011201d:	ff 75 dc             	pushl  -0x24(%ebp)
f0112020:	50                   	push   %eax
f0112021:	e8 85 47 00 00       	call   f01167ab <CA>
f0112026:	83 c4 10             	add    $0x10,%esp
f0112029:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011202c:	74 17                	je     f0112045 <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f011202e:	83 ec 04             	sub    $0x4,%esp
f0112031:	68 e4 92 13 f0       	push   $0xf01392e4
f0112036:	68 28 01 00 00       	push   $0x128
f011203b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112040:	e8 c0 e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f0112045:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011204b:	bb dc 94 13 f0       	mov    $0xf01394dc,%ebx
f0112050:	ba 0d 00 00 00       	mov    $0xd,%edx
f0112055:	89 c7                	mov    %eax,%edi
f0112057:	89 de                	mov    %ebx,%esi
f0112059:	89 d1                	mov    %edx,%ecx
f011205b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011205d:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f0112063:	b9 57 00 00 00       	mov    $0x57,%ecx
f0112068:	b0 00                	mov    $0x0,%al
f011206a:	89 d7                	mov    %edx,%edi
f011206c:	f3 aa                	rep stos %al,%es:(%edi)
f011206e:	83 ec 0c             	sub    $0xc,%esp
f0112071:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0112077:	50                   	push   %eax
f0112078:	e8 f3 ec fe ff       	call   f0100d70 <execute_command>
f011207d:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f0112080:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112087:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f011208c:	83 ec 08             	sub    $0x8,%esp
f011208f:	ff 75 dc             	pushl  -0x24(%ebp)
f0112092:	50                   	push   %eax
f0112093:	e8 09 60 ff ff       	call   f01080a1 <virtual_to_physical>
f0112098:	83 c4 10             	add    $0x10,%esp
f011209b:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011209e:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01120a3:	83 ec 08             	sub    $0x8,%esp
f01120a6:	ff 75 dc             	pushl  -0x24(%ebp)
f01120a9:	50                   	push   %eax
f01120aa:	e8 fc 46 00 00       	call   f01167ab <CA>
f01120af:	83 c4 10             	add    $0x10,%esp
f01120b2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01120b5:	74 17                	je     f01120ce <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01120b7:	83 ec 04             	sub    $0x4,%esp
f01120ba:	68 1c 93 13 f0       	push   $0xf013931c
f01120bf:	68 31 01 00 00       	push   $0x131
f01120c4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01120c9:	e8 37 e1 fe ff       	call   f0100205 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01120ce:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01120d4:	bb 40 95 13 f0       	mov    $0xf0139540,%ebx
f01120d9:	ba 0d 00 00 00       	mov    $0xd,%edx
f01120de:	89 c7                	mov    %eax,%edi
f01120e0:	89 de                	mov    %ebx,%esi
f01120e2:	89 d1                	mov    %edx,%ecx
f01120e4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01120e6:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f01120ec:	b9 57 00 00 00       	mov    $0x57,%ecx
f01120f1:	b0 00                	mov    $0x0,%al
f01120f3:	89 d7                	mov    %edx,%edi
f01120f5:	f3 aa                	rep stos %al,%es:(%edi)
f01120f7:	83 ec 0c             	sub    $0xc,%esp
f01120fa:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0112100:	50                   	push   %eax
f0112101:	e8 6a ec fe ff       	call   f0100d70 <execute_command>
f0112106:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0112109:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112110:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0112115:	83 ec 08             	sub    $0x8,%esp
f0112118:	ff 75 dc             	pushl  -0x24(%ebp)
f011211b:	50                   	push   %eax
f011211c:	e8 80 5f ff ff       	call   f01080a1 <virtual_to_physical>
f0112121:	83 c4 10             	add    $0x10,%esp
f0112124:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112127:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f011212c:	83 ec 08             	sub    $0x8,%esp
f011212f:	ff 75 dc             	pushl  -0x24(%ebp)
f0112132:	50                   	push   %eax
f0112133:	e8 73 46 00 00       	call   f01167ab <CA>
f0112138:	83 c4 10             	add    $0x10,%esp
f011213b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011213e:	74 17                	je     f0112157 <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0112140:	83 ec 04             	sub    $0x4,%esp
f0112143:	68 54 93 13 f0       	push   $0xf0139354
f0112148:	68 3a 01 00 00       	push   $0x13a
f011214d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112152:	e8 ae e0 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001000;
f0112157:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f011215e:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0112163:	83 ec 08             	sub    $0x8,%esp
f0112166:	ff 75 dc             	pushl  -0x24(%ebp)
f0112169:	50                   	push   %eax
f011216a:	e8 32 5f ff ff       	call   f01080a1 <virtual_to_physical>
f011216f:	83 c4 10             	add    $0x10,%esp
f0112172:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0112175:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f011217a:	83 ec 08             	sub    $0x8,%esp
f011217d:	ff 75 dc             	pushl  -0x24(%ebp)
f0112180:	50                   	push   %eax
f0112181:	e8 25 46 00 00       	call   f01167ab <CA>
f0112186:	83 c4 10             	add    $0x10,%esp
f0112189:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011218c:	74 17                	je     f01121a5 <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f011218e:	83 ec 04             	sub    $0x4,%esp
f0112191:	68 8c 93 13 f0       	push   $0xf013938c
f0112196:	68 42 01 00 00       	push   $0x142
f011219b:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01121a0:	e8 60 e0 fe ff       	call   f0100205 <_panic>

	//============================
	va = 0xF0001005;
f01121a5:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01121ac:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01121b1:	83 ec 08             	sub    $0x8,%esp
f01121b4:	ff 75 dc             	pushl  -0x24(%ebp)
f01121b7:	50                   	push   %eax
f01121b8:	e8 e4 5e ff ff       	call   f01080a1 <virtual_to_physical>
f01121bd:	83 c4 10             	add    $0x10,%esp
f01121c0:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01121c3:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01121c8:	83 ec 08             	sub    $0x8,%esp
f01121cb:	ff 75 dc             	pushl  -0x24(%ebp)
f01121ce:	50                   	push   %eax
f01121cf:	e8 d7 45 00 00       	call   f01167ab <CA>
f01121d4:	83 c4 10             	add    $0x10,%esp
f01121d7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01121da:	74 17                	je     f01121f3 <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f01121dc:	83 ec 04             	sub    $0x4,%esp
f01121df:	68 c4 93 13 f0       	push   $0xf01393c4
f01121e4:	68 4a 01 00 00       	push   $0x14a
f01121e9:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01121ee:	e8 12 e0 fe ff       	call   f0100205 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f01121f3:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f01121f9:	bb a4 95 13 f0       	mov    $0xf01395a4,%ebx
f01121fe:	ba 0e 00 00 00       	mov    $0xe,%edx
f0112203:	89 c7                	mov    %eax,%edi
f0112205:	89 de                	mov    %ebx,%esi
f0112207:	89 d1                	mov    %edx,%ecx
f0112209:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011220b:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0112211:	b9 56 00 00 00       	mov    $0x56,%ecx
f0112216:	b0 00                	mov    $0x0,%al
f0112218:	89 d7                	mov    %edx,%edi
f011221a:	f3 aa                	rep stos %al,%es:(%edi)
f011221c:	83 ec 0c             	sub    $0xc,%esp
f011221f:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0112225:	50                   	push   %eax
f0112226:	e8 45 eb fe ff       	call   f0100d70 <execute_command>
f011222b:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f011222e:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0112235:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f011223a:	83 ec 08             	sub    $0x8,%esp
f011223d:	ff 75 dc             	pushl  -0x24(%ebp)
f0112240:	50                   	push   %eax
f0112241:	e8 5b 5e ff ff       	call   f01080a1 <virtual_to_physical>
f0112246:	83 c4 10             	add    $0x10,%esp
f0112249:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011224c:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0112251:	83 ec 08             	sub    $0x8,%esp
f0112254:	ff 75 dc             	pushl  -0x24(%ebp)
f0112257:	50                   	push   %eax
f0112258:	e8 4e 45 00 00       	call   f01167ab <CA>
f011225d:	83 c4 10             	add    $0x10,%esp
f0112260:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0112263:	74 17                	je     f011227c <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0112265:	83 ec 04             	sub    $0x4,%esp
f0112268:	68 fc 93 13 f0       	push   $0xf01393fc
f011226d:	68 53 01 00 00       	push   $0x153
f0112272:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112277:	e8 89 df fe ff       	call   f0100205 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f011227c:	83 ec 0c             	sub    $0xc,%esp
f011227f:	68 34 94 13 f0       	push   $0xf0139434
f0112284:	e8 85 ea fe ff       	call   f0100d0e <cprintf>
f0112289:	83 c4 10             	add    $0x10,%esp

	return 0;
f011228c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112291:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112294:	5b                   	pop    %ebx
f0112295:	5e                   	pop    %esi
f0112296:	5f                   	pop    %edi
f0112297:	5d                   	pop    %ebp
f0112298:	c3                   	ret    

f0112299 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0112299:	55                   	push   %ebp
f011229a:	89 e5                	mov    %esp,%ebp
f011229c:	57                   	push   %edi
f011229d:	56                   	push   %esi
f011229e:	53                   	push   %ebx
f011229f:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01122a5:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01122ab:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f01122b0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122b5:	89 c7                	mov    %eax,%edi
f01122b7:	89 de                	mov    %ebx,%esi
f01122b9:	89 d1                	mov    %edx,%ecx
f01122bb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01122bd:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01122c3:	b9 23 00 00 00       	mov    $0x23,%ecx
f01122c8:	b0 00                	mov    $0x0,%al
f01122ca:	89 d7                	mov    %edx,%edi
f01122cc:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01122ce:	6a 00                	push   $0x0
f01122d0:	6a 0a                	push   $0xa
f01122d2:	6a 14                	push   $0x14
f01122d4:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01122da:	50                   	push   %eax
f01122db:	e8 97 71 ff ff       	call   f0109477 <env_create>
f01122e0:	83 c4 10             	add    $0x10,%esp
f01122e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01122e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01122e9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01122ec:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01122ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01122f2:	8b 40 60             	mov    0x60(%eax),%eax
f01122f5:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01122f8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01122fb:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01122fe:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112305:	75 70 20 
f0112308:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f011230f:	00 00 00 
f0112312:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0112318:	b9 03 00 00 00       	mov    $0x3,%ecx
f011231d:	b8 00 00 00 00       	mov    $0x0,%eax
f0112322:	89 d7                	mov    %edx,%edi
f0112324:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112326:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112329:	8b 40 4c             	mov    0x4c(%eax),%eax
f011232c:	83 ec 08             	sub    $0x8,%esp
f011232f:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112335:	52                   	push   %edx
f0112336:	50                   	push   %eax
f0112337:	e8 6f fb 01 00       	call   f0131eab <ltostr>
f011233c:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011233f:	83 ec 04             	sub    $0x4,%esp
f0112342:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112348:	50                   	push   %eax
f0112349:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f011234f:	50                   	push   %eax
f0112350:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112356:	50                   	push   %eax
f0112357:	e8 47 fc 01 00       	call   f0131fa3 <strcconcat>
f011235c:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f011235f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112366:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011236d:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112374:	83 ec 0c             	sub    $0xc,%esp
f0112377:	ff 75 d4             	pushl  -0x2c(%ebp)
f011237a:	e8 2d 45 00 00       	call   f01168ac <ClearUserSpace>
f011237f:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112382:	83 ec 04             	sub    $0x4,%esp
f0112385:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011238b:	50                   	push   %eax
f011238c:	68 08 96 13 f0       	push   $0xf0139608
f0112391:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112397:	50                   	push   %eax
f0112398:	e8 06 fc 01 00       	call   f0131fa3 <strcconcat>
f011239d:	83 c4 10             	add    $0x10,%esp
f01123a0:	83 ec 0c             	sub    $0xc,%esp
f01123a3:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01123a9:	50                   	push   %eax
f01123aa:	e8 c1 e9 fe ff       	call   f0100d70 <execute_command>
f01123af:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01123b2:	83 ec 04             	sub    $0x4,%esp
f01123b5:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01123bb:	50                   	push   %eax
f01123bc:	68 13 96 13 f0       	push   $0xf0139613
f01123c1:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123c7:	50                   	push   %eax
f01123c8:	e8 d6 fb 01 00       	call   f0131fa3 <strcconcat>
f01123cd:	83 c4 10             	add    $0x10,%esp
f01123d0:	83 ec 0c             	sub    $0xc,%esp
f01123d3:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01123d9:	50                   	push   %eax
f01123da:	e8 91 e9 fe ff       	call   f0100d70 <execute_command>
f01123df:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01123e2:	83 ec 04             	sub    $0x4,%esp
f01123e5:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01123eb:	50                   	push   %eax
f01123ec:	68 1e 96 13 f0       	push   $0xf013961e
f01123f1:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01123f7:	50                   	push   %eax
f01123f8:	e8 a6 fb 01 00       	call   f0131fa3 <strcconcat>
f01123fd:	83 c4 10             	add    $0x10,%esp
f0112400:	83 ec 0c             	sub    $0xc,%esp
f0112403:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0112409:	50                   	push   %eax
f011240a:	e8 61 e9 fe ff       	call   f0100d70 <execute_command>
f011240f:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112412:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0112419:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011241c:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f011241f:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112426:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112429:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011242c:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112433:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112436:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0112439:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011243c:	83 ec 08             	sub    $0x8,%esp
f011243f:	50                   	push   %eax
f0112440:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112443:	e8 45 44 00 00       	call   f011688d <GP>
f0112448:	83 c4 10             	add    $0x10,%esp
f011244b:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f011244e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112455:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011245c:	e8 50 ad ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0112461:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112464:	83 ec 0c             	sub    $0xc,%esp
f0112467:	68 2c 96 13 f0       	push   $0xf013962c
f011246c:	e8 9d e8 fe ff       	call   f0100d0e <cprintf>
f0112471:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112474:	6a 03                	push   $0x3
f0112476:	68 00 00 90 02       	push   $0x2900000
f011247b:	68 00 00 80 02       	push   $0x2800000
f0112480:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112483:	e8 7b 66 ff ff       	call   f0108b03 <cut_paste_pages>
f0112488:	83 c4 10             	add    $0x10,%esp
f011248b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f011248e:	e8 1e ad ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0112493:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112496:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f011249d:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01124a1:	75 08                	jne    f01124ab <test_cut_paste_pages+0x212>
f01124a3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124a6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01124a9:	74 2b                	je     f01124d6 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01124ab:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124ae:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01124b1:	83 ec 0c             	sub    $0xc,%esp
f01124b4:	50                   	push   %eax
f01124b5:	ff 75 b4             	pushl  -0x4c(%ebp)
f01124b8:	68 5c 96 13 f0       	push   $0xf013965c
f01124bd:	68 91 01 00 00       	push   $0x191
f01124c2:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01124c7:	e8 47 df fe ff       	call   f0100413 <_warn>
f01124cc:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01124cf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01124d6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01124da:	74 04                	je     f01124e0 <test_cut_paste_pages+0x247>
f01124dc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01124e0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01124e7:	83 ec 08             	sub    $0x8,%esp
f01124ea:	6a 00                	push   $0x0
f01124ec:	6a 01                	push   $0x1
f01124ee:	6a 00                	push   $0x0
f01124f0:	68 ff 0f 00 00       	push   $0xfff
f01124f5:	ff 75 bc             	pushl  -0x44(%ebp)
f01124f8:	6a 01                	push   $0x1
f01124fa:	68 00 30 00 00       	push   $0x3000
f01124ff:	68 00 00 90 02       	push   $0x2900000
f0112504:	68 00 00 80 02       	push   $0x2800000
f0112509:	ff 75 d4             	pushl  -0x2c(%ebp)
f011250c:	e8 cf 43 00 00       	call   f01168e0 <CCP>
f0112511:	83 c4 30             	add    $0x30,%esp
f0112514:	83 f8 01             	cmp    $0x1,%eax
f0112517:	74 21                	je     f011253a <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112519:	83 ec 04             	sub    $0x4,%esp
f011251c:	68 b0 96 13 f0       	push   $0xf01396b0
f0112521:	68 99 01 00 00       	push   $0x199
f0112526:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011252b:	e8 e3 de fe ff       	call   f0100413 <_warn>
f0112530:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112533:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011253a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011253e:	74 04                	je     f0112544 <test_cut_paste_pages+0x2ab>
f0112540:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112544:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011254b:	83 ec 04             	sub    $0x4,%esp
f011254e:	6a 00                	push   $0x0
f0112550:	68 00 00 90 02       	push   $0x2900000
f0112555:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112558:	e8 5f 41 00 00       	call   f01166bc <CB>
f011255d:	83 c4 10             	add    $0x10,%esp
f0112560:	85 c0                	test   %eax,%eax
f0112562:	0f 84 f6 00 00 00    	je     f011265e <test_cut_paste_pages+0x3c5>
f0112568:	83 ec 04             	sub    $0x4,%esp
f011256b:	6a 00                	push   $0x0
f011256d:	68 00 10 90 02       	push   $0x2901000
f0112572:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112575:	e8 42 41 00 00       	call   f01166bc <CB>
f011257a:	83 c4 10             	add    $0x10,%esp
f011257d:	85 c0                	test   %eax,%eax
f011257f:	0f 84 d9 00 00 00    	je     f011265e <test_cut_paste_pages+0x3c5>
f0112585:	83 ec 04             	sub    $0x4,%esp
f0112588:	6a 00                	push   $0x0
f011258a:	68 00 20 90 02       	push   $0x2902000
f011258f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112592:	e8 25 41 00 00       	call   f01166bc <CB>
f0112597:	83 c4 10             	add    $0x10,%esp
f011259a:	85 c0                	test   %eax,%eax
f011259c:	0f 84 bc 00 00 00    	je     f011265e <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f01125a2:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01125a9:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01125b0:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01125b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125ba:	8a 00                	mov    (%eax),%al
f01125bc:	3c 61                	cmp    $0x61,%al
f01125be:	75 12                	jne    f01125d2 <test_cut_paste_pages+0x339>
f01125c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125c3:	8a 00                	mov    (%eax),%al
f01125c5:	3c 62                	cmp    $0x62,%al
f01125c7:	75 09                	jne    f01125d2 <test_cut_paste_pages+0x339>
f01125c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01125cc:	8a 00                	mov    (%eax),%al
f01125ce:	3c 63                	cmp    $0x63,%al
f01125d0:	74 21                	je     f01125f3 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01125d2:	83 ec 04             	sub    $0x4,%esp
f01125d5:	68 fc 96 13 f0       	push   $0xf01396fc
f01125da:	68 a6 01 00 00       	push   $0x1a6
f01125df:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01125e4:	e8 2a de fe ff       	call   f0100413 <_warn>
f01125e9:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01125ec:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01125f3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125f7:	74 04                	je     f01125fd <test_cut_paste_pages+0x364>
f01125f9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01125fd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112604:	83 ec 04             	sub    $0x4,%esp
f0112607:	6a 01                	push   $0x1
f0112609:	68 00 10 90 02       	push   $0x2901000
f011260e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112611:	e8 a6 40 00 00       	call   f01166bc <CB>
f0112616:	83 c4 10             	add    $0x10,%esp
f0112619:	85 c0                	test   %eax,%eax
f011261b:	74 41                	je     f011265e <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f011261d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112620:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112623:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112626:	8a 00                	mov    (%eax),%al
f0112628:	3c 79                	cmp    $0x79,%al
f011262a:	74 21                	je     f011264d <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011262c:	83 ec 04             	sub    $0x4,%esp
f011262f:	68 fc 96 13 f0       	push   $0xf01396fc
f0112634:	68 b1 01 00 00       	push   $0x1b1
f0112639:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011263e:	e8 d0 dd fe ff       	call   f0100413 <_warn>
f0112643:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112646:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011264d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112651:	74 04                	je     f0112657 <test_cut_paste_pages+0x3be>
f0112653:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112657:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f011265e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112661:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112664:	6a 02                	push   $0x2
f0112666:	68 00 f0 bf 02       	push   $0x2bff000
f011266b:	68 00 10 90 02       	push   $0x2901000
f0112670:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112673:	e8 8b 64 ff ff       	call   f0108b03 <cut_paste_pages>
f0112678:	83 c4 10             	add    $0x10,%esp
f011267b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011267e:	e8 2e ab ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0112683:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112686:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011268a:	75 0b                	jne    f0112697 <test_cut_paste_pages+0x3fe>
f011268c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011268f:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112692:	83 f8 01             	cmp    $0x1,%eax
f0112695:	74 2b                	je     f01126c2 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112697:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011269a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011269d:	83 ec 0c             	sub    $0xc,%esp
f01126a0:	50                   	push   %eax
f01126a1:	ff 75 b4             	pushl  -0x4c(%ebp)
f01126a4:	68 5c 96 13 f0       	push   $0xf013965c
f01126a9:	68 c2 01 00 00       	push   $0x1c2
f01126ae:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01126b3:	e8 5b dd fe ff       	call   f0100413 <_warn>
f01126b8:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01126bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01126c2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126c6:	74 04                	je     f01126cc <test_cut_paste_pages+0x433>
f01126c8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01126cc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01126d3:	83 ec 08             	sub    $0x8,%esp
f01126d6:	6a 00                	push   $0x0
f01126d8:	6a 01                	push   $0x1
f01126da:	6a 00                	push   $0x0
f01126dc:	68 ff 0f 00 00       	push   $0xfff
f01126e1:	ff 75 bc             	pushl  -0x44(%ebp)
f01126e4:	6a 01                	push   $0x1
f01126e6:	68 00 20 00 00       	push   $0x2000
f01126eb:	68 00 f0 bf 02       	push   $0x2bff000
f01126f0:	68 00 10 90 02       	push   $0x2901000
f01126f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01126f8:	e8 e3 41 00 00       	call   f01168e0 <CCP>
f01126fd:	83 c4 30             	add    $0x30,%esp
f0112700:	83 f8 01             	cmp    $0x1,%eax
f0112703:	74 21                	je     f0112726 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112705:	83 ec 04             	sub    $0x4,%esp
f0112708:	68 b0 96 13 f0       	push   $0xf01396b0
f011270d:	68 ca 01 00 00       	push   $0x1ca
f0112712:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112717:	e8 f7 dc fe ff       	call   f0100413 <_warn>
f011271c:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011271f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112726:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011272a:	74 04                	je     f0112730 <test_cut_paste_pages+0x497>
f011272c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112730:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112737:	83 ec 04             	sub    $0x4,%esp
f011273a:	6a 00                	push   $0x0
f011273c:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112741:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112744:	e8 73 3f 00 00       	call   f01166bc <CB>
f0112749:	83 c4 10             	add    $0x10,%esp
f011274c:	85 c0                	test   %eax,%eax
f011274e:	74 6b                	je     f01127bb <test_cut_paste_pages+0x522>
f0112750:	83 ec 04             	sub    $0x4,%esp
f0112753:	6a 00                	push   $0x0
f0112755:	68 ff 0f c0 02       	push   $0x2c00fff
f011275a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011275d:	e8 5a 3f 00 00       	call   f01166bc <CB>
f0112762:	83 c4 10             	add    $0x10,%esp
f0112765:	85 c0                	test   %eax,%eax
f0112767:	74 52                	je     f01127bb <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0112769:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112770:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112777:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011277a:	8a 00                	mov    (%eax),%al
f011277c:	3c 79                	cmp    $0x79,%al
f011277e:	75 09                	jne    f0112789 <test_cut_paste_pages+0x4f0>
f0112780:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112783:	8a 00                	mov    (%eax),%al
f0112785:	3c 63                	cmp    $0x63,%al
f0112787:	74 21                	je     f01127aa <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112789:	83 ec 04             	sub    $0x4,%esp
f011278c:	68 fc 96 13 f0       	push   $0xf01396fc
f0112791:	68 d6 01 00 00       	push   $0x1d6
f0112796:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011279b:	e8 73 dc fe ff       	call   f0100413 <_warn>
f01127a0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01127a3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01127aa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127ae:	74 04                	je     f01127b4 <test_cut_paste_pages+0x51b>
f01127b0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01127b4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01127bb:	83 ec 0c             	sub    $0xc,%esp
f01127be:	68 35 97 13 f0       	push   $0xf0139735
f01127c3:	e8 46 e5 fe ff       	call   f0100d0e <cprintf>
f01127c8:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01127cb:	83 ec 0c             	sub    $0xc,%esp
f01127ce:	68 44 97 13 f0       	push   $0xf0139744
f01127d3:	e8 36 e5 fe ff       	call   f0100d0e <cprintf>
f01127d8:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01127db:	83 ec 04             	sub    $0x4,%esp
f01127de:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01127e4:	50                   	push   %eax
f01127e5:	68 6d 97 13 f0       	push   $0xf013976d
f01127ea:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01127f0:	50                   	push   %eax
f01127f1:	e8 ad f7 01 00       	call   f0131fa3 <strcconcat>
f01127f6:	83 c4 10             	add    $0x10,%esp
f01127f9:	83 ec 0c             	sub    $0xc,%esp
f01127fc:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112802:	50                   	push   %eax
f0112803:	e8 68 e5 fe ff       	call   f0100d70 <execute_command>
f0112808:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011280b:	83 ec 04             	sub    $0x4,%esp
f011280e:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112814:	50                   	push   %eax
f0112815:	68 78 97 13 f0       	push   $0xf0139778
f011281a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112820:	50                   	push   %eax
f0112821:	e8 7d f7 01 00       	call   f0131fa3 <strcconcat>
f0112826:	83 c4 10             	add    $0x10,%esp
f0112829:	83 ec 0c             	sub    $0xc,%esp
f011282c:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112832:	50                   	push   %eax
f0112833:	e8 38 e5 fe ff       	call   f0100d70 <execute_command>
f0112838:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f011283b:	83 ec 04             	sub    $0x4,%esp
f011283e:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112844:	50                   	push   %eax
f0112845:	68 83 97 13 f0       	push   $0xf0139783
f011284a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112850:	50                   	push   %eax
f0112851:	e8 4d f7 01 00       	call   f0131fa3 <strcconcat>
f0112856:	83 c4 10             	add    $0x10,%esp
f0112859:	83 ec 0c             	sub    $0xc,%esp
f011285c:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112862:	50                   	push   %eax
f0112863:	e8 08 e5 fe ff       	call   f0100d70 <execute_command>
f0112868:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f011286b:	83 ec 04             	sub    $0x4,%esp
f011286e:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112874:	50                   	push   %eax
f0112875:	68 8e 97 13 f0       	push   $0xf013978e
f011287a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112880:	50                   	push   %eax
f0112881:	e8 1d f7 01 00       	call   f0131fa3 <strcconcat>
f0112886:	83 c4 10             	add    $0x10,%esp
f0112889:	83 ec 0c             	sub    $0xc,%esp
f011288c:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112892:	50                   	push   %eax
f0112893:	e8 d8 e4 fe ff       	call   f0100d70 <execute_command>
f0112898:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f011289b:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01128a2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128a5:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01128a8:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01128af:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128b2:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01128b5:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01128bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128bf:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01128c2:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01128c9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128cc:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01128cf:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01128d6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128d9:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f01128dc:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f01128e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01128e6:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f01128e9:	83 ec 08             	sub    $0x8,%esp
f01128ec:	68 00 00 c0 01       	push   $0x1c00000
f01128f1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128f4:	e8 94 3f 00 00       	call   f011688d <GP>
f01128f9:	83 c4 10             	add    $0x10,%esp
f01128fc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f01128ff:	83 ec 08             	sub    $0x8,%esp
f0112902:	68 00 00 40 01       	push   $0x1400000
f0112907:	ff 75 d4             	pushl  -0x2c(%ebp)
f011290a:	e8 7e 3f 00 00       	call   f011688d <GP>
f011290f:	83 c4 10             	add    $0x10,%esp
f0112912:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112915:	e8 97 a8 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011291a:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f011291d:	6a 01                	push   $0x1
f011291f:	68 00 00 40 01       	push   $0x1400000
f0112924:	68 00 00 c0 01       	push   $0x1c00000
f0112929:	ff 75 d4             	pushl  -0x2c(%ebp)
f011292c:	e8 d2 61 ff ff       	call   f0108b03 <cut_paste_pages>
f0112931:	83 c4 10             	add    $0x10,%esp
f0112934:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112937:	e8 75 a8 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011293c:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011293f:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112943:	75 08                	jne    f011294d <test_cut_paste_pages+0x6b4>
f0112945:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112948:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011294b:	74 2b                	je     f0112978 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f011294d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112950:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112953:	83 ec 0c             	sub    $0xc,%esp
f0112956:	50                   	push   %eax
f0112957:	ff 75 b4             	pushl  -0x4c(%ebp)
f011295a:	68 9c 97 13 f0       	push   $0xf013979c
f011295f:	68 f9 01 00 00       	push   $0x1f9
f0112964:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112969:	e8 a5 da fe ff       	call   f0100413 <_warn>
f011296e:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112971:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112978:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011297c:	74 04                	je     f0112982 <test_cut_paste_pages+0x6e9>
f011297e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112982:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112989:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112990:	83 ec 08             	sub    $0x8,%esp
f0112993:	6a 00                	push   $0x0
f0112995:	68 ff 0f 00 00       	push   $0xfff
f011299a:	ff 75 a4             	pushl  -0x5c(%ebp)
f011299d:	68 ff 0f 00 00       	push   $0xfff
f01129a2:	ff 75 a0             	pushl  -0x60(%ebp)
f01129a5:	6a 01                	push   $0x1
f01129a7:	68 00 10 00 00       	push   $0x1000
f01129ac:	68 00 00 40 01       	push   $0x1400000
f01129b1:	68 00 00 c0 01       	push   $0x1c00000
f01129b6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01129b9:	e8 22 3f 00 00       	call   f01168e0 <CCP>
f01129be:	83 c4 30             	add    $0x30,%esp
f01129c1:	83 f8 01             	cmp    $0x1,%eax
f01129c4:	74 28                	je     f01129ee <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01129c6:	83 ec 04             	sub    $0x4,%esp
f01129c9:	68 b0 96 13 f0       	push   $0xf01396b0
f01129ce:	68 02 02 00 00       	push   $0x202
f01129d3:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01129d8:	e8 36 da fe ff       	call   f0100413 <_warn>
f01129dd:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01129e0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01129e7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f01129ee:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129f2:	74 04                	je     f01129f8 <test_cut_paste_pages+0x75f>
f01129f4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01129f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f01129ff:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112a03:	0f 84 92 00 00 00    	je     f0112a9b <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0112a09:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112a10:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112a17:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112a1e:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112a25:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112a2c:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a33:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112a36:	8a 00                	mov    (%eax),%al
f0112a38:	3c 61                	cmp    $0x61,%al
f0112a3a:	75 2d                	jne    f0112a69 <test_cut_paste_pages+0x7d0>
f0112a3c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112a3f:	8a 00                	mov    (%eax),%al
f0112a41:	3c 78                	cmp    $0x78,%al
f0112a43:	75 24                	jne    f0112a69 <test_cut_paste_pages+0x7d0>
f0112a45:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112a48:	8a 00                	mov    (%eax),%al
f0112a4a:	3c 62                	cmp    $0x62,%al
f0112a4c:	75 1b                	jne    f0112a69 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112a4e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112a51:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112a53:	3c 79                	cmp    $0x79,%al
f0112a55:	75 12                	jne    f0112a69 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112a57:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a5a:	8a 00                	mov    (%eax),%al
f0112a5c:	3c 63                	cmp    $0x63,%al
f0112a5e:	75 09                	jne    f0112a69 <test_cut_paste_pages+0x7d0>
f0112a60:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112a63:	8a 00                	mov    (%eax),%al
f0112a65:	3c 7a                	cmp    $0x7a,%al
f0112a67:	74 21                	je     f0112a8a <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112a69:	83 ec 04             	sub    $0x4,%esp
f0112a6c:	68 fc 96 13 f0       	push   $0xf01396fc
f0112a71:	68 14 02 00 00       	push   $0x214
f0112a76:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112a7b:	e8 93 d9 fe ff       	call   f0100413 <_warn>
f0112a80:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a83:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112a8a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112a8e:	74 04                	je     f0112a94 <test_cut_paste_pages+0x7fb>
f0112a90:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a94:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112a9b:	e8 11 a7 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0112aa0:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112aa3:	6a 03                	push   $0x3
f0112aa5:	68 00 f0 bf 01       	push   $0x1bff000
f0112aaa:	68 00 00 40 01       	push   $0x1400000
f0112aaf:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ab2:	e8 4c 60 ff ff       	call   f0108b03 <cut_paste_pages>
f0112ab7:	83 c4 10             	add    $0x10,%esp
f0112aba:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112abd:	e8 ef a6 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0112ac2:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112ac5:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112ac9:	75 08                	jne    f0112ad3 <test_cut_paste_pages+0x83a>
f0112acb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ace:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112ad1:	74 2b                	je     f0112afe <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112ad3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ad6:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112ad9:	83 ec 0c             	sub    $0xc,%esp
f0112adc:	50                   	push   %eax
f0112add:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112ae0:	68 9c 97 13 f0       	push   $0xf013979c
f0112ae5:	68 23 02 00 00       	push   $0x223
f0112aea:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112aef:	e8 1f d9 fe ff       	call   f0100413 <_warn>
f0112af4:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112af7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112afe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b02:	74 04                	je     f0112b08 <test_cut_paste_pages+0x86f>
f0112b04:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112b08:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112b0f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112b16:	83 ec 04             	sub    $0x4,%esp
f0112b19:	6a 00                	push   $0x0
f0112b1b:	68 00 00 40 01       	push   $0x1400000
f0112b20:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b23:	e8 94 3b 00 00       	call   f01166bc <CB>
f0112b28:	83 c4 10             	add    $0x10,%esp
f0112b2b:	83 f8 01             	cmp    $0x1,%eax
f0112b2e:	0f 85 80 00 00 00    	jne    f0112bb4 <test_cut_paste_pages+0x91b>
f0112b34:	83 ec 04             	sub    $0x4,%esp
f0112b37:	6a 00                	push   $0x0
f0112b39:	68 00 10 40 01       	push   $0x1401000
f0112b3e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b41:	e8 76 3b 00 00       	call   f01166bc <CB>
f0112b46:	83 c4 10             	add    $0x10,%esp
f0112b49:	83 f8 01             	cmp    $0x1,%eax
f0112b4c:	75 66                	jne    f0112bb4 <test_cut_paste_pages+0x91b>
f0112b4e:	83 ec 04             	sub    $0x4,%esp
f0112b51:	6a 00                	push   $0x0
f0112b53:	68 00 20 40 01       	push   $0x1402000
f0112b58:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b5b:	e8 5c 3b 00 00       	call   f01166bc <CB>
f0112b60:	83 c4 10             	add    $0x10,%esp
f0112b63:	83 f8 01             	cmp    $0x1,%eax
f0112b66:	75 4c                	jne    f0112bb4 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112b68:	83 ec 04             	sub    $0x4,%esp
f0112b6b:	6a 00                	push   $0x0
f0112b6d:	68 00 f0 bf 01       	push   $0x1bff000
f0112b72:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b75:	e8 42 3b 00 00       	call   f01166bc <CB>
f0112b7a:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112b7d:	85 c0                	test   %eax,%eax
f0112b7f:	75 33                	jne    f0112bb4 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112b81:	83 ec 04             	sub    $0x4,%esp
f0112b84:	6a 00                	push   $0x0
f0112b86:	68 00 00 c0 01       	push   $0x1c00000
f0112b8b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b8e:	e8 29 3b 00 00       	call   f01166bc <CB>
f0112b93:	83 c4 10             	add    $0x10,%esp
f0112b96:	83 f8 01             	cmp    $0x1,%eax
f0112b99:	75 19                	jne    f0112bb4 <test_cut_paste_pages+0x91b>
f0112b9b:	83 ec 04             	sub    $0x4,%esp
f0112b9e:	6a 00                	push   $0x0
f0112ba0:	68 00 10 c0 01       	push   $0x1c01000
f0112ba5:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112ba8:	e8 0f 3b 00 00       	call   f01166bc <CB>
f0112bad:	83 c4 10             	add    $0x10,%esp
f0112bb0:	85 c0                	test   %eax,%eax
f0112bb2:	74 28                	je     f0112bdc <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112bb4:	83 ec 04             	sub    $0x4,%esp
f0112bb7:	68 fc 97 13 f0       	push   $0xf01397fc
f0112bbc:	68 2c 02 00 00       	push   $0x22c
f0112bc1:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112bc6:	e8 48 d8 fe ff       	call   f0100413 <_warn>
f0112bcb:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112bce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112bd5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112bdc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112be0:	74 04                	je     f0112be6 <test_cut_paste_pages+0x94d>
f0112be2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112be6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112bed:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112bf1:	0f 84 99 00 00 00    	je     f0112c90 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0112bf7:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112bfe:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112c05:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112c0c:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112c13:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112c1a:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c21:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c24:	8a 00                	mov    (%eax),%al
f0112c26:	3c 61                	cmp    $0x61,%al
f0112c28:	75 2d                	jne    f0112c57 <test_cut_paste_pages+0x9be>
f0112c2a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112c2d:	8a 00                	mov    (%eax),%al
f0112c2f:	3c 78                	cmp    $0x78,%al
f0112c31:	75 24                	jne    f0112c57 <test_cut_paste_pages+0x9be>
f0112c33:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112c36:	8a 00                	mov    (%eax),%al
f0112c38:	3c 62                	cmp    $0x62,%al
f0112c3a:	75 1b                	jne    f0112c57 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c3c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c3f:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c41:	3c 79                	cmp    $0x79,%al
f0112c43:	75 12                	jne    f0112c57 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c45:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c48:	8a 00                	mov    (%eax),%al
f0112c4a:	3c 63                	cmp    $0x63,%al
f0112c4c:	75 09                	jne    f0112c57 <test_cut_paste_pages+0x9be>
f0112c4e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112c51:	8a 00                	mov    (%eax),%al
f0112c53:	3c 7a                	cmp    $0x7a,%al
f0112c55:	74 28                	je     f0112c7f <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0112c57:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112c5e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112c65:	83 ec 04             	sub    $0x4,%esp
f0112c68:	68 fc 96 13 f0       	push   $0xf01396fc
f0112c6d:	68 40 02 00 00       	push   $0x240
f0112c72:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0112c77:	e8 97 d7 fe ff       	call   f0100413 <_warn>
f0112c7c:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112c7f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c83:	74 04                	je     f0112c89 <test_cut_paste_pages+0x9f0>
f0112c85:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c89:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112c90:	83 ec 0c             	sub    $0xc,%esp
f0112c93:	68 35 98 13 f0       	push   $0xf0139835
f0112c98:	e8 71 e0 fe ff       	call   f0100d0e <cprintf>
f0112c9d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112ca0:	83 ec 08             	sub    $0x8,%esp
f0112ca3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112ca6:	68 44 98 13 f0       	push   $0xf0139844
f0112cab:	e8 5e e0 fe ff       	call   f0100d0e <cprintf>
f0112cb0:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112cb3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112cb7:	75 10                	jne    f0112cc9 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112cb9:	83 ec 0c             	sub    $0xc,%esp
f0112cbc:	68 78 98 13 f0       	push   $0xf0139878
f0112cc1:	e8 48 e0 fe ff       	call   f0100d0e <cprintf>
f0112cc6:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112cc9:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f0112cce:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112cd1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112cd4:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112cd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112cdc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112cdf:	5b                   	pop    %ebx
f0112ce0:	5e                   	pop    %esi
f0112ce1:	5f                   	pop    %edi
f0112ce2:	5d                   	pop    %ebp
f0112ce3:	c3                   	ret    

f0112ce4 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112ce4:	55                   	push   %ebp
f0112ce5:	89 e5                	mov    %esp,%ebp
f0112ce7:	57                   	push   %edi
f0112ce8:	56                   	push   %esi
f0112ce9:	53                   	push   %ebx
f0112cea:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112cf0:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112cf6:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f0112cfb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112d00:	89 c7                	mov    %eax,%edi
f0112d02:	89 de                	mov    %ebx,%esi
f0112d04:	89 d1                	mov    %edx,%ecx
f0112d06:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112d08:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112d0e:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112d13:	b0 00                	mov    $0x0,%al
f0112d15:	89 d7                	mov    %edx,%edi
f0112d17:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112d19:	6a 00                	push   $0x0
f0112d1b:	6a 0a                	push   $0xa
f0112d1d:	6a 14                	push   $0x14
f0112d1f:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112d25:	50                   	push   %eax
f0112d26:	e8 4c 67 ff ff       	call   f0109477 <env_create>
f0112d2b:	83 c4 10             	add    $0x10,%esp
f0112d2e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112d31:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d34:	8b 40 5c             	mov    0x5c(%eax),%eax
f0112d37:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112d3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d3d:	8b 40 60             	mov    0x60(%eax),%eax
f0112d40:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112d46:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112d4c:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112d4f:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112d56:	75 70 20 
f0112d59:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112d60:	00 00 00 
f0112d63:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112d69:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112d6e:	b8 00 00 00 00       	mov    $0x0,%eax
f0112d73:	89 d7                	mov    %edx,%edi
f0112d75:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112d77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112d7a:	8b 40 4c             	mov    0x4c(%eax),%eax
f0112d7d:	83 ec 08             	sub    $0x8,%esp
f0112d80:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112d86:	52                   	push   %edx
f0112d87:	50                   	push   %eax
f0112d88:	e8 1e f1 01 00       	call   f0131eab <ltostr>
f0112d8d:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112d90:	83 ec 04             	sub    $0x4,%esp
f0112d93:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112d99:	50                   	push   %eax
f0112d9a:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112da0:	50                   	push   %eax
f0112da1:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112da7:	50                   	push   %eax
f0112da8:	e8 f6 f1 01 00       	call   f0131fa3 <strcconcat>
f0112dad:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112db0:	83 ec 0c             	sub    $0xc,%esp
f0112db3:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112db6:	e8 f1 3a 00 00       	call   f01168ac <ClearUserSpace>
f0112dbb:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112dbe:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112dc5:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112dcc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112dd3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112dda:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112de1:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112de8:	83 ec 0c             	sub    $0xc,%esp
f0112deb:	68 ec 98 13 f0       	push   $0xf01398ec
f0112df0:	e8 19 df fe ff       	call   f0100d0e <cprintf>
f0112df5:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112df8:	83 ec 04             	sub    $0x4,%esp
f0112dfb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e01:	50                   	push   %eax
f0112e02:	68 22 99 13 f0       	push   $0xf0139922
f0112e07:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e0d:	50                   	push   %eax
f0112e0e:	e8 90 f1 01 00       	call   f0131fa3 <strcconcat>
f0112e13:	83 c4 10             	add    $0x10,%esp
f0112e16:	83 ec 0c             	sub    $0xc,%esp
f0112e19:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e1f:	50                   	push   %eax
f0112e20:	e8 4b df fe ff       	call   f0100d70 <execute_command>
f0112e25:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0112e28:	83 ec 04             	sub    $0x4,%esp
f0112e2b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e31:	50                   	push   %eax
f0112e32:	68 27 99 13 f0       	push   $0xf0139927
f0112e37:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112e3d:	50                   	push   %eax
f0112e3e:	e8 60 f1 01 00       	call   f0131fa3 <strcconcat>
f0112e43:	83 c4 10             	add    $0x10,%esp
f0112e46:	83 ec 0c             	sub    $0xc,%esp
f0112e49:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0112e4f:	50                   	push   %eax
f0112e50:	e8 1b df fe ff       	call   f0100d70 <execute_command>
f0112e55:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0112e58:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112e5e:	bb 2d 9c 13 f0       	mov    $0xf0139c2d,%ebx
f0112e63:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112e68:	89 c7                	mov    %eax,%edi
f0112e6a:	89 de                	mov    %ebx,%esi
f0112e6c:	89 d1                	mov    %edx,%ecx
f0112e6e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112e70:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0112e76:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112e7b:	b0 00                	mov    $0x0,%al
f0112e7d:	89 d7                	mov    %edx,%edi
f0112e7f:	f3 aa                	rep stos %al,%es:(%edi)
f0112e81:	83 ec 0c             	sub    $0xc,%esp
f0112e84:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0112e8a:	50                   	push   %eax
f0112e8b:	e8 e0 de fe ff       	call   f0100d70 <execute_command>
f0112e90:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0112e93:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112e99:	bb 91 9c 13 f0       	mov    $0xf0139c91,%ebx
f0112e9e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ea3:	89 c7                	mov    %eax,%edi
f0112ea5:	89 de                	mov    %ebx,%esi
f0112ea7:	89 d1                	mov    %edx,%ecx
f0112ea9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112eab:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0112eb1:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112eb6:	b0 00                	mov    $0x0,%al
f0112eb8:	89 d7                	mov    %edx,%edi
f0112eba:	f3 aa                	rep stos %al,%es:(%edi)
f0112ebc:	83 ec 0c             	sub    $0xc,%esp
f0112ebf:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0112ec5:	50                   	push   %eax
f0112ec6:	e8 a5 de fe ff       	call   f0100d70 <execute_command>
f0112ecb:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0112ece:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112ed4:	bb f5 9c 13 f0       	mov    $0xf0139cf5,%ebx
f0112ed9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112ede:	89 c7                	mov    %eax,%edi
f0112ee0:	89 de                	mov    %ebx,%esi
f0112ee2:	89 d1                	mov    %edx,%ecx
f0112ee4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112ee6:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0112eec:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112ef1:	b0 00                	mov    $0x0,%al
f0112ef3:	89 d7                	mov    %edx,%edi
f0112ef5:	f3 aa                	rep stos %al,%es:(%edi)
f0112ef7:	83 ec 0c             	sub    $0xc,%esp
f0112efa:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0112f00:	50                   	push   %eax
f0112f01:	e8 6a de fe ff       	call   f0100d70 <execute_command>
f0112f06:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0112f09:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f0f:	bb 59 9d 13 f0       	mov    $0xf0139d59,%ebx
f0112f14:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f19:	89 c7                	mov    %eax,%edi
f0112f1b:	89 de                	mov    %ebx,%esi
f0112f1d:	89 d1                	mov    %edx,%ecx
f0112f1f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f21:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0112f27:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f2c:	b0 00                	mov    $0x0,%al
f0112f2e:	89 d7                	mov    %edx,%edi
f0112f30:	f3 aa                	rep stos %al,%es:(%edi)
f0112f32:	83 ec 0c             	sub    $0xc,%esp
f0112f35:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0112f3b:	50                   	push   %eax
f0112f3c:	e8 2f de fe ff       	call   f0100d70 <execute_command>
f0112f41:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0112f44:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f4a:	bb bd 9d 13 f0       	mov    $0xf0139dbd,%ebx
f0112f4f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f54:	89 c7                	mov    %eax,%edi
f0112f56:	89 de                	mov    %ebx,%esi
f0112f58:	89 d1                	mov    %edx,%ecx
f0112f5a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f5c:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0112f62:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112f67:	b0 00                	mov    $0x0,%al
f0112f69:	89 d7                	mov    %edx,%edi
f0112f6b:	f3 aa                	rep stos %al,%es:(%edi)
f0112f6d:	83 ec 0c             	sub    $0xc,%esp
f0112f70:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0112f76:	50                   	push   %eax
f0112f77:	e8 f4 dd fe ff       	call   f0100d70 <execute_command>
f0112f7c:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0112f7f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112f85:	bb 21 9e 13 f0       	mov    $0xf0139e21,%ebx
f0112f8a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f8f:	89 c7                	mov    %eax,%edi
f0112f91:	89 de                	mov    %ebx,%esi
f0112f93:	89 d1                	mov    %edx,%ecx
f0112f95:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f97:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0112f9d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0112fa2:	b0 00                	mov    $0x0,%al
f0112fa4:	89 d7                	mov    %edx,%edi
f0112fa6:	f3 aa                	rep stos %al,%es:(%edi)
f0112fa8:	83 ec 0c             	sub    $0xc,%esp
f0112fab:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0112fb1:	50                   	push   %eax
f0112fb2:	e8 b9 dd fe ff       	call   f0100d70 <execute_command>
f0112fb7:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0112fba:	83 ec 04             	sub    $0x4,%esp
f0112fbd:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112fc3:	50                   	push   %eax
f0112fc4:	68 2f 99 13 f0       	push   $0xf013992f
f0112fc9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112fcf:	50                   	push   %eax
f0112fd0:	e8 ce ef 01 00       	call   f0131fa3 <strcconcat>
f0112fd5:	83 c4 10             	add    $0x10,%esp
f0112fd8:	83 ec 0c             	sub    $0xc,%esp
f0112fdb:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112fe1:	50                   	push   %eax
f0112fe2:	e8 89 dd fe ff       	call   f0100d70 <execute_command>
f0112fe7:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0112fea:	83 ec 04             	sub    $0x4,%esp
f0112fed:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112ff3:	50                   	push   %eax
f0112ff4:	68 39 99 13 f0       	push   $0xf0139939
f0112ff9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112fff:	50                   	push   %eax
f0113000:	e8 9e ef 01 00       	call   f0131fa3 <strcconcat>
f0113005:	83 c4 10             	add    $0x10,%esp
f0113008:	83 ec 0c             	sub    $0xc,%esp
f011300b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113011:	50                   	push   %eax
f0113012:	e8 59 dd fe ff       	call   f0100d70 <execute_command>
f0113017:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011301a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113020:	bb 85 9e 13 f0       	mov    $0xf0139e85,%ebx
f0113025:	ba 0f 00 00 00       	mov    $0xf,%edx
f011302a:	89 c7                	mov    %eax,%edi
f011302c:	89 de                	mov    %ebx,%esi
f011302e:	89 d1                	mov    %edx,%ecx
f0113030:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113032:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113038:	b9 55 00 00 00       	mov    $0x55,%ecx
f011303d:	b0 00                	mov    $0x0,%al
f011303f:	89 d7                	mov    %edx,%edi
f0113041:	f3 aa                	rep stos %al,%es:(%edi)
f0113043:	83 ec 0c             	sub    $0xc,%esp
f0113046:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011304c:	50                   	push   %eax
f011304d:	e8 1e dd fe ff       	call   f0100d70 <execute_command>
f0113052:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0113055:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011305b:	bb e9 9e 13 f0       	mov    $0xf0139ee9,%ebx
f0113060:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113065:	89 c7                	mov    %eax,%edi
f0113067:	89 de                	mov    %ebx,%esi
f0113069:	89 d1                	mov    %edx,%ecx
f011306b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011306d:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113073:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113078:	b0 00                	mov    $0x0,%al
f011307a:	89 d7                	mov    %edx,%edi
f011307c:	f3 aa                	rep stos %al,%es:(%edi)
f011307e:	83 ec 0c             	sub    $0xc,%esp
f0113081:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113087:	50                   	push   %eax
f0113088:	e8 e3 dc fe ff       	call   f0100d70 <execute_command>
f011308d:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0113090:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113096:	bb 4d 9f 13 f0       	mov    $0xf0139f4d,%ebx
f011309b:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130a0:	89 c7                	mov    %eax,%edi
f01130a2:	89 de                	mov    %ebx,%esi
f01130a4:	89 d1                	mov    %edx,%ecx
f01130a6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130a8:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01130ae:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130b3:	b0 00                	mov    $0x0,%al
f01130b5:	89 d7                	mov    %edx,%edi
f01130b7:	f3 aa                	rep stos %al,%es:(%edi)
f01130b9:	83 ec 0c             	sub    $0xc,%esp
f01130bc:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01130c2:	50                   	push   %eax
f01130c3:	e8 a8 dc fe ff       	call   f0100d70 <execute_command>
f01130c8:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01130cb:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01130d2:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01130d9:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01130e0:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01130e7:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01130ee:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01130f5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01130fc:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0113103:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f011310a:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0113111:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0113118:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f011311f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113122:	8a 00                	mov    (%eax),%al
f0113124:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f011312a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011312d:	8a 00                	mov    (%eax),%al
f011312f:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0113135:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113138:	8a 00                	mov    (%eax),%al
f011313a:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113140:	e8 6c a0 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0113145:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0113148:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011314b:	89 d0                	mov    %edx,%eax
f011314d:	01 c0                	add    %eax,%eax
f011314f:	01 d0                	add    %edx,%eax
f0113151:	01 c0                	add    %eax,%eax
f0113153:	50                   	push   %eax
f0113154:	68 00 00 10 00       	push   $0x100000
f0113159:	6a 00                	push   $0x0
f011315b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011315e:	e8 4c 5b ff ff       	call   f0108caf <copy_paste_chunk>
f0113163:	83 c4 10             	add    $0x10,%esp
f0113166:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113169:	e8 43 a0 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011316e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113171:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113178:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f011317c:	75 08                	jne    f0113186 <test_copy_paste_chunk+0x4a2>
f011317e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113181:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113184:	74 2b                	je     f01131b1 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113186:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113189:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011318c:	83 ec 0c             	sub    $0xc,%esp
f011318f:	50                   	push   %eax
f0113190:	ff 75 88             	pushl  -0x78(%ebp)
f0113193:	68 48 99 13 f0       	push   $0xf0139948
f0113198:	68 93 02 00 00       	push   $0x293
f011319d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01131a2:	e8 6c d2 fe ff       	call   f0100413 <_warn>
f01131a7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01131aa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01131b1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01131b5:	74 04                	je     f01131bb <test_copy_paste_chunk+0x4d7>
f01131b7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01131bb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01131c2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131c5:	8a 00                	mov    (%eax),%al
f01131c7:	3c 61                	cmp    $0x61,%al
f01131c9:	75 75                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f01131cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01131ce:	8a 00                	mov    (%eax),%al
f01131d0:	3c 78                	cmp    $0x78,%al
f01131d2:	75 6c                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f01131d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01131d7:	8a 00                	mov    (%eax),%al
f01131d9:	3c 62                	cmp    $0x62,%al
f01131db:	75 63                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f01131dd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01131e0:	8a 00                	mov    (%eax),%al
f01131e2:	3c 79                	cmp    $0x79,%al
f01131e4:	75 5a                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f01131e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01131e9:	8a 00                	mov    (%eax),%al
f01131eb:	3c 63                	cmp    $0x63,%al
f01131ed:	75 51                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f01131ef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01131f2:	8a 00                	mov    (%eax),%al
f01131f4:	3c 7a                	cmp    $0x7a,%al
f01131f6:	75 48                	jne    f0113240 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01131f8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01131fb:	8a 00                	mov    (%eax),%al
f01131fd:	3c 64                	cmp    $0x64,%al
f01131ff:	75 3f                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f0113201:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113204:	8a 10                	mov    (%eax),%dl
f0113206:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f011320c:	38 c2                	cmp    %al,%dl
f011320e:	75 30                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f0113210:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113213:	8a 00                	mov    (%eax),%al
f0113215:	3c 65                	cmp    $0x65,%al
f0113217:	75 27                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f0113219:	8b 45 98             	mov    -0x68(%ebp),%eax
f011321c:	8a 10                	mov    (%eax),%dl
f011321e:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0113224:	38 c2                	cmp    %al,%dl
f0113226:	75 18                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f0113228:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011322b:	8a 00                	mov    (%eax),%al
f011322d:	3c 66                	cmp    $0x66,%al
f011322f:	75 0f                	jne    f0113240 <test_copy_paste_chunk+0x55c>
f0113231:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113234:	8a 10                	mov    (%eax),%dl
f0113236:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011323c:	38 c2                	cmp    %al,%dl
f011323e:	74 21                	je     f0113261 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113240:	83 ec 04             	sub    $0x4,%esp
f0113243:	68 ac 99 13 f0       	push   $0xf01399ac
f0113248:	68 9c 02 00 00       	push   $0x29c
f011324d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113252:	e8 bc d1 fe ff       	call   f0100413 <_warn>
f0113257:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011325a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113261:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113265:	74 04                	je     f011326b <test_copy_paste_chunk+0x587>
f0113267:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011326b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0113272:	83 ec 0c             	sub    $0xc,%esp
f0113275:	68 e6 99 13 f0       	push   $0xf01399e6
f011327a:	e8 8f da fe ff       	call   f0100d0e <cprintf>
f011327f:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0113282:	83 ec 0c             	sub    $0xc,%esp
f0113285:	68 f8 99 13 f0       	push   $0xf01399f8
f011328a:	e8 7f da fe ff       	call   f0100d0e <cprintf>
f011328f:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0113292:	83 ec 04             	sub    $0x4,%esp
f0113295:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011329b:	50                   	push   %eax
f011329c:	68 2e 9a 13 f0       	push   $0xf0139a2e
f01132a1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01132a7:	50                   	push   %eax
f01132a8:	e8 f6 ec 01 00       	call   f0131fa3 <strcconcat>
f01132ad:	83 c4 10             	add    $0x10,%esp
f01132b0:	83 ec 0c             	sub    $0xc,%esp
f01132b3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132b9:	50                   	push   %eax
f01132ba:	e8 b1 da fe ff       	call   f0100d70 <execute_command>
f01132bf:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01132c2:	83 ec 04             	sub    $0x4,%esp
f01132c5:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132cb:	50                   	push   %eax
f01132cc:	68 38 9a 13 f0       	push   $0xf0139a38
f01132d1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01132d7:	50                   	push   %eax
f01132d8:	e8 c6 ec 01 00       	call   f0131fa3 <strcconcat>
f01132dd:	83 c4 10             	add    $0x10,%esp
f01132e0:	83 ec 0c             	sub    $0xc,%esp
f01132e3:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01132e9:	50                   	push   %eax
f01132ea:	e8 81 da fe ff       	call   f0100d70 <execute_command>
f01132ef:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01132f2:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01132f8:	bb b1 9f 13 f0       	mov    $0xf0139fb1,%ebx
f01132fd:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113302:	89 c7                	mov    %eax,%edi
f0113304:	89 de                	mov    %ebx,%esi
f0113306:	89 d1                	mov    %edx,%ecx
f0113308:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011330a:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113310:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113315:	b0 00                	mov    $0x0,%al
f0113317:	89 d7                	mov    %edx,%edi
f0113319:	f3 aa                	rep stos %al,%es:(%edi)
f011331b:	83 ec 0c             	sub    $0xc,%esp
f011331e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113324:	50                   	push   %eax
f0113325:	e8 46 da fe ff       	call   f0100d70 <execute_command>
f011332a:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f011332d:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113333:	bb 15 a0 13 f0       	mov    $0xf013a015,%ebx
f0113338:	ba 0f 00 00 00       	mov    $0xf,%edx
f011333d:	89 c7                	mov    %eax,%edi
f011333f:	89 de                	mov    %ebx,%esi
f0113341:	89 d1                	mov    %edx,%ecx
f0113343:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113345:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011334b:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113350:	b0 00                	mov    $0x0,%al
f0113352:	89 d7                	mov    %edx,%edi
f0113354:	f3 aa                	rep stos %al,%es:(%edi)
f0113356:	83 ec 0c             	sub    $0xc,%esp
f0113359:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011335f:	50                   	push   %eax
f0113360:	e8 0b da fe ff       	call   f0100d70 <execute_command>
f0113365:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113368:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011336e:	bb 79 a0 13 f0       	mov    $0xf013a079,%ebx
f0113373:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113378:	89 c7                	mov    %eax,%edi
f011337a:	89 de                	mov    %ebx,%esi
f011337c:	89 d1                	mov    %edx,%ecx
f011337e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113380:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113386:	b9 55 00 00 00       	mov    $0x55,%ecx
f011338b:	b0 00                	mov    $0x0,%al
f011338d:	89 d7                	mov    %edx,%edi
f011338f:	f3 aa                	rep stos %al,%es:(%edi)
f0113391:	83 ec 0c             	sub    $0xc,%esp
f0113394:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011339a:	50                   	push   %eax
f011339b:	e8 d0 d9 fe ff       	call   f0100d70 <execute_command>
f01133a0:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f01133a3:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01133a9:	bb dd a0 13 f0       	mov    $0xf013a0dd,%ebx
f01133ae:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133b3:	89 c7                	mov    %eax,%edi
f01133b5:	89 de                	mov    %ebx,%esi
f01133b7:	89 d1                	mov    %edx,%ecx
f01133b9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133bb:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01133c1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01133c6:	b0 00                	mov    $0x0,%al
f01133c8:	89 d7                	mov    %edx,%edi
f01133ca:	f3 aa                	rep stos %al,%es:(%edi)
f01133cc:	83 ec 0c             	sub    $0xc,%esp
f01133cf:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01133d5:	50                   	push   %eax
f01133d6:	e8 95 d9 fe ff       	call   f0100d70 <execute_command>
f01133db:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01133de:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01133e4:	bb 41 a1 13 f0       	mov    $0xf013a141,%ebx
f01133e9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01133ee:	89 c7                	mov    %eax,%edi
f01133f0:	89 de                	mov    %ebx,%esi
f01133f2:	89 d1                	mov    %edx,%ecx
f01133f4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01133f6:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01133fc:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113401:	b0 00                	mov    $0x0,%al
f0113403:	89 d7                	mov    %edx,%edi
f0113405:	f3 aa                	rep stos %al,%es:(%edi)
f0113407:	83 ec 0c             	sub    $0xc,%esp
f011340a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113410:	50                   	push   %eax
f0113411:	e8 5a d9 fe ff       	call   f0100d70 <execute_command>
f0113416:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0113419:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011341f:	bb a5 a1 13 f0       	mov    $0xf013a1a5,%ebx
f0113424:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113429:	89 c7                	mov    %eax,%edi
f011342b:	89 de                	mov    %ebx,%esi
f011342d:	89 d1                	mov    %edx,%ecx
f011342f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113431:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113437:	b9 55 00 00 00       	mov    $0x55,%ecx
f011343c:	b0 00                	mov    $0x0,%al
f011343e:	89 d7                	mov    %edx,%edi
f0113440:	f3 aa                	rep stos %al,%es:(%edi)
f0113442:	83 ec 0c             	sub    $0xc,%esp
f0113445:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011344b:	50                   	push   %eax
f011344c:	e8 1f d9 fe ff       	call   f0100d70 <execute_command>
f0113451:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0113454:	83 ec 04             	sub    $0x4,%esp
f0113457:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011345d:	50                   	push   %eax
f011345e:	68 42 9a 13 f0       	push   $0xf0139a42
f0113463:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113469:	50                   	push   %eax
f011346a:	e8 34 eb 01 00       	call   f0131fa3 <strcconcat>
f011346f:	83 c4 10             	add    $0x10,%esp
f0113472:	83 ec 0c             	sub    $0xc,%esp
f0113475:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011347b:	50                   	push   %eax
f011347c:	e8 ef d8 fe ff       	call   f0100d70 <execute_command>
f0113481:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0113484:	83 ec 04             	sub    $0x4,%esp
f0113487:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011348d:	50                   	push   %eax
f011348e:	68 4c 9a 13 f0       	push   $0xf0139a4c
f0113493:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113499:	50                   	push   %eax
f011349a:	e8 04 eb 01 00       	call   f0131fa3 <strcconcat>
f011349f:	83 c4 10             	add    $0x10,%esp
f01134a2:	83 ec 0c             	sub    $0xc,%esp
f01134a5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01134ab:	50                   	push   %eax
f01134ac:	e8 bf d8 fe ff       	call   f0100d70 <execute_command>
f01134b1:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01134b4:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01134ba:	bb 09 a2 13 f0       	mov    $0xf013a209,%ebx
f01134bf:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134c4:	89 c7                	mov    %eax,%edi
f01134c6:	89 de                	mov    %ebx,%esi
f01134c8:	89 d1                	mov    %edx,%ecx
f01134ca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01134cc:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01134d2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01134d7:	b0 00                	mov    $0x0,%al
f01134d9:	89 d7                	mov    %edx,%edi
f01134db:	f3 aa                	rep stos %al,%es:(%edi)
f01134dd:	83 ec 0c             	sub    $0xc,%esp
f01134e0:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01134e6:	50                   	push   %eax
f01134e7:	e8 84 d8 fe ff       	call   f0100d70 <execute_command>
f01134ec:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01134ef:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01134f5:	bb 6d a2 13 f0       	mov    $0xf013a26d,%ebx
f01134fa:	ba 0f 00 00 00       	mov    $0xf,%edx
f01134ff:	89 c7                	mov    %eax,%edi
f0113501:	89 de                	mov    %ebx,%esi
f0113503:	89 d1                	mov    %edx,%ecx
f0113505:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113507:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011350d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113512:	b0 00                	mov    $0x0,%al
f0113514:	89 d7                	mov    %edx,%edi
f0113516:	f3 aa                	rep stos %al,%es:(%edi)
f0113518:	83 ec 0c             	sub    $0xc,%esp
f011351b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113521:	50                   	push   %eax
f0113522:	e8 49 d8 fe ff       	call   f0100d70 <execute_command>
f0113527:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f011352a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113530:	bb d1 a2 13 f0       	mov    $0xf013a2d1,%ebx
f0113535:	ba 0f 00 00 00       	mov    $0xf,%edx
f011353a:	89 c7                	mov    %eax,%edi
f011353c:	89 de                	mov    %ebx,%esi
f011353e:	89 d1                	mov    %edx,%ecx
f0113540:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113542:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113548:	b9 55 00 00 00       	mov    $0x55,%ecx
f011354d:	b0 00                	mov    $0x0,%al
f011354f:	89 d7                	mov    %edx,%edi
f0113551:	f3 aa                	rep stos %al,%es:(%edi)
f0113553:	83 ec 0c             	sub    $0xc,%esp
f0113556:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011355c:	50                   	push   %eax
f011355d:	e8 0e d8 fe ff       	call   f0100d70 <execute_command>
f0113562:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113565:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f011356c:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0113573:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f011357a:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113581:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113588:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f011358f:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113596:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f011359d:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01135a4:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01135ab:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01135b2:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01135b9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01135bc:	8a 00                	mov    (%eax),%al
f01135be:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01135c4:	e8 e8 9b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01135c9:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01135cc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135cf:	89 d0                	mov    %edx,%eax
f01135d1:	01 c0                	add    %eax,%eax
f01135d3:	01 d0                	add    %edx,%eax
f01135d5:	01 c0                	add    %eax,%eax
f01135d7:	50                   	push   %eax
f01135d8:	68 00 00 40 00       	push   $0x400000
f01135dd:	68 00 00 20 00       	push   $0x200000
f01135e2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01135e5:	e8 c5 56 ff ff       	call   f0108caf <copy_paste_chunk>
f01135ea:	83 c4 10             	add    $0x10,%esp
f01135ed:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01135f0:	e8 bc 9b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01135f5:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01135f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01135ff:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113603:	75 08                	jne    f011360d <test_copy_paste_chunk+0x929>
f0113605:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113608:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011360b:	74 2b                	je     f0113638 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011360d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113610:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113613:	83 ec 0c             	sub    $0xc,%esp
f0113616:	50                   	push   %eax
f0113617:	ff 75 80             	pushl  -0x80(%ebp)
f011361a:	68 58 9a 13 f0       	push   $0xf0139a58
f011361f:	68 cc 02 00 00       	push   $0x2cc
f0113624:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113629:	e8 e5 cd fe ff       	call   f0100413 <_warn>
f011362e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113631:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113638:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011363c:	74 04                	je     f0113642 <test_copy_paste_chunk+0x95e>
f011363e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113642:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0113649:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113650:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113653:	83 ec 08             	sub    $0x8,%esp
f0113656:	6a 01                	push   $0x1
f0113658:	6a 07                	push   $0x7
f011365a:	6a 07                	push   $0x7
f011365c:	6a 07                	push   $0x7
f011365e:	6a 07                	push   $0x7
f0113660:	6a 01                	push   $0x1
f0113662:	68 00 20 00 00       	push   $0x2000
f0113667:	68 00 00 40 00       	push   $0x400000
f011366c:	68 00 00 20 00       	push   $0x200000
f0113671:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113674:	e8 67 32 00 00       	call   f01168e0 <CCP>
f0113679:	83 c4 30             	add    $0x30,%esp
f011367c:	83 f8 01             	cmp    $0x1,%eax
f011367f:	74 2b                	je     f01136ac <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113681:	83 ec 04             	sub    $0x4,%esp
f0113684:	68 ac 9a 13 f0       	push   $0xf0139aac
f0113689:	68 d5 02 00 00       	push   $0x2d5
f011368e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113693:	e8 7b cd fe ff       	call   f0100413 <_warn>
f0113698:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011369b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01136a2:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01136a9:	00 00 00 
		}
		if (correct) eval += 5 ;
f01136ac:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01136b0:	74 04                	je     f01136b6 <test_copy_paste_chunk+0x9d2>
f01136b2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01136b6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01136bd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136c0:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01136c3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01136c6:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01136c9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01136cc:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01136cf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01136d2:	8a 00                	mov    (%eax),%al
f01136d4:	3c 61                	cmp    $0x61,%al
f01136d6:	75 69                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f01136d8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01136db:	8a 00                	mov    (%eax),%al
f01136dd:	3c 61                	cmp    $0x61,%al
f01136df:	75 60                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f01136e1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01136e4:	8a 00                	mov    (%eax),%al
f01136e6:	3c 79                	cmp    $0x79,%al
f01136e8:	75 57                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f01136ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01136ed:	8a 00                	mov    (%eax),%al
f01136ef:	3c 62                	cmp    $0x62,%al
f01136f1:	75 4e                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f01136f3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01136f6:	8a 00                	mov    (%eax),%al
f01136f8:	3c 63                	cmp    $0x63,%al
f01136fa:	75 45                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f01136fc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01136ff:	8a 00                	mov    (%eax),%al
f0113701:	3c 7a                	cmp    $0x7a,%al
f0113703:	75 3c                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0113705:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113708:	8a 00                	mov    (%eax),%al
f011370a:	3c 77                	cmp    $0x77,%al
f011370c:	75 33                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f011370e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113711:	8a 00                	mov    (%eax),%al
f0113713:	3c 64                	cmp    $0x64,%al
f0113715:	75 2a                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f0113717:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011371a:	8a 00                	mov    (%eax),%al
f011371c:	3c 65                	cmp    $0x65,%al
f011371e:	75 21                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f0113720:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113723:	8a 00                	mov    (%eax),%al
f0113725:	3c 65                	cmp    $0x65,%al
f0113727:	75 18                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f0113729:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011372c:	8a 00                	mov    (%eax),%al
f011372e:	3c 66                	cmp    $0x66,%al
f0113730:	75 0f                	jne    f0113741 <test_copy_paste_chunk+0xa5d>
f0113732:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113735:	8a 10                	mov    (%eax),%dl
f0113737:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011373d:	38 c2                	cmp    %al,%dl
f011373f:	74 21                	je     f0113762 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113741:	83 ec 04             	sub    $0x4,%esp
f0113744:	68 ac 99 13 f0       	push   $0xf01399ac
f0113749:	68 e3 02 00 00       	push   $0x2e3
f011374e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113753:	e8 bb cc fe ff       	call   f0100413 <_warn>
f0113758:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011375b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113762:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113766:	74 04                	je     f011376c <test_copy_paste_chunk+0xa88>
f0113768:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011376c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113773:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113776:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113779:	e8 33 9a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011377e:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113781:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113784:	89 c2                	mov    %eax,%edx
f0113786:	01 d2                	add    %edx,%edx
f0113788:	01 d0                	add    %edx,%eax
f011378a:	50                   	push   %eax
f011378b:	68 00 08 20 00       	push   $0x200800
f0113790:	68 00 08 40 00       	push   $0x400800
f0113795:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113798:	e8 12 55 ff ff       	call   f0108caf <copy_paste_chunk>
f011379d:	83 c4 10             	add    $0x10,%esp
f01137a0:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01137a3:	e8 09 9a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01137a8:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01137ab:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01137af:	75 08                	jne    f01137b9 <test_copy_paste_chunk+0xad5>
f01137b1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01137b4:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01137b7:	74 2b                	je     f01137e4 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01137b9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01137bc:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01137bf:	83 ec 0c             	sub    $0xc,%esp
f01137c2:	50                   	push   %eax
f01137c3:	ff 75 80             	pushl  -0x80(%ebp)
f01137c6:	68 58 9a 13 f0       	push   $0xf0139a58
f01137cb:	68 f3 02 00 00       	push   $0x2f3
f01137d0:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01137d5:	e8 39 cc fe ff       	call   f0100413 <_warn>
f01137da:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01137dd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01137e4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01137e8:	74 04                	je     f01137ee <test_copy_paste_chunk+0xb0a>
f01137ea:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01137ee:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01137f5:	83 ec 08             	sub    $0x8,%esp
f01137f8:	6a 01                	push   $0x1
f01137fa:	6a 07                	push   $0x7
f01137fc:	6a 07                	push   $0x7
f01137fe:	6a 07                	push   $0x7
f0113800:	6a 07                	push   $0x7
f0113802:	6a 01                	push   $0x1
f0113804:	68 00 20 00 00       	push   $0x2000
f0113809:	68 00 00 20 00       	push   $0x200000
f011380e:	68 00 00 40 00       	push   $0x400000
f0113813:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113816:	e8 c5 30 00 00       	call   f01168e0 <CCP>
f011381b:	83 c4 30             	add    $0x30,%esp
f011381e:	83 f8 01             	cmp    $0x1,%eax
f0113821:	74 21                	je     f0113844 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113823:	83 ec 04             	sub    $0x4,%esp
f0113826:	68 f8 9a 13 f0       	push   $0xf0139af8
f011382b:	68 fb 02 00 00       	push   $0x2fb
f0113830:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113835:	e8 d9 cb fe ff       	call   f0100413 <_warn>
f011383a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011383d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113844:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113848:	74 04                	je     f011384e <test_copy_paste_chunk+0xb6a>
f011384a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011384e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113855:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113858:	8a 00                	mov    (%eax),%al
f011385a:	3c 61                	cmp    $0x61,%al
f011385c:	75 69                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f011385e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113861:	8a 00                	mov    (%eax),%al
f0113863:	3c 61                	cmp    $0x61,%al
f0113865:	75 60                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f0113867:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011386a:	8a 00                	mov    (%eax),%al
f011386c:	3c 79                	cmp    $0x79,%al
f011386e:	75 57                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f0113870:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113873:	8a 00                	mov    (%eax),%al
f0113875:	3c 62                	cmp    $0x62,%al
f0113877:	75 4e                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f0113879:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011387c:	8a 00                	mov    (%eax),%al
f011387e:	3c 7a                	cmp    $0x7a,%al
f0113880:	75 45                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f0113882:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113885:	8a 00                	mov    (%eax),%al
f0113887:	3c 7a                	cmp    $0x7a,%al
f0113889:	75 3c                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011388b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011388e:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113890:	3c 64                	cmp    $0x64,%al
f0113892:	75 33                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113894:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113897:	8a 00                	mov    (%eax),%al
f0113899:	3c 64                	cmp    $0x64,%al
f011389b:	75 2a                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f011389d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01138a0:	8a 00                	mov    (%eax),%al
f01138a2:	3c 65                	cmp    $0x65,%al
f01138a4:	75 21                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f01138a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01138a9:	8a 00                	mov    (%eax),%al
f01138ab:	3c 78                	cmp    $0x78,%al
f01138ad:	75 18                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f01138af:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01138b2:	8a 00                	mov    (%eax),%al
f01138b4:	3c 66                	cmp    $0x66,%al
f01138b6:	75 0f                	jne    f01138c7 <test_copy_paste_chunk+0xbe3>
f01138b8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01138bb:	8a 10                	mov    (%eax),%dl
f01138bd:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01138c3:	38 c2                	cmp    %al,%dl
f01138c5:	74 21                	je     f01138e8 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01138c7:	83 ec 04             	sub    $0x4,%esp
f01138ca:	68 ac 99 13 f0       	push   $0xf01399ac
f01138cf:	68 04 03 00 00       	push   $0x304
f01138d4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01138d9:	e8 35 cb fe ff       	call   f0100413 <_warn>
f01138de:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01138e1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01138e8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138ec:	74 04                	je     f01138f2 <test_copy_paste_chunk+0xc0e>
f01138ee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01138f2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f01138f9:	83 ec 0c             	sub    $0xc,%esp
f01138fc:	68 43 9b 13 f0       	push   $0xf0139b43
f0113901:	e8 08 d4 fe ff       	call   f0100d0e <cprintf>
f0113906:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0113909:	83 ec 0c             	sub    $0xc,%esp
f011390c:	68 54 9b 13 f0       	push   $0xf0139b54
f0113911:	e8 f8 d3 fe ff       	call   f0100d0e <cprintf>
f0113916:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0113919:	83 ec 04             	sub    $0x4,%esp
f011391c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113922:	50                   	push   %eax
f0113923:	68 88 9b 13 f0       	push   $0xf0139b88
f0113928:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011392e:	50                   	push   %eax
f011392f:	e8 6f e6 01 00       	call   f0131fa3 <strcconcat>
f0113934:	83 c4 10             	add    $0x10,%esp
f0113937:	83 ec 0c             	sub    $0xc,%esp
f011393a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113940:	50                   	push   %eax
f0113941:	e8 2a d4 fe ff       	call   f0100d70 <execute_command>
f0113946:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113949:	83 ec 04             	sub    $0x4,%esp
f011394c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113952:	50                   	push   %eax
f0113953:	68 92 9b 13 f0       	push   $0xf0139b92
f0113958:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011395e:	50                   	push   %eax
f011395f:	e8 3f e6 01 00       	call   f0131fa3 <strcconcat>
f0113964:	83 c4 10             	add    $0x10,%esp
f0113967:	83 ec 0c             	sub    $0xc,%esp
f011396a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113970:	50                   	push   %eax
f0113971:	e8 fa d3 fe ff       	call   f0100d70 <execute_command>
f0113976:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113979:	83 ec 04             	sub    $0x4,%esp
f011397c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113982:	50                   	push   %eax
f0113983:	68 9c 9b 13 f0       	push   $0xf0139b9c
f0113988:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011398e:	50                   	push   %eax
f011398f:	e8 0f e6 01 00       	call   f0131fa3 <strcconcat>
f0113994:	83 c4 10             	add    $0x10,%esp
f0113997:	83 ec 0c             	sub    $0xc,%esp
f011399a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01139a0:	50                   	push   %eax
f01139a1:	e8 ca d3 fe ff       	call   f0100d70 <execute_command>
f01139a6:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01139a9:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01139af:	bb 35 a3 13 f0       	mov    $0xf013a335,%ebx
f01139b4:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139b9:	89 c7                	mov    %eax,%edi
f01139bb:	89 de                	mov    %ebx,%esi
f01139bd:	89 d1                	mov    %edx,%ecx
f01139bf:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01139c1:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01139c7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01139cc:	b0 00                	mov    $0x0,%al
f01139ce:	89 d7                	mov    %edx,%edi
f01139d0:	f3 aa                	rep stos %al,%es:(%edi)
f01139d2:	83 ec 0c             	sub    $0xc,%esp
f01139d5:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01139db:	50                   	push   %eax
f01139dc:	e8 8f d3 fe ff       	call   f0100d70 <execute_command>
f01139e1:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f01139e4:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01139ea:	bb 99 a3 13 f0       	mov    $0xf013a399,%ebx
f01139ef:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139f4:	89 c7                	mov    %eax,%edi
f01139f6:	89 de                	mov    %ebx,%esi
f01139f8:	89 d1                	mov    %edx,%ecx
f01139fa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01139fc:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113a02:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a07:	b0 00                	mov    $0x0,%al
f0113a09:	89 d7                	mov    %edx,%edi
f0113a0b:	f3 aa                	rep stos %al,%es:(%edi)
f0113a0d:	83 ec 0c             	sub    $0xc,%esp
f0113a10:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113a16:	50                   	push   %eax
f0113a17:	e8 54 d3 fe ff       	call   f0100d70 <execute_command>
f0113a1c:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113a1f:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113a25:	bb fd a3 13 f0       	mov    $0xf013a3fd,%ebx
f0113a2a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113a2f:	89 c7                	mov    %eax,%edi
f0113a31:	89 de                	mov    %ebx,%esi
f0113a33:	89 d1                	mov    %edx,%ecx
f0113a35:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a37:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113a3d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113a42:	b0 00                	mov    $0x0,%al
f0113a44:	89 d7                	mov    %edx,%edi
f0113a46:	f3 aa                	rep stos %al,%es:(%edi)
f0113a48:	83 ec 0c             	sub    $0xc,%esp
f0113a4b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113a51:	50                   	push   %eax
f0113a52:	e8 19 d3 fe ff       	call   f0100d70 <execute_command>
f0113a57:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113a5a:	e8 52 97 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0113a5f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113a62:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113a65:	89 d0                	mov    %edx,%eax
f0113a67:	01 c0                	add    %eax,%eax
f0113a69:	01 d0                	add    %edx,%eax
f0113a6b:	c1 e0 02             	shl    $0x2,%eax
f0113a6e:	50                   	push   %eax
f0113a6f:	68 00 00 90 00       	push   $0x900000
f0113a74:	68 00 00 80 00       	push   $0x800000
f0113a79:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113a7c:	e8 2e 52 ff ff       	call   f0108caf <copy_paste_chunk>
f0113a81:	83 c4 10             	add    $0x10,%esp
f0113a84:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113a8a:	e8 22 97 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0113a8f:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113a92:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113a99:	75 0b                	jne    f0113aa6 <test_copy_paste_chunk+0xdc2>
f0113a9b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113a9e:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113aa1:	83 f8 03             	cmp    $0x3,%eax
f0113aa4:	74 2e                	je     f0113ad4 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113aa6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113aa9:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113aac:	83 ec 0c             	sub    $0xc,%esp
f0113aaf:	50                   	push   %eax
f0113ab0:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113ab6:	68 58 9a 13 f0       	push   $0xf0139a58
f0113abb:	68 22 03 00 00       	push   $0x322
f0113ac0:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113ac5:	e8 49 c9 fe ff       	call   f0100413 <_warn>
f0113aca:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113acd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113ad4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113ad8:	74 04                	je     f0113ade <test_copy_paste_chunk+0xdfa>
f0113ada:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ade:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113ae5:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113aec:	83 ec 08             	sub    $0x8,%esp
f0113aef:	6a 01                	push   $0x1
f0113af1:	6a 07                	push   $0x7
f0113af3:	6a 07                	push   $0x7
f0113af5:	6a 07                	push   $0x7
f0113af7:	6a 07                	push   $0x7
f0113af9:	6a 01                	push   $0x1
f0113afb:	68 00 30 00 00       	push   $0x3000
f0113b00:	68 00 00 90 00       	push   $0x900000
f0113b05:	68 00 00 80 00       	push   $0x800000
f0113b0a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113b0d:	e8 ce 2d 00 00       	call   f01168e0 <CCP>
f0113b12:	83 c4 30             	add    $0x30,%esp
f0113b15:	83 f8 01             	cmp    $0x1,%eax
f0113b18:	74 28                	je     f0113b42 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113b1a:	83 ec 04             	sub    $0x4,%esp
f0113b1d:	68 f8 9a 13 f0       	push   $0xf0139af8
f0113b22:	68 2b 03 00 00       	push   $0x32b
f0113b27:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113b2c:	e8 e2 c8 fe ff       	call   f0100413 <_warn>
f0113b31:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113b34:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113b3b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113b42:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113b46:	74 04                	je     f0113b4c <test_copy_paste_chunk+0xe68>
f0113b48:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b4c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113b53:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113b57:	0f 84 9e 00 00 00    	je     f0113bfb <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113b5d:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113b64:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113b6b:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113b72:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113b79:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113b80:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113b87:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113b8a:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113b8d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113b90:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113b93:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113b96:	8a 00                	mov    (%eax),%al
f0113b98:	3c 61                	cmp    $0x61,%al
f0113b9a:	75 2d                	jne    f0113bc9 <test_copy_paste_chunk+0xee5>
f0113b9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113b9f:	8a 00                	mov    (%eax),%al
f0113ba1:	3c 61                	cmp    $0x61,%al
f0113ba3:	75 24                	jne    f0113bc9 <test_copy_paste_chunk+0xee5>
f0113ba5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ba8:	8a 00                	mov    (%eax),%al
f0113baa:	3c 79                	cmp    $0x79,%al
f0113bac:	75 1b                	jne    f0113bc9 <test_copy_paste_chunk+0xee5>
f0113bae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113bb1:	8a 00                	mov    (%eax),%al
f0113bb3:	3c 62                	cmp    $0x62,%al
f0113bb5:	75 12                	jne    f0113bc9 <test_copy_paste_chunk+0xee5>
f0113bb7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113bba:	8a 00                	mov    (%eax),%al
f0113bbc:	3c 63                	cmp    $0x63,%al
f0113bbe:	75 09                	jne    f0113bc9 <test_copy_paste_chunk+0xee5>
f0113bc0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113bc3:	8a 00                	mov    (%eax),%al
f0113bc5:	3c 7a                	cmp    $0x7a,%al
f0113bc7:	74 21                	je     f0113bea <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113bc9:	83 ec 04             	sub    $0x4,%esp
f0113bcc:	68 ac 99 13 f0       	push   $0xf01399ac
f0113bd1:	68 3d 03 00 00       	push   $0x33d
f0113bd6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113bdb:	e8 33 c8 fe ff       	call   f0100413 <_warn>
f0113be0:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113be3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113bea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113bee:	74 04                	je     f0113bf4 <test_copy_paste_chunk+0xf10>
f0113bf0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113bf4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113bfb:	e8 b1 95 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0113c00:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113c03:	6a 00                	push   $0x0
f0113c05:	6a 02                	push   $0x2
f0113c07:	68 00 10 90 00       	push   $0x901000
f0113c0c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c0f:	e8 59 2b 00 00       	call   f011676d <SB>
f0113c14:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113c17:	6a 00                	push   $0x0
f0113c19:	6a 02                	push   $0x2
f0113c1b:	68 00 20 90 00       	push   $0x902000
f0113c20:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c23:	e8 45 2b 00 00       	call   f011676d <SB>
f0113c28:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113c2b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113c2e:	c1 e0 03             	shl    $0x3,%eax
f0113c31:	50                   	push   %eax
f0113c32:	68 00 f0 bf 00       	push   $0xbff000
f0113c37:	68 00 10 90 00       	push   $0x901000
f0113c3c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c3f:	e8 6b 50 ff ff       	call   f0108caf <copy_paste_chunk>
f0113c44:	83 c4 10             	add    $0x10,%esp
f0113c47:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c4d:	e8 5f 95 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0113c52:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113c55:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113c5c:	75 0b                	jne    f0113c69 <test_copy_paste_chunk+0xf85>
f0113c5e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113c61:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113c64:	83 f8 03             	cmp    $0x3,%eax
f0113c67:	74 2e                	je     f0113c97 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113c69:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113c6c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113c6f:	83 ec 0c             	sub    $0xc,%esp
f0113c72:	50                   	push   %eax
f0113c73:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113c79:	68 58 9a 13 f0       	push   $0xf0139a58
f0113c7e:	68 4d 03 00 00       	push   $0x34d
f0113c83:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113c88:	e8 86 c7 fe ff       	call   f0100413 <_warn>
f0113c8d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c90:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113c97:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113c9b:	74 04                	je     f0113ca1 <test_copy_paste_chunk+0xfbd>
f0113c9d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ca1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113ca8:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113caf:	83 ec 08             	sub    $0x8,%esp
f0113cb2:	6a 01                	push   $0x1
f0113cb4:	6a 07                	push   $0x7
f0113cb6:	6a 03                	push   $0x3
f0113cb8:	6a 07                	push   $0x7
f0113cba:	6a 03                	push   $0x3
f0113cbc:	6a 01                	push   $0x1
f0113cbe:	68 00 20 00 00       	push   $0x2000
f0113cc3:	68 00 f0 bf 00       	push   $0xbff000
f0113cc8:	68 00 10 90 00       	push   $0x901000
f0113ccd:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113cd0:	e8 0b 2c 00 00       	call   f01168e0 <CCP>
f0113cd5:	83 c4 30             	add    $0x30,%esp
f0113cd8:	83 f8 01             	cmp    $0x1,%eax
f0113cdb:	74 28                	je     f0113d05 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113cdd:	83 ec 04             	sub    $0x4,%esp
f0113ce0:	68 f8 9a 13 f0       	push   $0xf0139af8
f0113ce5:	68 56 03 00 00       	push   $0x356
f0113cea:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113cef:	e8 1f c7 fe ff       	call   f0100413 <_warn>
f0113cf4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113cf7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113cfe:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113d05:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d09:	74 04                	je     f0113d0f <test_copy_paste_chunk+0x102b>
f0113d0b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d0f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113d16:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113d1a:	74 72                	je     f0113d8e <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113d1c:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113d23:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113d2a:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113d31:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113d38:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d3b:	8a 00                	mov    (%eax),%al
f0113d3d:	3c 62                	cmp    $0x62,%al
f0113d3f:	75 1b                	jne    f0113d5c <test_copy_paste_chunk+0x1078>
f0113d41:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113d44:	8a 00                	mov    (%eax),%al
f0113d46:	3c 62                	cmp    $0x62,%al
f0113d48:	75 12                	jne    f0113d5c <test_copy_paste_chunk+0x1078>
f0113d4a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d4d:	8a 00                	mov    (%eax),%al
f0113d4f:	3c 7a                	cmp    $0x7a,%al
f0113d51:	75 09                	jne    f0113d5c <test_copy_paste_chunk+0x1078>
f0113d53:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113d56:	8a 00                	mov    (%eax),%al
f0113d58:	3c 7a                	cmp    $0x7a,%al
f0113d5a:	74 21                	je     f0113d7d <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113d5c:	83 ec 04             	sub    $0x4,%esp
f0113d5f:	68 ac 99 13 f0       	push   $0xf01399ac
f0113d64:	68 62 03 00 00       	push   $0x362
f0113d69:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113d6e:	e8 a0 c6 fe ff       	call   f0100413 <_warn>
f0113d73:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113d76:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113d7d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d81:	74 04                	je     f0113d87 <test_copy_paste_chunk+0x10a3>
f0113d83:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113d87:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113d8e:	83 ec 0c             	sub    $0xc,%esp
f0113d91:	68 a6 9b 13 f0       	push   $0xf0139ba6
f0113d96:	e8 73 cf fe ff       	call   f0100d0e <cprintf>
f0113d9b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113d9e:	83 ec 08             	sub    $0x8,%esp
f0113da1:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113da4:	68 b8 9b 13 f0       	push   $0xf0139bb8
f0113da9:	e8 60 cf fe ff       	call   f0100d0e <cprintf>
f0113dae:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113db1:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113db5:	75 10                	jne    f0113dc7 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113db7:	83 ec 0c             	sub    $0xc,%esp
f0113dba:	68 ec 9b 13 f0       	push   $0xf0139bec
f0113dbf:	e8 4a cf fe ff       	call   f0100d0e <cprintf>
f0113dc4:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113dc7:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f0113dcc:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113dcf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113dd2:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113dd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113dda:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113ddd:	5b                   	pop    %ebx
f0113dde:	5e                   	pop    %esi
f0113ddf:	5f                   	pop    %edi
f0113de0:	5d                   	pop    %ebp
f0113de1:	c3                   	ret    

f0113de2 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113de2:	55                   	push   %ebp
f0113de3:	89 e5                	mov    %esp,%ebp
f0113de5:	57                   	push   %edi
f0113de6:	56                   	push   %esi
f0113de7:	53                   	push   %ebx
f0113de8:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113dee:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113df4:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f0113df9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113dfe:	89 c7                	mov    %eax,%edi
f0113e00:	89 de                	mov    %ebx,%esi
f0113e02:	89 d1                	mov    %edx,%ecx
f0113e04:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113e06:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0113e0c:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113e11:	b0 00                	mov    $0x0,%al
f0113e13:	89 d7                	mov    %edx,%edi
f0113e15:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113e17:	6a 00                	push   $0x0
f0113e19:	6a 0a                	push   $0xa
f0113e1b:	6a 14                	push   $0x14
f0113e1d:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113e23:	50                   	push   %eax
f0113e24:	e8 4e 56 ff ff       	call   f0109477 <env_create>
f0113e29:	83 c4 10             	add    $0x10,%esp
f0113e2c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113e2f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e32:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113e35:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0113e38:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e3b:	8b 40 60             	mov    0x60(%eax),%eax
f0113e3e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113e41:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113e44:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113e47:	83 ec 0c             	sub    $0xc,%esp
f0113e4a:	ff 75 cc             	pushl  -0x34(%ebp)
f0113e4d:	e8 5a 2a 00 00       	call   f01168ac <ClearUserSpace>
f0113e52:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113e55:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0113e5c:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0113e63:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0113e6a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0113e6e:	83 ec 0c             	sub    $0xc,%esp
f0113e71:	68 64 a4 13 f0       	push   $0xf013a464
f0113e76:	e8 93 ce fe ff       	call   f0100d0e <cprintf>
f0113e7b:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0113e7e:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f0113e85:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0113e8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113e8f:	8a 00                	mov    (%eax),%al
f0113e91:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0113e97:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113e9a:	8a 00                	mov    (%eax),%al
f0113e9c:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ea2:	e8 0a 93 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0113ea7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0113eaa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113ead:	89 d0                	mov    %edx,%eax
f0113eaf:	01 c0                	add    %eax,%eax
f0113eb1:	01 d0                	add    %edx,%eax
f0113eb3:	01 c0                	add    %eax,%eax
f0113eb5:	83 ec 0c             	sub    $0xc,%esp
f0113eb8:	6a 02                	push   $0x2
f0113eba:	50                   	push   %eax
f0113ebb:	68 00 40 10 f0       	push   $0xf0104000
f0113ec0:	68 00 00 10 f0       	push   $0xf0100000
f0113ec5:	ff 75 cc             	pushl  -0x34(%ebp)
f0113ec8:	e8 b0 4f ff ff       	call   f0108e7d <share_chunk>
f0113ecd:	83 c4 20             	add    $0x20,%esp
f0113ed0:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113ed3:	e8 d9 92 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0113ed8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113edb:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113edf:	75 08                	jne    f0113ee9 <test_share_chunk+0x107>
f0113ee1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113ee4:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113ee7:	74 28                	je     f0113f11 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0113ee9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113eec:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113eef:	83 ec 0c             	sub    $0xc,%esp
f0113ef2:	50                   	push   %eax
f0113ef3:	ff 75 b0             	pushl  -0x50(%ebp)
f0113ef6:	68 90 a4 13 f0       	push   $0xf013a490
f0113efb:	68 9e 03 00 00       	push   $0x39e
f0113f00:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113f05:	e8 09 c5 fe ff       	call   f0100413 <_warn>
f0113f0a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f0d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113f11:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f15:	74 04                	je     f0113f1b <test_share_chunk+0x139>
f0113f17:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113f1b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0113f1f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113f22:	c1 e0 03             	shl    $0x3,%eax
f0113f25:	83 ec 08             	sub    $0x8,%esp
f0113f28:	68 fd 00 00 00       	push   $0xfd
f0113f2d:	6a 07                	push   $0x7
f0113f2f:	6a 03                	push   $0x3
f0113f31:	6a 07                	push   $0x7
f0113f33:	6a 03                	push   $0x3
f0113f35:	6a 01                	push   $0x1
f0113f37:	50                   	push   %eax
f0113f38:	68 00 40 10 f0       	push   $0xf0104000
f0113f3d:	68 00 00 10 f0       	push   $0xf0100000
f0113f42:	ff 75 cc             	pushl  -0x34(%ebp)
f0113f45:	e8 96 29 00 00       	call   f01168e0 <CCP>
f0113f4a:	83 c4 30             	add    $0x30,%esp
f0113f4d:	85 c0                	test   %eax,%eax
f0113f4f:	75 1e                	jne    f0113f6f <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0113f51:	83 ec 04             	sub    $0x4,%esp
f0113f54:	68 ec a4 13 f0       	push   $0xf013a4ec
f0113f59:	68 a6 03 00 00       	push   $0x3a6
f0113f5e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113f63:	e8 ab c4 fe ff       	call   f0100413 <_warn>
f0113f68:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113f6b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f6f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f73:	74 04                	je     f0113f79 <test_share_chunk+0x197>
f0113f75:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0113f79:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f7c:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0113f7f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f82:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0113f85:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f88:	8a 00                	mov    (%eax),%al
f0113f8a:	3c 41                	cmp    $0x41,%al
f0113f8c:	75 09                	jne    f0113f97 <test_share_chunk+0x1b5>
f0113f8e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f91:	8a 00                	mov    (%eax),%al
f0113f93:	3c 42                	cmp    $0x42,%al
f0113f95:	74 1e                	je     f0113fb5 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0113f97:	83 ec 04             	sub    $0x4,%esp
f0113f9a:	68 34 a5 13 f0       	push   $0xf013a534
f0113f9f:	68 b0 03 00 00       	push   $0x3b0
f0113fa4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0113fa9:	e8 65 c4 fe ff       	call   f0100413 <_warn>
f0113fae:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113fb1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113fb5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fb9:	74 04                	je     f0113fbf <test_share_chunk+0x1dd>
f0113fbb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113fbf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0113fc3:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0113fc9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113fcc:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0113fce:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0113fd4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113fd7:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0113fd9:	83 ec 0c             	sub    $0xc,%esp
f0113fdc:	68 69 a5 13 f0       	push   $0xf013a569
f0113fe1:	e8 28 cd fe ff       	call   f0100d0e <cprintf>
f0113fe6:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0113fe9:	83 ec 0c             	sub    $0xc,%esp
f0113fec:	68 78 a5 13 f0       	push   $0xf013a578
f0113ff1:	e8 18 cd fe ff       	call   f0100d0e <cprintf>
f0113ff6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113ff9:	e8 b3 91 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0113ffe:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114001:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114004:	c1 e0 05             	shl    $0x5,%eax
f0114007:	83 ec 0c             	sub    $0xc,%esp
f011400a:	68 02 0e 00 00       	push   $0xe02
f011400f:	50                   	push   %eax
f0114010:	68 00 00 00 40       	push   $0x40000000
f0114015:	68 00 00 00 f0       	push   $0xf0000000
f011401a:	ff 75 cc             	pushl  -0x34(%ebp)
f011401d:	e8 5b 4e ff ff       	call   f0108e7d <share_chunk>
f0114022:	83 c4 20             	add    $0x20,%esp
f0114025:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114028:	e8 84 91 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011402d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0114030:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114034:	75 1f                	jne    f0114055 <test_share_chunk+0x273>
f0114036:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114039:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011403c:	89 c1                	mov    %eax,%ecx
f011403e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114041:	c1 e0 05             	shl    $0x5,%eax
f0114044:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114047:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011404e:	99                   	cltd   
f011404f:	f7 fb                	idiv   %ebx
f0114051:	39 c1                	cmp    %eax,%ecx
f0114053:	74 28                	je     f011407d <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114055:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114058:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011405b:	83 ec 0c             	sub    $0xc,%esp
f011405e:	50                   	push   %eax
f011405f:	ff 75 a8             	pushl  -0x58(%ebp)
f0114062:	68 b4 a5 13 f0       	push   $0xf013a5b4
f0114067:	68 c8 03 00 00       	push   $0x3c8
f011406c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114071:	e8 9d c3 fe ff       	call   f0100413 <_warn>
f0114076:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114079:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011407d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114081:	74 04                	je     f0114087 <test_share_chunk+0x2a5>
f0114083:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114087:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011408b:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114092:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114095:	c1 e0 05             	shl    $0x5,%eax
f0114098:	83 ec 08             	sub    $0x8,%esp
f011409b:	6a 02                	push   $0x2
f011409d:	6a 07                	push   $0x7
f011409f:	6a 03                	push   $0x3
f01140a1:	68 07 0e 00 00       	push   $0xe07
f01140a6:	68 03 0e 00 00       	push   $0xe03
f01140ab:	6a ff                	push   $0xffffffff
f01140ad:	50                   	push   %eax
f01140ae:	68 00 00 00 40       	push   $0x40000000
f01140b3:	68 00 00 00 f0       	push   $0xf0000000
f01140b8:	ff 75 cc             	pushl  -0x34(%ebp)
f01140bb:	e8 20 28 00 00       	call   f01168e0 <CCP>
f01140c0:	83 c4 30             	add    $0x30,%esp
f01140c3:	85 c0                	test   %eax,%eax
f01140c5:	75 25                	jne    f01140ec <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01140c7:	83 ec 04             	sub    $0x4,%esp
f01140ca:	68 ec a4 13 f0       	push   $0xf013a4ec
f01140cf:	68 d1 03 00 00       	push   $0x3d1
f01140d4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01140d9:	e8 35 c3 fe ff       	call   f0100413 <_warn>
f01140de:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01140e1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01140e5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01140ec:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140ef:	89 d0                	mov    %edx,%eax
f01140f1:	01 c0                	add    %eax,%eax
f01140f3:	01 d0                	add    %edx,%eax
f01140f5:	c1 e0 02             	shl    $0x2,%eax
f01140f8:	83 ec 08             	sub    $0x8,%esp
f01140fb:	6a 02                	push   $0x2
f01140fd:	6a 07                	push   $0x7
f01140ff:	6a 03                	push   $0x3
f0114101:	68 07 0e 00 00       	push   $0xe07
f0114106:	68 03 0e 00 00       	push   $0xe03
f011410b:	6a 02                	push   $0x2
f011410d:	50                   	push   %eax
f011410e:	68 00 00 00 40       	push   $0x40000000
f0114113:	68 00 00 00 f0       	push   $0xf0000000
f0114118:	ff 75 cc             	pushl  -0x34(%ebp)
f011411b:	e8 c0 27 00 00       	call   f01168e0 <CCP>
f0114120:	83 c4 30             	add    $0x30,%esp
f0114123:	85 c0                	test   %eax,%eax
f0114125:	75 1e                	jne    f0114145 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114127:	83 ec 04             	sub    $0x4,%esp
f011412a:	68 ec a4 13 f0       	push   $0xf013a4ec
f011412f:	68 d8 03 00 00       	push   $0x3d8
f0114134:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114139:	e8 d5 c2 fe ff       	call   f0100413 <_warn>
f011413e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114141:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114145:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114149:	74 04                	je     f011414f <test_share_chunk+0x36d>
f011414b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011414f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0114153:	b8 bc f8 85 f0       	mov    $0xf085f8bc,%eax
f0114158:	05 00 00 00 10       	add    $0x10000000,%eax
f011415d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114160:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114163:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0114168:	83 ec 08             	sub    $0x8,%esp
f011416b:	6a 02                	push   $0x2
f011416d:	6a 07                	push   $0x7
f011416f:	6a 03                	push   $0x3
f0114171:	68 07 0e 00 00       	push   $0xe07
f0114176:	68 03 0e 00 00       	push   $0xe03
f011417b:	6a 02                	push   $0x2
f011417d:	50                   	push   %eax
f011417e:	68 00 00 0a 40       	push   $0x400a0000
f0114183:	68 00 00 0a f0       	push   $0xf00a0000
f0114188:	ff 75 cc             	pushl  -0x34(%ebp)
f011418b:	e8 50 27 00 00       	call   f01168e0 <CCP>
f0114190:	83 c4 30             	add    $0x30,%esp
f0114193:	85 c0                	test   %eax,%eax
f0114195:	75 1e                	jne    f01141b5 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114197:	83 ec 04             	sub    $0x4,%esp
f011419a:	68 ec a4 13 f0       	push   $0xf013a4ec
f011419f:	68 e2 03 00 00       	push   $0x3e2
f01141a4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01141a9:	e8 65 c2 fe ff       	call   f0100413 <_warn>
f01141ae:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141b1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01141b5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141b9:	74 04                	je     f01141bf <test_share_chunk+0x3dd>
f01141bb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01141bf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01141c3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01141c7:	0f 84 a4 00 00 00    	je     f0114271 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01141cd:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01141d4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141d7:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01141da:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01141e1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141e4:	8a 00                	mov    (%eax),%al
f01141e6:	3c 41                	cmp    $0x41,%al
f01141e8:	75 09                	jne    f01141f3 <test_share_chunk+0x411>
f01141ea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01141ed:	8a 00                	mov    (%eax),%al
f01141ef:	3c 41                	cmp    $0x41,%al
f01141f1:	74 1e                	je     f0114211 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01141f3:	83 ec 04             	sub    $0x4,%esp
f01141f6:	68 34 a5 13 f0       	push   $0xf013a534
f01141fb:	68 ef 03 00 00       	push   $0x3ef
f0114200:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114205:	e8 09 c2 fe ff       	call   f0100413 <_warn>
f011420a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011420d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114211:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114215:	74 04                	je     f011421b <test_share_chunk+0x439>
f0114217:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011421b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f011421f:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0114226:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114229:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f011422c:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0114233:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114236:	8a 00                	mov    (%eax),%al
f0114238:	3c 43                	cmp    $0x43,%al
f011423a:	75 09                	jne    f0114245 <test_share_chunk+0x463>
f011423c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011423f:	8a 00                	mov    (%eax),%al
f0114241:	3c 43                	cmp    $0x43,%al
f0114243:	74 1e                	je     f0114263 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114245:	83 ec 04             	sub    $0x4,%esp
f0114248:	68 34 a5 13 f0       	push   $0xf013a534
f011424d:	68 fa 03 00 00       	push   $0x3fa
f0114252:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114257:	e8 b7 c1 fe ff       	call   f0100413 <_warn>
f011425c:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011425f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114263:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114267:	74 04                	je     f011426d <test_share_chunk+0x48b>
f0114269:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011426d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114271:	83 ec 0c             	sub    $0xc,%esp
f0114274:	68 43 9b 13 f0       	push   $0xf0139b43
f0114279:	e8 90 ca fe ff       	call   f0100d0e <cprintf>
f011427e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0114281:	83 ec 0c             	sub    $0xc,%esp
f0114284:	68 04 a6 13 f0       	push   $0xf013a604
f0114289:	e8 80 ca fe ff       	call   f0100d0e <cprintf>
f011428e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114291:	e8 1b 8f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114296:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0114299:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011429c:	89 d0                	mov    %edx,%eax
f011429e:	c1 e0 03             	shl    $0x3,%eax
f01142a1:	01 d0                	add    %edx,%eax
f01142a3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01142aa:	01 d0                	add    %edx,%eax
f01142ac:	c1 e0 03             	shl    $0x3,%eax
f01142af:	83 ec 0c             	sub    $0xc,%esp
f01142b2:	6a 06                	push   $0x6
f01142b4:	50                   	push   %eax
f01142b5:	6a 00                	push   $0x0
f01142b7:	68 00 00 00 40       	push   $0x40000000
f01142bc:	ff 75 cc             	pushl  -0x34(%ebp)
f01142bf:	e8 b9 4b ff ff       	call   f0108e7d <share_chunk>
f01142c4:	83 c4 20             	add    $0x20,%esp
f01142c7:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01142ca:	e8 e2 8e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01142cf:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01142d2:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01142d6:	75 0b                	jne    f01142e3 <test_share_chunk+0x501>
f01142d8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142db:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142de:	83 f8 01             	cmp    $0x1,%eax
f01142e1:	74 28                	je     f011430b <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01142e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01142e6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01142e9:	83 ec 0c             	sub    $0xc,%esp
f01142ec:	50                   	push   %eax
f01142ed:	ff 75 a0             	pushl  -0x60(%ebp)
f01142f0:	68 b4 a5 13 f0       	push   $0xf013a5b4
f01142f5:	68 10 04 00 00       	push   $0x410
f01142fa:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01142ff:	e8 0f c1 fe ff       	call   f0100413 <_warn>
f0114304:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114307:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011430b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011430f:	74 04                	je     f0114315 <test_share_chunk+0x533>
f0114311:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114315:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114319:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114320:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114323:	05 00 80 02 00       	add    $0x28000,%eax
f0114328:	c1 e0 02             	shl    $0x2,%eax
f011432b:	83 ec 08             	sub    $0x8,%esp
f011432e:	6a 02                	push   $0x2
f0114330:	6a 07                	push   $0x7
f0114332:	6a 03                	push   $0x3
f0114334:	6a 07                	push   $0x7
f0114336:	6a 07                	push   $0x7
f0114338:	6a ff                	push   $0xffffffff
f011433a:	50                   	push   %eax
f011433b:	6a 00                	push   $0x0
f011433d:	68 00 00 00 40       	push   $0x40000000
f0114342:	ff 75 cc             	pushl  -0x34(%ebp)
f0114345:	e8 96 25 00 00       	call   f01168e0 <CCP>
f011434a:	83 c4 30             	add    $0x30,%esp
f011434d:	85 c0                	test   %eax,%eax
f011434f:	75 25                	jne    f0114376 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114351:	83 ec 04             	sub    $0x4,%esp
f0114354:	68 ec a4 13 f0       	push   $0xf013a4ec
f0114359:	68 19 04 00 00       	push   $0x419
f011435e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114363:	e8 ab c0 fe ff       	call   f0100413 <_warn>
f0114368:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011436b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011436f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114376:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114379:	89 d0                	mov    %edx,%eax
f011437b:	01 c0                	add    %eax,%eax
f011437d:	01 d0                	add    %edx,%eax
f011437f:	c1 e0 02             	shl    $0x2,%eax
f0114382:	83 ec 08             	sub    $0x8,%esp
f0114385:	6a 02                	push   $0x2
f0114387:	6a 07                	push   $0x7
f0114389:	6a 03                	push   $0x3
f011438b:	6a 07                	push   $0x7
f011438d:	6a 07                	push   $0x7
f011438f:	6a 03                	push   $0x3
f0114391:	50                   	push   %eax
f0114392:	6a 00                	push   $0x0
f0114394:	68 00 00 00 40       	push   $0x40000000
f0114399:	ff 75 cc             	pushl  -0x34(%ebp)
f011439c:	e8 3f 25 00 00       	call   f01168e0 <CCP>
f01143a1:	83 c4 30             	add    $0x30,%esp
f01143a4:	85 c0                	test   %eax,%eax
f01143a6:	75 1e                	jne    f01143c6 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01143a8:	83 ec 04             	sub    $0x4,%esp
f01143ab:	68 ec a4 13 f0       	push   $0xf013a4ec
f01143b0:	68 20 04 00 00       	push   $0x420
f01143b5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01143ba:	e8 54 c0 fe ff       	call   f0100413 <_warn>
f01143bf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143c2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143c6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143ca:	74 04                	je     f01143d0 <test_share_chunk+0x5ee>
f01143cc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143d0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01143d4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01143d7:	89 d0                	mov    %edx,%eax
f01143d9:	01 c0                	add    %eax,%eax
f01143db:	01 d0                	add    %edx,%eax
f01143dd:	c1 e0 02             	shl    $0x2,%eax
f01143e0:	f7 d8                	neg    %eax
f01143e2:	05 00 00 0a 00       	add    $0xa0000,%eax
f01143e7:	83 ec 08             	sub    $0x8,%esp
f01143ea:	6a 02                	push   $0x2
f01143ec:	6a 07                	push   $0x7
f01143ee:	6a 03                	push   $0x3
f01143f0:	6a 07                	push   $0x7
f01143f2:	6a 07                	push   $0x7
f01143f4:	6a 02                	push   $0x2
f01143f6:	50                   	push   %eax
f01143f7:	68 00 30 00 00       	push   $0x3000
f01143fc:	68 00 30 00 40       	push   $0x40003000
f0114401:	ff 75 cc             	pushl  -0x34(%ebp)
f0114404:	e8 d7 24 00 00       	call   f01168e0 <CCP>
f0114409:	83 c4 30             	add    $0x30,%esp
f011440c:	85 c0                	test   %eax,%eax
f011440e:	75 1e                	jne    f011442e <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114410:	83 ec 04             	sub    $0x4,%esp
f0114413:	68 ec a4 13 f0       	push   $0xf013a4ec
f0114418:	68 28 04 00 00       	push   $0x428
f011441d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114422:	e8 ec bf fe ff       	call   f0100413 <_warn>
f0114427:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011442a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011442e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114432:	74 04                	je     f0114438 <test_share_chunk+0x656>
f0114434:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114438:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011443c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011443f:	c1 e0 02             	shl    $0x2,%eax
f0114442:	83 ec 08             	sub    $0x8,%esp
f0114445:	6a 02                	push   $0x2
f0114447:	6a 07                	push   $0x7
f0114449:	6a 03                	push   $0x3
f011444b:	6a 07                	push   $0x7
f011444d:	6a 07                	push   $0x7
f011444f:	6a 03                	push   $0x3
f0114451:	50                   	push   %eax
f0114452:	68 00 00 0a 00       	push   $0xa0000
f0114457:	68 00 00 0a 40       	push   $0x400a0000
f011445c:	ff 75 cc             	pushl  -0x34(%ebp)
f011445f:	e8 7c 24 00 00       	call   f01168e0 <CCP>
f0114464:	83 c4 30             	add    $0x30,%esp
f0114467:	85 c0                	test   %eax,%eax
f0114469:	75 1e                	jne    f0114489 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011446b:	83 ec 04             	sub    $0x4,%esp
f011446e:	68 ec a4 13 f0       	push   $0xf013a4ec
f0114473:	68 30 04 00 00       	push   $0x430
f0114478:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011447d:	e8 91 bf fe ff       	call   f0100413 <_warn>
f0114482:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114485:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114489:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011448d:	74 04                	je     f0114493 <test_share_chunk+0x6b1>
f011448f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114493:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114497:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011449b:	0f 84 92 00 00 00    	je     f0114533 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f01144a1:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01144a8:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01144af:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01144b6:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01144bd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01144c0:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01144c3:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01144ca:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01144d1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144d4:	8a 00                	mov    (%eax),%al
f01144d6:	3c 41                	cmp    $0x41,%al
f01144d8:	75 2d                	jne    f0114507 <test_share_chunk+0x725>
f01144da:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01144dd:	8a 00                	mov    (%eax),%al
f01144df:	3c 41                	cmp    $0x41,%al
f01144e1:	75 24                	jne    f0114507 <test_share_chunk+0x725>
f01144e3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01144e6:	8a 00                	mov    (%eax),%al
f01144e8:	3c 41                	cmp    $0x41,%al
f01144ea:	75 1b                	jne    f0114507 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01144ec:	8b 45 98             	mov    -0x68(%ebp),%eax
f01144ef:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01144f1:	3c 44                	cmp    $0x44,%al
f01144f3:	75 12                	jne    f0114507 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01144f5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01144f8:	8a 00                	mov    (%eax),%al
f01144fa:	3c 44                	cmp    $0x44,%al
f01144fc:	75 09                	jne    f0114507 <test_share_chunk+0x725>
f01144fe:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114501:	8a 00                	mov    (%eax),%al
f0114503:	3c 44                	cmp    $0x44,%al
f0114505:	74 1e                	je     f0114525 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114507:	83 ec 04             	sub    $0x4,%esp
f011450a:	68 34 a5 13 f0       	push   $0xf013a534
f011450f:	68 42 04 00 00       	push   $0x442
f0114514:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114519:	e8 f5 be fe ff       	call   f0100413 <_warn>
f011451e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114521:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114525:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114529:	74 04                	je     f011452f <test_share_chunk+0x74d>
f011452b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011452f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114533:	83 ec 0c             	sub    $0xc,%esp
f0114536:	68 a6 9b 13 f0       	push   $0xf0139ba6
f011453b:	e8 ce c7 fe ff       	call   f0100d0e <cprintf>
f0114540:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114543:	83 ec 0c             	sub    $0xc,%esp
f0114546:	68 40 a6 13 f0       	push   $0xf013a640
f011454b:	e8 be c7 fe ff       	call   f0100d0e <cprintf>
f0114550:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114553:	e8 59 8c ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114558:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f011455b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011455e:	89 d0                	mov    %edx,%eax
f0114560:	01 c0                	add    %eax,%eax
f0114562:	01 d0                	add    %edx,%eax
f0114564:	01 c0                	add    %eax,%eax
f0114566:	01 d0                	add    %edx,%eax
f0114568:	83 ec 0c             	sub    $0xc,%esp
f011456b:	6a 04                	push   $0x4
f011456d:	50                   	push   %eax
f011456e:	68 00 fc 3f 00       	push   $0x3ffc00
f0114573:	68 00 fc 09 00       	push   $0x9fc00
f0114578:	ff 75 cc             	pushl  -0x34(%ebp)
f011457b:	e8 fd 48 ff ff       	call   f0108e7d <share_chunk>
f0114580:	83 c4 20             	add    $0x20,%esp
f0114583:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114586:	e8 26 8c ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011458b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011458e:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114592:	75 0b                	jne    f011459f <test_share_chunk+0x7bd>
f0114594:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114597:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011459a:	83 f8 01             	cmp    $0x1,%eax
f011459d:	74 28                	je     f01145c7 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011459f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145a2:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01145a5:	83 ec 0c             	sub    $0xc,%esp
f01145a8:	50                   	push   %eax
f01145a9:	ff 75 8c             	pushl  -0x74(%ebp)
f01145ac:	68 b4 a5 13 f0       	push   $0xf013a5b4
f01145b1:	68 58 04 00 00       	push   $0x458
f01145b6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01145bb:	e8 53 be fe ff       	call   f0100413 <_warn>
f01145c0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145c3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01145c7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145cb:	74 04                	je     f01145d1 <test_share_chunk+0x7ef>
f01145cd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01145d1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01145d5:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01145dc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145df:	89 d0                	mov    %edx,%eax
f01145e1:	01 c0                	add    %eax,%eax
f01145e3:	01 d0                	add    %edx,%eax
f01145e5:	c1 e0 02             	shl    $0x2,%eax
f01145e8:	83 ec 08             	sub    $0x8,%esp
f01145eb:	6a 02                	push   $0x2
f01145ed:	6a 07                	push   $0x7
f01145ef:	6a 07                	push   $0x7
f01145f1:	6a 07                	push   $0x7
f01145f3:	6a 05                	push   $0x5
f01145f5:	6a ff                	push   $0xffffffff
f01145f7:	50                   	push   %eax
f01145f8:	68 00 f0 3f 00       	push   $0x3ff000
f01145fd:	68 00 f0 09 00       	push   $0x9f000
f0114602:	ff 75 cc             	pushl  -0x34(%ebp)
f0114605:	e8 d6 22 00 00       	call   f01168e0 <CCP>
f011460a:	83 c4 30             	add    $0x30,%esp
f011460d:	85 c0                	test   %eax,%eax
f011460f:	75 25                	jne    f0114636 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114611:	83 ec 04             	sub    $0x4,%esp
f0114614:	68 ec a4 13 f0       	push   $0xf013a4ec
f0114619:	68 61 04 00 00       	push   $0x461
f011461e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114623:	e8 eb bd fe ff       	call   f0100413 <_warn>
f0114628:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011462b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011462f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114636:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011463a:	74 04                	je     f0114640 <test_share_chunk+0x85e>
f011463c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114640:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114644:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114647:	c1 e0 02             	shl    $0x2,%eax
f011464a:	83 ec 08             	sub    $0x8,%esp
f011464d:	6a 02                	push   $0x2
f011464f:	6a 07                	push   $0x7
f0114651:	6a 07                	push   $0x7
f0114653:	6a 07                	push   $0x7
f0114655:	6a 05                	push   $0x5
f0114657:	6a 03                	push   $0x3
f0114659:	50                   	push   %eax
f011465a:	68 00 f0 3f 00       	push   $0x3ff000
f011465f:	68 00 f0 09 00       	push   $0x9f000
f0114664:	ff 75 cc             	pushl  -0x34(%ebp)
f0114667:	e8 74 22 00 00       	call   f01168e0 <CCP>
f011466c:	83 c4 30             	add    $0x30,%esp
f011466f:	85 c0                	test   %eax,%eax
f0114671:	75 1e                	jne    f0114691 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114673:	83 ec 04             	sub    $0x4,%esp
f0114676:	68 ec a4 13 f0       	push   $0xf013a4ec
f011467b:	68 6a 04 00 00       	push   $0x46a
f0114680:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114685:	e8 89 bd fe ff       	call   f0100413 <_warn>
f011468a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011468d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114691:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114695:	74 04                	je     f011469b <test_share_chunk+0x8b9>
f0114697:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011469b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011469f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01146a2:	c1 e0 03             	shl    $0x3,%eax
f01146a5:	83 ec 08             	sub    $0x8,%esp
f01146a8:	6a 02                	push   $0x2
f01146aa:	6a 07                	push   $0x7
f01146ac:	6a 07                	push   $0x7
f01146ae:	6a 07                	push   $0x7
f01146b0:	6a 05                	push   $0x5
f01146b2:	6a 04                	push   $0x4
f01146b4:	50                   	push   %eax
f01146b5:	68 00 00 40 00       	push   $0x400000
f01146ba:	68 00 00 0a 00       	push   $0xa0000
f01146bf:	ff 75 cc             	pushl  -0x34(%ebp)
f01146c2:	e8 19 22 00 00       	call   f01168e0 <CCP>
f01146c7:	83 c4 30             	add    $0x30,%esp
f01146ca:	85 c0                	test   %eax,%eax
f01146cc:	75 1e                	jne    f01146ec <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01146ce:	83 ec 04             	sub    $0x4,%esp
f01146d1:	68 ec a4 13 f0       	push   $0xf013a4ec
f01146d6:	68 72 04 00 00       	push   $0x472
f01146db:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01146e0:	e8 2e bd fe ff       	call   f0100413 <_warn>
f01146e5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146e8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146ec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146f0:	74 04                	je     f01146f6 <test_share_chunk+0x914>
f01146f2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146f6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01146fa:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01146fe:	0f 84 b2 00 00 00    	je     f01147b6 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0114704:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011470b:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0114712:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0114719:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0114720:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114727:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011472e:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114735:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011473c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011473f:	8a 00                	mov    (%eax),%al
f0114741:	3c 44                	cmp    $0x44,%al
f0114743:	75 45                	jne    f011478a <test_share_chunk+0x9a8>
f0114745:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114748:	8a 00                	mov    (%eax),%al
f011474a:	3c 44                	cmp    $0x44,%al
f011474c:	75 3c                	jne    f011478a <test_share_chunk+0x9a8>
f011474e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114751:	8a 00                	mov    (%eax),%al
f0114753:	3c 44                	cmp    $0x44,%al
f0114755:	75 33                	jne    f011478a <test_share_chunk+0x9a8>
f0114757:	8b 45 98             	mov    -0x68(%ebp),%eax
f011475a:	8a 00                	mov    (%eax),%al
f011475c:	3c 44                	cmp    $0x44,%al
f011475e:	75 2a                	jne    f011478a <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114760:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114763:	8a 10                	mov    (%eax),%dl
f0114765:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114768:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011476a:	38 c2                	cmp    %al,%dl
f011476c:	75 1c                	jne    f011478a <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011476e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114771:	8a 10                	mov    (%eax),%dl
f0114773:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114776:	8a 00                	mov    (%eax),%al
f0114778:	38 c2                	cmp    %al,%dl
f011477a:	75 0e                	jne    f011478a <test_share_chunk+0x9a8>
f011477c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011477f:	8a 10                	mov    (%eax),%dl
f0114781:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114784:	8a 00                	mov    (%eax),%al
f0114786:	38 c2                	cmp    %al,%dl
f0114788:	74 1e                	je     f01147a8 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011478a:	83 ec 04             	sub    $0x4,%esp
f011478d:	68 34 a5 13 f0       	push   $0xf013a534
f0114792:	68 87 04 00 00       	push   $0x487
f0114797:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011479c:	e8 72 bc fe ff       	call   f0100413 <_warn>
f01147a1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01147a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01147a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147ac:	74 04                	je     f01147b2 <test_share_chunk+0x9d0>
f01147ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01147b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01147b6:	83 ec 0c             	sub    $0xc,%esp
f01147b9:	68 78 a6 13 f0       	push   $0xf013a678
f01147be:	e8 4b c5 fe ff       	call   f0100d0e <cprintf>
f01147c3:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01147c6:	83 ec 08             	sub    $0x8,%esp
f01147c9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01147cc:	68 88 a6 13 f0       	push   $0xf013a688
f01147d1:	e8 38 c5 fe ff       	call   f0100d0e <cprintf>
f01147d6:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01147d9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01147dd:	75 10                	jne    f01147ef <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01147df:	83 ec 0c             	sub    $0xc,%esp
f01147e2:	68 b8 a6 13 f0       	push   $0xf013a6b8
f01147e7:	e8 22 c5 fe ff       	call   f0100d0e <cprintf>
f01147ec:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01147ef:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f01147f4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01147f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01147fa:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01147fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114802:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114805:	5b                   	pop    %ebx
f0114806:	5e                   	pop    %esi
f0114807:	5f                   	pop    %edi
f0114808:	5d                   	pop    %ebp
f0114809:	c3                   	ret    

f011480a <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f011480a:	55                   	push   %ebp
f011480b:	89 e5                	mov    %esp,%ebp
f011480d:	57                   	push   %edi
f011480e:	56                   	push   %esi
f011480f:	53                   	push   %ebx
f0114810:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114816:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011481c:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f0114821:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114826:	89 c7                	mov    %eax,%edi
f0114828:	89 de                	mov    %ebx,%esi
f011482a:	89 d1                	mov    %edx,%ecx
f011482c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011482e:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114834:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114839:	b0 00                	mov    $0x0,%al
f011483b:	89 d7                	mov    %edx,%edi
f011483d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011483f:	6a 00                	push   $0x0
f0114841:	6a 0a                	push   $0xa
f0114843:	6a 14                	push   $0x14
f0114845:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011484b:	50                   	push   %eax
f011484c:	e8 26 4c ff ff       	call   f0109477 <env_create>
f0114851:	83 c4 10             	add    $0x10,%esp
f0114854:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114857:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011485a:	8b 40 5c             	mov    0x5c(%eax),%eax
f011485d:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0114860:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114863:	8b 40 60             	mov    0x60(%eax),%eax
f0114866:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114869:	8b 45 90             	mov    -0x70(%ebp),%eax
f011486c:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011486f:	83 ec 0c             	sub    $0xc,%esp
f0114872:	ff 75 d0             	pushl  -0x30(%ebp)
f0114875:	e8 32 20 00 00       	call   f01168ac <ClearUserSpace>
f011487a:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011487d:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0114884:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f011488b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0114892:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114896:	83 ec 0c             	sub    $0xc,%esp
f0114899:	68 f4 a6 13 f0       	push   $0xf013a6f4
f011489e:	e8 6b c4 fe ff       	call   f0100d0e <cprintf>
f01148a3:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01148a6:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f01148ad:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f01148b4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01148b7:	8a 00                	mov    (%eax),%al
f01148b9:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01148bf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01148c2:	8a 00                	mov    (%eax),%al
f01148c4:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01148ca:	83 ec 08             	sub    $0x8,%esp
f01148cd:	68 00 f0 bf ef       	push   $0xefbff000
f01148d2:	ff 75 d0             	pushl  -0x30(%ebp)
f01148d5:	e8 b3 1f 00 00       	call   f011688d <GP>
f01148da:	83 c4 10             	add    $0x10,%esp
f01148dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01148e0:	e8 cc 88 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01148e5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01148e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01148eb:	c1 e0 02             	shl    $0x2,%eax
f01148ee:	6a 02                	push   $0x2
f01148f0:	50                   	push   %eax
f01148f1:	68 00 f0 bf ef       	push   $0xefbff000
f01148f6:	ff 75 d0             	pushl  -0x30(%ebp)
f01148f9:	e8 00 47 ff ff       	call   f0108ffe <allocate_chunk>
f01148fe:	83 c4 10             	add    $0x10,%esp
f0114901:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114904:	e8 a8 88 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114909:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011490c:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114910:	75 08                	jne    f011491a <test_allocate_chunk+0x110>
f0114912:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114915:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114918:	74 2a                	je     f0114944 <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011491a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011491d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114920:	83 ec 08             	sub    $0x8,%esp
f0114923:	6a 00                	push   $0x0
f0114925:	50                   	push   %eax
f0114926:	ff 75 b0             	pushl  -0x50(%ebp)
f0114929:	68 20 a7 13 f0       	push   $0xf013a720
f011492e:	68 c3 04 00 00       	push   $0x4c3
f0114933:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114938:	e8 d6 ba fe ff       	call   f0100413 <_warn>
f011493d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114940:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114944:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114948:	74 04                	je     f011494e <test_allocate_chunk+0x144>
f011494a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011494e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114952:	e8 5a 88 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114957:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f011495a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011495d:	01 c0                	add    %eax,%eax
f011495f:	89 c1                	mov    %eax,%ecx
f0114961:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114964:	89 d0                	mov    %edx,%eax
f0114966:	c1 e0 02             	shl    $0x2,%eax
f0114969:	01 d0                	add    %edx,%eax
f011496b:	f7 d8                	neg    %eax
f011496d:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114972:	6a 02                	push   $0x2
f0114974:	51                   	push   %ecx
f0114975:	50                   	push   %eax
f0114976:	ff 75 d0             	pushl  -0x30(%ebp)
f0114979:	e8 80 46 ff ff       	call   f0108ffe <allocate_chunk>
f011497e:	83 c4 10             	add    $0x10,%esp
f0114981:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114984:	e8 28 88 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114989:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011498c:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114990:	75 08                	jne    f011499a <test_allocate_chunk+0x190>
f0114992:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114995:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114998:	74 2a                	je     f01149c4 <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f011499a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011499d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01149a0:	83 ec 08             	sub    $0x8,%esp
f01149a3:	6a 00                	push   $0x0
f01149a5:	50                   	push   %eax
f01149a6:	ff 75 b0             	pushl  -0x50(%ebp)
f01149a9:	68 20 a7 13 f0       	push   $0xf013a720
f01149ae:	68 d1 04 00 00       	push   $0x4d1
f01149b3:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01149b8:	e8 56 ba fe ff       	call   f0100413 <_warn>
f01149bd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149c0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01149c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149c8:	74 04                	je     f01149ce <test_allocate_chunk+0x1c4>
f01149ca:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01149ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01149d2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01149d5:	c1 e0 02             	shl    $0x2,%eax
f01149d8:	83 ec 08             	sub    $0x8,%esp
f01149db:	6a 03                	push   $0x3
f01149dd:	6a 00                	push   $0x0
f01149df:	6a 00                	push   $0x0
f01149e1:	68 ff 0f 00 00       	push   $0xfff
f01149e6:	ff 75 b8             	pushl  -0x48(%ebp)
f01149e9:	6a 01                	push   $0x1
f01149eb:	50                   	push   %eax
f01149ec:	68 00 f0 bf ef       	push   $0xefbff000
f01149f1:	6a 00                	push   $0x0
f01149f3:	ff 75 d0             	pushl  -0x30(%ebp)
f01149f6:	e8 e5 1e 00 00       	call   f01168e0 <CCP>
f01149fb:	83 c4 30             	add    $0x30,%esp
f01149fe:	85 c0                	test   %eax,%eax
f0114a00:	75 1e                	jne    f0114a20 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114a02:	83 ec 04             	sub    $0x4,%esp
f0114a05:	68 88 a7 13 f0       	push   $0xf013a788
f0114a0a:	68 d9 04 00 00       	push   $0x4d9
f0114a0f:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114a14:	e8 fa b9 fe ff       	call   f0100413 <_warn>
f0114a19:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a1c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a20:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a24:	74 04                	je     f0114a2a <test_allocate_chunk+0x220>
f0114a26:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a2a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114a2e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114a31:	8a 10                	mov    (%eax),%dl
f0114a33:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114a39:	38 c2                	cmp    %al,%dl
f0114a3b:	75 0f                	jne    f0114a4c <test_allocate_chunk+0x242>
f0114a3d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114a40:	8a 10                	mov    (%eax),%dl
f0114a42:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114a48:	38 c2                	cmp    %al,%dl
f0114a4a:	74 1e                	je     f0114a6a <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114a4c:	83 ec 04             	sub    $0x4,%esp
f0114a4f:	68 d4 a7 13 f0       	push   $0xf013a7d4
f0114a54:	68 e1 04 00 00       	push   $0x4e1
f0114a59:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114a5e:	e8 b0 b9 fe ff       	call   f0100413 <_warn>
f0114a63:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114a66:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114a6a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114a6e:	74 04                	je     f0114a74 <test_allocate_chunk+0x26a>
f0114a70:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114a74:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114a78:	83 ec 0c             	sub    $0xc,%esp
f0114a7b:	68 69 a5 13 f0       	push   $0xf013a569
f0114a80:	e8 89 c2 fe ff       	call   f0100d0e <cprintf>
f0114a85:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114a88:	83 ec 0c             	sub    $0xc,%esp
f0114a8b:	68 0c a8 13 f0       	push   $0xf013a80c
f0114a90:	e8 79 c2 fe ff       	call   f0100d0e <cprintf>
f0114a95:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114a98:	e8 14 87 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114a9d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114aa0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114aa3:	c1 e0 05             	shl    $0x5,%eax
f0114aa6:	68 02 0e 00 00       	push   $0xe02
f0114aab:	50                   	push   %eax
f0114aac:	6a 00                	push   $0x0
f0114aae:	ff 75 d0             	pushl  -0x30(%ebp)
f0114ab1:	e8 48 45 ff ff       	call   f0108ffe <allocate_chunk>
f0114ab6:	83 c4 10             	add    $0x10,%esp
f0114ab9:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114abc:	e8 f0 86 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114ac1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114ac4:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114ac8:	75 36                	jne    f0114b00 <test_allocate_chunk+0x2f6>
f0114aca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114acd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114ad0:	89 c1                	mov    %eax,%ecx
f0114ad2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ad5:	c1 e0 05             	shl    $0x5,%eax
f0114ad8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114adb:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114ae2:	99                   	cltd   
f0114ae3:	f7 fe                	idiv   %esi
f0114ae5:	89 c3                	mov    %eax,%ebx
f0114ae7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114aea:	c1 e0 05             	shl    $0x5,%eax
f0114aed:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114af0:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114af7:	99                   	cltd   
f0114af8:	f7 fe                	idiv   %esi
f0114afa:	01 d8                	add    %ebx,%eax
f0114afc:	39 c1                	cmp    %eax,%ecx
f0114afe:	74 54                	je     f0114b54 <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114b00:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b03:	c1 e0 05             	shl    $0x5,%eax
f0114b06:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114b09:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114b10:	99                   	cltd   
f0114b11:	f7 ff                	idiv   %edi
f0114b13:	89 c1                	mov    %eax,%ecx
f0114b15:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b18:	c1 e0 05             	shl    $0x5,%eax
f0114b1b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114b1e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114b25:	99                   	cltd   
f0114b26:	f7 fe                	idiv   %esi
f0114b28:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114b2b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b2e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b31:	83 ec 08             	sub    $0x8,%esp
f0114b34:	52                   	push   %edx
f0114b35:	50                   	push   %eax
f0114b36:	ff 75 a8             	pushl  -0x58(%ebp)
f0114b39:	68 4c a8 13 f0       	push   $0xf013a84c
f0114b3e:	68 f6 04 00 00       	push   $0x4f6
f0114b43:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114b48:	e8 c6 b8 fe ff       	call   f0100413 <_warn>
f0114b4d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b50:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114b54:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114b58:	74 04                	je     f0114b5e <test_allocate_chunk+0x354>
f0114b5a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114b5e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114b62:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114b69:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b6c:	c1 e0 05             	shl    $0x5,%eax
f0114b6f:	83 ec 08             	sub    $0x8,%esp
f0114b72:	6a 03                	push   $0x3
f0114b74:	6a 00                	push   $0x0
f0114b76:	6a 00                	push   $0x0
f0114b78:	68 07 0e 00 00       	push   $0xe07
f0114b7d:	68 03 0e 00 00       	push   $0xe03
f0114b82:	6a 01                	push   $0x1
f0114b84:	50                   	push   %eax
f0114b85:	6a 00                	push   $0x0
f0114b87:	6a 00                	push   $0x0
f0114b89:	ff 75 d0             	pushl  -0x30(%ebp)
f0114b8c:	e8 4f 1d 00 00       	call   f01168e0 <CCP>
f0114b91:	83 c4 30             	add    $0x30,%esp
f0114b94:	85 c0                	test   %eax,%eax
f0114b96:	75 25                	jne    f0114bbd <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114b98:	83 ec 04             	sub    $0x4,%esp
f0114b9b:	68 88 a7 13 f0       	push   $0xf013a788
f0114ba0:	68 ff 04 00 00       	push   $0x4ff
f0114ba5:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114baa:	e8 64 b8 fe ff       	call   f0100413 <_warn>
f0114baf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114bb2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114bb6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0114bbd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bc1:	74 04                	je     f0114bc7 <test_allocate_chunk+0x3bd>
f0114bc3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114bc7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114bcb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114bcf:	74 5a                	je     f0114c2b <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114bd1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114bd4:	01 c0                	add    %eax,%eax
f0114bd6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114bd9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bdc:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114bdf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114be2:	01 c0                	add    %eax,%eax
f0114be4:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114be7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114bea:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114bed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114bf0:	8a 00                	mov    (%eax),%al
f0114bf2:	3c 4b                	cmp    $0x4b,%al
f0114bf4:	75 09                	jne    f0114bff <test_allocate_chunk+0x3f5>
f0114bf6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114bf9:	8a 00                	mov    (%eax),%al
f0114bfb:	3c 4d                	cmp    $0x4d,%al
f0114bfd:	74 1e                	je     f0114c1d <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114bff:	83 ec 04             	sub    $0x4,%esp
f0114c02:	68 d4 a7 13 f0       	push   $0xf013a7d4
f0114c07:	68 0d 05 00 00       	push   $0x50d
f0114c0c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114c11:	e8 fd b7 fe ff       	call   f0100413 <_warn>
f0114c16:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114c19:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114c1d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114c21:	74 04                	je     f0114c27 <test_allocate_chunk+0x41d>
f0114c23:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114c27:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114c2b:	83 ec 0c             	sub    $0xc,%esp
f0114c2e:	68 43 9b 13 f0       	push   $0xf0139b43
f0114c33:	e8 d6 c0 fe ff       	call   f0100d0e <cprintf>
f0114c38:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114c3b:	83 ec 0c             	sub    $0xc,%esp
f0114c3e:	68 ac a8 13 f0       	push   $0xf013a8ac
f0114c43:	e8 c6 c0 fe ff       	call   f0100d0e <cprintf>
f0114c48:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114c4b:	e8 61 85 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114c50:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114c53:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c56:	c1 e0 06             	shl    $0x6,%eax
f0114c59:	89 c2                	mov    %eax,%edx
f0114c5b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c5e:	c1 e0 05             	shl    $0x5,%eax
f0114c61:	6a 00                	push   $0x0
f0114c63:	52                   	push   %edx
f0114c64:	50                   	push   %eax
f0114c65:	ff 75 d0             	pushl  -0x30(%ebp)
f0114c68:	e8 91 43 ff ff       	call   f0108ffe <allocate_chunk>
f0114c6d:	83 c4 10             	add    $0x10,%esp
f0114c70:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114c73:	e8 39 85 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114c78:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114c7b:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114c7f:	75 36                	jne    f0114cb7 <test_allocate_chunk+0x4ad>
f0114c81:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114c84:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114c87:	89 c1                	mov    %eax,%ecx
f0114c89:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c8c:	c1 e0 06             	shl    $0x6,%eax
f0114c8f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114c92:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114c99:	99                   	cltd   
f0114c9a:	f7 ff                	idiv   %edi
f0114c9c:	89 c3                	mov    %eax,%ebx
f0114c9e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ca1:	c1 e0 06             	shl    $0x6,%eax
f0114ca4:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114ca7:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114cae:	99                   	cltd   
f0114caf:	f7 fe                	idiv   %esi
f0114cb1:	01 d8                	add    %ebx,%eax
f0114cb3:	39 c1                	cmp    %eax,%ecx
f0114cb5:	74 54                	je     f0114d0b <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114cb7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114cba:	c1 e0 06             	shl    $0x6,%eax
f0114cbd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114cc0:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114cc7:	99                   	cltd   
f0114cc8:	f7 fb                	idiv   %ebx
f0114cca:	89 c1                	mov    %eax,%ecx
f0114ccc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114ccf:	c1 e0 06             	shl    $0x6,%eax
f0114cd2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114cd5:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114cdc:	99                   	cltd   
f0114cdd:	f7 ff                	idiv   %edi
f0114cdf:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114ce2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114ce5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114ce8:	83 ec 08             	sub    $0x8,%esp
f0114ceb:	52                   	push   %edx
f0114cec:	50                   	push   %eax
f0114ced:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114cf0:	68 4c a8 13 f0       	push   $0xf013a84c
f0114cf5:	68 23 05 00 00       	push   $0x523
f0114cfa:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114cff:	e8 0f b7 fe ff       	call   f0100413 <_warn>
f0114d04:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d07:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d0b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d0f:	74 04                	je     f0114d15 <test_allocate_chunk+0x50b>
f0114d11:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114d15:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114d19:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114d20:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d23:	c1 e0 06             	shl    $0x6,%eax
f0114d26:	89 c2                	mov    %eax,%edx
f0114d28:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114d2b:	c1 e0 05             	shl    $0x5,%eax
f0114d2e:	83 ec 08             	sub    $0x8,%esp
f0114d31:	6a 03                	push   $0x3
f0114d33:	6a 00                	push   $0x0
f0114d35:	6a 00                	push   $0x0
f0114d37:	68 07 0e 00 00       	push   $0xe07
f0114d3c:	6a 01                	push   $0x1
f0114d3e:	6a 01                	push   $0x1
f0114d40:	52                   	push   %edx
f0114d41:	50                   	push   %eax
f0114d42:	6a 00                	push   $0x0
f0114d44:	ff 75 d0             	pushl  -0x30(%ebp)
f0114d47:	e8 94 1b 00 00       	call   f01168e0 <CCP>
f0114d4c:	83 c4 30             	add    $0x30,%esp
f0114d4f:	85 c0                	test   %eax,%eax
f0114d51:	75 25                	jne    f0114d78 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114d53:	83 ec 04             	sub    $0x4,%esp
f0114d56:	68 88 a7 13 f0       	push   $0xf013a788
f0114d5b:	68 2c 05 00 00       	push   $0x52c
f0114d60:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114d65:	e8 a9 b6 fe ff       	call   f0100413 <_warn>
f0114d6a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114d6d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114d71:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114d78:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114d7c:	74 04                	je     f0114d82 <test_allocate_chunk+0x578>
f0114d7e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114d82:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114d86:	83 ec 0c             	sub    $0xc,%esp
f0114d89:	68 a6 9b 13 f0       	push   $0xf0139ba6
f0114d8e:	e8 7b bf fe ff       	call   f0100d0e <cprintf>
f0114d93:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114d96:	83 ec 0c             	sub    $0xc,%esp
f0114d99:	68 ec a8 13 f0       	push   $0xf013a8ec
f0114d9e:	e8 6b bf fe ff       	call   f0100d0e <cprintf>
f0114da3:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114da6:	e8 06 84 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114dab:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0114dae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114db1:	c1 e0 06             	shl    $0x6,%eax
f0114db4:	68 06 0e 00 00       	push   $0xe06
f0114db9:	50                   	push   %eax
f0114dba:	68 00 00 00 80       	push   $0x80000000
f0114dbf:	ff 75 d0             	pushl  -0x30(%ebp)
f0114dc2:	e8 37 42 ff ff       	call   f0108ffe <allocate_chunk>
f0114dc7:	83 c4 10             	add    $0x10,%esp
f0114dca:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114dcd:	e8 df 83 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114dd2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0114dd5:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0114dd9:	75 36                	jne    f0114e11 <test_allocate_chunk+0x607>
f0114ddb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114dde:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114de1:	89 c1                	mov    %eax,%ecx
f0114de3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114de6:	c1 e0 06             	shl    $0x6,%eax
f0114de9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114dec:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114df3:	99                   	cltd   
f0114df4:	f7 fb                	idiv   %ebx
f0114df6:	89 c3                	mov    %eax,%ebx
f0114df8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114dfb:	c1 e0 06             	shl    $0x6,%eax
f0114dfe:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e01:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114e08:	99                   	cltd   
f0114e09:	f7 fe                	idiv   %esi
f0114e0b:	01 d8                	add    %ebx,%eax
f0114e0d:	39 c1                	cmp    %eax,%ecx
f0114e0f:	74 54                	je     f0114e65 <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0114e11:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e14:	c1 e0 06             	shl    $0x6,%eax
f0114e17:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114e1a:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114e21:	99                   	cltd   
f0114e22:	f7 ff                	idiv   %edi
f0114e24:	89 c1                	mov    %eax,%ecx
f0114e26:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e29:	c1 e0 06             	shl    $0x6,%eax
f0114e2c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114e2f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114e36:	99                   	cltd   
f0114e37:	f7 fb                	idiv   %ebx
f0114e39:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114e3c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e3f:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114e42:	83 ec 08             	sub    $0x8,%esp
f0114e45:	52                   	push   %edx
f0114e46:	50                   	push   %eax
f0114e47:	ff 75 9c             	pushl  -0x64(%ebp)
f0114e4a:	68 4c a8 13 f0       	push   $0xf013a84c
f0114e4f:	68 42 05 00 00       	push   $0x542
f0114e54:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114e59:	e8 b5 b5 fe ff       	call   f0100413 <_warn>
f0114e5e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e61:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114e65:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114e69:	74 04                	je     f0114e6f <test_allocate_chunk+0x665>
f0114e6b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114e6f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114e73:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114e7a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e7d:	c1 e0 06             	shl    $0x6,%eax
f0114e80:	83 ec 08             	sub    $0x8,%esp
f0114e83:	6a 03                	push   $0x3
f0114e85:	6a 00                	push   $0x0
f0114e87:	6a 00                	push   $0x0
f0114e89:	68 07 0e 00 00       	push   $0xe07
f0114e8e:	68 07 0e 00 00       	push   $0xe07
f0114e93:	6a 01                	push   $0x1
f0114e95:	50                   	push   %eax
f0114e96:	68 00 00 00 80       	push   $0x80000000
f0114e9b:	6a 00                	push   $0x0
f0114e9d:	ff 75 d0             	pushl  -0x30(%ebp)
f0114ea0:	e8 3b 1a 00 00       	call   f01168e0 <CCP>
f0114ea5:	83 c4 30             	add    $0x30,%esp
f0114ea8:	85 c0                	test   %eax,%eax
f0114eaa:	75 25                	jne    f0114ed1 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114eac:	83 ec 04             	sub    $0x4,%esp
f0114eaf:	68 88 a7 13 f0       	push   $0xf013a788
f0114eb4:	68 4b 05 00 00       	push   $0x54b
f0114eb9:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114ebe:	e8 50 b5 fe ff       	call   f0100413 <_warn>
f0114ec3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114ec6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114eca:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114ed1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ed5:	74 04                	je     f0114edb <test_allocate_chunk+0x6d1>
f0114ed7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114edb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114edf:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114ee3:	74 6f                	je     f0114f54 <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0114ee5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114ee8:	01 c0                	add    %eax,%eax
f0114eea:	05 00 00 00 80       	add    $0x80000000,%eax
f0114eef:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0114ef2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ef5:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0114ef8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114efb:	89 d0                	mov    %edx,%eax
f0114efd:	c1 e0 02             	shl    $0x2,%eax
f0114f00:	01 d0                	add    %edx,%eax
f0114f02:	01 c0                	add    %eax,%eax
f0114f04:	01 d0                	add    %edx,%eax
f0114f06:	01 c0                	add    %eax,%eax
f0114f08:	05 00 00 00 80       	add    $0x80000000,%eax
f0114f0d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114f10:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114f13:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114f16:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f19:	8a 00                	mov    (%eax),%al
f0114f1b:	3c 4b                	cmp    $0x4b,%al
f0114f1d:	75 09                	jne    f0114f28 <test_allocate_chunk+0x71e>
f0114f1f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114f22:	8a 00                	mov    (%eax),%al
f0114f24:	3c 4d                	cmp    $0x4d,%al
f0114f26:	74 1e                	je     f0114f46 <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114f28:	83 ec 04             	sub    $0x4,%esp
f0114f2b:	68 d4 a7 13 f0       	push   $0xf013a7d4
f0114f30:	68 59 05 00 00       	push   $0x559
f0114f35:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114f3a:	e8 d4 b4 fe ff       	call   f0100413 <_warn>
f0114f3f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114f42:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114f46:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f4a:	74 04                	je     f0114f50 <test_allocate_chunk+0x746>
f0114f4c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114f50:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0114f54:	83 ec 0c             	sub    $0xc,%esp
f0114f57:	68 78 a6 13 f0       	push   $0xf013a678
f0114f5c:	e8 ad bd fe ff       	call   f0100d0e <cprintf>
f0114f61:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0114f64:	83 ec 0c             	sub    $0xc,%esp
f0114f67:	68 28 a9 13 f0       	push   $0xf013a928
f0114f6c:	e8 9d bd fe ff       	call   f0100d0e <cprintf>
f0114f71:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114f74:	e8 38 82 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114f79:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0114f7c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114f7f:	89 d0                	mov    %edx,%eax
f0114f81:	01 c0                	add    %eax,%eax
f0114f83:	01 d0                	add    %edx,%eax
f0114f85:	01 c0                	add    %eax,%eax
f0114f87:	01 d0                	add    %edx,%eax
f0114f89:	68 04 0e 00 00       	push   $0xe04
f0114f8e:	50                   	push   %eax
f0114f8f:	68 00 fc 3f 40       	push   $0x403ffc00
f0114f94:	ff 75 d0             	pushl  -0x30(%ebp)
f0114f97:	e8 62 40 ff ff       	call   f0108ffe <allocate_chunk>
f0114f9c:	83 c4 10             	add    $0x10,%esp
f0114f9f:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114fa2:	e8 0a 82 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0114fa7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0114faa:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0114fae:	75 0b                	jne    f0114fbb <test_allocate_chunk+0x7b1>
f0114fb0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114fb3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114fb6:	83 f8 05             	cmp    $0x5,%eax
f0114fb9:	74 2a                	je     f0114fe5 <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0114fbb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114fbe:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114fc1:	83 ec 08             	sub    $0x8,%esp
f0114fc4:	6a 05                	push   $0x5
f0114fc6:	50                   	push   %eax
f0114fc7:	ff 75 98             	pushl  -0x68(%ebp)
f0114fca:	68 4c a8 13 f0       	push   $0xf013a84c
f0114fcf:	68 70 05 00 00       	push   $0x570
f0114fd4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0114fd9:	e8 35 b4 fe ff       	call   f0100413 <_warn>
f0114fde:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114fe1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114fe5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114fe9:	74 04                	je     f0114fef <test_allocate_chunk+0x7e5>
f0114feb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114fef:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0114ff3:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114ffa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0114ffd:	89 d0                	mov    %edx,%eax
f0114fff:	01 c0                	add    %eax,%eax
f0115001:	01 d0                	add    %edx,%eax
f0115003:	c1 e0 02             	shl    $0x2,%eax
f0115006:	83 ec 08             	sub    $0x8,%esp
f0115009:	6a 03                	push   $0x3
f011500b:	6a 00                	push   $0x0
f011500d:	6a 00                	push   $0x0
f011500f:	68 07 0e 00 00       	push   $0xe07
f0115014:	68 05 0e 00 00       	push   $0xe05
f0115019:	6a 01                	push   $0x1
f011501b:	50                   	push   %eax
f011501c:	68 00 f0 3f 40       	push   $0x403ff000
f0115021:	6a 00                	push   $0x0
f0115023:	ff 75 d0             	pushl  -0x30(%ebp)
f0115026:	e8 b5 18 00 00       	call   f01168e0 <CCP>
f011502b:	83 c4 30             	add    $0x30,%esp
f011502e:	85 c0                	test   %eax,%eax
f0115030:	75 25                	jne    f0115057 <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0115032:	83 ec 04             	sub    $0x4,%esp
f0115035:	68 88 a7 13 f0       	push   $0xf013a788
f011503a:	68 79 05 00 00       	push   $0x579
f011503f:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115044:	e8 ca b3 fe ff       	call   f0100413 <_warn>
f0115049:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011504c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0115050:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0115057:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011505b:	74 04                	je     f0115061 <test_allocate_chunk+0x857>
f011505d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115061:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0115065:	83 ec 0c             	sub    $0xc,%esp
f0115068:	68 5f a9 13 f0       	push   $0xf013a95f
f011506d:	e8 9c bc fe ff       	call   f0100d0e <cprintf>
f0115072:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0115075:	83 ec 08             	sub    $0x8,%esp
f0115078:	ff 75 e4             	pushl  -0x1c(%ebp)
f011507b:	68 70 a9 13 f0       	push   $0xf013a970
f0115080:	e8 89 bc fe ff       	call   f0100d0e <cprintf>
f0115085:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115088:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011508c:	75 10                	jne    f011509e <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f011508e:	83 ec 0c             	sub    $0xc,%esp
f0115091:	68 a4 a9 13 f0       	push   $0xf013a9a4
f0115096:	e8 73 bc fe ff       	call   f0100d0e <cprintf>
f011509b:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011509e:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f01150a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01150a6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01150a9:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01150ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01150b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01150b4:	5b                   	pop    %ebx
f01150b5:	5e                   	pop    %esi
f01150b6:	5f                   	pop    %edi
f01150b7:	5d                   	pop    %ebp
f01150b8:	c3                   	ret    

f01150b9 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01150b9:	55                   	push   %ebp
f01150ba:	89 e5                	mov    %esp,%ebp
f01150bc:	57                   	push   %edi
f01150bd:	56                   	push   %esi
f01150be:	53                   	push   %ebx
f01150bf:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01150c5:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01150c8:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f01150cd:	ba 0f 00 00 00       	mov    $0xf,%edx
f01150d2:	89 c7                	mov    %eax,%edi
f01150d4:	89 de                	mov    %ebx,%esi
f01150d6:	89 d1                	mov    %edx,%ecx
f01150d8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01150da:	8d 55 9d             	lea    -0x63(%ebp),%edx
f01150dd:	b9 23 00 00 00       	mov    $0x23,%ecx
f01150e2:	b0 00                	mov    $0x0,%al
f01150e4:	89 d7                	mov    %edx,%edi
f01150e6:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01150e8:	6a 00                	push   $0x0
f01150ea:	6a 0a                	push   $0xa
f01150ec:	6a 14                	push   $0x14
f01150ee:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01150f1:	50                   	push   %eax
f01150f2:	e8 80 43 ff ff       	call   f0109477 <env_create>
f01150f7:	83 c4 10             	add    $0x10,%esp
f01150fa:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01150fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115100:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115103:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115106:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115109:	8b 40 60             	mov    0x60(%eax),%eax
f011510c:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011510f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115112:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115115:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011511c:	75 70 20 
f011511f:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115126:	00 00 00 
f0115129:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011512c:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115131:	b8 00 00 00 00       	mov    $0x0,%eax
f0115136:	89 d7                	mov    %edx,%edi
f0115138:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011513a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011513d:	8b 40 4c             	mov    0x4c(%eax),%eax
f0115140:	83 ec 08             	sub    $0x8,%esp
f0115143:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115149:	52                   	push   %edx
f011514a:	50                   	push   %eax
f011514b:	e8 5b cd 01 00       	call   f0131eab <ltostr>
f0115150:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115153:	83 ec 04             	sub    $0x4,%esp
f0115156:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011515c:	50                   	push   %eax
f011515d:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115163:	50                   	push   %eax
f0115164:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f011516a:	50                   	push   %eax
f011516b:	e8 33 ce 01 00       	call   f0131fa3 <strcconcat>
f0115170:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115173:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f011517a:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115181:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0115188:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f011518f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0115193:	83 ec 0c             	sub    $0xc,%esp
f0115196:	ff 75 d8             	pushl  -0x28(%ebp)
f0115199:	e8 0e 17 00 00       	call   f01168ac <ClearUserSpace>
f011519e:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01151a1:	83 ec 0c             	sub    $0xc,%esp
f01151a4:	68 e4 a9 13 f0       	push   $0xf013a9e4
f01151a9:	e8 60 bb fe ff       	call   f0100d0e <cprintf>
f01151ae:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01151b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01151b4:	c1 e0 03             	shl    $0x3,%eax
f01151b7:	83 ec 04             	sub    $0x4,%esp
f01151ba:	50                   	push   %eax
f01151bb:	6a 00                	push   $0x0
f01151bd:	ff 75 d8             	pushl  -0x28(%ebp)
f01151c0:	e8 16 40 ff ff       	call   f01091db <calculate_required_frames>
f01151c5:	83 c4 10             	add    $0x10,%esp
f01151c8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01151cb:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01151cf:	74 23                	je     f01151f4 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01151d1:	83 ec 0c             	sub    $0xc,%esp
f01151d4:	6a 03                	push   $0x3
f01151d6:	ff 75 c8             	pushl  -0x38(%ebp)
f01151d9:	68 18 aa 13 f0       	push   $0xf013aa18
f01151de:	68 b2 05 00 00       	push   $0x5b2
f01151e3:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01151e8:	e8 26 b2 fe ff       	call   f0100413 <_warn>
f01151ed:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01151f0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01151f4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01151f8:	74 04                	je     f01151fe <test_calculate_required_frames+0x145>
f01151fa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01151fe:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0115202:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115205:	c1 e0 02             	shl    $0x2,%eax
f0115208:	83 ec 04             	sub    $0x4,%esp
f011520b:	50                   	push   %eax
f011520c:	6a 00                	push   $0x0
f011520e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115211:	e8 c5 3f ff ff       	call   f01091db <calculate_required_frames>
f0115216:	83 c4 10             	add    $0x10,%esp
f0115219:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f011521c:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0115223:	74 26                	je     f011524b <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0115225:	83 ec 0c             	sub    $0xc,%esp
f0115228:	68 01 04 00 00       	push   $0x401
f011522d:	ff 75 c8             	pushl  -0x38(%ebp)
f0115230:	68 18 aa 13 f0       	push   $0xf013aa18
f0115235:	68 bc 05 00 00       	push   $0x5bc
f011523a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011523f:	e8 cf b1 fe ff       	call   f0100413 <_warn>
f0115244:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115247:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011524b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011524f:	74 04                	je     f0115255 <test_calculate_required_frames+0x19c>
f0115251:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115255:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115259:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011525c:	c1 e0 0a             	shl    $0xa,%eax
f011525f:	83 ec 04             	sub    $0x4,%esp
f0115262:	50                   	push   %eax
f0115263:	6a 00                	push   $0x0
f0115265:	ff 75 d8             	pushl  -0x28(%ebp)
f0115268:	e8 6e 3f ff ff       	call   f01091db <calculate_required_frames>
f011526d:	83 c4 10             	add    $0x10,%esp
f0115270:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0115273:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115276:	c1 e0 0a             	shl    $0xa,%eax
f0115279:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011527c:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115283:	99                   	cltd   
f0115284:	f7 fb                	idiv   %ebx
f0115286:	89 c1                	mov    %eax,%ecx
f0115288:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011528b:	c1 e0 0a             	shl    $0xa,%eax
f011528e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115291:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115298:	99                   	cltd   
f0115299:	f7 fe                	idiv   %esi
f011529b:	01 c8                	add    %ecx,%eax
f011529d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01152a0:	74 4c                	je     f01152ee <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f01152a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152a5:	c1 e0 0a             	shl    $0xa,%eax
f01152a8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01152ab:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01152b2:	99                   	cltd   
f01152b3:	f7 fb                	idiv   %ebx
f01152b5:	89 c1                	mov    %eax,%ecx
f01152b7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01152ba:	c1 e0 0a             	shl    $0xa,%eax
f01152bd:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01152c0:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01152c7:	99                   	cltd   
f01152c8:	f7 fe                	idiv   %esi
f01152ca:	01 c8                	add    %ecx,%eax
f01152cc:	83 ec 0c             	sub    $0xc,%esp
f01152cf:	50                   	push   %eax
f01152d0:	ff 75 c8             	pushl  -0x38(%ebp)
f01152d3:	68 18 aa 13 f0       	push   $0xf013aa18
f01152d8:	68 c6 05 00 00       	push   $0x5c6
f01152dd:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01152e2:	e8 2c b1 fe ff       	call   f0100413 <_warn>
f01152e7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152ea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01152ee:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01152f2:	74 04                	je     f01152f8 <test_calculate_required_frames+0x23f>
f01152f4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152f8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01152fc:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01152ff:	89 d0                	mov    %edx,%eax
f0115301:	01 c0                	add    %eax,%eax
f0115303:	01 d0                	add    %edx,%eax
f0115305:	01 c0                	add    %eax,%eax
f0115307:	83 ec 04             	sub    $0x4,%esp
f011530a:	50                   	push   %eax
f011530b:	68 00 10 00 00       	push   $0x1000
f0115310:	ff 75 d8             	pushl  -0x28(%ebp)
f0115313:	e8 c3 3e ff ff       	call   f01091db <calculate_required_frames>
f0115318:	83 c4 10             	add    $0x10,%esp
f011531b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011531e:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115322:	74 23                	je     f0115347 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0115324:	83 ec 0c             	sub    $0xc,%esp
f0115327:	6a 03                	push   $0x3
f0115329:	ff 75 c8             	pushl  -0x38(%ebp)
f011532c:	68 18 aa 13 f0       	push   $0xf013aa18
f0115331:	68 d2 05 00 00       	push   $0x5d2
f0115336:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011533b:	e8 d3 b0 fe ff       	call   f0100413 <_warn>
f0115340:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115343:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115347:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011534b:	74 04                	je     f0115351 <test_calculate_required_frames+0x298>
f011534d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115351:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115355:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115358:	89 c2                	mov    %eax,%edx
f011535a:	01 d2                	add    %edx,%edx
f011535c:	01 d0                	add    %edx,%eax
f011535e:	83 ec 04             	sub    $0x4,%esp
f0115361:	50                   	push   %eax
f0115362:	68 00 18 00 00       	push   $0x1800
f0115367:	ff 75 d8             	pushl  -0x28(%ebp)
f011536a:	e8 6c 3e ff ff       	call   f01091db <calculate_required_frames>
f011536f:	83 c4 10             	add    $0x10,%esp
f0115372:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115375:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115379:	74 23                	je     f011539e <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011537b:	83 ec 0c             	sub    $0xc,%esp
f011537e:	6a 03                	push   $0x3
f0115380:	ff 75 c8             	pushl  -0x38(%ebp)
f0115383:	68 18 aa 13 f0       	push   $0xf013aa18
f0115388:	68 dc 05 00 00       	push   $0x5dc
f011538d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115392:	e8 7c b0 fe ff       	call   f0100413 <_warn>
f0115397:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011539a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011539e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01153a2:	74 04                	je     f01153a8 <test_calculate_required_frames+0x2ef>
f01153a4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153a8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01153ac:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01153af:	89 d0                	mov    %edx,%eax
f01153b1:	c1 e0 02             	shl    $0x2,%eax
f01153b4:	01 d0                	add    %edx,%eax
f01153b6:	01 c0                	add    %eax,%eax
f01153b8:	83 ec 04             	sub    $0x4,%esp
f01153bb:	50                   	push   %eax
f01153bc:	68 00 00 40 00       	push   $0x400000
f01153c1:	ff 75 d8             	pushl  -0x28(%ebp)
f01153c4:	e8 12 3e ff ff       	call   f01091db <calculate_required_frames>
f01153c9:	83 c4 10             	add    $0x10,%esp
f01153cc:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f01153cf:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01153d6:	74 26                	je     f01153fe <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01153d8:	83 ec 0c             	sub    $0xc,%esp
f01153db:	68 03 0a 00 00       	push   $0xa03
f01153e0:	ff 75 c8             	pushl  -0x38(%ebp)
f01153e3:	68 18 aa 13 f0       	push   $0xf013aa18
f01153e8:	68 e6 05 00 00       	push   $0x5e6
f01153ed:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01153f2:	e8 1c b0 fe ff       	call   f0100413 <_warn>
f01153f7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153fa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01153fe:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115402:	74 04                	je     f0115408 <test_calculate_required_frames+0x34f>
f0115404:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115408:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f011540c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011540f:	01 c0                	add    %eax,%eax
f0115411:	83 ec 04             	sub    $0x4,%esp
f0115414:	50                   	push   %eax
f0115415:	68 00 00 70 00       	push   $0x700000
f011541a:	ff 75 d8             	pushl  -0x28(%ebp)
f011541d:	e8 b9 3d ff ff       	call   f01091db <calculate_required_frames>
f0115422:	83 c4 10             	add    $0x10,%esp
f0115425:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0115428:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f011542f:	74 26                	je     f0115457 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0115431:	83 ec 0c             	sub    $0xc,%esp
f0115434:	68 02 02 00 00       	push   $0x202
f0115439:	ff 75 c8             	pushl  -0x38(%ebp)
f011543c:	68 18 aa 13 f0       	push   $0xf013aa18
f0115441:	68 f2 05 00 00       	push   $0x5f2
f0115446:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011544b:	e8 c3 af fe ff       	call   f0100413 <_warn>
f0115450:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115453:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115457:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011545b:	74 04                	je     f0115461 <test_calculate_required_frames+0x3a8>
f011545d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115461:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115465:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115468:	83 ec 04             	sub    $0x4,%esp
f011546b:	50                   	push   %eax
f011546c:	68 ff ff 3f 00       	push   $0x3fffff
f0115471:	ff 75 d8             	pushl  -0x28(%ebp)
f0115474:	e8 62 3d ff ff       	call   f01091db <calculate_required_frames>
f0115479:	83 c4 10             	add    $0x10,%esp
f011547c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f011547f:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0115483:	74 23                	je     f01154a8 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0115485:	83 ec 0c             	sub    $0xc,%esp
f0115488:	6a 04                	push   $0x4
f011548a:	ff 75 c8             	pushl  -0x38(%ebp)
f011548d:	68 18 aa 13 f0       	push   $0xf013aa18
f0115492:	68 fc 05 00 00       	push   $0x5fc
f0115497:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011549c:	e8 72 af fe ff       	call   f0100413 <_warn>
f01154a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01154a8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154ac:	74 04                	je     f01154b2 <test_calculate_required_frames+0x3f9>
f01154ae:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01154b2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01154b6:	83 ec 0c             	sub    $0xc,%esp
f01154b9:	68 69 a5 13 f0       	push   $0xf013a569
f01154be:	e8 4b b8 fe ff       	call   f0100d0e <cprintf>
f01154c3:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01154c6:	83 ec 0c             	sub    $0xc,%esp
f01154c9:	68 70 aa 13 f0       	push   $0xf013aa70
f01154ce:	e8 3b b8 fe ff       	call   f0100d0e <cprintf>
f01154d3:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01154d6:	83 ec 04             	sub    $0x4,%esp
f01154d9:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01154df:	50                   	push   %eax
f01154e0:	68 22 99 13 f0       	push   $0xf0139922
f01154e5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01154eb:	50                   	push   %eax
f01154ec:	e8 b2 ca 01 00       	call   f0131fa3 <strcconcat>
f01154f1:	83 c4 10             	add    $0x10,%esp
f01154f4:	83 ec 0c             	sub    $0xc,%esp
f01154f7:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01154fd:	50                   	push   %eax
f01154fe:	e8 6d b8 fe ff       	call   f0100d70 <execute_command>
f0115503:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0115506:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115509:	c1 e0 03             	shl    $0x3,%eax
f011550c:	83 ec 04             	sub    $0x4,%esp
f011550f:	50                   	push   %eax
f0115510:	6a 00                	push   $0x0
f0115512:	ff 75 d8             	pushl  -0x28(%ebp)
f0115515:	e8 c1 3c ff ff       	call   f01091db <calculate_required_frames>
f011551a:	83 c4 10             	add    $0x10,%esp
f011551d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115520:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115527:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011552a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011552d:	74 24                	je     f0115553 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011552f:	83 ec 0c             	sub    $0xc,%esp
f0115532:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115535:	ff 75 c8             	pushl  -0x38(%ebp)
f0115538:	68 18 aa 13 f0       	push   $0xf013aa18
f011553d:	68 10 06 00 00       	push   $0x610
f0115542:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115547:	e8 c7 ae fe ff       	call   f0100413 <_warn>
f011554c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011554f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115553:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115557:	74 04                	je     f011555d <test_calculate_required_frames+0x4a4>
f0115559:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011555d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0115561:	83 ec 04             	sub    $0x4,%esp
f0115564:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011556a:	50                   	push   %eax
f011556b:	68 2f 99 13 f0       	push   $0xf013992f
f0115570:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115576:	50                   	push   %eax
f0115577:	e8 27 ca 01 00       	call   f0131fa3 <strcconcat>
f011557c:	83 c4 10             	add    $0x10,%esp
f011557f:	83 ec 0c             	sub    $0xc,%esp
f0115582:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115588:	50                   	push   %eax
f0115589:	e8 e2 b7 fe ff       	call   f0100d70 <execute_command>
f011558e:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0115591:	83 ec 04             	sub    $0x4,%esp
f0115594:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011559a:	50                   	push   %eax
f011559b:	68 a4 aa 13 f0       	push   $0xf013aaa4
f01155a0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01155a6:	50                   	push   %eax
f01155a7:	e8 f7 c9 01 00       	call   f0131fa3 <strcconcat>
f01155ac:	83 c4 10             	add    $0x10,%esp
f01155af:	83 ec 0c             	sub    $0xc,%esp
f01155b2:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01155b8:	50                   	push   %eax
f01155b9:	e8 b2 b7 fe ff       	call   f0100d70 <execute_command>
f01155be:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f01155c1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01155c4:	c1 e0 03             	shl    $0x3,%eax
f01155c7:	83 ec 04             	sub    $0x4,%esp
f01155ca:	50                   	push   %eax
f01155cb:	6a 00                	push   $0x0
f01155cd:	ff 75 d8             	pushl  -0x28(%ebp)
f01155d0:	e8 06 3c ff ff       	call   f01091db <calculate_required_frames>
f01155d5:	83 c4 10             	add    $0x10,%esp
f01155d8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01155db:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01155e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01155e5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01155e8:	74 24                	je     f011560e <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01155ea:	83 ec 0c             	sub    $0xc,%esp
f01155ed:	ff 75 c4             	pushl  -0x3c(%ebp)
f01155f0:	ff 75 c8             	pushl  -0x38(%ebp)
f01155f3:	68 18 aa 13 f0       	push   $0xf013aa18
f01155f8:	68 1e 06 00 00       	push   $0x61e
f01155fd:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115602:	e8 0c ae fe ff       	call   f0100413 <_warn>
f0115607:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011560a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011560e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115612:	74 04                	je     f0115618 <test_calculate_required_frames+0x55f>
f0115614:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115618:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f011561c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011561f:	c1 e0 0a             	shl    $0xa,%eax
f0115622:	83 ec 04             	sub    $0x4,%esp
f0115625:	50                   	push   %eax
f0115626:	6a 00                	push   $0x0
f0115628:	ff 75 d8             	pushl  -0x28(%ebp)
f011562b:	e8 ab 3b ff ff       	call   f01091db <calculate_required_frames>
f0115630:	83 c4 10             	add    $0x10,%esp
f0115633:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0115636:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115639:	c1 e0 0a             	shl    $0xa,%eax
f011563c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011563f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115646:	99                   	cltd   
f0115647:	f7 fb                	idiv   %ebx
f0115649:	89 c1                	mov    %eax,%ecx
f011564b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011564e:	c1 e0 0a             	shl    $0xa,%eax
f0115651:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115654:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011565b:	99                   	cltd   
f011565c:	f7 fe                	idiv   %esi
f011565e:	01 c8                	add    %ecx,%eax
f0115660:	83 e8 05             	sub    $0x5,%eax
f0115663:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0115666:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115669:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011566c:	74 24                	je     f0115692 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011566e:	83 ec 0c             	sub    $0xc,%esp
f0115671:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115674:	ff 75 c8             	pushl  -0x38(%ebp)
f0115677:	68 18 aa 13 f0       	push   $0xf013aa18
f011567c:	68 29 06 00 00       	push   $0x629
f0115681:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115686:	e8 88 ad fe ff       	call   f0100413 <_warn>
f011568b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011568e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115692:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115696:	74 04                	je     f011569c <test_calculate_required_frames+0x5e3>
f0115698:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011569c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01156a0:	83 ec 04             	sub    $0x4,%esp
f01156a3:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01156a9:	50                   	push   %eax
f01156aa:	68 b0 aa 13 f0       	push   $0xf013aab0
f01156af:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01156b5:	50                   	push   %eax
f01156b6:	e8 e8 c8 01 00       	call   f0131fa3 <strcconcat>
f01156bb:	83 c4 10             	add    $0x10,%esp
f01156be:	83 ec 0c             	sub    $0xc,%esp
f01156c1:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01156c7:	50                   	push   %eax
f01156c8:	e8 a3 b6 fe ff       	call   f0100d70 <execute_command>
f01156cd:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01156d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156d3:	89 c2                	mov    %eax,%edx
f01156d5:	01 d2                	add    %edx,%edx
f01156d7:	01 d0                	add    %edx,%eax
f01156d9:	83 ec 04             	sub    $0x4,%esp
f01156dc:	50                   	push   %eax
f01156dd:	68 00 18 00 00       	push   $0x1800
f01156e2:	ff 75 d8             	pushl  -0x28(%ebp)
f01156e5:	e8 f1 3a ff ff       	call   f01091db <calculate_required_frames>
f01156ea:	83 c4 10             	add    $0x10,%esp
f01156ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01156f0:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01156f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01156fa:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01156fd:	74 24                	je     f0115723 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01156ff:	83 ec 0c             	sub    $0xc,%esp
f0115702:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115705:	ff 75 c8             	pushl  -0x38(%ebp)
f0115708:	68 18 aa 13 f0       	push   $0xf013aa18
f011570d:	68 38 06 00 00       	push   $0x638
f0115712:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115717:	e8 f7 ac fe ff       	call   f0100413 <_warn>
f011571c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011571f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115723:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115727:	74 04                	je     f011572d <test_calculate_required_frames+0x674>
f0115729:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011572d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0115731:	83 ec 04             	sub    $0x4,%esp
f0115734:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f011573a:	50                   	push   %eax
f011573b:	68 88 9b 13 f0       	push   $0xf0139b88
f0115740:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115746:	50                   	push   %eax
f0115747:	e8 57 c8 01 00       	call   f0131fa3 <strcconcat>
f011574c:	83 c4 10             	add    $0x10,%esp
f011574f:	83 ec 0c             	sub    $0xc,%esp
f0115752:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115758:	50                   	push   %eax
f0115759:	e8 12 b6 fe ff       	call   f0100d70 <execute_command>
f011575e:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115761:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115764:	89 d0                	mov    %edx,%eax
f0115766:	c1 e0 02             	shl    $0x2,%eax
f0115769:	01 d0                	add    %edx,%eax
f011576b:	01 c0                	add    %eax,%eax
f011576d:	83 ec 04             	sub    $0x4,%esp
f0115770:	50                   	push   %eax
f0115771:	68 00 00 40 00       	push   $0x400000
f0115776:	ff 75 d8             	pushl  -0x28(%ebp)
f0115779:	e8 5d 3a ff ff       	call   f01091db <calculate_required_frames>
f011577e:	83 c4 10             	add    $0x10,%esp
f0115781:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0115784:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f011578b:	74 26                	je     f01157b3 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011578d:	83 ec 0c             	sub    $0xc,%esp
f0115790:	68 03 0a 00 00       	push   $0xa03
f0115795:	ff 75 c8             	pushl  -0x38(%ebp)
f0115798:	68 18 aa 13 f0       	push   $0xf013aa18
f011579d:	68 44 06 00 00       	push   $0x644
f01157a2:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01157a7:	e8 67 ac fe ff       	call   f0100413 <_warn>
f01157ac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01157b3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157b7:	74 04                	je     f01157bd <test_calculate_required_frames+0x704>
f01157b9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157bd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01157c1:	83 ec 04             	sub    $0x4,%esp
f01157c4:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157ca:	50                   	push   %eax
f01157cb:	68 92 9b 13 f0       	push   $0xf0139b92
f01157d0:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157d6:	50                   	push   %eax
f01157d7:	e8 c7 c7 01 00       	call   f0131fa3 <strcconcat>
f01157dc:	83 c4 10             	add    $0x10,%esp
f01157df:	83 ec 0c             	sub    $0xc,%esp
f01157e2:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157e8:	50                   	push   %eax
f01157e9:	e8 82 b5 fe ff       	call   f0100d70 <execute_command>
f01157ee:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01157f1:	83 ec 04             	sub    $0x4,%esp
f01157f4:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01157fa:	50                   	push   %eax
f01157fb:	68 b8 aa 13 f0       	push   $0xf013aab8
f0115800:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115806:	50                   	push   %eax
f0115807:	e8 97 c7 01 00       	call   f0131fa3 <strcconcat>
f011580c:	83 c4 10             	add    $0x10,%esp
f011580f:	83 ec 0c             	sub    $0xc,%esp
f0115812:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115818:	50                   	push   %eax
f0115819:	e8 52 b5 fe ff       	call   f0100d70 <execute_command>
f011581e:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115821:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115824:	01 c0                	add    %eax,%eax
f0115826:	83 ec 04             	sub    $0x4,%esp
f0115829:	50                   	push   %eax
f011582a:	68 00 00 70 00       	push   $0x700000
f011582f:	ff 75 d8             	pushl  -0x28(%ebp)
f0115832:	e8 a4 39 ff ff       	call   f01091db <calculate_required_frames>
f0115837:	83 c4 10             	add    $0x10,%esp
f011583a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011583d:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115844:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115847:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011584a:	74 24                	je     f0115870 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011584c:	83 ec 0c             	sub    $0xc,%esp
f011584f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115852:	ff 75 c8             	pushl  -0x38(%ebp)
f0115855:	68 18 aa 13 f0       	push   $0xf013aa18
f011585a:	68 54 06 00 00       	push   $0x654
f011585f:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115864:	e8 aa ab fe ff       	call   f0100413 <_warn>
f0115869:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011586c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115870:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115874:	74 04                	je     f011587a <test_calculate_required_frames+0x7c1>
f0115876:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011587a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011587e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115881:	83 ec 04             	sub    $0x4,%esp
f0115884:	50                   	push   %eax
f0115885:	68 ff ff 3f 00       	push   $0x3fffff
f011588a:	ff 75 d8             	pushl  -0x28(%ebp)
f011588d:	e8 49 39 ff ff       	call   f01091db <calculate_required_frames>
f0115892:	83 c4 10             	add    $0x10,%esp
f0115895:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115898:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011589f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01158a2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158a5:	74 24                	je     f01158cb <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01158a7:	83 ec 0c             	sub    $0xc,%esp
f01158aa:	ff 75 c4             	pushl  -0x3c(%ebp)
f01158ad:	ff 75 c8             	pushl  -0x38(%ebp)
f01158b0:	68 18 aa 13 f0       	push   $0xf013aa18
f01158b5:	68 5f 06 00 00       	push   $0x65f
f01158ba:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01158bf:	e8 4f ab fe ff       	call   f0100413 <_warn>
f01158c4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158c7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01158cb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158cf:	74 04                	je     f01158d5 <test_calculate_required_frames+0x81c>
f01158d1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01158d5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01158d9:	83 ec 0c             	sub    $0xc,%esp
f01158dc:	68 43 9b 13 f0       	push   $0xf0139b43
f01158e1:	e8 28 b4 fe ff       	call   f0100d0e <cprintf>
f01158e6:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01158e9:	83 ec 08             	sub    $0x8,%esp
f01158ec:	ff 75 e4             	pushl  -0x1c(%ebp)
f01158ef:	68 c4 aa 13 f0       	push   $0xf013aac4
f01158f4:	e8 15 b4 fe ff       	call   f0100d0e <cprintf>
f01158f9:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01158fc:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115900:	75 10                	jne    f0115912 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115902:	83 ec 0c             	sub    $0xc,%esp
f0115905:	68 04 ab 13 f0       	push   $0xf013ab04
f011590a:	e8 ff b3 fe ff       	call   f0100d0e <cprintf>
f011590f:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115912:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f0115917:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011591a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011591d:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115920:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115925:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115928:	5b                   	pop    %ebx
f0115929:	5e                   	pop    %esi
f011592a:	5f                   	pop    %edi
f011592b:	5d                   	pop    %ebp
f011592c:	c3                   	ret    

f011592d <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f011592d:	55                   	push   %ebp
f011592e:	89 e5                	mov    %esp,%ebp
f0115930:	57                   	push   %edi
f0115931:	56                   	push   %esi
f0115932:	53                   	push   %ebx
f0115933:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115939:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011593c:	bb b8 98 13 f0       	mov    $0xf01398b8,%ebx
f0115941:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115946:	89 c7                	mov    %eax,%edi
f0115948:	89 de                	mov    %ebx,%esi
f011594a:	89 d1                	mov    %edx,%ecx
f011594c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011594e:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115951:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115956:	b0 00                	mov    $0x0,%al
f0115958:	89 d7                	mov    %edx,%edi
f011595a:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011595c:	6a 00                	push   $0x0
f011595e:	6a 0a                	push   $0xa
f0115960:	6a 14                	push   $0x14
f0115962:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115965:	50                   	push   %eax
f0115966:	e8 0c 3b ff ff       	call   f0109477 <env_create>
f011596b:	83 c4 10             	add    $0x10,%esp
f011596e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115971:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115974:	8b 40 5c             	mov    0x5c(%eax),%eax
f0115977:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011597a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011597d:	8b 40 60             	mov    0x60(%eax),%eax
f0115980:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115983:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115986:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115989:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115990:	75 70 20 
f0115993:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011599a:	00 00 00 
f011599d:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01159a0:	b9 03 00 00 00       	mov    $0x3,%ecx
f01159a5:	b8 00 00 00 00       	mov    $0x0,%eax
f01159aa:	89 d7                	mov    %edx,%edi
f01159ac:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01159ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01159b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01159b4:	83 ec 08             	sub    $0x8,%esp
f01159b7:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01159bd:	52                   	push   %edx
f01159be:	50                   	push   %eax
f01159bf:	e8 e7 c4 01 00       	call   f0131eab <ltostr>
f01159c4:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01159c7:	83 ec 04             	sub    $0x4,%esp
f01159ca:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01159d0:	50                   	push   %eax
f01159d1:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01159d7:	50                   	push   %eax
f01159d8:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01159de:	50                   	push   %eax
f01159df:	e8 bf c5 01 00       	call   f0131fa3 <strcconcat>
f01159e4:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01159e7:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01159ee:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01159f5:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01159fc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115a00:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115a07:	00 00 00 
	uint32 num_tables = 0;
f0115a0a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115a11:	00 00 00 
	ClearUserSpace(proc_directory);
f0115a14:	83 ec 0c             	sub    $0xc,%esp
f0115a17:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a1a:	e8 8d 0e 00 00       	call   f01168ac <ClearUserSpace>
f0115a1f:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115a22:	83 ec 0c             	sub    $0xc,%esp
f0115a25:	68 e4 a9 13 f0       	push   $0xf013a9e4
f0115a2a:	e8 df b2 fe ff       	call   f0100d0e <cprintf>
f0115a2f:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115a32:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a35:	c1 e0 03             	shl    $0x3,%eax
f0115a38:	89 c2                	mov    %eax,%edx
f0115a3a:	83 ec 0c             	sub    $0xc,%esp
f0115a3d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115a43:	50                   	push   %eax
f0115a44:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115a4a:	50                   	push   %eax
f0115a4b:	52                   	push   %edx
f0115a4c:	6a 00                	push   $0x0
f0115a4e:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a51:	e8 00 37 ff ff       	call   f0109156 <calculate_allocated_space>
f0115a56:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115a59:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a5f:	85 c0                	test   %eax,%eax
f0115a61:	74 27                	je     f0115a8a <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115a63:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115a69:	83 ec 0c             	sub    $0xc,%esp
f0115a6c:	6a 00                	push   $0x0
f0115a6e:	50                   	push   %eax
f0115a6f:	68 50 ab 13 f0       	push   $0xf013ab50
f0115a74:	68 94 06 00 00       	push   $0x694
f0115a79:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115a7e:	e8 90 a9 fe ff       	call   f0100413 <_warn>
f0115a83:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a86:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115a8a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a90:	85 c0                	test   %eax,%eax
f0115a92:	74 27                	je     f0115abb <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115a94:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115a9a:	83 ec 0c             	sub    $0xc,%esp
f0115a9d:	6a 00                	push   $0x0
f0115a9f:	50                   	push   %eax
f0115aa0:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115aa5:	68 99 06 00 00       	push   $0x699
f0115aaa:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115aaf:	e8 5f a9 fe ff       	call   f0100413 <_warn>
f0115ab4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ab7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115abb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115abf:	74 04                	je     f0115ac5 <test_calculate_allocated_space+0x198>
f0115ac1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ac5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115ac9:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115ad0:	00 00 00 
		num_pages = 0;
f0115ad3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ada:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115add:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115ae0:	c1 e0 02             	shl    $0x2,%eax
f0115ae3:	89 c2                	mov    %eax,%edx
f0115ae5:	83 ec 0c             	sub    $0xc,%esp
f0115ae8:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115aee:	50                   	push   %eax
f0115aef:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115af5:	50                   	push   %eax
f0115af6:	52                   	push   %edx
f0115af7:	6a 00                	push   $0x0
f0115af9:	ff 75 d8             	pushl  -0x28(%ebp)
f0115afc:	e8 55 36 ff ff       	call   f0109156 <calculate_allocated_space>
f0115b01:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115b04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b0a:	85 c0                	test   %eax,%eax
f0115b0c:	74 27                	je     f0115b35 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115b0e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115b14:	83 ec 0c             	sub    $0xc,%esp
f0115b17:	6a 00                	push   $0x0
f0115b19:	50                   	push   %eax
f0115b1a:	68 50 ab 13 f0       	push   $0xf013ab50
f0115b1f:	68 a5 06 00 00       	push   $0x6a5
f0115b24:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115b29:	e8 e5 a8 fe ff       	call   f0100413 <_warn>
f0115b2e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b31:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115b35:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b3b:	85 c0                	test   %eax,%eax
f0115b3d:	74 27                	je     f0115b66 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115b3f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115b45:	83 ec 0c             	sub    $0xc,%esp
f0115b48:	6a 00                	push   $0x0
f0115b4a:	50                   	push   %eax
f0115b4b:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115b50:	68 aa 06 00 00       	push   $0x6aa
f0115b55:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115b5a:	e8 b4 a8 fe ff       	call   f0100413 <_warn>
f0115b5f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b62:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b66:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b6a:	74 04                	je     f0115b70 <test_calculate_allocated_space+0x243>
f0115b6c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b70:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115b74:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115b7b:	00 00 00 
		num_pages = 0;
f0115b7e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115b85:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115b88:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115b8b:	c1 e0 0a             	shl    $0xa,%eax
f0115b8e:	89 c2                	mov    %eax,%edx
f0115b90:	83 ec 0c             	sub    $0xc,%esp
f0115b93:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115b99:	50                   	push   %eax
f0115b9a:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ba0:	50                   	push   %eax
f0115ba1:	52                   	push   %edx
f0115ba2:	6a 00                	push   $0x0
f0115ba4:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ba7:	e8 aa 35 ff ff       	call   f0109156 <calculate_allocated_space>
f0115bac:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115baf:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bb5:	85 c0                	test   %eax,%eax
f0115bb7:	74 27                	je     f0115be0 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115bb9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115bbf:	83 ec 0c             	sub    $0xc,%esp
f0115bc2:	6a 00                	push   $0x0
f0115bc4:	50                   	push   %eax
f0115bc5:	68 50 ab 13 f0       	push   $0xf013ab50
f0115bca:	68 b6 06 00 00       	push   $0x6b6
f0115bcf:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115bd4:	e8 3a a8 fe ff       	call   f0100413 <_warn>
f0115bd9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115bdc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115be0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115be6:	85 c0                	test   %eax,%eax
f0115be8:	74 27                	je     f0115c11 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115bea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115bf0:	83 ec 0c             	sub    $0xc,%esp
f0115bf3:	6a 00                	push   $0x0
f0115bf5:	50                   	push   %eax
f0115bf6:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115bfb:	68 bb 06 00 00       	push   $0x6bb
f0115c00:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115c05:	e8 09 a8 fe ff       	call   f0100413 <_warn>
f0115c0a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c0d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c11:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c15:	74 04                	je     f0115c1b <test_calculate_allocated_space+0x2ee>
f0115c17:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c1b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115c1f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c26:	00 00 00 
		num_pages = 0;
f0115c29:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c30:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115c33:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115c36:	89 d0                	mov    %edx,%eax
f0115c38:	01 c0                	add    %eax,%eax
f0115c3a:	01 d0                	add    %edx,%eax
f0115c3c:	01 c0                	add    %eax,%eax
f0115c3e:	05 00 10 00 00       	add    $0x1000,%eax
f0115c43:	89 c2                	mov    %eax,%edx
f0115c45:	83 ec 0c             	sub    $0xc,%esp
f0115c48:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c4e:	50                   	push   %eax
f0115c4f:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115c55:	50                   	push   %eax
f0115c56:	52                   	push   %edx
f0115c57:	68 00 10 00 00       	push   $0x1000
f0115c5c:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c5f:	e8 f2 34 ff ff       	call   f0109156 <calculate_allocated_space>
f0115c64:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115c67:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c6d:	85 c0                	test   %eax,%eax
f0115c6f:	74 27                	je     f0115c98 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115c71:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115c77:	83 ec 0c             	sub    $0xc,%esp
f0115c7a:	6a 00                	push   $0x0
f0115c7c:	50                   	push   %eax
f0115c7d:	68 50 ab 13 f0       	push   $0xf013ab50
f0115c82:	68 c8 06 00 00       	push   $0x6c8
f0115c87:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115c8c:	e8 82 a7 fe ff       	call   f0100413 <_warn>
f0115c91:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c94:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115c98:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115c9e:	85 c0                	test   %eax,%eax
f0115ca0:	74 27                	je     f0115cc9 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ca2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ca8:	83 ec 0c             	sub    $0xc,%esp
f0115cab:	6a 00                	push   $0x0
f0115cad:	50                   	push   %eax
f0115cae:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115cb3:	68 cd 06 00 00       	push   $0x6cd
f0115cb8:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115cbd:	e8 51 a7 fe ff       	call   f0100413 <_warn>
f0115cc2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cc5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115cc9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ccd:	74 04                	je     f0115cd3 <test_calculate_allocated_space+0x3a6>
f0115ccf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115cd3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115cd7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115cde:	00 00 00 
		num_pages = 0;
f0115ce1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ce8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115ceb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115cee:	89 c2                	mov    %eax,%edx
f0115cf0:	01 d2                	add    %edx,%edx
f0115cf2:	01 d0                	add    %edx,%eax
f0115cf4:	05 00 18 00 00       	add    $0x1800,%eax
f0115cf9:	89 c2                	mov    %eax,%edx
f0115cfb:	83 ec 0c             	sub    $0xc,%esp
f0115cfe:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d04:	50                   	push   %eax
f0115d05:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d0b:	50                   	push   %eax
f0115d0c:	52                   	push   %edx
f0115d0d:	68 00 18 00 00       	push   $0x1800
f0115d12:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d15:	e8 3c 34 ff ff       	call   f0109156 <calculate_allocated_space>
f0115d1a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d1d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d23:	85 c0                	test   %eax,%eax
f0115d25:	74 27                	je     f0115d4e <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d27:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d2d:	83 ec 0c             	sub    $0xc,%esp
f0115d30:	6a 00                	push   $0x0
f0115d32:	50                   	push   %eax
f0115d33:	68 50 ab 13 f0       	push   $0xf013ab50
f0115d38:	68 d9 06 00 00       	push   $0x6d9
f0115d3d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115d42:	e8 cc a6 fe ff       	call   f0100413 <_warn>
f0115d47:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d4a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d4e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d54:	85 c0                	test   %eax,%eax
f0115d56:	74 27                	je     f0115d7f <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d58:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d5e:	83 ec 0c             	sub    $0xc,%esp
f0115d61:	6a 00                	push   $0x0
f0115d63:	50                   	push   %eax
f0115d64:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115d69:	68 de 06 00 00       	push   $0x6de
f0115d6e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115d73:	e8 9b a6 fe ff       	call   f0100413 <_warn>
f0115d78:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d7b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d7f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d83:	74 04                	je     f0115d89 <test_calculate_allocated_space+0x45c>
f0115d85:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d89:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115d8d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d94:	00 00 00 
		num_pages = 0;
f0115d97:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d9e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115da1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115da4:	89 d0                	mov    %edx,%eax
f0115da6:	c1 e0 02             	shl    $0x2,%eax
f0115da9:	01 d0                	add    %edx,%eax
f0115dab:	01 c0                	add    %eax,%eax
f0115dad:	05 00 00 40 00       	add    $0x400000,%eax
f0115db2:	89 c2                	mov    %eax,%edx
f0115db4:	83 ec 0c             	sub    $0xc,%esp
f0115db7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115dbd:	50                   	push   %eax
f0115dbe:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115dc4:	50                   	push   %eax
f0115dc5:	52                   	push   %edx
f0115dc6:	68 00 00 40 00       	push   $0x400000
f0115dcb:	ff 75 d8             	pushl  -0x28(%ebp)
f0115dce:	e8 83 33 ff ff       	call   f0109156 <calculate_allocated_space>
f0115dd3:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115dd6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ddc:	85 c0                	test   %eax,%eax
f0115dde:	74 27                	je     f0115e07 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115de0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115de6:	83 ec 0c             	sub    $0xc,%esp
f0115de9:	6a 00                	push   $0x0
f0115deb:	50                   	push   %eax
f0115dec:	68 50 ab 13 f0       	push   $0xf013ab50
f0115df1:	68 ea 06 00 00       	push   $0x6ea
f0115df6:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115dfb:	e8 13 a6 fe ff       	call   f0100413 <_warn>
f0115e00:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e03:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e07:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e0d:	85 c0                	test   %eax,%eax
f0115e0f:	74 27                	je     f0115e38 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e11:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e17:	83 ec 0c             	sub    $0xc,%esp
f0115e1a:	6a 00                	push   $0x0
f0115e1c:	50                   	push   %eax
f0115e1d:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115e22:	68 ef 06 00 00       	push   $0x6ef
f0115e27:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115e2c:	e8 e2 a5 fe ff       	call   f0100413 <_warn>
f0115e31:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e34:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e38:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e3c:	74 04                	je     f0115e42 <test_calculate_allocated_space+0x515>
f0115e3e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e42:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0115e46:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e4d:	00 00 00 
		num_pages = 0;
f0115e50:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e57:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0115e5a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115e5d:	05 00 00 38 00       	add    $0x380000,%eax
f0115e62:	01 c0                	add    %eax,%eax
f0115e64:	89 c2                	mov    %eax,%edx
f0115e66:	83 ec 0c             	sub    $0xc,%esp
f0115e69:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115e6f:	50                   	push   %eax
f0115e70:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115e76:	50                   	push   %eax
f0115e77:	52                   	push   %edx
f0115e78:	68 00 00 70 00       	push   $0x700000
f0115e7d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e80:	e8 d1 32 ff ff       	call   f0109156 <calculate_allocated_space>
f0115e85:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e88:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e8e:	85 c0                	test   %eax,%eax
f0115e90:	74 27                	je     f0115eb9 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e92:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e98:	83 ec 0c             	sub    $0xc,%esp
f0115e9b:	6a 00                	push   $0x0
f0115e9d:	50                   	push   %eax
f0115e9e:	68 50 ab 13 f0       	push   $0xf013ab50
f0115ea3:	68 fc 06 00 00       	push   $0x6fc
f0115ea8:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115ead:	e8 61 a5 fe ff       	call   f0100413 <_warn>
f0115eb2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115eb5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115eb9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ebf:	85 c0                	test   %eax,%eax
f0115ec1:	74 27                	je     f0115eea <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ec3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ec9:	83 ec 0c             	sub    $0xc,%esp
f0115ecc:	6a 00                	push   $0x0
f0115ece:	50                   	push   %eax
f0115ecf:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115ed4:	68 01 07 00 00       	push   $0x701
f0115ed9:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115ede:	e8 30 a5 fe ff       	call   f0100413 <_warn>
f0115ee3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ee6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115eea:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115eee:	74 04                	je     f0115ef4 <test_calculate_allocated_space+0x5c7>
f0115ef0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115ef4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0115ef8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115eff:	00 00 00 
		num_pages = 0;
f0115f02:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f09:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0115f0c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115f0f:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0115f14:	89 c2                	mov    %eax,%edx
f0115f16:	83 ec 0c             	sub    $0xc,%esp
f0115f19:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f1f:	50                   	push   %eax
f0115f20:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f26:	50                   	push   %eax
f0115f27:	52                   	push   %edx
f0115f28:	68 ff ff 3f 00       	push   $0x3fffff
f0115f2d:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f30:	e8 21 32 ff ff       	call   f0109156 <calculate_allocated_space>
f0115f35:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f38:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f3e:	85 c0                	test   %eax,%eax
f0115f40:	74 27                	je     f0115f69 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f42:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f48:	83 ec 0c             	sub    $0xc,%esp
f0115f4b:	6a 00                	push   $0x0
f0115f4d:	50                   	push   %eax
f0115f4e:	68 50 ab 13 f0       	push   $0xf013ab50
f0115f53:	68 0d 07 00 00       	push   $0x70d
f0115f58:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115f5d:	e8 b1 a4 fe ff       	call   f0100413 <_warn>
f0115f62:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f65:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115f69:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f6f:	85 c0                	test   %eax,%eax
f0115f71:	74 27                	je     f0115f9a <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115f73:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f79:	83 ec 0c             	sub    $0xc,%esp
f0115f7c:	6a 00                	push   $0x0
f0115f7e:	50                   	push   %eax
f0115f7f:	68 b0 ab 13 f0       	push   $0xf013abb0
f0115f84:	68 12 07 00 00       	push   $0x712
f0115f89:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0115f8e:	e8 80 a4 fe ff       	call   f0100413 <_warn>
f0115f93:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f96:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115f9a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f9e:	74 04                	je     f0115fa4 <test_calculate_allocated_space+0x677>
f0115fa0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115fa4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0115fa8:	83 ec 0c             	sub    $0xc,%esp
f0115fab:	68 69 a5 13 f0       	push   $0xf013a569
f0115fb0:	e8 59 ad fe ff       	call   f0100d0e <cprintf>
f0115fb5:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0115fb8:	83 ec 0c             	sub    $0xc,%esp
f0115fbb:	68 70 aa 13 f0       	push   $0xf013aa70
f0115fc0:	e8 49 ad fe ff       	call   f0100d0e <cprintf>
f0115fc5:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0115fc8:	83 ec 04             	sub    $0x4,%esp
f0115fcb:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115fd1:	50                   	push   %eax
f0115fd2:	68 22 99 13 f0       	push   $0xf0139922
f0115fd7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115fdd:	50                   	push   %eax
f0115fde:	e8 c0 bf 01 00       	call   f0131fa3 <strcconcat>
f0115fe3:	83 c4 10             	add    $0x10,%esp
f0115fe6:	83 ec 0c             	sub    $0xc,%esp
f0115fe9:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0115fef:	50                   	push   %eax
f0115ff0:	e8 7b ad fe ff       	call   f0100d70 <execute_command>
f0115ff5:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0115ff8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115fff:	00 00 00 
		num_pages = 0;
f0116002:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116009:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f011600c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011600f:	c1 e0 03             	shl    $0x3,%eax
f0116012:	89 c2                	mov    %eax,%edx
f0116014:	83 ec 0c             	sub    $0xc,%esp
f0116017:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011601d:	50                   	push   %eax
f011601e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116024:	50                   	push   %eax
f0116025:	52                   	push   %edx
f0116026:	6a 00                	push   $0x0
f0116028:	ff 75 d8             	pushl  -0x28(%ebp)
f011602b:	e8 26 31 ff ff       	call   f0109156 <calculate_allocated_space>
f0116030:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116033:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f011603a:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116041:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116047:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011604a:	74 28                	je     f0116074 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011604c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116052:	83 ec 0c             	sub    $0xc,%esp
f0116055:	ff 75 c8             	pushl  -0x38(%ebp)
f0116058:	50                   	push   %eax
f0116059:	68 50 ab 13 f0       	push   $0xf013ab50
f011605e:	68 29 07 00 00       	push   $0x729
f0116063:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116068:	e8 a6 a3 fe ff       	call   f0100413 <_warn>
f011606d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116070:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116074:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011607a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011607d:	74 28                	je     f01160a7 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011607f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116085:	83 ec 0c             	sub    $0xc,%esp
f0116088:	ff 75 c4             	pushl  -0x3c(%ebp)
f011608b:	50                   	push   %eax
f011608c:	68 b0 ab 13 f0       	push   $0xf013abb0
f0116091:	68 2e 07 00 00       	push   $0x72e
f0116096:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011609b:	e8 73 a3 fe ff       	call   f0100413 <_warn>
f01160a0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01160a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01160a7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160ab:	74 04                	je     f01160b1 <test_calculate_allocated_space+0x784>
f01160ad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01160b1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01160b5:	83 ec 04             	sub    $0x4,%esp
f01160b8:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01160be:	50                   	push   %eax
f01160bf:	68 2f 99 13 f0       	push   $0xf013992f
f01160c4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160ca:	50                   	push   %eax
f01160cb:	e8 d3 be 01 00       	call   f0131fa3 <strcconcat>
f01160d0:	83 c4 10             	add    $0x10,%esp
f01160d3:	83 ec 0c             	sub    $0xc,%esp
f01160d6:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01160dc:	50                   	push   %eax
f01160dd:	e8 8e ac fe ff       	call   f0100d70 <execute_command>
f01160e2:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01160e5:	83 ec 04             	sub    $0x4,%esp
f01160e8:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01160ee:	50                   	push   %eax
f01160ef:	68 a4 aa 13 f0       	push   $0xf013aaa4
f01160f4:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01160fa:	50                   	push   %eax
f01160fb:	e8 a3 be 01 00       	call   f0131fa3 <strcconcat>
f0116100:	83 c4 10             	add    $0x10,%esp
f0116103:	83 ec 0c             	sub    $0xc,%esp
f0116106:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011610c:	50                   	push   %eax
f011610d:	e8 5e ac fe ff       	call   f0100d70 <execute_command>
f0116112:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0116115:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011611c:	00 00 00 
		num_pages = 0;
f011611f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116126:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0116129:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011612c:	c1 e0 03             	shl    $0x3,%eax
f011612f:	89 c2                	mov    %eax,%edx
f0116131:	83 ec 0c             	sub    $0xc,%esp
f0116134:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011613a:	50                   	push   %eax
f011613b:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116141:	50                   	push   %eax
f0116142:	52                   	push   %edx
f0116143:	6a 00                	push   $0x0
f0116145:	ff 75 d8             	pushl  -0x28(%ebp)
f0116148:	e8 09 30 ff ff       	call   f0109156 <calculate_allocated_space>
f011614d:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0116150:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0116157:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011615e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116164:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116167:	74 28                	je     f0116191 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116169:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011616f:	83 ec 0c             	sub    $0xc,%esp
f0116172:	ff 75 c8             	pushl  -0x38(%ebp)
f0116175:	50                   	push   %eax
f0116176:	68 50 ab 13 f0       	push   $0xf013ab50
f011617b:	68 3f 07 00 00       	push   $0x73f
f0116180:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116185:	e8 89 a2 fe ff       	call   f0100413 <_warn>
f011618a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011618d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116191:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116197:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011619a:	74 28                	je     f01161c4 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011619c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161a2:	83 ec 0c             	sub    $0xc,%esp
f01161a5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01161a8:	50                   	push   %eax
f01161a9:	68 b0 ab 13 f0       	push   $0xf013abb0
f01161ae:	68 44 07 00 00       	push   $0x744
f01161b3:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01161b8:	e8 56 a2 fe ff       	call   f0100413 <_warn>
f01161bd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161c0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161c4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161c8:	74 04                	je     f01161ce <test_calculate_allocated_space+0x8a1>
f01161ca:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01161ce:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f01161d2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01161d9:	00 00 00 
		num_pages = 0;
f01161dc:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01161e3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01161e6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01161e9:	c1 e0 0a             	shl    $0xa,%eax
f01161ec:	89 c2                	mov    %eax,%edx
f01161ee:	83 ec 0c             	sub    $0xc,%esp
f01161f1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01161f7:	50                   	push   %eax
f01161f8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01161fe:	50                   	push   %eax
f01161ff:	52                   	push   %edx
f0116200:	6a 00                	push   $0x0
f0116202:	ff 75 d8             	pushl  -0x28(%ebp)
f0116205:	e8 4c 2f ff ff       	call   f0109156 <calculate_allocated_space>
f011620a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f011620d:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0116214:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011621b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116221:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116224:	74 28                	je     f011624e <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116226:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011622c:	83 ec 0c             	sub    $0xc,%esp
f011622f:	ff 75 c8             	pushl  -0x38(%ebp)
f0116232:	50                   	push   %eax
f0116233:	68 50 ab 13 f0       	push   $0xf013ab50
f0116238:	68 52 07 00 00       	push   $0x752
f011623d:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116242:	e8 cc a1 fe ff       	call   f0100413 <_warn>
f0116247:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011624a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011624e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116254:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116257:	74 28                	je     f0116281 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116259:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011625f:	83 ec 0c             	sub    $0xc,%esp
f0116262:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116265:	50                   	push   %eax
f0116266:	68 b0 ab 13 f0       	push   $0xf013abb0
f011626b:	68 57 07 00 00       	push   $0x757
f0116270:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116275:	e8 99 a1 fe ff       	call   f0100413 <_warn>
f011627a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011627d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116281:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116285:	74 04                	je     f011628b <test_calculate_allocated_space+0x95e>
f0116287:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011628b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011628f:	83 ec 04             	sub    $0x4,%esp
f0116292:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116298:	50                   	push   %eax
f0116299:	68 b0 aa 13 f0       	push   $0xf013aab0
f011629e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01162a4:	50                   	push   %eax
f01162a5:	e8 f9 bc 01 00       	call   f0131fa3 <strcconcat>
f01162aa:	83 c4 10             	add    $0x10,%esp
f01162ad:	83 ec 0c             	sub    $0xc,%esp
f01162b0:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01162b6:	50                   	push   %eax
f01162b7:	e8 b4 aa fe ff       	call   f0100d70 <execute_command>
f01162bc:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f01162bf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01162c6:	00 00 00 
		num_pages = 0;
f01162c9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01162d0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01162d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01162d6:	89 c2                	mov    %eax,%edx
f01162d8:	01 d2                	add    %edx,%edx
f01162da:	01 d0                	add    %edx,%eax
f01162dc:	05 00 18 00 00       	add    $0x1800,%eax
f01162e1:	89 c2                	mov    %eax,%edx
f01162e3:	83 ec 0c             	sub    $0xc,%esp
f01162e6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01162ec:	50                   	push   %eax
f01162ed:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01162f3:	50                   	push   %eax
f01162f4:	52                   	push   %edx
f01162f5:	68 00 18 00 00       	push   $0x1800
f01162fa:	ff 75 d8             	pushl  -0x28(%ebp)
f01162fd:	e8 54 2e ff ff       	call   f0109156 <calculate_allocated_space>
f0116302:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116305:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f011630c:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116313:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116319:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011631c:	74 28                	je     f0116346 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011631e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116324:	83 ec 0c             	sub    $0xc,%esp
f0116327:	ff 75 c8             	pushl  -0x38(%ebp)
f011632a:	50                   	push   %eax
f011632b:	68 50 ab 13 f0       	push   $0xf013ab50
f0116330:	68 68 07 00 00       	push   $0x768
f0116335:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011633a:	e8 d4 a0 fe ff       	call   f0100413 <_warn>
f011633f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116342:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116346:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011634c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011634f:	74 28                	je     f0116379 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116351:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116357:	83 ec 0c             	sub    $0xc,%esp
f011635a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011635d:	50                   	push   %eax
f011635e:	68 b0 ab 13 f0       	push   $0xf013abb0
f0116363:	68 6d 07 00 00       	push   $0x76d
f0116368:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011636d:	e8 a1 a0 fe ff       	call   f0100413 <_warn>
f0116372:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116375:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116379:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011637d:	74 04                	je     f0116383 <test_calculate_allocated_space+0xa56>
f011637f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116383:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0116387:	83 ec 04             	sub    $0x4,%esp
f011638a:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116390:	50                   	push   %eax
f0116391:	68 88 9b 13 f0       	push   $0xf0139b88
f0116396:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011639c:	50                   	push   %eax
f011639d:	e8 01 bc 01 00       	call   f0131fa3 <strcconcat>
f01163a2:	83 c4 10             	add    $0x10,%esp
f01163a5:	83 ec 0c             	sub    $0xc,%esp
f01163a8:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01163ae:	50                   	push   %eax
f01163af:	e8 bc a9 fe ff       	call   f0100d70 <execute_command>
f01163b4:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f01163b7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01163be:	00 00 00 
		num_pages = 0;
f01163c1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01163c8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01163cb:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01163ce:	89 d0                	mov    %edx,%eax
f01163d0:	c1 e0 02             	shl    $0x2,%eax
f01163d3:	01 d0                	add    %edx,%eax
f01163d5:	01 c0                	add    %eax,%eax
f01163d7:	05 00 00 40 00       	add    $0x400000,%eax
f01163dc:	89 c2                	mov    %eax,%edx
f01163de:	83 ec 0c             	sub    $0xc,%esp
f01163e1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01163e7:	50                   	push   %eax
f01163e8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01163ee:	50                   	push   %eax
f01163ef:	52                   	push   %edx
f01163f0:	68 00 00 40 00       	push   $0x400000
f01163f5:	ff 75 d8             	pushl  -0x28(%ebp)
f01163f8:	e8 59 2d ff ff       	call   f0109156 <calculate_allocated_space>
f01163fd:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116400:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116407:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011640e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116414:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116417:	74 28                	je     f0116441 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116419:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011641f:	83 ec 0c             	sub    $0xc,%esp
f0116422:	ff 75 c8             	pushl  -0x38(%ebp)
f0116425:	50                   	push   %eax
f0116426:	68 50 ab 13 f0       	push   $0xf013ab50
f011642b:	68 7d 07 00 00       	push   $0x77d
f0116430:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116435:	e8 d9 9f fe ff       	call   f0100413 <_warn>
f011643a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011643d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116441:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116447:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011644a:	74 28                	je     f0116474 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011644c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116452:	83 ec 0c             	sub    $0xc,%esp
f0116455:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116458:	50                   	push   %eax
f0116459:	68 b0 ab 13 f0       	push   $0xf013abb0
f011645e:	68 82 07 00 00       	push   $0x782
f0116463:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116468:	e8 a6 9f fe ff       	call   f0100413 <_warn>
f011646d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116470:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116474:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116478:	74 04                	je     f011647e <test_calculate_allocated_space+0xb51>
f011647a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011647e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0116482:	83 ec 04             	sub    $0x4,%esp
f0116485:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011648b:	50                   	push   %eax
f011648c:	68 92 9b 13 f0       	push   $0xf0139b92
f0116491:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116497:	50                   	push   %eax
f0116498:	e8 06 bb 01 00       	call   f0131fa3 <strcconcat>
f011649d:	83 c4 10             	add    $0x10,%esp
f01164a0:	83 ec 0c             	sub    $0xc,%esp
f01164a3:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01164a9:	50                   	push   %eax
f01164aa:	e8 c1 a8 fe ff       	call   f0100d70 <execute_command>
f01164af:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01164b2:	83 ec 04             	sub    $0x4,%esp
f01164b5:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164bb:	50                   	push   %eax
f01164bc:	68 b8 aa 13 f0       	push   $0xf013aab8
f01164c1:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01164c7:	50                   	push   %eax
f01164c8:	e8 d6 ba 01 00       	call   f0131fa3 <strcconcat>
f01164cd:	83 c4 10             	add    $0x10,%esp
f01164d0:	83 ec 0c             	sub    $0xc,%esp
f01164d3:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01164d9:	50                   	push   %eax
f01164da:	e8 91 a8 fe ff       	call   f0100d70 <execute_command>
f01164df:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01164e2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01164e9:	00 00 00 
		num_pages = 0;
f01164ec:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01164f3:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01164f6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01164f9:	05 00 00 38 00       	add    $0x380000,%eax
f01164fe:	01 c0                	add    %eax,%eax
f0116500:	89 c2                	mov    %eax,%edx
f0116502:	83 ec 0c             	sub    $0xc,%esp
f0116505:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011650b:	50                   	push   %eax
f011650c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116512:	50                   	push   %eax
f0116513:	52                   	push   %edx
f0116514:	68 00 00 70 00       	push   $0x700000
f0116519:	ff 75 d8             	pushl  -0x28(%ebp)
f011651c:	e8 35 2c ff ff       	call   f0109156 <calculate_allocated_space>
f0116521:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116524:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f011652b:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116532:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116538:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011653b:	74 28                	je     f0116565 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011653d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116543:	83 ec 0c             	sub    $0xc,%esp
f0116546:	ff 75 c8             	pushl  -0x38(%ebp)
f0116549:	50                   	push   %eax
f011654a:	68 50 ab 13 f0       	push   $0xf013ab50
f011654f:	68 94 07 00 00       	push   $0x794
f0116554:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116559:	e8 b5 9e fe ff       	call   f0100413 <_warn>
f011655e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116561:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116565:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011656b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011656e:	74 28                	je     f0116598 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116570:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116576:	83 ec 0c             	sub    $0xc,%esp
f0116579:	ff 75 c4             	pushl  -0x3c(%ebp)
f011657c:	50                   	push   %eax
f011657d:	68 b0 ab 13 f0       	push   $0xf013abb0
f0116582:	68 99 07 00 00       	push   $0x799
f0116587:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011658c:	e8 82 9e fe ff       	call   f0100413 <_warn>
f0116591:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116594:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116598:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011659c:	74 04                	je     f01165a2 <test_calculate_allocated_space+0xc75>
f011659e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01165a2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01165a6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01165ad:	00 00 00 
		num_pages = 0;
f01165b0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01165b7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f01165ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01165bd:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f01165c2:	89 c2                	mov    %eax,%edx
f01165c4:	83 ec 0c             	sub    $0xc,%esp
f01165c7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01165cd:	50                   	push   %eax
f01165ce:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01165d4:	50                   	push   %eax
f01165d5:	52                   	push   %edx
f01165d6:	68 ff ff 3f 00       	push   $0x3fffff
f01165db:	ff 75 d8             	pushl  -0x28(%ebp)
f01165de:	e8 73 2b ff ff       	call   f0109156 <calculate_allocated_space>
f01165e3:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01165e6:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01165ed:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01165f4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01165fa:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01165fd:	74 28                	je     f0116627 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01165ff:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116605:	83 ec 0c             	sub    $0xc,%esp
f0116608:	ff 75 c8             	pushl  -0x38(%ebp)
f011660b:	50                   	push   %eax
f011660c:	68 50 ab 13 f0       	push   $0xf013ab50
f0116611:	68 a7 07 00 00       	push   $0x7a7
f0116616:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011661b:	e8 f3 9d fe ff       	call   f0100413 <_warn>
f0116620:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116623:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116627:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011662d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116630:	74 28                	je     f011665a <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0116632:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116638:	83 ec 0c             	sub    $0xc,%esp
f011663b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011663e:	50                   	push   %eax
f011663f:	68 b0 ab 13 f0       	push   $0xf013abb0
f0116644:	68 ac 07 00 00       	push   $0x7ac
f0116649:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011664e:	e8 c0 9d fe ff       	call   f0100413 <_warn>
f0116653:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116656:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011665a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011665e:	74 04                	je     f0116664 <test_calculate_allocated_space+0xd37>
f0116660:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116664:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0116668:	83 ec 0c             	sub    $0xc,%esp
f011666b:	68 43 9b 13 f0       	push   $0xf0139b43
f0116670:	e8 99 a6 fe ff       	call   f0100d0e <cprintf>
f0116675:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0116678:	83 ec 08             	sub    $0x8,%esp
f011667b:	ff 75 e4             	pushl  -0x1c(%ebp)
f011667e:	68 0c ac 13 f0       	push   $0xf013ac0c
f0116683:	e8 86 a6 fe ff       	call   f0100d0e <cprintf>
f0116688:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011668b:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011668f:	75 10                	jne    f01166a1 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0116691:	83 ec 0c             	sub    $0xc,%esp
f0116694:	68 4c ac 13 f0       	push   $0xf013ac4c
f0116699:	e8 70 a6 fe ff       	call   f0100d0e <cprintf>
f011669e:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01166a1:	a1 a8 f7 85 f0       	mov    0xf085f7a8,%eax
f01166a6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01166a9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01166ac:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01166af:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01166b4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01166b7:	5b                   	pop    %ebx
f01166b8:	5e                   	pop    %esi
f01166b9:	5f                   	pop    %edi
f01166ba:	5d                   	pop    %ebp
f01166bb:	c3                   	ret    

f01166bc <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f01166bc:	55                   	push   %ebp
f01166bd:	89 e5                	mov    %esp,%ebp
f01166bf:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01166c2:	8b 45 10             	mov    0x10(%ebp),%eax
f01166c5:	ba 01 00 00 00       	mov    $0x1,%edx
f01166ca:	88 c1                	mov    %al,%cl
f01166cc:	d3 e2                	shl    %cl,%edx
f01166ce:	89 d0                	mov    %edx,%eax
f01166d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01166d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166d6:	c1 e8 16             	shr    $0x16,%eax
f01166d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01166e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01166e3:	01 d0                	add    %edx,%eax
f01166e5:	8b 00                	mov    (%eax),%eax
f01166e7:	83 e0 01             	and    $0x1,%eax
f01166ea:	85 c0                	test   %eax,%eax
f01166ec:	75 07                	jne    f01166f5 <CB+0x39>
f01166ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01166f3:	eb 76                	jmp    f011676b <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01166f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01166f8:	c1 e8 16             	shr    $0x16,%eax
f01166fb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116702:	8b 45 08             	mov    0x8(%ebp),%eax
f0116705:	01 d0                	add    %edx,%eax
f0116707:	8b 00                	mov    (%eax),%eax
f0116709:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011670e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116711:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116714:	c1 e8 0c             	shr    $0xc,%eax
f0116717:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011671a:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f011671f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116722:	72 17                	jb     f011673b <CB+0x7f>
f0116724:	ff 75 f0             	pushl  -0x10(%ebp)
f0116727:	68 98 ac 13 f0       	push   $0xf013ac98
f011672c:	68 c7 07 00 00       	push   $0x7c7
f0116731:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116736:	e8 ca 9a fe ff       	call   f0100205 <_panic>
f011673b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011673e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116743:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0116746:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116749:	c1 e8 0c             	shr    $0xc,%eax
f011674c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116751:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116758:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011675b:	01 d0                	add    %edx,%eax
f011675d:	8b 00                	mov    (%eax),%eax
f011675f:	23 45 f4             	and    -0xc(%ebp),%eax
f0116762:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116765:	0f 94 c0             	sete   %al
f0116768:	0f b6 c0             	movzbl %al,%eax
}
f011676b:	c9                   	leave  
f011676c:	c3                   	ret    

f011676d <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f011676d:	55                   	push   %ebp
f011676e:	89 e5                	mov    %esp,%ebp
f0116770:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116773:	68 c7 ac 13 f0       	push   $0xf013acc7
f0116778:	68 d6 ac 13 f0       	push   $0xf013acd6
f011677d:	68 cc 07 00 00       	push   $0x7cc
f0116782:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116787:	e8 79 9a fe ff       	call   f0100205 <_panic>

f011678c <CPs>:
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
	return 0;
}
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f011678c:	55                   	push   %ebp
f011678d:	89 e5                	mov    %esp,%ebp
f011678f:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116792:	68 c7 ac 13 f0       	push   $0xf013acc7
f0116797:	68 d6 ac 13 f0       	push   $0xf013acd6
f011679c:	68 d6 07 00 00       	push   $0x7d6
f01167a1:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01167a6:	e8 5a 9a fe ff       	call   f0100205 <_panic>

f01167ab <CA>:
	}
	return 1;
}

int CA(uint32 *ptr_dir, uint32 va)
{
f01167ab:	55                   	push   %ebp
f01167ac:	89 e5                	mov    %esp,%ebp
f01167ae:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f01167b1:	68 c7 ac 13 f0       	push   $0xf013acc7
f01167b6:	68 d6 ac 13 f0       	push   $0xf013acd6
f01167bb:	68 e5 07 00 00       	push   $0x7e5
f01167c0:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01167c5:	e8 3b 9a fe ff       	call   f0100205 <_panic>

f01167ca <CE>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
}

int CE(uint32 *_d, uint32 va)
{
f01167ca:	55                   	push   %ebp
f01167cb:	89 e5                	mov    %esp,%ebp
f01167cd:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01167d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167d3:	c1 e8 16             	shr    $0x16,%eax
f01167d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01167e0:	01 d0                	add    %edx,%eax
f01167e2:	8b 00                	mov    (%eax),%eax
f01167e4:	83 e0 01             	and    $0x1,%eax
f01167e7:	85 c0                	test   %eax,%eax
f01167e9:	75 07                	jne    f01167f2 <CE+0x28>
f01167eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01167f0:	eb 7a                	jmp    f011686c <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01167f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01167f5:	c1 e8 16             	shr    $0x16,%eax
f01167f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01167ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0116802:	01 d0                	add    %edx,%eax
f0116804:	8b 00                	mov    (%eax),%eax
f0116806:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011680b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011680e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116811:	c1 e8 0c             	shr    $0xc,%eax
f0116814:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116817:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f011681c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f011681f:	72 17                	jb     f0116838 <CE+0x6e>
f0116821:	ff 75 f4             	pushl  -0xc(%ebp)
f0116824:	68 98 ac 13 f0       	push   $0xf013ac98
f0116829:	68 ee 07 00 00       	push   $0x7ee
f011682e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116833:	e8 cd 99 fe ff       	call   f0100205 <_panic>
f0116838:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011683b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116840:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116843:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116846:	c1 e8 0c             	shr    $0xc,%eax
f0116849:	25 ff 03 00 00       	and    $0x3ff,%eax
f011684e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116855:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116858:	01 d0                	add    %edx,%eax
f011685a:	8b 00                	mov    (%eax),%eax
f011685c:	85 c0                	test   %eax,%eax
f011685e:	74 07                	je     f0116867 <CE+0x9d>
f0116860:	b8 00 00 00 00       	mov    $0x0,%eax
f0116865:	eb 05                	jmp    f011686c <CE+0xa2>
	return 1;
f0116867:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011686c:	c9                   	leave  
f011686d:	c3                   	ret    

f011686e <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f011686e:	55                   	push   %ebp
f011686f:	89 e5                	mov    %esp,%ebp
f0116871:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116874:	68 c7 ac 13 f0       	push   $0xf013acc7
f0116879:	68 d6 ac 13 f0       	push   $0xf013acd6
f011687e:	68 f5 07 00 00       	push   $0x7f5
f0116883:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116888:	e8 78 99 fe ff       	call   f0100205 <_panic>

f011688d <GP>:
	}
	return 0;
}

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f011688d:	55                   	push   %ebp
f011688e:	89 e5                	mov    %esp,%ebp
f0116890:	83 ec 08             	sub    $0x8,%esp
	assert(USE_KHEAP == 0) ;
f0116893:	68 c7 ac 13 f0       	push   $0xf013acc7
f0116898:	68 d6 ac 13 f0       	push   $0xf013acd6
f011689d:	68 05 08 00 00       	push   $0x805
f01168a2:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01168a7:	e8 59 99 fe ff       	call   f0100205 <_panic>

f01168ac <ClearUserSpace>:
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
f01168ac:	55                   	push   %ebp
f01168ad:	89 e5                	mov    %esp,%ebp
f01168af:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01168b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01168b9:	eb 18                	jmp    f01168d3 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f01168bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01168be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01168c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01168c8:	01 d0                	add    %edx,%eax
f01168ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01168d0:	ff 45 fc             	incl   -0x4(%ebp)
f01168d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01168d6:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01168db:	76 de                	jbe    f01168bb <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01168dd:	90                   	nop
f01168de:	c9                   	leave  
f01168df:	c3                   	ret    

f01168e0 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01168e0:	55                   	push   %ebp
f01168e1:	89 e5                	mov    %esp,%ebp
f01168e3:	83 ec 38             	sub    $0x38,%esp
f01168e6:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01168e9:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01168ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01168ef:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f01168f7:	8b 45 10             	mov    0x10(%ebp),%eax
f01168fa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01168ff:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116902:	e9 ea 01 00 00       	jmp    f0116af1 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116907:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011690b:	74 44                	je     f0116951 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f011690d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116910:	83 ec 04             	sub    $0x4,%esp
f0116913:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116916:	52                   	push   %edx
f0116917:	50                   	push   %eax
f0116918:	ff 75 08             	pushl  0x8(%ebp)
f011691b:	e8 cd 04 ff ff       	call   f0106ded <get_frame_info>
f0116920:	83 c4 10             	add    $0x10,%esp
f0116923:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116926:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116929:	85 c0                	test   %eax,%eax
f011692b:	75 24                	jne    f0116951 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f011692d:	83 ec 04             	sub    $0x4,%esp
f0116930:	68 ec ac 13 f0       	push   $0xf013acec
f0116935:	68 22 08 00 00       	push   $0x822
f011693a:	68 1e 8e 13 f0       	push   $0xf0138e1e
f011693f:	e8 cf 9a fe ff       	call   f0100413 <_warn>
f0116944:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116947:	b8 00 00 00 00       	mov    $0x0,%eax
f011694c:	e9 b6 01 00 00       	jmp    f0116b07 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116951:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116954:	83 ec 04             	sub    $0x4,%esp
f0116957:	8d 55 d8             	lea    -0x28(%ebp),%edx
f011695a:	52                   	push   %edx
f011695b:	50                   	push   %eax
f011695c:	ff 75 08             	pushl  0x8(%ebp)
f011695f:	e8 89 04 ff ff       	call   f0106ded <get_frame_info>
f0116964:	83 c4 10             	add    $0x10,%esp
f0116967:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f011696a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011696d:	85 c0                	test   %eax,%eax
f011696f:	75 24                	jne    f0116995 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116971:	83 ec 04             	sub    $0x4,%esp
f0116974:	68 18 ad 13 f0       	push   $0xf013ad18
f0116979:	68 29 08 00 00       	push   $0x829
f011697e:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116983:	e8 8b 9a fe ff       	call   f0100413 <_warn>
f0116988:	83 c4 10             	add    $0x10,%esp
			return 0;
f011698b:	b8 00 00 00 00       	mov    $0x0,%eax
f0116990:	e9 72 01 00 00       	jmp    f0116b07 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116995:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116999:	75 70                	jne    f0116a0b <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f011699b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011699e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01169a1:	c1 ea 0c             	shr    $0xc,%edx
f01169a4:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01169aa:	c1 e2 02             	shl    $0x2,%edx
f01169ad:	01 d0                	add    %edx,%eax
f01169af:	8b 00                	mov    (%eax),%eax
f01169b1:	c1 e8 0c             	shr    $0xc,%eax
f01169b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f01169b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01169ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01169bd:	c1 ea 0c             	shr    $0xc,%edx
f01169c0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01169c6:	c1 e2 02             	shl    $0x2,%edx
f01169c9:	01 d0                	add    %edx,%eax
f01169cb:	8b 00                	mov    (%eax),%eax
f01169cd:	c1 e8 0c             	shr    $0xc,%eax
f01169d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01169d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01169d6:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01169d9:	74 30                	je     f0116a0b <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01169db:	83 ec 04             	sub    $0x4,%esp
f01169de:	ff 75 e4             	pushl  -0x1c(%ebp)
f01169e1:	ff 75 e8             	pushl  -0x18(%ebp)
f01169e4:	ff 75 f0             	pushl  -0x10(%ebp)
f01169e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01169ea:	68 44 ad 13 f0       	push   $0xf013ad44
f01169ef:	68 33 08 00 00       	push   $0x833
f01169f4:	68 1e 8e 13 f0       	push   $0xf0138e1e
f01169f9:	e8 15 9a fe ff       	call   f0100413 <_warn>
f01169fe:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116a01:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a06:	e9 fc 00 00 00       	jmp    f0116b07 <CCP+0x227>
			}
		}
		if (ref != -1)
f0116a0b:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116a0f:	74 52                	je     f0116a63 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116a11:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116a15:	74 0e                	je     f0116a25 <CCP+0x145>
f0116a17:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116a1a:	8b 40 08             	mov    0x8(%eax),%eax
f0116a1d:	0f b7 c0             	movzwl %ax,%eax
f0116a20:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116a23:	74 3e                	je     f0116a63 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116a25:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116a29:	74 0b                	je     f0116a36 <CCP+0x156>
f0116a2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116a2e:	8b 40 08             	mov    0x8(%eax),%eax
f0116a31:	0f b7 c0             	movzwl %ax,%eax
f0116a34:	eb 05                	jmp    f0116a3b <CCP+0x15b>
f0116a36:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a3b:	83 ec 0c             	sub    $0xc,%esp
f0116a3e:	50                   	push   %eax
f0116a3f:	ff 75 f0             	pushl  -0x10(%ebp)
f0116a42:	68 a0 ad 13 f0       	push   $0xf013ada0
f0116a47:	68 3b 08 00 00       	push   $0x83b
f0116a4c:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116a51:	e8 bd 99 fe ff       	call   f0100413 <_warn>
f0116a56:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116a59:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a5e:	e9 a4 00 00 00       	jmp    f0116b07 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0116a63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a66:	ff 75 20             	pushl  0x20(%ebp)
f0116a69:	ff 75 1c             	pushl  0x1c(%ebp)
f0116a6c:	50                   	push   %eax
f0116a6d:	ff 75 08             	pushl  0x8(%ebp)
f0116a70:	e8 17 fd ff ff       	call   f011678c <CPs>
f0116a75:	83 c4 10             	add    $0x10,%esp
f0116a78:	85 c0                	test   %eax,%eax
f0116a7a:	7f 21                	jg     f0116a9d <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0116a7c:	83 ec 04             	sub    $0x4,%esp
f0116a7f:	68 10 ae 13 f0       	push   $0xf013ae10
f0116a84:	68 41 08 00 00       	push   $0x841
f0116a89:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116a8e:	e8 80 99 fe ff       	call   f0100413 <_warn>
f0116a93:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116a96:	b8 00 00 00 00       	mov    $0x0,%eax
f0116a9b:	eb 6a                	jmp    f0116b07 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0116a9d:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116aa1:	74 3a                	je     f0116add <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0116aa3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116aa6:	ff 75 28             	pushl  0x28(%ebp)
f0116aa9:	ff 75 24             	pushl  0x24(%ebp)
f0116aac:	50                   	push   %eax
f0116aad:	ff 75 08             	pushl  0x8(%ebp)
f0116ab0:	e8 d7 fc ff ff       	call   f011678c <CPs>
f0116ab5:	83 c4 10             	add    $0x10,%esp
f0116ab8:	85 c0                	test   %eax,%eax
f0116aba:	7f 21                	jg     f0116add <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0116abc:	83 ec 04             	sub    $0x4,%esp
f0116abf:	68 58 ae 13 f0       	push   $0xf013ae58
f0116ac4:	68 48 08 00 00       	push   $0x848
f0116ac9:	68 1e 8e 13 f0       	push   $0xf0138e1e
f0116ace:	e8 40 99 fe ff       	call   f0100413 <_warn>
f0116ad3:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116ad6:	b8 00 00 00 00       	mov    $0x0,%eax
f0116adb:	eb 2a                	jmp    f0116b07 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0116add:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116ae1:	74 07                	je     f0116aea <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0116ae3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116aea:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0116af1:	8b 55 10             	mov    0x10(%ebp),%edx
f0116af4:	8b 45 14             	mov    0x14(%ebp),%eax
f0116af7:	01 d0                	add    %edx,%eax
f0116af9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0116afc:	0f 87 05 fe ff ff    	ja     f0116907 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0116b02:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116b07:	c9                   	leave  
f0116b08:	c3                   	ret    

f0116b09 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0116b09:	55                   	push   %ebp
f0116b0a:	89 e5                	mov    %esp,%ebp
f0116b0c:	57                   	push   %edi
f0116b0d:	56                   	push   %esi
f0116b0e:	53                   	push   %ebx
f0116b0f:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0116b15:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f0116b1a:	84 c0                	test   %al,%al
f0116b1c:	0f 84 b4 09 00 00    	je     f01174d6 <test_priority_normal_and_higher+0x9cd>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0116b22:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f0116b29:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116b2f:	bb f8 b0 13 f0       	mov    $0xf013b0f8,%ebx
f0116b34:	ba 04 00 00 00       	mov    $0x4,%edx
f0116b39:	89 c7                	mov    %eax,%edi
f0116b3b:	89 de                	mov    %ebx,%esi
f0116b3d:	89 d1                	mov    %edx,%ecx
f0116b3f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0116b41:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0116b47:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116b4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b51:	89 d7                	mov    %edx,%edi
f0116b53:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0116b55:	83 ec 0c             	sub    $0xc,%esp
f0116b58:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0116b5e:	50                   	push   %eax
f0116b5f:	e8 0c a2 fe ff       	call   f0100d70 <execute_command>
f0116b64:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0116b67:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116b6d:	bb 5c b1 13 f0       	mov    $0xf013b15c,%ebx
f0116b72:	ba 0d 00 00 00       	mov    $0xd,%edx
f0116b77:	89 c7                	mov    %eax,%edi
f0116b79:	89 de                	mov    %ebx,%esi
f0116b7b:	89 d1                	mov    %edx,%ecx
f0116b7d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116b7f:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0116b85:	b9 57 00 00 00       	mov    $0x57,%ecx
f0116b8a:	b0 00                	mov    $0x0,%al
f0116b8c:	89 d7                	mov    %edx,%edi
f0116b8e:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0116b90:	83 ec 0c             	sub    $0xc,%esp
f0116b93:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0116b99:	50                   	push   %eax
f0116b9a:	e8 d1 a1 fe ff       	call   f0100d70 <execute_command>
f0116b9f:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0116ba2:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116ba8:	bb c0 b1 13 f0       	mov    $0xf013b1c0,%ebx
f0116bad:	ba 17 00 00 00       	mov    $0x17,%edx
f0116bb2:	89 c7                	mov    %eax,%edi
f0116bb4:	89 de                	mov    %ebx,%esi
f0116bb6:	89 d1                	mov    %edx,%ecx
f0116bb8:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116bba:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0116bc0:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116bc5:	b0 00                	mov    $0x0,%al
f0116bc7:	89 d7                	mov    %edx,%edi
f0116bc9:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116bcb:	83 ec 0c             	sub    $0xc,%esp
f0116bce:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0116bd4:	50                   	push   %eax
f0116bd5:	e8 96 a1 fe ff       	call   f0100d70 <execute_command>
f0116bda:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0116bdd:	83 ec 04             	sub    $0x4,%esp
f0116be0:	6a 00                	push   $0x0
f0116be2:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0116be5:	50                   	push   %eax
f0116be6:	68 00 10 00 00       	push   $0x1000
f0116beb:	e8 2e 35 ff ff       	call   f010a11e <envid2env>
f0116bf0:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116bf3:	83 ec 04             	sub    $0x4,%esp
f0116bf6:	6a 00                	push   $0x0
f0116bf8:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0116bfb:	50                   	push   %eax
f0116bfc:	68 01 10 00 00       	push   $0x1001
f0116c01:	e8 18 35 ff ff       	call   f010a11e <envid2env>
f0116c06:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116c09:	83 ec 04             	sub    $0x4,%esp
f0116c0c:	6a 00                	push   $0x0
f0116c0e:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0116c11:	50                   	push   %eax
f0116c12:	68 02 10 00 00       	push   $0x1002
f0116c17:	e8 02 35 ff ff       	call   f010a11e <envid2env>
f0116c1c:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0116c1f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c22:	85 c0                	test   %eax,%eax
f0116c24:	74 0e                	je     f0116c34 <test_priority_normal_and_higher+0x12b>
f0116c26:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c29:	85 c0                	test   %eax,%eax
f0116c2b:	74 07                	je     f0116c34 <test_priority_normal_and_higher+0x12b>
f0116c2d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c30:	85 c0                	test   %eax,%eax
f0116c32:	75 14                	jne    f0116c48 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f0116c34:	83 ec 04             	sub    $0x4,%esp
f0116c37:	68 98 ae 13 f0       	push   $0xf013ae98
f0116c3c:	6a 26                	push   $0x26
f0116c3e:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116c43:	e8 bd 95 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116c48:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c4b:	8b 40 74             	mov    0x74(%eax),%eax
f0116c4e:	83 f8 14             	cmp    $0x14,%eax
f0116c51:	75 16                	jne    f0116c69 <test_priority_normal_and_higher+0x160>
f0116c53:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116c56:	8b 40 74             	mov    0x74(%eax),%eax
f0116c59:	83 f8 0f             	cmp    $0xf,%eax
f0116c5c:	75 0b                	jne    f0116c69 <test_priority_normal_and_higher+0x160>
f0116c5e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116c61:	8b 40 74             	mov    0x74(%eax),%eax
f0116c64:	83 f8 0a             	cmp    $0xa,%eax
f0116c67:	74 14                	je     f0116c7d <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f0116c69:	83 ec 04             	sub    $0x4,%esp
f0116c6c:	68 cc ae 13 f0       	push   $0xf013aecc
f0116c71:	6a 29                	push   $0x29
f0116c73:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116c78:	e8 88 95 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0116c7d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0116c84:	eb 44                	jmp    f0116cca <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0116c86:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116c89:	8b 48 78             	mov    0x78(%eax),%ecx
f0116c8c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116c8f:	89 d0                	mov    %edx,%eax
f0116c91:	01 c0                	add    %eax,%eax
f0116c93:	01 d0                	add    %edx,%eax
f0116c95:	c1 e0 03             	shl    $0x3,%eax
f0116c98:	01 c8                	add    %ecx,%eax
f0116c9a:	8b 10                	mov    (%eax),%edx
f0116c9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116c9f:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0116ca6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ca9:	8b 48 78             	mov    0x78(%eax),%ecx
f0116cac:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0116caf:	89 d0                	mov    %edx,%eax
f0116cb1:	01 c0                	add    %eax,%eax
f0116cb3:	01 d0                	add    %edx,%eax
f0116cb5:	c1 e0 03             	shl    $0x3,%eax
f0116cb8:	01 c8                	add    %ecx,%eax
f0116cba:	8b 50 08             	mov    0x8(%eax),%edx
f0116cbd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116cc0:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116cc7:	ff 45 e4             	incl   -0x1c(%ebp)
f0116cca:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116cce:	7e b6                	jle    f0116c86 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116cd0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116cd7:	eb 44                	jmp    f0116d1d <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0116cd9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cdc:	8b 48 78             	mov    0x78(%eax),%ecx
f0116cdf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116ce2:	89 d0                	mov    %edx,%eax
f0116ce4:	01 c0                	add    %eax,%eax
f0116ce6:	01 d0                	add    %edx,%eax
f0116ce8:	c1 e0 03             	shl    $0x3,%eax
f0116ceb:	01 c8                	add    %ecx,%eax
f0116ced:	8b 10                	mov    (%eax),%edx
f0116cef:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116cf2:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0116cf9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116cfc:	8b 48 78             	mov    0x78(%eax),%ecx
f0116cff:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116d02:	89 d0                	mov    %edx,%eax
f0116d04:	01 c0                	add    %eax,%eax
f0116d06:	01 d0                	add    %edx,%eax
f0116d08:	c1 e0 03             	shl    $0x3,%eax
f0116d0b:	01 c8                	add    %ecx,%eax
f0116d0d:	8b 50 08             	mov    0x8(%eax),%edx
f0116d10:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116d13:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0116d1a:	ff 45 e0             	incl   -0x20(%ebp)
f0116d1d:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0116d21:	7e b6                	jle    f0116cd9 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116d23:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0116d2a:	eb 44                	jmp    f0116d70 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0116d2c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d2f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d32:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116d35:	89 d0                	mov    %edx,%eax
f0116d37:	01 c0                	add    %eax,%eax
f0116d39:	01 d0                	add    %edx,%eax
f0116d3b:	c1 e0 03             	shl    $0x3,%eax
f0116d3e:	01 c8                	add    %ecx,%eax
f0116d40:	8b 10                	mov    (%eax),%edx
f0116d42:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d45:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0116d4c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d4f:	8b 48 78             	mov    0x78(%eax),%ecx
f0116d52:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116d55:	89 d0                	mov    %edx,%eax
f0116d57:	01 c0                	add    %eax,%eax
f0116d59:	01 d0                	add    %edx,%eax
f0116d5b:	c1 e0 03             	shl    $0x3,%eax
f0116d5e:	01 c8                	add    %ecx,%eax
f0116d60:	8b 50 08             	mov    0x8(%eax),%edx
f0116d63:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116d66:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0116d6d:	ff 45 dc             	incl   -0x24(%ebp)
f0116d70:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0116d74:	7e b6                	jle    f0116d2c <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0116d76:	e8 36 64 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0116d7b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0116d7e:	e8 2c d0 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0116d83:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0116d86:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d89:	83 ec 08             	sub    $0x8,%esp
f0116d8c:	6a 03                	push   $0x3
f0116d8e:	50                   	push   %eax
f0116d8f:	e8 68 48 ff ff       	call   f010b5fc <set_program_priority>
f0116d94:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0116d97:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d9a:	83 ec 08             	sub    $0x8,%esp
f0116d9d:	6a 03                	push   $0x3
f0116d9f:	50                   	push   %eax
f0116da0:	e8 57 48 ff ff       	call   f010b5fc <set_program_priority>
f0116da5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0116da8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116dab:	83 ec 08             	sub    $0x8,%esp
f0116dae:	6a 03                	push   $0x3
f0116db0:	50                   	push   %eax
f0116db1:	e8 46 48 ff ff       	call   f010b5fc <set_program_priority>
f0116db6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116db9:	e8 f1 cf fe ff       	call   f0103daf <pf_calculate_free_frames>
f0116dbe:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116dc1:	74 14                	je     f0116dd7 <test_priority_normal_and_higher+0x2ce>
f0116dc3:	83 ec 04             	sub    $0x4,%esp
f0116dc6:	68 18 af 13 f0       	push   $0xf013af18
f0116dcb:	6a 45                	push   $0x45
f0116dcd:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116dd2:	e8 2e 94 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116dd7:	e8 d5 63 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0116ddc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116ddf:	74 14                	je     f0116df5 <test_priority_normal_and_higher+0x2ec>
f0116de1:	83 ec 04             	sub    $0x4,%esp
f0116de4:	68 18 af 13 f0       	push   $0xf013af18
f0116de9:	6a 46                	push   $0x46
f0116deb:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116df0:	e8 10 94 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0116df5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116df8:	8b 40 74             	mov    0x74(%eax),%eax
f0116dfb:	83 f8 14             	cmp    $0x14,%eax
f0116dfe:	75 16                	jne    f0116e16 <test_priority_normal_and_higher+0x30d>
f0116e00:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e03:	8b 40 74             	mov    0x74(%eax),%eax
f0116e06:	83 f8 0f             	cmp    $0xf,%eax
f0116e09:	75 0b                	jne    f0116e16 <test_priority_normal_and_higher+0x30d>
f0116e0b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e0e:	8b 40 74             	mov    0x74(%eax),%eax
f0116e11:	83 f8 0a             	cmp    $0xa,%eax
f0116e14:	74 14                	je     f0116e2a <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0116e16:	83 ec 04             	sub    $0x4,%esp
f0116e19:	68 44 af 13 f0       	push   $0xf013af44
f0116e1e:	6a 49                	push   $0x49
f0116e20:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116e25:	e8 db 93 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116e2a:	e8 82 63 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0116e2f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e32:	e8 78 cf fe ff       	call   f0103daf <pf_calculate_free_frames>
f0116e37:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0116e3a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116e3d:	83 ec 08             	sub    $0x8,%esp
f0116e40:	6a 04                	push   $0x4
f0116e42:	50                   	push   %eax
f0116e43:	e8 b4 47 ff ff       	call   f010b5fc <set_program_priority>
f0116e48:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0116e4b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116e4e:	83 ec 08             	sub    $0x8,%esp
f0116e51:	6a 04                	push   $0x4
f0116e53:	50                   	push   %eax
f0116e54:	e8 a3 47 ff ff       	call   f010b5fc <set_program_priority>
f0116e59:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0116e5c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116e5f:	83 ec 08             	sub    $0x8,%esp
f0116e62:	6a 04                	push   $0x4
f0116e64:	50                   	push   %eax
f0116e65:	e8 92 47 ff ff       	call   f010b5fc <set_program_priority>
f0116e6a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116e6d:	e8 3d cf fe ff       	call   f0103daf <pf_calculate_free_frames>
f0116e72:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116e75:	74 14                	je     f0116e8b <test_priority_normal_and_higher+0x382>
f0116e77:	83 ec 04             	sub    $0x4,%esp
f0116e7a:	68 18 af 13 f0       	push   $0xf013af18
f0116e7f:	6a 53                	push   $0x53
f0116e81:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116e86:	e8 7a 93 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0116e8b:	e8 21 63 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0116e90:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116e93:	74 14                	je     f0116ea9 <test_priority_normal_and_higher+0x3a0>
f0116e95:	83 ec 04             	sub    $0x4,%esp
f0116e98:	68 98 af 13 f0       	push   $0xf013af98
f0116e9d:	6a 54                	push   $0x54
f0116e9f:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116ea4:	e8 5c 93 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116ea9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116eac:	8b 40 74             	mov    0x74(%eax),%eax
f0116eaf:	83 f8 14             	cmp    $0x14,%eax
f0116eb2:	75 16                	jne    f0116eca <test_priority_normal_and_higher+0x3c1>
f0116eb4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116eb7:	8b 40 74             	mov    0x74(%eax),%eax
f0116eba:	83 f8 0f             	cmp    $0xf,%eax
f0116ebd:	75 0b                	jne    f0116eca <test_priority_normal_and_higher+0x3c1>
f0116ebf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ec2:	8b 40 74             	mov    0x74(%eax),%eax
f0116ec5:	83 f8 14             	cmp    $0x14,%eax
f0116ec8:	74 14                	je     f0116ede <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116eca:	83 ec 04             	sub    $0x4,%esp
f0116ecd:	68 c8 af 13 f0       	push   $0xf013afc8
f0116ed2:	6a 57                	push   $0x57
f0116ed4:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116ed9:	e8 27 93 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116ede:	e8 ce 62 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0116ee3:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ee6:	e8 c4 ce fe ff       	call   f0103daf <pf_calculate_free_frames>
f0116eeb:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0116eee:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116ef1:	83 ec 08             	sub    $0x8,%esp
f0116ef4:	6a 04                	push   $0x4
f0116ef6:	50                   	push   %eax
f0116ef7:	e8 00 47 ff ff       	call   f010b5fc <set_program_priority>
f0116efc:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116eff:	e8 ab ce fe ff       	call   f0103daf <pf_calculate_free_frames>
f0116f04:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116f07:	74 14                	je     f0116f1d <test_priority_normal_and_higher+0x414>
f0116f09:	83 ec 04             	sub    $0x4,%esp
f0116f0c:	68 18 af 13 f0       	push   $0xf013af18
f0116f11:	6a 5f                	push   $0x5f
f0116f13:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116f18:	e8 e8 92 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116f1d:	e8 8f 62 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0116f22:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116f25:	74 14                	je     f0116f3b <test_priority_normal_and_higher+0x432>
f0116f27:	83 ec 04             	sub    $0x4,%esp
f0116f2a:	68 18 af 13 f0       	push   $0xf013af18
f0116f2f:	6a 60                	push   $0x60
f0116f31:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116f36:	e8 ca 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116f3b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116f3e:	8b 40 74             	mov    0x74(%eax),%eax
f0116f41:	83 f8 14             	cmp    $0x14,%eax
f0116f44:	75 16                	jne    f0116f5c <test_priority_normal_and_higher+0x453>
f0116f46:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116f49:	8b 40 74             	mov    0x74(%eax),%eax
f0116f4c:	83 f8 0f             	cmp    $0xf,%eax
f0116f4f:	75 0b                	jne    f0116f5c <test_priority_normal_and_higher+0x453>
f0116f51:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f54:	8b 40 74             	mov    0x74(%eax),%eax
f0116f57:	83 f8 14             	cmp    $0x14,%eax
f0116f5a:	74 14                	je     f0116f70 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f0116f5c:	83 ec 04             	sub    $0x4,%esp
f0116f5f:	68 10 b0 13 f0       	push   $0xf013b010
f0116f64:	6a 63                	push   $0x63
f0116f66:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116f6b:	e8 95 92 fe ff       	call   f0100205 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116f70:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0116f77:	eb 1b                	jmp    f0116f94 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0116f79:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116f7c:	8b 48 78             	mov    0x78(%eax),%ecx
f0116f7f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116f82:	89 d0                	mov    %edx,%eax
f0116f84:	01 c0                	add    %eax,%eax
f0116f86:	01 d0                	add    %edx,%eax
f0116f88:	c1 e0 03             	shl    $0x3,%eax
f0116f8b:	01 c8                	add    %ecx,%eax
f0116f8d:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0116f91:	ff 45 d8             	incl   -0x28(%ebp)
f0116f94:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0116f98:	7e df                	jle    f0116f79 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0116f9a:	e8 12 62 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0116f9f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116fa2:	e8 08 ce fe ff       	call   f0103daf <pf_calculate_free_frames>
f0116fa7:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0116faa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116fad:	83 ec 08             	sub    $0x8,%esp
f0116fb0:	6a 04                	push   $0x4
f0116fb2:	50                   	push   %eax
f0116fb3:	e8 44 46 ff ff       	call   f010b5fc <set_program_priority>
f0116fb8:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116fbb:	e8 ef cd fe ff       	call   f0103daf <pf_calculate_free_frames>
f0116fc0:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0116fc3:	74 14                	je     f0116fd9 <test_priority_normal_and_higher+0x4d0>
f0116fc5:	83 ec 04             	sub    $0x4,%esp
f0116fc8:	68 18 af 13 f0       	push   $0xf013af18
f0116fcd:	6a 70                	push   $0x70
f0116fcf:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116fd4:	e8 2c 92 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0116fd9:	e8 d3 61 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0116fde:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0116fe1:	74 14                	je     f0116ff7 <test_priority_normal_and_higher+0x4ee>
f0116fe3:	83 ec 04             	sub    $0x4,%esp
f0116fe6:	68 18 af 13 f0       	push   $0xf013af18
f0116feb:	6a 71                	push   $0x71
f0116fed:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0116ff2:	e8 0e 92 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116ff7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116ffa:	8b 40 74             	mov    0x74(%eax),%eax
f0116ffd:	83 f8 14             	cmp    $0x14,%eax
f0117000:	75 16                	jne    f0117018 <test_priority_normal_and_higher+0x50f>
f0117002:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117005:	8b 40 74             	mov    0x74(%eax),%eax
f0117008:	83 f8 0f             	cmp    $0xf,%eax
f011700b:	75 0b                	jne    f0117018 <test_priority_normal_and_higher+0x50f>
f011700d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117010:	8b 40 74             	mov    0x74(%eax),%eax
f0117013:	83 f8 14             	cmp    $0x14,%eax
f0117016:	74 14                	je     f011702c <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f0117018:	83 ec 04             	sub    $0x4,%esp
f011701b:	68 10 b0 13 f0       	push   $0xf013b010
f0117020:	6a 74                	push   $0x74
f0117022:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117027:	e8 d9 91 fe ff       	call   f0100205 <_panic>

		for(int i = 10; i < 15; i++)
f011702c:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117033:	eb 1b                	jmp    f0117050 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117035:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117038:	8b 48 78             	mov    0x78(%eax),%ecx
f011703b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011703e:	89 d0                	mov    %edx,%eax
f0117040:	01 c0                	add    %eax,%eax
f0117042:	01 d0                	add    %edx,%eax
f0117044:	c1 e0 03             	shl    $0x3,%eax
f0117047:	01 c8                	add    %ecx,%eax
f0117049:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011704d:	ff 45 d4             	incl   -0x2c(%ebp)
f0117050:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117054:	7e df                	jle    f0117035 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117056:	e8 56 61 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011705b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011705e:	e8 4c cd fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117063:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117066:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117069:	83 ec 08             	sub    $0x8,%esp
f011706c:	6a 05                	push   $0x5
f011706e:	50                   	push   %eax
f011706f:	e8 88 45 ff ff       	call   f010b5fc <set_program_priority>
f0117074:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117077:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011707a:	83 ec 08             	sub    $0x8,%esp
f011707d:	6a 05                	push   $0x5
f011707f:	50                   	push   %eax
f0117080:	e8 77 45 ff ff       	call   f010b5fc <set_program_priority>
f0117085:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117088:	e8 22 cd fe ff       	call   f0103daf <pf_calculate_free_frames>
f011708d:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117090:	74 14                	je     f01170a6 <test_priority_normal_and_higher+0x59d>
f0117092:	83 ec 04             	sub    $0x4,%esp
f0117095:	68 18 af 13 f0       	push   $0xf013af18
f011709a:	6a 7f                	push   $0x7f
f011709c:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01170a1:	e8 5f 91 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01170a6:	e8 06 61 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01170ab:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01170ae:	74 17                	je     f01170c7 <test_priority_normal_and_higher+0x5be>
f01170b0:	83 ec 04             	sub    $0x4,%esp
f01170b3:	68 18 af 13 f0       	push   $0xf013af18
f01170b8:	68 80 00 00 00       	push   $0x80
f01170bd:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01170c2:	e8 3e 91 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01170c7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01170ca:	8b 40 74             	mov    0x74(%eax),%eax
f01170cd:	83 f8 14             	cmp    $0x14,%eax
f01170d0:	75 16                	jne    f01170e8 <test_priority_normal_and_higher+0x5df>
f01170d2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01170d5:	8b 40 74             	mov    0x74(%eax),%eax
f01170d8:	83 f8 1e             	cmp    $0x1e,%eax
f01170db:	75 0b                	jne    f01170e8 <test_priority_normal_and_higher+0x5df>
f01170dd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01170e0:	8b 40 74             	mov    0x74(%eax),%eax
f01170e3:	83 f8 28             	cmp    $0x28,%eax
f01170e6:	74 17                	je     f01170ff <test_priority_normal_and_higher+0x5f6>
			panic("The programs' working set size should be doubled if full\n");
f01170e8:	83 ec 04             	sub    $0x4,%esp
f01170eb:	68 4c b0 13 f0       	push   $0xf013b04c
f01170f0:	68 83 00 00 00       	push   $0x83
f01170f5:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01170fa:	e8 06 91 fe ff       	call   f0100205 <_panic>

		for(int i = 20; i < 40; i++)
f01170ff:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0117106:	eb 1b                	jmp    f0117123 <test_priority_normal_and_higher+0x61a>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0117108:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011710b:	8b 48 78             	mov    0x78(%eax),%ecx
f011710e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117111:	89 d0                	mov    %edx,%eax
f0117113:	01 c0                	add    %eax,%eax
f0117115:	01 d0                	add    %edx,%eax
f0117117:	c1 e0 03             	shl    $0x3,%eax
f011711a:	01 c8                	add    %ecx,%eax
f011711c:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0117120:	ff 45 d0             	incl   -0x30(%ebp)
f0117123:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117127:	7e df                	jle    f0117108 <test_priority_normal_and_higher+0x5ff>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117129:	e8 83 60 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011712e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117131:	e8 79 cc fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117136:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117139:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011713c:	83 ec 08             	sub    $0x8,%esp
f011713f:	6a 05                	push   $0x5
f0117141:	50                   	push   %eax
f0117142:	e8 b5 44 ff ff       	call   f010b5fc <set_program_priority>
f0117147:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011714a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011714d:	83 ec 08             	sub    $0x8,%esp
f0117150:	6a 04                	push   $0x4
f0117152:	50                   	push   %eax
f0117153:	e8 a4 44 ff ff       	call   f010b5fc <set_program_priority>
f0117158:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011715b:	e8 4f cc fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117160:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117163:	74 17                	je     f011717c <test_priority_normal_and_higher+0x673>
f0117165:	83 ec 04             	sub    $0x4,%esp
f0117168:	68 18 af 13 f0       	push   $0xf013af18
f011716d:	68 8e 00 00 00       	push   $0x8e
f0117172:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117177:	e8 89 90 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011717c:	e8 30 60 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117181:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117184:	74 17                	je     f011719d <test_priority_normal_and_higher+0x694>
f0117186:	83 ec 04             	sub    $0x4,%esp
f0117189:	68 18 af 13 f0       	push   $0xf013af18
f011718e:	68 8f 00 00 00       	push   $0x8f
f0117193:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117198:	e8 68 90 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011719d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01171a0:	8b 40 74             	mov    0x74(%eax),%eax
f01171a3:	83 f8 14             	cmp    $0x14,%eax
f01171a6:	75 16                	jne    f01171be <test_priority_normal_and_higher+0x6b5>
f01171a8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171ab:	8b 40 74             	mov    0x74(%eax),%eax
f01171ae:	83 f8 1e             	cmp    $0x1e,%eax
f01171b1:	75 0b                	jne    f01171be <test_priority_normal_and_higher+0x6b5>
f01171b3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171b6:	8b 40 74             	mov    0x74(%eax),%eax
f01171b9:	83 f8 28             	cmp    $0x28,%eax
f01171bc:	74 17                	je     f01171d5 <test_priority_normal_and_higher+0x6cc>
			panic("The programs' working set size should be doubled if full\n");
f01171be:	83 ec 04             	sub    $0x4,%esp
f01171c1:	68 4c b0 13 f0       	push   $0xf013b04c
f01171c6:	68 92 00 00 00       	push   $0x92
f01171cb:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01171d0:	e8 30 90 fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 30; i++)
f01171d5:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01171dc:	eb 1b                	jmp    f01171f9 <test_priority_normal_and_higher+0x6f0>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01171de:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171e1:	8b 48 78             	mov    0x78(%eax),%ecx
f01171e4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01171e7:	89 d0                	mov    %edx,%eax
f01171e9:	01 c0                	add    %eax,%eax
f01171eb:	01 d0                	add    %edx,%eax
f01171ed:	c1 e0 03             	shl    $0x3,%eax
f01171f0:	01 c8                	add    %ecx,%eax
f01171f2:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01171f6:	ff 45 cc             	incl   -0x34(%ebp)
f01171f9:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f01171fd:	7e df                	jle    f01171de <test_priority_normal_and_higher+0x6d5>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01171ff:	e8 ad 5f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117204:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117207:	e8 a3 cb fe ff       	call   f0103daf <pf_calculate_free_frames>
f011720c:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011720f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117212:	83 ec 08             	sub    $0x8,%esp
f0117215:	6a 05                	push   $0x5
f0117217:	50                   	push   %eax
f0117218:	e8 df 43 ff ff       	call   f010b5fc <set_program_priority>
f011721d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117220:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117223:	83 ec 08             	sub    $0x8,%esp
f0117226:	6a 04                	push   $0x4
f0117228:	50                   	push   %eax
f0117229:	e8 ce 43 ff ff       	call   f010b5fc <set_program_priority>
f011722e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117231:	e8 79 cb fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117236:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117239:	74 17                	je     f0117252 <test_priority_normal_and_higher+0x749>
f011723b:	83 ec 04             	sub    $0x4,%esp
f011723e:	68 18 af 13 f0       	push   $0xf013af18
f0117243:	68 9d 00 00 00       	push   $0x9d
f0117248:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011724d:	e8 b3 8f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117252:	e8 5a 5f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117257:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011725a:	74 17                	je     f0117273 <test_priority_normal_and_higher+0x76a>
f011725c:	83 ec 04             	sub    $0x4,%esp
f011725f:	68 18 af 13 f0       	push   $0xf013af18
f0117264:	68 9e 00 00 00       	push   $0x9e
f0117269:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011726e:	e8 92 8f fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0117273:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117276:	8b 40 74             	mov    0x74(%eax),%eax
f0117279:	83 f8 14             	cmp    $0x14,%eax
f011727c:	75 16                	jne    f0117294 <test_priority_normal_and_higher+0x78b>
f011727e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117281:	8b 40 74             	mov    0x74(%eax),%eax
f0117284:	83 f8 3c             	cmp    $0x3c,%eax
f0117287:	75 0b                	jne    f0117294 <test_priority_normal_and_higher+0x78b>
f0117289:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011728c:	8b 40 74             	mov    0x74(%eax),%eax
f011728f:	83 f8 28             	cmp    $0x28,%eax
f0117292:	74 17                	je     f01172ab <test_priority_normal_and_higher+0x7a2>
			panic("The programs' working set size should be doubled if full\n");
f0117294:	83 ec 04             	sub    $0x4,%esp
f0117297:	68 4c b0 13 f0       	push   $0xf013b04c
f011729c:	68 a1 00 00 00       	push   $0xa1
f01172a1:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01172a6:	e8 5a 8f fe ff       	call   f0100205 <_panic>

		for(int i = 15; i < 60; i++)
f01172ab:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f01172b2:	eb 1b                	jmp    f01172cf <test_priority_normal_and_higher+0x7c6>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f01172b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01172b7:	8b 48 78             	mov    0x78(%eax),%ecx
f01172ba:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01172bd:	89 d0                	mov    %edx,%eax
f01172bf:	01 c0                	add    %eax,%eax
f01172c1:	01 d0                	add    %edx,%eax
f01172c3:	c1 e0 03             	shl    $0x3,%eax
f01172c6:	01 c8                	add    %ecx,%eax
f01172c8:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01172cc:	ff 45 c8             	incl   -0x38(%ebp)
f01172cf:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01172d3:	7e df                	jle    f01172b4 <test_priority_normal_and_higher+0x7ab>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01172d5:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01172dc:	eb 1b                	jmp    f01172f9 <test_priority_normal_and_higher+0x7f0>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01172de:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01172e1:	8b 48 78             	mov    0x78(%eax),%ecx
f01172e4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01172e7:	89 d0                	mov    %edx,%eax
f01172e9:	01 c0                	add    %eax,%eax
f01172eb:	01 d0                	add    %edx,%eax
f01172ed:	c1 e0 03             	shl    $0x3,%eax
f01172f0:	01 c8                	add    %ecx,%eax
f01172f2:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01172f6:	ff 45 c4             	incl   -0x3c(%ebp)
f01172f9:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f01172fd:	7e df                	jle    f01172de <test_priority_normal_and_higher+0x7d5>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f01172ff:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0117306:	eb 7a                	jmp    f0117382 <test_priority_normal_and_higher+0x879>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117308:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011730b:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117312:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117315:	8b 58 78             	mov    0x78(%eax),%ebx
f0117318:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011731b:	89 d0                	mov    %edx,%eax
f011731d:	01 c0                	add    %eax,%eax
f011731f:	01 d0                	add    %edx,%eax
f0117321:	c1 e0 03             	shl    $0x3,%eax
f0117324:	01 d8                	add    %ebx,%eax
f0117326:	8b 00                	mov    (%eax),%eax
f0117328:	39 c1                	cmp    %eax,%ecx
f011732a:	74 17                	je     f0117343 <test_priority_normal_and_higher+0x83a>
				panic("Working set should be moved properly to the new one");
f011732c:	83 ec 04             	sub    $0x4,%esp
f011732f:	68 88 b0 13 f0       	push   $0xf013b088
f0117334:	68 af 00 00 00       	push   $0xaf
f0117339:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011733e:	e8 c2 8e fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117343:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117346:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f011734d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117350:	8b 58 78             	mov    0x78(%eax),%ebx
f0117353:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117356:	89 d0                	mov    %edx,%eax
f0117358:	01 c0                	add    %eax,%eax
f011735a:	01 d0                	add    %edx,%eax
f011735c:	c1 e0 03             	shl    $0x3,%eax
f011735f:	01 d8                	add    %ebx,%eax
f0117361:	8b 40 08             	mov    0x8(%eax),%eax
f0117364:	39 c1                	cmp    %eax,%ecx
f0117366:	74 17                	je     f011737f <test_priority_normal_and_higher+0x876>
				panic("Working set should be moved properly to the new one");
f0117368:	83 ec 04             	sub    $0x4,%esp
f011736b:	68 88 b0 13 f0       	push   $0xf013b088
f0117370:	68 b2 00 00 00       	push   $0xb2
f0117375:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011737a:	e8 86 8e fe ff       	call   f0100205 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011737f:	ff 45 c0             	incl   -0x40(%ebp)
f0117382:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0117386:	7e 80                	jle    f0117308 <test_priority_normal_and_higher+0x7ff>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117388:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011738f:	eb 7a                	jmp    f011740b <test_priority_normal_and_higher+0x902>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117391:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117394:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f011739b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011739e:	8b 58 78             	mov    0x78(%eax),%ebx
f01173a1:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01173a4:	89 d0                	mov    %edx,%eax
f01173a6:	01 c0                	add    %eax,%eax
f01173a8:	01 d0                	add    %edx,%eax
f01173aa:	c1 e0 03             	shl    $0x3,%eax
f01173ad:	01 d8                	add    %ebx,%eax
f01173af:	8b 00                	mov    (%eax),%eax
f01173b1:	39 c1                	cmp    %eax,%ecx
f01173b3:	74 17                	je     f01173cc <test_priority_normal_and_higher+0x8c3>
				panic("Working set should be moved properly to the new one");
f01173b5:	83 ec 04             	sub    $0x4,%esp
f01173b8:	68 88 b0 13 f0       	push   $0xf013b088
f01173bd:	68 b8 00 00 00       	push   $0xb8
f01173c2:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01173c7:	e8 39 8e fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01173cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01173cf:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01173d6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01173d9:	8b 58 78             	mov    0x78(%eax),%ebx
f01173dc:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01173df:	89 d0                	mov    %edx,%eax
f01173e1:	01 c0                	add    %eax,%eax
f01173e3:	01 d0                	add    %edx,%eax
f01173e5:	c1 e0 03             	shl    $0x3,%eax
f01173e8:	01 d8                	add    %ebx,%eax
f01173ea:	8b 40 08             	mov    0x8(%eax),%eax
f01173ed:	39 c1                	cmp    %eax,%ecx
f01173ef:	74 17                	je     f0117408 <test_priority_normal_and_higher+0x8ff>
				panic("Working set should be moved properly to the new one");
f01173f1:	83 ec 04             	sub    $0x4,%esp
f01173f4:	68 88 b0 13 f0       	push   $0xf013b088
f01173f9:	68 bb 00 00 00       	push   $0xbb
f01173fe:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117403:	e8 fd 8d fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117408:	ff 45 bc             	incl   -0x44(%ebp)
f011740b:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011740f:	7e 80                	jle    f0117391 <test_priority_normal_and_higher+0x888>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117411:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117418:	eb 7a                	jmp    f0117494 <test_priority_normal_and_higher+0x98b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011741a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011741d:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117424:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117427:	8b 58 78             	mov    0x78(%eax),%ebx
f011742a:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011742d:	89 d0                	mov    %edx,%eax
f011742f:	01 c0                	add    %eax,%eax
f0117431:	01 d0                	add    %edx,%eax
f0117433:	c1 e0 03             	shl    $0x3,%eax
f0117436:	01 d8                	add    %ebx,%eax
f0117438:	8b 00                	mov    (%eax),%eax
f011743a:	39 c1                	cmp    %eax,%ecx
f011743c:	74 17                	je     f0117455 <test_priority_normal_and_higher+0x94c>
				panic("Working set should be moved properly to the new one");
f011743e:	83 ec 04             	sub    $0x4,%esp
f0117441:	68 88 b0 13 f0       	push   $0xf013b088
f0117446:	68 c1 00 00 00       	push   $0xc1
f011744b:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117450:	e8 b0 8d fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117455:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117458:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f011745f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117462:	8b 58 78             	mov    0x78(%eax),%ebx
f0117465:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117468:	89 d0                	mov    %edx,%eax
f011746a:	01 c0                	add    %eax,%eax
f011746c:	01 d0                	add    %edx,%eax
f011746e:	c1 e0 03             	shl    $0x3,%eax
f0117471:	01 d8                	add    %ebx,%eax
f0117473:	8b 40 08             	mov    0x8(%eax),%eax
f0117476:	39 c1                	cmp    %eax,%ecx
f0117478:	74 17                	je     f0117491 <test_priority_normal_and_higher+0x988>
				panic("Working set should be moved properly to the new one");
f011747a:	83 ec 04             	sub    $0x4,%esp
f011747d:	68 88 b0 13 f0       	push   $0xf013b088
f0117482:	68 c4 00 00 00       	push   $0xc4
f0117487:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011748c:	e8 74 8d fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117491:	ff 45 b8             	incl   -0x48(%ebp)
f0117494:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117498:	7e 80                	jle    f011741a <test_priority_normal_and_higher+0x911>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f011749a:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f01174a1:	75 6e 61 
f01174a4:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f01174ab:	6c 00 00 
f01174ae:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f01174b4:	b9 17 00 00 00       	mov    $0x17,%ecx
f01174b9:	b8 00 00 00 00       	mov    $0x0,%eax
f01174be:	89 d7                	mov    %edx,%edi
f01174c0:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f01174c2:	83 ec 0c             	sub    $0xc,%esp
f01174c5:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f01174cb:	50                   	push   %eax
f01174cc:	e8 9f 98 fe ff       	call   f0100d70 <execute_command>
f01174d1:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f01174d4:	eb 10                	jmp    f01174e6 <test_priority_normal_and_higher+0x9dd>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f01174d6:	83 ec 0c             	sub    $0xc,%esp
f01174d9:	68 bc b0 13 f0       	push   $0xf013b0bc
f01174de:	e8 2b 98 fe ff       	call   f0100d0e <cprintf>
f01174e3:	83 c4 10             	add    $0x10,%esp
	}
}
f01174e6:	90                   	nop
f01174e7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01174ea:	5b                   	pop    %ebx
f01174eb:	5e                   	pop    %esi
f01174ec:	5f                   	pop    %edi
f01174ed:	5d                   	pop    %ebp
f01174ee:	c3                   	ret    

f01174ef <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f01174ef:	55                   	push   %ebp
f01174f0:	89 e5                	mov    %esp,%ebp
f01174f2:	57                   	push   %edi
f01174f3:	56                   	push   %esi
f01174f4:	53                   	push   %ebx
f01174f5:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f01174fb:	a0 22 3d 19 f0       	mov    0xf0193d22,%al
f0117500:	84 c0                	test   %al,%al
f0117502:	0f 84 be 09 00 00    	je     f0117ec6 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0117508:	c6 05 22 3d 19 f0 00 	movb   $0x0,0xf0193d22
		char command[100] = "load fos_add 20";
f011750f:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117515:	bb f8 b0 13 f0       	mov    $0xf013b0f8,%ebx
f011751a:	ba 04 00 00 00       	mov    $0x4,%edx
f011751f:	89 c7                	mov    %eax,%edi
f0117521:	89 de                	mov    %ebx,%esi
f0117523:	89 d1                	mov    %edx,%ecx
f0117525:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117527:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f011752d:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117532:	b8 00 00 00 00       	mov    $0x0,%eax
f0117537:	89 d7                	mov    %edx,%edi
f0117539:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011753b:	83 ec 0c             	sub    $0xc,%esp
f011753e:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117544:	50                   	push   %eax
f0117545:	e8 26 98 fe ff       	call   f0100d70 <execute_command>
f011754a:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f011754d:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117553:	bb b4 b3 13 f0       	mov    $0xf013b3b4,%ebx
f0117558:	ba 0d 00 00 00       	mov    $0xd,%edx
f011755d:	89 c7                	mov    %eax,%edi
f011755f:	89 de                	mov    %ebx,%esi
f0117561:	89 d1                	mov    %edx,%ecx
f0117563:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117565:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f011756b:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117570:	b0 00                	mov    $0x0,%al
f0117572:	89 d7                	mov    %edx,%edi
f0117574:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117576:	83 ec 0c             	sub    $0xc,%esp
f0117579:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011757f:	50                   	push   %eax
f0117580:	e8 eb 97 fe ff       	call   f0100d70 <execute_command>
f0117585:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117588:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011758e:	bb 18 b4 13 f0       	mov    $0xf013b418,%ebx
f0117593:	ba 17 00 00 00       	mov    $0x17,%edx
f0117598:	89 c7                	mov    %eax,%edi
f011759a:	89 de                	mov    %ebx,%esi
f011759c:	89 d1                	mov    %edx,%ecx
f011759e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01175a0:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f01175a6:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f01175ab:	b0 00                	mov    $0x0,%al
f01175ad:	89 d7                	mov    %edx,%edi
f01175af:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f01175b1:	83 ec 0c             	sub    $0xc,%esp
f01175b4:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01175ba:	50                   	push   %eax
f01175bb:	e8 b0 97 fe ff       	call   f0100d70 <execute_command>
f01175c0:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f01175c3:	83 ec 04             	sub    $0x4,%esp
f01175c6:	6a 00                	push   $0x0
f01175c8:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01175cb:	50                   	push   %eax
f01175cc:	68 00 10 00 00       	push   $0x1000
f01175d1:	e8 48 2b ff ff       	call   f010a11e <envid2env>
f01175d6:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f01175d9:	83 ec 04             	sub    $0x4,%esp
f01175dc:	6a 00                	push   $0x0
f01175de:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f01175e1:	50                   	push   %eax
f01175e2:	68 01 10 00 00       	push   $0x1001
f01175e7:	e8 32 2b ff ff       	call   f010a11e <envid2env>
f01175ec:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f01175ef:	83 ec 04             	sub    $0x4,%esp
f01175f2:	6a 00                	push   $0x0
f01175f4:	8d 45 b0             	lea    -0x50(%ebp),%eax
f01175f7:	50                   	push   %eax
f01175f8:	68 02 10 00 00       	push   $0x1002
f01175fd:	e8 1c 2b ff ff       	call   f010a11e <envid2env>
f0117602:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117605:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117608:	85 c0                	test   %eax,%eax
f011760a:	74 0e                	je     f011761a <test_priority_normal_and_lower+0x12b>
f011760c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011760f:	85 c0                	test   %eax,%eax
f0117611:	74 07                	je     f011761a <test_priority_normal_and_lower+0x12b>
f0117613:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117616:	85 c0                	test   %eax,%eax
f0117618:	75 17                	jne    f0117631 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f011761a:	83 ec 04             	sub    $0x4,%esp
f011761d:	68 98 ae 13 f0       	push   $0xf013ae98
f0117622:	68 eb 00 00 00       	push   $0xeb
f0117627:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011762c:	e8 d4 8b fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117631:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117634:	8b 40 74             	mov    0x74(%eax),%eax
f0117637:	83 f8 14             	cmp    $0x14,%eax
f011763a:	75 16                	jne    f0117652 <test_priority_normal_and_lower+0x163>
f011763c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011763f:	8b 40 74             	mov    0x74(%eax),%eax
f0117642:	83 f8 1e             	cmp    $0x1e,%eax
f0117645:	75 0b                	jne    f0117652 <test_priority_normal_and_lower+0x163>
f0117647:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011764a:	8b 40 74             	mov    0x74(%eax),%eax
f011764d:	83 f8 28             	cmp    $0x28,%eax
f0117650:	74 17                	je     f0117669 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f0117652:	83 ec 04             	sub    $0x4,%esp
f0117655:	68 cc ae 13 f0       	push   $0xf013aecc
f011765a:	68 ee 00 00 00       	push   $0xee
f011765f:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117664:	e8 9c 8b fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 20; i++)
f0117669:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117670:	eb 44                	jmp    f01176b6 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117672:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117675:	8b 48 78             	mov    0x78(%eax),%ecx
f0117678:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011767b:	89 d0                	mov    %edx,%eax
f011767d:	01 c0                	add    %eax,%eax
f011767f:	01 d0                	add    %edx,%eax
f0117681:	c1 e0 03             	shl    $0x3,%eax
f0117684:	01 c8                	add    %ecx,%eax
f0117686:	8b 10                	mov    (%eax),%edx
f0117688:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011768b:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117692:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117695:	8b 48 78             	mov    0x78(%eax),%ecx
f0117698:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011769b:	89 d0                	mov    %edx,%eax
f011769d:	01 c0                	add    %eax,%eax
f011769f:	01 d0                	add    %edx,%eax
f01176a1:	c1 e0 03             	shl    $0x3,%eax
f01176a4:	01 c8                	add    %ecx,%eax
f01176a6:	8b 50 08             	mov    0x8(%eax),%edx
f01176a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01176ac:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f01176b3:	ff 45 e4             	incl   -0x1c(%ebp)
f01176b6:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f01176ba:	7e b6                	jle    f0117672 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01176bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01176c3:	eb 44                	jmp    f0117709 <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f01176c5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01176c8:	8b 48 78             	mov    0x78(%eax),%ecx
f01176cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01176ce:	89 d0                	mov    %edx,%eax
f01176d0:	01 c0                	add    %eax,%eax
f01176d2:	01 d0                	add    %edx,%eax
f01176d4:	c1 e0 03             	shl    $0x3,%eax
f01176d7:	01 c8                	add    %ecx,%eax
f01176d9:	8b 10                	mov    (%eax),%edx
f01176db:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01176de:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01176e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01176e8:	8b 48 78             	mov    0x78(%eax),%ecx
f01176eb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01176ee:	89 d0                	mov    %edx,%eax
f01176f0:	01 c0                	add    %eax,%eax
f01176f2:	01 d0                	add    %edx,%eax
f01176f4:	c1 e0 03             	shl    $0x3,%eax
f01176f7:	01 c8                	add    %ecx,%eax
f01176f9:	8b 50 08             	mov    0x8(%eax),%edx
f01176fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01176ff:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117706:	ff 45 e0             	incl   -0x20(%ebp)
f0117709:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f011770d:	7e b6                	jle    f01176c5 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011770f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117716:	eb 44                	jmp    f011775c <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117718:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011771b:	8b 48 78             	mov    0x78(%eax),%ecx
f011771e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117721:	89 d0                	mov    %edx,%eax
f0117723:	01 c0                	add    %eax,%eax
f0117725:	01 d0                	add    %edx,%eax
f0117727:	c1 e0 03             	shl    $0x3,%eax
f011772a:	01 c8                	add    %ecx,%eax
f011772c:	8b 10                	mov    (%eax),%edx
f011772e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117731:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117738:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011773b:	8b 48 78             	mov    0x78(%eax),%ecx
f011773e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117741:	89 d0                	mov    %edx,%eax
f0117743:	01 c0                	add    %eax,%eax
f0117745:	01 d0                	add    %edx,%eax
f0117747:	c1 e0 03             	shl    $0x3,%eax
f011774a:	01 c8                	add    %ecx,%eax
f011774c:	8b 50 08             	mov    0x8(%eax),%edx
f011774f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117752:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117759:	ff 45 dc             	incl   -0x24(%ebp)
f011775c:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117760:	7e b6                	jle    f0117718 <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117762:	e8 4a 5a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117767:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011776a:	e8 40 c6 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011776f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117772:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117775:	83 ec 08             	sub    $0x8,%esp
f0117778:	6a 03                	push   $0x3
f011777a:	50                   	push   %eax
f011777b:	e8 7c 3e ff ff       	call   f010b5fc <set_program_priority>
f0117780:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117783:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117786:	83 ec 08             	sub    $0x8,%esp
f0117789:	6a 03                	push   $0x3
f011778b:	50                   	push   %eax
f011778c:	e8 6b 3e ff ff       	call   f010b5fc <set_program_priority>
f0117791:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117794:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117797:	83 ec 08             	sub    $0x8,%esp
f011779a:	6a 03                	push   $0x3
f011779c:	50                   	push   %eax
f011779d:	e8 5a 3e ff ff       	call   f010b5fc <set_program_priority>
f01177a2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01177a5:	e8 05 c6 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01177aa:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01177ad:	74 17                	je     f01177c6 <test_priority_normal_and_lower+0x2d7>
f01177af:	83 ec 04             	sub    $0x4,%esp
f01177b2:	68 18 af 13 f0       	push   $0xf013af18
f01177b7:	68 0a 01 00 00       	push   $0x10a
f01177bc:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01177c1:	e8 3f 8a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01177c6:	e8 e6 59 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01177cb:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01177ce:	74 17                	je     f01177e7 <test_priority_normal_and_lower+0x2f8>
f01177d0:	83 ec 04             	sub    $0x4,%esp
f01177d3:	68 18 af 13 f0       	push   $0xf013af18
f01177d8:	68 0b 01 00 00       	push   $0x10b
f01177dd:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01177e2:	e8 1e 8a fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01177e7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01177ea:	8b 40 74             	mov    0x74(%eax),%eax
f01177ed:	83 f8 14             	cmp    $0x14,%eax
f01177f0:	75 16                	jne    f0117808 <test_priority_normal_and_lower+0x319>
f01177f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01177f5:	8b 40 74             	mov    0x74(%eax),%eax
f01177f8:	83 f8 1e             	cmp    $0x1e,%eax
f01177fb:	75 0b                	jne    f0117808 <test_priority_normal_and_lower+0x319>
f01177fd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117800:	8b 40 74             	mov    0x74(%eax),%eax
f0117803:	83 f8 28             	cmp    $0x28,%eax
f0117806:	74 17                	je     f011781f <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117808:	83 ec 04             	sub    $0x4,%esp
f011780b:	68 44 af 13 f0       	push   $0xf013af44
f0117810:	68 0e 01 00 00       	push   $0x10e
f0117815:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011781a:	e8 e6 89 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f011781f:	e8 8d 59 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117824:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117827:	e8 83 c5 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011782c:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011782f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117832:	83 ec 08             	sub    $0x8,%esp
f0117835:	6a 02                	push   $0x2
f0117837:	50                   	push   %eax
f0117838:	e8 bf 3d ff ff       	call   f010b5fc <set_program_priority>
f011783d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117840:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117843:	83 ec 08             	sub    $0x8,%esp
f0117846:	6a 02                	push   $0x2
f0117848:	50                   	push   %eax
f0117849:	e8 ae 3d ff ff       	call   f010b5fc <set_program_priority>
f011784e:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117851:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117854:	83 ec 08             	sub    $0x8,%esp
f0117857:	6a 02                	push   $0x2
f0117859:	50                   	push   %eax
f011785a:	e8 9d 3d ff ff       	call   f010b5fc <set_program_priority>
f011785f:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117862:	e8 48 c5 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117867:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011786a:	74 17                	je     f0117883 <test_priority_normal_and_lower+0x394>
f011786c:	83 ec 04             	sub    $0x4,%esp
f011786f:	68 18 af 13 f0       	push   $0xf013af18
f0117874:	68 18 01 00 00       	push   $0x118
f0117879:	68 b1 ae 13 f0       	push   $0xf013aeb1
f011787e:	e8 82 89 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117883:	e8 29 59 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117888:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011788b:	74 21                	je     f01178ae <test_priority_normal_and_lower+0x3bf>
f011788d:	e8 1f 59 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117892:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117895:	29 c2                	sub    %eax,%edx
f0117897:	89 d0                	mov    %edx,%eax
f0117899:	50                   	push   %eax
f011789a:	68 98 af 13 f0       	push   $0xf013af98
f011789f:	68 19 01 00 00       	push   $0x119
f01178a4:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01178a9:	e8 57 89 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01178ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178b1:	8b 40 74             	mov    0x74(%eax),%eax
f01178b4:	83 f8 0a             	cmp    $0xa,%eax
f01178b7:	75 16                	jne    f01178cf <test_priority_normal_and_lower+0x3e0>
f01178b9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01178bc:	8b 40 74             	mov    0x74(%eax),%eax
f01178bf:	83 f8 0f             	cmp    $0xf,%eax
f01178c2:	75 0b                	jne    f01178cf <test_priority_normal_and_lower+0x3e0>
f01178c4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01178c7:	8b 40 74             	mov    0x74(%eax),%eax
f01178ca:	83 f8 14             	cmp    $0x14,%eax
f01178cd:	74 17                	je     f01178e6 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f01178cf:	83 ec 04             	sub    $0x4,%esp
f01178d2:	68 c8 af 13 f0       	push   $0xf013afc8
f01178d7:	68 1c 01 00 00       	push   $0x11c
f01178dc:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01178e1:	e8 1f 89 fe ff       	call   f0100205 <_panic>

		freeFrames = sys_calculate_free_frames();
f01178e6:	e8 c6 58 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01178eb:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178ee:	e8 bc c4 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01178f3:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01178f6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01178f9:	83 ec 08             	sub    $0x8,%esp
f01178fc:	6a 02                	push   $0x2
f01178fe:	50                   	push   %eax
f01178ff:	e8 f8 3c ff ff       	call   f010b5fc <set_program_priority>
f0117904:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117907:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011790a:	83 ec 08             	sub    $0x8,%esp
f011790d:	6a 02                	push   $0x2
f011790f:	50                   	push   %eax
f0117910:	e8 e7 3c ff ff       	call   f010b5fc <set_program_priority>
f0117915:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117918:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011791b:	83 ec 08             	sub    $0x8,%esp
f011791e:	6a 02                	push   $0x2
f0117920:	50                   	push   %eax
f0117921:	e8 d6 3c ff ff       	call   f010b5fc <set_program_priority>
f0117926:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117929:	e8 81 c4 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011792e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117931:	74 17                	je     f011794a <test_priority_normal_and_lower+0x45b>
f0117933:	83 ec 04             	sub    $0x4,%esp
f0117936:	68 18 af 13 f0       	push   $0xf013af18
f011793b:	68 26 01 00 00       	push   $0x126
f0117940:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117945:	e8 bb 88 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011794a:	e8 62 58 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011794f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117952:	74 21                	je     f0117975 <test_priority_normal_and_lower+0x486>
f0117954:	e8 58 58 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117959:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011795c:	29 c2                	sub    %eax,%edx
f011795e:	89 d0                	mov    %edx,%eax
f0117960:	50                   	push   %eax
f0117961:	68 98 af 13 f0       	push   $0xf013af98
f0117966:	68 27 01 00 00       	push   $0x127
f011796b:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117970:	e8 90 88 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117975:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117978:	8b 40 74             	mov    0x74(%eax),%eax
f011797b:	83 f8 0a             	cmp    $0xa,%eax
f011797e:	75 16                	jne    f0117996 <test_priority_normal_and_lower+0x4a7>
f0117980:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117983:	8b 40 74             	mov    0x74(%eax),%eax
f0117986:	83 f8 0f             	cmp    $0xf,%eax
f0117989:	75 0b                	jne    f0117996 <test_priority_normal_and_lower+0x4a7>
f011798b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011798e:	8b 40 74             	mov    0x74(%eax),%eax
f0117991:	83 f8 0a             	cmp    $0xa,%eax
f0117994:	74 17                	je     f01179ad <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117996:	83 ec 04             	sub    $0x4,%esp
f0117999:	68 c8 af 13 f0       	push   $0xf013afc8
f011799e:	68 2a 01 00 00       	push   $0x12a
f01179a3:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01179a8:	e8 58 88 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 10; i++)
f01179ad:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01179b4:	eb 7a                	jmp    f0117a30 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f01179b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01179b9:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f01179c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179c3:	8b 58 78             	mov    0x78(%eax),%ebx
f01179c6:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01179c9:	89 d0                	mov    %edx,%eax
f01179cb:	01 c0                	add    %eax,%eax
f01179cd:	01 d0                	add    %edx,%eax
f01179cf:	c1 e0 03             	shl    $0x3,%eax
f01179d2:	01 d8                	add    %ebx,%eax
f01179d4:	8b 00                	mov    (%eax),%eax
f01179d6:	39 c1                	cmp    %eax,%ecx
f01179d8:	74 17                	je     f01179f1 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f01179da:	83 ec 04             	sub    $0x4,%esp
f01179dd:	68 88 b0 13 f0       	push   $0xf013b088
f01179e2:	68 2f 01 00 00       	push   $0x12f
f01179e7:	68 b1 ae 13 f0       	push   $0xf013aeb1
f01179ec:	e8 14 88 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01179f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01179f4:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f01179fb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01179fe:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a01:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117a04:	89 d0                	mov    %edx,%eax
f0117a06:	01 c0                	add    %eax,%eax
f0117a08:	01 d0                	add    %edx,%eax
f0117a0a:	c1 e0 03             	shl    $0x3,%eax
f0117a0d:	01 d8                	add    %ebx,%eax
f0117a0f:	8b 40 08             	mov    0x8(%eax),%eax
f0117a12:	39 c1                	cmp    %eax,%ecx
f0117a14:	74 17                	je     f0117a2d <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f0117a16:	83 ec 04             	sub    $0x4,%esp
f0117a19:	68 88 b0 13 f0       	push   $0xf013b088
f0117a1e:	68 32 01 00 00       	push   $0x132
f0117a23:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117a28:	e8 d8 87 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0117a2d:	ff 45 d8             	incl   -0x28(%ebp)
f0117a30:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0117a34:	7e 80                	jle    f01179b6 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117a36:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0117a3d:	eb 7a                	jmp    f0117ab9 <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a3f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117a42:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117a49:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a4c:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a4f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117a52:	89 d0                	mov    %edx,%eax
f0117a54:	01 c0                	add    %eax,%eax
f0117a56:	01 d0                	add    %edx,%eax
f0117a58:	c1 e0 03             	shl    $0x3,%eax
f0117a5b:	01 d8                	add    %ebx,%eax
f0117a5d:	8b 00                	mov    (%eax),%eax
f0117a5f:	39 c1                	cmp    %eax,%ecx
f0117a61:	74 17                	je     f0117a7a <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f0117a63:	83 ec 04             	sub    $0x4,%esp
f0117a66:	68 88 b0 13 f0       	push   $0xf013b088
f0117a6b:	68 38 01 00 00       	push   $0x138
f0117a70:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117a75:	e8 8b 87 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a7a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117a7d:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117a84:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117a87:	8b 58 78             	mov    0x78(%eax),%ebx
f0117a8a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0117a8d:	89 d0                	mov    %edx,%eax
f0117a8f:	01 c0                	add    %eax,%eax
f0117a91:	01 d0                	add    %edx,%eax
f0117a93:	c1 e0 03             	shl    $0x3,%eax
f0117a96:	01 d8                	add    %ebx,%eax
f0117a98:	8b 40 08             	mov    0x8(%eax),%eax
f0117a9b:	39 c1                	cmp    %eax,%ecx
f0117a9d:	74 17                	je     f0117ab6 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f0117a9f:	83 ec 04             	sub    $0x4,%esp
f0117aa2:	68 88 b0 13 f0       	push   $0xf013b088
f0117aa7:	68 3b 01 00 00       	push   $0x13b
f0117aac:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117ab1:	e8 4f 87 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117ab6:	ff 45 d4             	incl   -0x2c(%ebp)
f0117ab9:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117abd:	7e 80                	jle    f0117a3f <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117abf:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0117ac6:	eb 7a                	jmp    f0117b42 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117ac8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117acb:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117ad2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117ad5:	8b 58 78             	mov    0x78(%eax),%ebx
f0117ad8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117adb:	89 d0                	mov    %edx,%eax
f0117add:	01 c0                	add    %eax,%eax
f0117adf:	01 d0                	add    %edx,%eax
f0117ae1:	c1 e0 03             	shl    $0x3,%eax
f0117ae4:	01 d8                	add    %ebx,%eax
f0117ae6:	8b 00                	mov    (%eax),%eax
f0117ae8:	39 c1                	cmp    %eax,%ecx
f0117aea:	74 17                	je     f0117b03 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f0117aec:	83 ec 04             	sub    $0x4,%esp
f0117aef:	68 88 b0 13 f0       	push   $0xf013b088
f0117af4:	68 41 01 00 00       	push   $0x141
f0117af9:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117afe:	e8 02 87 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117b03:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117b06:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117b0d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b10:	8b 58 78             	mov    0x78(%eax),%ebx
f0117b13:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117b16:	89 d0                	mov    %edx,%eax
f0117b18:	01 c0                	add    %eax,%eax
f0117b1a:	01 d0                	add    %edx,%eax
f0117b1c:	c1 e0 03             	shl    $0x3,%eax
f0117b1f:	01 d8                	add    %ebx,%eax
f0117b21:	8b 40 08             	mov    0x8(%eax),%eax
f0117b24:	39 c1                	cmp    %eax,%ecx
f0117b26:	74 17                	je     f0117b3f <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f0117b28:	83 ec 04             	sub    $0x4,%esp
f0117b2b:	68 88 b0 13 f0       	push   $0xf013b088
f0117b30:	68 44 01 00 00       	push   $0x144
f0117b35:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117b3a:	e8 c6 86 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117b3f:	ff 45 d0             	incl   -0x30(%ebp)
f0117b42:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0117b46:	7e 80                	jle    f0117ac8 <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0117b48:	e8 64 56 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117b4d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b50:	e8 5a c2 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117b55:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117b58:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117b5b:	83 ec 08             	sub    $0x8,%esp
f0117b5e:	6a 01                	push   $0x1
f0117b60:	50                   	push   %eax
f0117b61:	e8 96 3a ff ff       	call   f010b5fc <set_program_priority>
f0117b66:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0117b69:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117b6c:	83 ec 08             	sub    $0x8,%esp
f0117b6f:	6a 01                	push   $0x1
f0117b71:	50                   	push   %eax
f0117b72:	e8 85 3a ff ff       	call   f010b5fc <set_program_priority>
f0117b77:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0117b7a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117b7d:	83 ec 08             	sub    $0x8,%esp
f0117b80:	6a 01                	push   $0x1
f0117b82:	50                   	push   %eax
f0117b83:	e8 74 3a ff ff       	call   f010b5fc <set_program_priority>
f0117b88:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117b8b:	e8 1f c2 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117b90:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117b93:	74 17                	je     f0117bac <test_priority_normal_and_lower+0x6bd>
f0117b95:	83 ec 04             	sub    $0x4,%esp
f0117b98:	68 18 af 13 f0       	push   $0xf013af18
f0117b9d:	68 4d 01 00 00       	push   $0x14d
f0117ba2:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117ba7:	e8 59 86 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0117bac:	e8 00 56 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117bb1:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117bb4:	83 f8 0d             	cmp    $0xd,%eax
f0117bb7:	74 17                	je     f0117bd0 <test_priority_normal_and_lower+0x6e1>
f0117bb9:	83 ec 04             	sub    $0x4,%esp
f0117bbc:	68 24 b2 13 f0       	push   $0xf013b224
f0117bc1:	68 4e 01 00 00       	push   $0x14e
f0117bc6:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117bcb:	e8 35 86 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117bd0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117bd3:	8b 40 74             	mov    0x74(%eax),%eax
f0117bd6:	83 f8 05             	cmp    $0x5,%eax
f0117bd9:	75 16                	jne    f0117bf1 <test_priority_normal_and_lower+0x702>
f0117bdb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117bde:	8b 40 74             	mov    0x74(%eax),%eax
f0117be1:	83 f8 07             	cmp    $0x7,%eax
f0117be4:	75 0b                	jne    f0117bf1 <test_priority_normal_and_lower+0x702>
f0117be6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117be9:	8b 40 74             	mov    0x74(%eax),%eax
f0117bec:	83 f8 05             	cmp    $0x5,%eax
f0117bef:	74 17                	je     f0117c08 <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f0117bf1:	83 ec 04             	sub    $0x4,%esp
f0117bf4:	68 6c b2 13 f0       	push   $0xf013b26c
f0117bf9:	68 51 01 00 00       	push   $0x151
f0117bfe:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117c03:	e8 fd 85 fe ff       	call   f0100205 <_panic>


		freeFrames = sys_calculate_free_frames();
f0117c08:	e8 a4 55 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117c0d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117c10:	e8 9a c1 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117c15:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0117c18:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c1b:	83 ec 08             	sub    $0x8,%esp
f0117c1e:	6a 01                	push   $0x1
f0117c20:	50                   	push   %eax
f0117c21:	e8 d6 39 ff ff       	call   f010b5fc <set_program_priority>
f0117c26:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117c29:	e8 81 c1 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117c2e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117c31:	74 17                	je     f0117c4a <test_priority_normal_and_lower+0x75b>
f0117c33:	83 ec 04             	sub    $0x4,%esp
f0117c36:	68 18 af 13 f0       	push   $0xf013af18
f0117c3b:	68 57 01 00 00       	push   $0x157
f0117c40:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117c45:	e8 bb 85 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0117c4a:	e8 62 55 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117c4f:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0117c52:	83 f8 03             	cmp    $0x3,%eax
f0117c55:	74 17                	je     f0117c6e <test_priority_normal_and_lower+0x77f>
f0117c57:	83 ec 04             	sub    $0x4,%esp
f0117c5a:	68 18 af 13 f0       	push   $0xf013af18
f0117c5f:	68 58 01 00 00       	push   $0x158
f0117c64:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117c69:	e8 97 85 fe ff       	call   f0100205 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0117c6e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c71:	8b 40 74             	mov    0x74(%eax),%eax
f0117c74:	83 f8 02             	cmp    $0x2,%eax
f0117c77:	75 16                	jne    f0117c8f <test_priority_normal_and_lower+0x7a0>
f0117c79:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c7c:	8b 40 74             	mov    0x74(%eax),%eax
f0117c7f:	83 f8 07             	cmp    $0x7,%eax
f0117c82:	75 0b                	jne    f0117c8f <test_priority_normal_and_lower+0x7a0>
f0117c84:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c87:	8b 40 74             	mov    0x74(%eax),%eax
f0117c8a:	83 f8 05             	cmp    $0x5,%eax
f0117c8d:	74 17                	je     f0117ca6 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f0117c8f:	83 ec 04             	sub    $0x4,%esp
f0117c92:	68 4c b0 13 f0       	push   $0xf013b04c
f0117c97:	68 5b 01 00 00       	push   $0x15b
f0117c9c:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117ca1:	e8 5f 85 fe ff       	call   f0100205 <_panic>

		for(int i = 0; i < 2; i++)
f0117ca6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0117cad:	e9 80 00 00 00       	jmp    f0117d32 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0117cb2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117cb5:	83 c0 08             	add    $0x8,%eax
f0117cb8:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0117cbf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117cc2:	8b 58 78             	mov    0x78(%eax),%ebx
f0117cc5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117cc8:	89 d0                	mov    %edx,%eax
f0117cca:	01 c0                	add    %eax,%eax
f0117ccc:	01 d0                	add    %edx,%eax
f0117cce:	c1 e0 03             	shl    $0x3,%eax
f0117cd1:	01 d8                	add    %ebx,%eax
f0117cd3:	8b 00                	mov    (%eax),%eax
f0117cd5:	39 c1                	cmp    %eax,%ecx
f0117cd7:	74 17                	je     f0117cf0 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117cd9:	83 ec 04             	sub    $0x4,%esp
f0117cdc:	68 9c b2 13 f0       	push   $0xf013b29c
f0117ce1:	68 60 01 00 00       	push   $0x160
f0117ce6:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117ceb:	e8 15 85 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117cf0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117cf3:	83 c0 08             	add    $0x8,%eax
f0117cf6:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0117cfd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117d00:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d03:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117d06:	89 d0                	mov    %edx,%eax
f0117d08:	01 c0                	add    %eax,%eax
f0117d0a:	01 d0                	add    %edx,%eax
f0117d0c:	c1 e0 03             	shl    $0x3,%eax
f0117d0f:	01 d8                	add    %ebx,%eax
f0117d11:	8b 40 08             	mov    0x8(%eax),%eax
f0117d14:	39 c1                	cmp    %eax,%ecx
f0117d16:	74 17                	je     f0117d2f <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117d18:	83 ec 04             	sub    $0x4,%esp
f0117d1b:	68 9c b2 13 f0       	push   $0xf013b29c
f0117d20:	68 63 01 00 00       	push   $0x163
f0117d25:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117d2a:	e8 d6 84 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0117d2f:	ff 45 cc             	incl   -0x34(%ebp)
f0117d32:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0117d36:	0f 8e 76 ff ff ff    	jle    f0117cb2 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117d3c:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0117d43:	e9 80 00 00 00       	jmp    f0117dc8 <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0117d48:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117d4b:	83 c0 03             	add    $0x3,%eax
f0117d4e:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0117d55:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d58:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d5b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117d5e:	89 d0                	mov    %edx,%eax
f0117d60:	01 c0                	add    %eax,%eax
f0117d62:	01 d0                	add    %edx,%eax
f0117d64:	c1 e0 03             	shl    $0x3,%eax
f0117d67:	01 d8                	add    %ebx,%eax
f0117d69:	8b 00                	mov    (%eax),%eax
f0117d6b:	39 c1                	cmp    %eax,%ecx
f0117d6d:	74 17                	je     f0117d86 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0117d6f:	ff 75 c8             	pushl  -0x38(%ebp)
f0117d72:	68 08 b3 13 f0       	push   $0xf013b308
f0117d77:	68 69 01 00 00       	push   $0x169
f0117d7c:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117d81:	e8 7f 84 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0117d86:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117d89:	83 c0 03             	add    $0x3,%eax
f0117d8c:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0117d93:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117d96:	8b 58 78             	mov    0x78(%eax),%ebx
f0117d99:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0117d9c:	89 d0                	mov    %edx,%eax
f0117d9e:	01 c0                	add    %eax,%eax
f0117da0:	01 d0                	add    %edx,%eax
f0117da2:	c1 e0 03             	shl    $0x3,%eax
f0117da5:	01 d8                	add    %ebx,%eax
f0117da7:	8b 40 08             	mov    0x8(%eax),%eax
f0117daa:	39 c1                	cmp    %eax,%ecx
f0117dac:	74 17                	je     f0117dc5 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117dae:	83 ec 04             	sub    $0x4,%esp
f0117db1:	68 9c b2 13 f0       	push   $0xf013b29c
f0117db6:	68 6c 01 00 00       	push   $0x16c
f0117dbb:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117dc0:	e8 40 84 fe ff       	call   f0100205 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0117dc5:	ff 45 c8             	incl   -0x38(%ebp)
f0117dc8:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0117dcc:	0f 8e 76 ff ff ff    	jle    f0117d48 <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117dd2:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0117dd9:	e9 80 00 00 00       	jmp    f0117e5e <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117dde:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117de1:	83 c0 05             	add    $0x5,%eax
f0117de4:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0117deb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dee:	8b 58 78             	mov    0x78(%eax),%ebx
f0117df1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117df4:	89 d0                	mov    %edx,%eax
f0117df6:	01 c0                	add    %eax,%eax
f0117df8:	01 d0                	add    %edx,%eax
f0117dfa:	c1 e0 03             	shl    $0x3,%eax
f0117dfd:	01 d8                	add    %ebx,%eax
f0117dff:	8b 00                	mov    (%eax),%eax
f0117e01:	39 c1                	cmp    %eax,%ecx
f0117e03:	74 17                	je     f0117e1c <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e05:	83 ec 04             	sub    $0x4,%esp
f0117e08:	68 9c b2 13 f0       	push   $0xf013b29c
f0117e0d:	68 72 01 00 00       	push   $0x172
f0117e12:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117e17:	e8 e9 83 fe ff       	call   f0100205 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117e1c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117e1f:	83 c0 05             	add    $0x5,%eax
f0117e22:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0117e29:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e2c:	8b 58 78             	mov    0x78(%eax),%ebx
f0117e2f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0117e32:	89 d0                	mov    %edx,%eax
f0117e34:	01 c0                	add    %eax,%eax
f0117e36:	01 d0                	add    %edx,%eax
f0117e38:	c1 e0 03             	shl    $0x3,%eax
f0117e3b:	01 d8                	add    %ebx,%eax
f0117e3d:	8b 40 08             	mov    0x8(%eax),%eax
f0117e40:	39 c1                	cmp    %eax,%ecx
f0117e42:	74 17                	je     f0117e5b <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0117e44:	83 ec 04             	sub    $0x4,%esp
f0117e47:	68 9c b2 13 f0       	push   $0xf013b29c
f0117e4c:	68 75 01 00 00       	push   $0x175
f0117e51:	68 b1 ae 13 f0       	push   $0xf013aeb1
f0117e56:	e8 aa 83 fe ff       	call   f0100205 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0117e5b:	ff 45 c4             	incl   -0x3c(%ebp)
f0117e5e:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0117e62:	0f 8e 76 ff ff ff    	jle    f0117dde <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0117e68:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e6b:	83 ec 08             	sub    $0x8,%esp
f0117e6e:	6a 05                	push   $0x5
f0117e70:	50                   	push   %eax
f0117e71:	e8 86 37 ff ff       	call   f010b5fc <set_program_priority>
f0117e76:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0117e79:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e7c:	83 ec 08             	sub    $0x8,%esp
f0117e7f:	6a 05                	push   $0x5
f0117e81:	50                   	push   %eax
f0117e82:	e8 75 37 ff ff       	call   f010b5fc <set_program_priority>
f0117e87:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0117e8a:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0117e91:	75 6e 61 
f0117e94:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0117e9b:	6c 00 00 
f0117e9e:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0117ea4:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117ea9:	b8 00 00 00 00       	mov    $0x0,%eax
f0117eae:	89 d7                	mov    %edx,%edi
f0117eb0:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117eb2:	83 ec 0c             	sub    $0xc,%esp
f0117eb5:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0117ebb:	50                   	push   %eax
f0117ebc:	e8 af 8e fe ff       	call   f0100d70 <execute_command>
f0117ec1:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0117ec4:	eb 10                	jmp    f0117ed6 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0117ec6:	83 ec 0c             	sub    $0xc,%esp
f0117ec9:	68 78 b3 13 f0       	push   $0xf013b378
f0117ece:	e8 3b 8e fe ff       	call   f0100d0e <cprintf>
f0117ed3:	83 c4 10             	add    $0x10,%esp
	}
}
f0117ed6:	90                   	nop
f0117ed7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117eda:	5b                   	pop    %ebx
f0117edb:	5e                   	pop    %esi
f0117edc:	5f                   	pop    %edi
f0117edd:	5d                   	pop    %ebp
f0117ede:	c3                   	ret    

f0117edf <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0117edf:	55                   	push   %ebp
f0117ee0:	89 e5                	mov    %esp,%ebp
f0117ee2:	a1 58 f7 85 f0       	mov    0xf085f758,%eax
f0117ee7:	83 f8 03             	cmp    $0x3,%eax
f0117eea:	75 04                	jne    f0117ef0 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0117eec:	b0 01                	mov    $0x1,%al
f0117eee:	eb 02                	jmp    f0117ef2 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0117ef0:	b0 00                	mov    $0x0,%al
f0117ef2:	5d                   	pop    %ebp
f0117ef3:	c3                   	ret    

f0117ef4 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0117ef4:	55                   	push   %ebp
f0117ef5:	89 e5                	mov    %esp,%ebp
f0117ef7:	57                   	push   %edi
f0117ef8:	53                   	push   %ebx
f0117ef9:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0117eff:	83 ec 0c             	sub    $0xc,%esp
f0117f02:	68 7c b4 13 f0       	push   $0xf013b47c
f0117f07:	e8 02 8e fe ff       	call   f0100d0e <cprintf>
f0117f0c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117f0f:	83 ec 0c             	sub    $0xc,%esp
f0117f12:	68 ac b4 13 f0       	push   $0xf013b4ac
f0117f17:	e8 f2 8d fe ff       	call   f0100d0e <cprintf>
f0117f1c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117f1f:	83 ec 0c             	sub    $0xc,%esp
f0117f22:	68 7c b4 13 f0       	push   $0xf013b47c
f0117f27:	e8 e2 8d fe ff       	call   f0100d0e <cprintf>
f0117f2c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117f2f:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0117f33:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0117f37:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0117f3d:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0117f43:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0117f4a:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0117f51:	e8 5b 52 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117f56:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0117f59:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0117f5f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0117f64:	b8 00 00 00 00       	mov    $0x0,%eax
f0117f69:	89 d7                	mov    %edx,%edi
f0117f6b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0117f6d:	e8 3f 52 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0117f72:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117f75:	e8 35 be fe ff       	call   f0103daf <pf_calculate_free_frames>
f0117f7a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0117f7d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0117f84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117f87:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f8c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0117f8f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f92:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f97:	f7 75 d4             	divl   -0x2c(%ebp)
f0117f9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f9d:	29 d0                	sub    %edx,%eax
f0117f9f:	89 c1                	mov    %eax,%ecx
f0117fa1:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0117fa8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0117fad:	0f b6 d0             	movzbl %al,%edx
f0117fb0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117fb3:	01 d0                	add    %edx,%eax
f0117fb5:	48                   	dec    %eax
f0117fb6:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0117fb9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117fbc:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fc1:	f7 75 cc             	divl   -0x34(%ebp)
f0117fc4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117fc7:	29 d0                	sub    %edx,%eax
f0117fc9:	01 c1                	add    %eax,%ecx
f0117fcb:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0117fd2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0117fd7:	0f b6 c0             	movzbl %al,%eax
f0117fda:	c1 e0 04             	shl    $0x4,%eax
f0117fdd:	89 c2                	mov    %eax,%edx
f0117fdf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117fe2:	01 d0                	add    %edx,%eax
f0117fe4:	48                   	dec    %eax
f0117fe5:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117fe8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117feb:	ba 00 00 00 00       	mov    $0x0,%edx
f0117ff0:	f7 75 c4             	divl   -0x3c(%ebp)
f0117ff3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117ff6:	29 d0                	sub    %edx,%eax
f0117ff8:	01 c8                	add    %ecx,%eax
f0117ffa:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0117fff:	29 c2                	sub    %eax,%edx
f0118001:	89 d0                	mov    %edx,%eax
f0118003:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118006:	83 ec 0c             	sub    $0xc,%esp
f0118009:	ff 75 bc             	pushl  -0x44(%ebp)
f011800c:	e8 53 fb fe ff       	call   f0107b64 <kmalloc>
f0118011:	83 c4 10             	add    $0x10,%esp
f0118014:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f011801a:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118020:	85 c0                	test   %eax,%eax
f0118022:	74 14                	je     f0118038 <test_kmalloc+0x144>
f0118024:	83 ec 04             	sub    $0x4,%esp
f0118027:	68 08 b5 13 f0       	push   $0xf013b508
f011802c:	6a 40                	push   $0x40
f011802e:	68 3a b5 13 f0       	push   $0xf013b53a
f0118033:	e8 cd 81 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118038:	e8 72 bd fe ff       	call   f0103daf <pf_calculate_free_frames>
f011803d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118040:	74 14                	je     f0118056 <test_kmalloc+0x162>
f0118042:	83 ec 04             	sub    $0x4,%esp
f0118045:	68 54 b5 13 f0       	push   $0xf013b554
f011804a:	6a 41                	push   $0x41
f011804c:	68 3a b5 13 f0       	push   $0xf013b53a
f0118051:	e8 af 81 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118056:	e8 56 51 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011805b:	89 c2                	mov    %eax,%edx
f011805d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118060:	39 c2                	cmp    %eax,%edx
f0118062:	74 14                	je     f0118078 <test_kmalloc+0x184>
f0118064:	83 ec 04             	sub    $0x4,%esp
f0118067:	68 bc b5 13 f0       	push   $0xf013b5bc
f011806c:	6a 42                	push   $0x42
f011806e:	68 3a b5 13 f0       	push   $0xf013b53a
f0118073:	e8 8d 81 fe ff       	call   f0100205 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0118078:	83 ec 0c             	sub    $0xc,%esp
f011807b:	68 fc b5 13 f0       	push   $0xf013b5fc
f0118080:	e8 89 8c fe ff       	call   f0100d0e <cprintf>
f0118085:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118088:	e8 24 51 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011808d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118090:	e8 1a bd fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118095:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118098:	83 ec 0c             	sub    $0xc,%esp
f011809b:	68 00 fc 1f 00       	push   $0x1ffc00
f01180a0:	e8 bf fa fe ff       	call   f0107b64 <kmalloc>
f01180a5:	83 c4 10             	add    $0x10,%esp
f01180a8:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01180ae:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01180b4:	89 c1                	mov    %eax,%ecx
f01180b6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01180bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01180c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180c5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01180c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01180d0:	f7 75 b8             	divl   -0x48(%ebp)
f01180d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01180d6:	29 d0                	sub    %edx,%eax
f01180d8:	89 c3                	mov    %eax,%ebx
f01180da:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01180e1:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01180e6:	0f b6 d0             	movzbl %al,%edx
f01180e9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01180ec:	01 d0                	add    %edx,%eax
f01180ee:	48                   	dec    %eax
f01180ef:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01180f2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01180f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01180fa:	f7 75 b0             	divl   -0x50(%ebp)
f01180fd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118100:	29 d0                	sub    %edx,%eax
f0118102:	01 c3                	add    %eax,%ebx
f0118104:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011810b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0118110:	0f b6 c0             	movzbl %al,%eax
f0118113:	c1 e0 04             	shl    $0x4,%eax
f0118116:	89 c2                	mov    %eax,%edx
f0118118:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011811b:	01 d0                	add    %edx,%eax
f011811d:	48                   	dec    %eax
f011811e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0118121:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118124:	ba 00 00 00 00       	mov    $0x0,%edx
f0118129:	f7 75 a8             	divl   -0x58(%ebp)
f011812c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011812f:	29 d0                	sub    %edx,%eax
f0118131:	01 d8                	add    %ebx,%eax
f0118133:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0118138:	39 c1                	cmp    %eax,%ecx
f011813a:	74 14                	je     f0118150 <test_kmalloc+0x25c>
f011813c:	83 ec 04             	sub    $0x4,%esp
f011813f:	68 20 b6 13 f0       	push   $0xf013b620
f0118144:	6a 49                	push   $0x49
f0118146:	68 3a b5 13 f0       	push   $0xf013b53a
f011814b:	e8 b5 80 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118150:	e8 5a bc fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118155:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118158:	74 14                	je     f011816e <test_kmalloc+0x27a>
f011815a:	83 ec 04             	sub    $0x4,%esp
f011815d:	68 54 b5 13 f0       	push   $0xf013b554
f0118162:	6a 4a                	push   $0x4a
f0118164:	68 3a b5 13 f0       	push   $0xf013b53a
f0118169:	e8 97 80 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011816e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118171:	e8 3b 50 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0118176:	29 c3                	sub    %eax,%ebx
f0118178:	89 d8                	mov    %ebx,%eax
f011817a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011817f:	74 14                	je     f0118195 <test_kmalloc+0x2a1>
f0118181:	83 ec 04             	sub    $0x4,%esp
f0118184:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118189:	6a 4b                	push   $0x4b
f011818b:	68 3a b5 13 f0       	push   $0xf013b53a
f0118190:	e8 70 80 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118195:	e8 17 50 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011819a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011819d:	e8 0d bc fe ff       	call   f0103daf <pf_calculate_free_frames>
f01181a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01181a5:	83 ec 0c             	sub    $0xc,%esp
f01181a8:	68 00 fc 1f 00       	push   $0x1ffc00
f01181ad:	e8 b2 f9 fe ff       	call   f0107b64 <kmalloc>
f01181b2:	83 c4 10             	add    $0x10,%esp
f01181b5:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01181bb:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01181c1:	89 c1                	mov    %eax,%ecx
f01181c3:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01181ca:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01181cd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01181d2:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01181d5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01181d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01181dd:	f7 75 a0             	divl   -0x60(%ebp)
f01181e0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01181e3:	29 d0                	sub    %edx,%eax
f01181e5:	89 c3                	mov    %eax,%ebx
f01181e7:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01181ee:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01181f3:	0f b6 d0             	movzbl %al,%edx
f01181f6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01181f9:	01 d0                	add    %edx,%eax
f01181fb:	48                   	dec    %eax
f01181fc:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01181ff:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118202:	ba 00 00 00 00       	mov    $0x0,%edx
f0118207:	f7 75 98             	divl   -0x68(%ebp)
f011820a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011820d:	29 d0                	sub    %edx,%eax
f011820f:	01 c3                	add    %eax,%ebx
f0118211:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0118218:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011821d:	0f b6 c0             	movzbl %al,%eax
f0118220:	c1 e0 04             	shl    $0x4,%eax
f0118223:	89 c2                	mov    %eax,%edx
f0118225:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118228:	01 d0                	add    %edx,%eax
f011822a:	48                   	dec    %eax
f011822b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011822e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118231:	ba 00 00 00 00       	mov    $0x0,%edx
f0118236:	f7 75 90             	divl   -0x70(%ebp)
f0118239:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011823c:	29 d0                	sub    %edx,%eax
f011823e:	01 d8                	add    %ebx,%eax
f0118240:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0118245:	39 c1                	cmp    %eax,%ecx
f0118247:	74 14                	je     f011825d <test_kmalloc+0x369>
f0118249:	83 ec 04             	sub    $0x4,%esp
f011824c:	68 20 b6 13 f0       	push   $0xf013b620
f0118251:	6a 51                	push   $0x51
f0118253:	68 3a b5 13 f0       	push   $0xf013b53a
f0118258:	e8 a8 7f fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011825d:	e8 4d bb fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118262:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118265:	74 14                	je     f011827b <test_kmalloc+0x387>
f0118267:	83 ec 04             	sub    $0x4,%esp
f011826a:	68 54 b5 13 f0       	push   $0xf013b554
f011826f:	6a 52                	push   $0x52
f0118271:	68 3a b5 13 f0       	push   $0xf013b53a
f0118276:	e8 8a 7f fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011827b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011827e:	e8 2e 4f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0118283:	29 c3                	sub    %eax,%ebx
f0118285:	89 d8                	mov    %ebx,%eax
f0118287:	3d 00 02 00 00       	cmp    $0x200,%eax
f011828c:	74 14                	je     f01182a2 <test_kmalloc+0x3ae>
f011828e:	83 ec 04             	sub    $0x4,%esp
f0118291:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118296:	6a 53                	push   $0x53
f0118298:	68 3a b5 13 f0       	push   $0xf013b53a
f011829d:	e8 63 7f fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01182a2:	e8 0a 4f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01182a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01182aa:	e8 00 bb fe ff       	call   f0103daf <pf_calculate_free_frames>
f01182af:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01182b2:	83 ec 0c             	sub    $0xc,%esp
f01182b5:	68 00 08 00 00       	push   $0x800
f01182ba:	e8 a5 f8 fe ff       	call   f0107b64 <kmalloc>
f01182bf:	83 c4 10             	add    $0x10,%esp
f01182c2:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01182c8:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01182ce:	89 c1                	mov    %eax,%ecx
f01182d0:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01182d7:	8b 45 88             	mov    -0x78(%ebp),%eax
f01182da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01182df:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01182e2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01182e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01182ea:	f7 75 88             	divl   -0x78(%ebp)
f01182ed:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01182f0:	29 d0                	sub    %edx,%eax
f01182f2:	89 c3                	mov    %eax,%ebx
f01182f4:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01182fb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0118300:	0f b6 d0             	movzbl %al,%edx
f0118303:	8b 45 80             	mov    -0x80(%ebp),%eax
f0118306:	01 d0                	add    %edx,%eax
f0118308:	48                   	dec    %eax
f0118309:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f011830f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118315:	ba 00 00 00 00       	mov    $0x0,%edx
f011831a:	f7 75 80             	divl   -0x80(%ebp)
f011831d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118323:	29 d0                	sub    %edx,%eax
f0118325:	01 c3                	add    %eax,%ebx
f0118327:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f011832e:	10 00 00 
f0118331:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0118336:	0f b6 c0             	movzbl %al,%eax
f0118339:	c1 e0 04             	shl    $0x4,%eax
f011833c:	89 c2                	mov    %eax,%edx
f011833e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0118344:	01 d0                	add    %edx,%eax
f0118346:	48                   	dec    %eax
f0118347:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011834d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118353:	ba 00 00 00 00       	mov    $0x0,%edx
f0118358:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f011835e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0118364:	29 d0                	sub    %edx,%eax
f0118366:	01 d8                	add    %ebx,%eax
f0118368:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011836d:	39 c1                	cmp    %eax,%ecx
f011836f:	74 14                	je     f0118385 <test_kmalloc+0x491>
f0118371:	83 ec 04             	sub    $0x4,%esp
f0118374:	68 20 b6 13 f0       	push   $0xf013b620
f0118379:	6a 59                	push   $0x59
f011837b:	68 3a b5 13 f0       	push   $0xf013b53a
f0118380:	e8 80 7e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118385:	e8 25 ba fe ff       	call   f0103daf <pf_calculate_free_frames>
f011838a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011838d:	74 14                	je     f01183a3 <test_kmalloc+0x4af>
f011838f:	83 ec 04             	sub    $0x4,%esp
f0118392:	68 54 b5 13 f0       	push   $0xf013b554
f0118397:	6a 5a                	push   $0x5a
f0118399:	68 3a b5 13 f0       	push   $0xf013b53a
f011839e:	e8 62 7e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01183a3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01183a6:	e8 06 4e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01183ab:	29 c3                	sub    %eax,%ebx
f01183ad:	89 d8                	mov    %ebx,%eax
f01183af:	83 f8 01             	cmp    $0x1,%eax
f01183b2:	74 14                	je     f01183c8 <test_kmalloc+0x4d4>
f01183b4:	83 ec 04             	sub    $0x4,%esp
f01183b7:	68 bc b5 13 f0       	push   $0xf013b5bc
f01183bc:	6a 5b                	push   $0x5b
f01183be:	68 3a b5 13 f0       	push   $0xf013b53a
f01183c3:	e8 3d 7e fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01183c8:	e8 e4 4d ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01183cd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01183d0:	e8 da b9 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01183d5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01183d8:	83 ec 0c             	sub    $0xc,%esp
f01183db:	68 00 08 00 00       	push   $0x800
f01183e0:	e8 7f f7 fe ff       	call   f0107b64 <kmalloc>
f01183e5:	83 c4 10             	add    $0x10,%esp
f01183e8:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01183ee:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01183f4:	89 c1                	mov    %eax,%ecx
f01183f6:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01183fd:	10 00 00 
f0118400:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118406:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011840b:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118411:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118417:	ba 00 00 00 00       	mov    $0x0,%edx
f011841c:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118422:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118428:	29 d0                	sub    %edx,%eax
f011842a:	89 c3                	mov    %eax,%ebx
f011842c:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118433:	10 00 00 
f0118436:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011843b:	0f b6 d0             	movzbl %al,%edx
f011843e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118444:	01 d0                	add    %edx,%eax
f0118446:	48                   	dec    %eax
f0118447:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011844d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118453:	ba 00 00 00 00       	mov    $0x0,%edx
f0118458:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011845e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118464:	29 d0                	sub    %edx,%eax
f0118466:	01 c3                	add    %eax,%ebx
f0118468:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011846f:	10 00 00 
f0118472:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0118477:	0f b6 c0             	movzbl %al,%eax
f011847a:	c1 e0 04             	shl    $0x4,%eax
f011847d:	89 c2                	mov    %eax,%edx
f011847f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118485:	01 d0                	add    %edx,%eax
f0118487:	48                   	dec    %eax
f0118488:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011848e:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118494:	ba 00 00 00 00       	mov    $0x0,%edx
f0118499:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011849f:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01184a5:	29 d0                	sub    %edx,%eax
f01184a7:	01 d8                	add    %ebx,%eax
f01184a9:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01184ae:	39 c1                	cmp    %eax,%ecx
f01184b0:	74 14                	je     f01184c6 <test_kmalloc+0x5d2>
f01184b2:	83 ec 04             	sub    $0x4,%esp
f01184b5:	68 20 b6 13 f0       	push   $0xf013b620
f01184ba:	6a 61                	push   $0x61
f01184bc:	68 3a b5 13 f0       	push   $0xf013b53a
f01184c1:	e8 3f 7d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01184c6:	e8 e4 b8 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01184cb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01184ce:	74 14                	je     f01184e4 <test_kmalloc+0x5f0>
f01184d0:	83 ec 04             	sub    $0x4,%esp
f01184d3:	68 54 b5 13 f0       	push   $0xf013b554
f01184d8:	6a 62                	push   $0x62
f01184da:	68 3a b5 13 f0       	push   $0xf013b53a
f01184df:	e8 21 7d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01184e4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01184e7:	e8 c5 4c ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01184ec:	29 c3                	sub    %eax,%ebx
f01184ee:	89 d8                	mov    %ebx,%eax
f01184f0:	83 f8 01             	cmp    $0x1,%eax
f01184f3:	74 14                	je     f0118509 <test_kmalloc+0x615>
f01184f5:	83 ec 04             	sub    $0x4,%esp
f01184f8:	68 bc b5 13 f0       	push   $0xf013b5bc
f01184fd:	6a 63                	push   $0x63
f01184ff:	68 3a b5 13 f0       	push   $0xf013b53a
f0118504:	e8 fc 7c fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118509:	e8 a3 4c ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011850e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118511:	e8 99 b8 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118516:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118519:	83 ec 0c             	sub    $0xc,%esp
f011851c:	68 00 1c 00 00       	push   $0x1c00
f0118521:	e8 3e f6 fe ff       	call   f0107b64 <kmalloc>
f0118526:	83 c4 10             	add    $0x10,%esp
f0118529:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011852f:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118535:	89 c1                	mov    %eax,%ecx
f0118537:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f011853e:	10 00 00 
f0118541:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118547:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011854c:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118552:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118558:	ba 00 00 00 00       	mov    $0x0,%edx
f011855d:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118563:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118569:	29 d0                	sub    %edx,%eax
f011856b:	89 c3                	mov    %eax,%ebx
f011856d:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118574:	10 00 00 
f0118577:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011857c:	0f b6 d0             	movzbl %al,%edx
f011857f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118585:	01 d0                	add    %edx,%eax
f0118587:	48                   	dec    %eax
f0118588:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f011858e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118594:	ba 00 00 00 00       	mov    $0x0,%edx
f0118599:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f011859f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01185a5:	29 d0                	sub    %edx,%eax
f01185a7:	01 c3                	add    %eax,%ebx
f01185a9:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01185b0:	10 00 00 
f01185b3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01185b8:	0f b6 c0             	movzbl %al,%eax
f01185bb:	c1 e0 04             	shl    $0x4,%eax
f01185be:	89 c2                	mov    %eax,%edx
f01185c0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01185c6:	01 d0                	add    %edx,%eax
f01185c8:	48                   	dec    %eax
f01185c9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01185cf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01185d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01185da:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01185e0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01185e6:	29 d0                	sub    %edx,%eax
f01185e8:	01 d8                	add    %ebx,%eax
f01185ea:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01185ef:	39 c1                	cmp    %eax,%ecx
f01185f1:	74 14                	je     f0118607 <test_kmalloc+0x713>
f01185f3:	83 ec 04             	sub    $0x4,%esp
f01185f6:	68 20 b6 13 f0       	push   $0xf013b620
f01185fb:	6a 69                	push   $0x69
f01185fd:	68 3a b5 13 f0       	push   $0xf013b53a
f0118602:	e8 fe 7b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118607:	e8 a3 b7 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011860c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011860f:	74 14                	je     f0118625 <test_kmalloc+0x731>
f0118611:	83 ec 04             	sub    $0x4,%esp
f0118614:	68 54 b5 13 f0       	push   $0xf013b554
f0118619:	6a 6a                	push   $0x6a
f011861b:	68 3a b5 13 f0       	push   $0xf013b53a
f0118620:	e8 e0 7b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118625:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118628:	e8 84 4b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011862d:	29 c3                	sub    %eax,%ebx
f011862f:	89 d8                	mov    %ebx,%eax
f0118631:	83 f8 02             	cmp    $0x2,%eax
f0118634:	74 14                	je     f011864a <test_kmalloc+0x756>
f0118636:	83 ec 04             	sub    $0x4,%esp
f0118639:	68 bc b5 13 f0       	push   $0xf013b5bc
f011863e:	6a 6b                	push   $0x6b
f0118640:	68 3a b5 13 f0       	push   $0xf013b53a
f0118645:	e8 bb 7b fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011864a:	e8 62 4b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011864f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118652:	e8 58 b7 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118657:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011865a:	83 ec 0c             	sub    $0xc,%esp
f011865d:	68 00 fc 2f 00       	push   $0x2ffc00
f0118662:	e8 fd f4 fe ff       	call   f0107b64 <kmalloc>
f0118667:	83 c4 10             	add    $0x10,%esp
f011866a:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118670:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118676:	89 c1                	mov    %eax,%ecx
f0118678:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f011867f:	10 00 00 
f0118682:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118688:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011868d:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118693:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118699:	ba 00 00 00 00       	mov    $0x0,%edx
f011869e:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01186a4:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01186aa:	29 d0                	sub    %edx,%eax
f01186ac:	89 c3                	mov    %eax,%ebx
f01186ae:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01186b5:	10 00 00 
f01186b8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01186bd:	0f b6 d0             	movzbl %al,%edx
f01186c0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01186c6:	01 d0                	add    %edx,%eax
f01186c8:	48                   	dec    %eax
f01186c9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01186cf:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01186d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01186da:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01186e0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01186e6:	29 d0                	sub    %edx,%eax
f01186e8:	01 c3                	add    %eax,%ebx
f01186ea:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01186f1:	10 00 00 
f01186f4:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01186f9:	0f b6 c0             	movzbl %al,%eax
f01186fc:	c1 e0 04             	shl    $0x4,%eax
f01186ff:	89 c2                	mov    %eax,%edx
f0118701:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118707:	01 d0                	add    %edx,%eax
f0118709:	48                   	dec    %eax
f011870a:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118710:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118716:	ba 00 00 00 00       	mov    $0x0,%edx
f011871b:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118721:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118727:	29 d0                	sub    %edx,%eax
f0118729:	01 d8                	add    %ebx,%eax
f011872b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118730:	39 c1                	cmp    %eax,%ecx
f0118732:	74 14                	je     f0118748 <test_kmalloc+0x854>
f0118734:	83 ec 04             	sub    $0x4,%esp
f0118737:	68 20 b6 13 f0       	push   $0xf013b620
f011873c:	6a 71                	push   $0x71
f011873e:	68 3a b5 13 f0       	push   $0xf013b53a
f0118743:	e8 bd 7a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118748:	e8 62 b6 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011874d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118750:	74 14                	je     f0118766 <test_kmalloc+0x872>
f0118752:	83 ec 04             	sub    $0x4,%esp
f0118755:	68 54 b5 13 f0       	push   $0xf013b554
f011875a:	6a 72                	push   $0x72
f011875c:	68 3a b5 13 f0       	push   $0xf013b53a
f0118761:	e8 9f 7a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118766:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0118769:	e8 43 4a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011876e:	29 c3                	sub    %eax,%ebx
f0118770:	89 d8                	mov    %ebx,%eax
f0118772:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118777:	74 14                	je     f011878d <test_kmalloc+0x899>
f0118779:	83 ec 04             	sub    $0x4,%esp
f011877c:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118781:	6a 73                	push   $0x73
f0118783:	68 3a b5 13 f0       	push   $0xf013b53a
f0118788:	e8 78 7a fe ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011878d:	e8 1f 4a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0118792:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118795:	e8 15 b6 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011879a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011879d:	83 ec 0c             	sub    $0xc,%esp
f01187a0:	68 00 fc 5f 00       	push   $0x5ffc00
f01187a5:	e8 ba f3 fe ff       	call   f0107b64 <kmalloc>
f01187aa:	83 c4 10             	add    $0x10,%esp
f01187ad:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01187b3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01187b9:	89 c1                	mov    %eax,%ecx
f01187bb:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01187c2:	10 00 00 
f01187c5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01187cb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01187d0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01187d6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187dc:	ba 00 00 00 00       	mov    $0x0,%edx
f01187e1:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01187e7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01187ed:	29 d0                	sub    %edx,%eax
f01187ef:	89 c3                	mov    %eax,%ebx
f01187f1:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01187f8:	10 00 00 
f01187fb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0118800:	0f b6 d0             	movzbl %al,%edx
f0118803:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118809:	01 d0                	add    %edx,%eax
f011880b:	48                   	dec    %eax
f011880c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118812:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118818:	ba 00 00 00 00       	mov    $0x0,%edx
f011881d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118823:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118829:	29 d0                	sub    %edx,%eax
f011882b:	01 c3                	add    %eax,%ebx
f011882d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118834:	10 00 00 
f0118837:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011883c:	0f b6 c0             	movzbl %al,%eax
f011883f:	c1 e0 04             	shl    $0x4,%eax
f0118842:	89 c2                	mov    %eax,%edx
f0118844:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011884a:	01 d0                	add    %edx,%eax
f011884c:	48                   	dec    %eax
f011884d:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118853:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0118859:	ba 00 00 00 00       	mov    $0x0,%edx
f011885e:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118864:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011886a:	29 d0                	sub    %edx,%eax
f011886c:	01 d8                	add    %ebx,%eax
f011886e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118873:	39 c1                	cmp    %eax,%ecx
f0118875:	74 14                	je     f011888b <test_kmalloc+0x997>
f0118877:	83 ec 04             	sub    $0x4,%esp
f011887a:	68 20 b6 13 f0       	push   $0xf013b620
f011887f:	6a 79                	push   $0x79
f0118881:	68 3a b5 13 f0       	push   $0xf013b53a
f0118886:	e8 7a 79 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011888b:	e8 1f b5 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118890:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118893:	74 14                	je     f01188a9 <test_kmalloc+0x9b5>
f0118895:	83 ec 04             	sub    $0x4,%esp
f0118898:	68 54 b5 13 f0       	push   $0xf013b554
f011889d:	6a 7a                	push   $0x7a
f011889f:	68 3a b5 13 f0       	push   $0xf013b53a
f01188a4:	e8 5c 79 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01188a9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01188ac:	e8 00 49 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01188b1:	29 c3                	sub    %eax,%ebx
f01188b3:	89 d8                	mov    %ebx,%eax
f01188b5:	3d 00 06 00 00       	cmp    $0x600,%eax
f01188ba:	74 14                	je     f01188d0 <test_kmalloc+0x9dc>
f01188bc:	83 ec 04             	sub    $0x4,%esp
f01188bf:	68 bc b5 13 f0       	push   $0xf013b5bc
f01188c4:	6a 7b                	push   $0x7b
f01188c6:	68 3a b5 13 f0       	push   $0xf013b53a
f01188cb:	e8 35 79 fe ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01188d0:	e8 dc 48 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01188d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01188d8:	e8 d2 b4 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01188dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01188e0:	83 ec 0c             	sub    $0xc,%esp
f01188e3:	68 00 38 00 00       	push   $0x3800
f01188e8:	e8 77 f2 fe ff       	call   f0107b64 <kmalloc>
f01188ed:	83 c4 10             	add    $0x10,%esp
f01188f0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01188f6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01188fc:	89 c1                	mov    %eax,%ecx
f01188fe:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0118905:	10 00 00 
f0118908:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011890e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118913:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0118919:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011891f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118924:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011892a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0118930:	29 d0                	sub    %edx,%eax
f0118932:	89 c3                	mov    %eax,%ebx
f0118934:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011893b:	10 00 00 
f011893e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0118943:	0f b6 d0             	movzbl %al,%edx
f0118946:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011894c:	01 d0                	add    %edx,%eax
f011894e:	48                   	dec    %eax
f011894f:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0118955:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011895b:	ba 00 00 00 00       	mov    $0x0,%edx
f0118960:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118966:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011896c:	29 d0                	sub    %edx,%eax
f011896e:	01 c3                	add    %eax,%ebx
f0118970:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118977:	10 00 00 
f011897a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011897f:	0f b6 c0             	movzbl %al,%eax
f0118982:	c1 e0 04             	shl    $0x4,%eax
f0118985:	89 c2                	mov    %eax,%edx
f0118987:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011898d:	01 d0                	add    %edx,%eax
f011898f:	48                   	dec    %eax
f0118990:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118996:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011899c:	ba 00 00 00 00       	mov    $0x0,%edx
f01189a1:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01189a7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01189ad:	29 d0                	sub    %edx,%eax
f01189af:	01 d8                	add    %ebx,%eax
f01189b1:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01189b6:	39 c1                	cmp    %eax,%ecx
f01189b8:	74 17                	je     f01189d1 <test_kmalloc+0xadd>
f01189ba:	83 ec 04             	sub    $0x4,%esp
f01189bd:	68 20 b6 13 f0       	push   $0xf013b620
f01189c2:	68 81 00 00 00       	push   $0x81
f01189c7:	68 3a b5 13 f0       	push   $0xf013b53a
f01189cc:	e8 34 78 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189d1:	e8 d9 b3 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01189d6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01189d9:	74 17                	je     f01189f2 <test_kmalloc+0xafe>
f01189db:	83 ec 04             	sub    $0x4,%esp
f01189de:	68 54 b5 13 f0       	push   $0xf013b554
f01189e3:	68 82 00 00 00       	push   $0x82
f01189e8:	68 3a b5 13 f0       	push   $0xf013b53a
f01189ed:	e8 13 78 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01189f2:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01189f5:	e8 b7 47 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01189fa:	29 c3                	sub    %eax,%ebx
f01189fc:	89 d8                	mov    %ebx,%eax
f01189fe:	83 f8 04             	cmp    $0x4,%eax
f0118a01:	74 17                	je     f0118a1a <test_kmalloc+0xb26>
f0118a03:	83 ec 04             	sub    $0x4,%esp
f0118a06:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118a0b:	68 83 00 00 00       	push   $0x83
f0118a10:	68 3a b5 13 f0       	push   $0xf013b53a
f0118a15:	e8 eb 77 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b50%");
f0118a1a:	83 ec 0c             	sub    $0xc,%esp
f0118a1d:	68 86 b6 13 f0       	push   $0xf013b686
f0118a22:	e8 e7 82 fe ff       	call   f0100d0e <cprintf>
f0118a27:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f0118a2a:	e8 82 47 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0118a2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0118a32:	e8 78 b3 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118a37:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118a3a:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0118a41:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0118a44:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118a4a:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f0118a50:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118a56:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118a59:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f0118a5b:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118a61:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118a67:	01 c2                	add    %eax,%edx
f0118a69:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118a6c:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f0118a6e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118a74:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118a7a:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f0118a81:	fd 0f 00 
			shortArr[0] = minShort;
f0118a84:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f0118a8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a8d:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f0118a90:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118a96:	01 c0                	add    %eax,%eax
f0118a98:	89 c2                	mov    %eax,%edx
f0118a9a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118aa0:	01 c2                	add    %eax,%edx
f0118aa2:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118aa6:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f0118aa9:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118aaf:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f0118ab5:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0118abc:	01 00 00 
			intArr[0] = minInt;
f0118abf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118ac5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118ac8:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118aca:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118ad0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118ad7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118add:	01 c2                	add    %eax,%edx
f0118adf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118ae2:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0118ae4:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118aea:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118af0:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f0118af7:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118afa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b00:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118b03:	88 10                	mov    %dl,(%eax)
f0118b05:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0118b0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118b0e:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118b12:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b18:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0118b1b:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118b1e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b24:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b2b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b31:	01 c2                	add    %eax,%edx
f0118b33:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118b36:	88 02                	mov    %al,(%edx)
f0118b38:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b3e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b45:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b4b:	01 c2                	add    %eax,%edx
f0118b4d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118b51:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118b55:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118b5b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118b62:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118b68:	01 c2                	add    %eax,%edx
f0118b6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118b6d:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f0118b70:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f0118b77:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f0118b7a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118b80:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f0118b86:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118b8c:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0118b8f:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f0118b91:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118b97:	89 c2                	mov    %eax,%edx
f0118b99:	c1 ea 1f             	shr    $0x1f,%edx
f0118b9c:	01 d0                	add    %edx,%eax
f0118b9e:	d1 f8                	sar    %eax
f0118ba0:	89 c2                	mov    %eax,%edx
f0118ba2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118ba8:	01 c2                	add    %eax,%edx
f0118baa:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118bad:	88 c1                	mov    %al,%cl
f0118baf:	c0 e9 07             	shr    $0x7,%cl
f0118bb2:	01 c8                	add    %ecx,%eax
f0118bb4:	d0 f8                	sar    %al
f0118bb6:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f0118bb8:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118bbe:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118bc4:	01 c2                	add    %eax,%edx
f0118bc6:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118bc9:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0118bcb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118bd1:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118bd7:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0118bde:	1b 00 00 
			shortArr2[0] = minShort;
f0118be1:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f0118be7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118bea:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0118bed:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118bf3:	01 c0                	add    %eax,%eax
f0118bf5:	89 c2                	mov    %eax,%edx
f0118bf7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118bfd:	01 c2                	add    %eax,%edx
f0118bff:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0118c03:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118c06:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c0c:	8a 00                	mov    (%eax),%al
f0118c0e:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118c11:	75 15                	jne    f0118c28 <test_kmalloc+0xd34>
f0118c13:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f0118c19:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0118c1f:	01 d0                	add    %edx,%eax
f0118c21:	8a 00                	mov    (%eax),%al
f0118c23:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118c26:	74 17                	je     f0118c3f <test_kmalloc+0xd4b>
f0118c28:	83 ec 04             	sub    $0x4,%esp
f0118c2b:	68 90 b6 13 f0       	push   $0xf013b690
f0118c30:	68 b2 00 00 00       	push   $0xb2
f0118c35:	68 3a b5 13 f0       	push   $0xf013b53a
f0118c3a:	e8 c6 75 fe ff       	call   f0100205 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118c3f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c45:	66 8b 00             	mov    (%eax),%ax
f0118c48:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118c4c:	75 1b                	jne    f0118c69 <test_kmalloc+0xd75>
f0118c4e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0118c54:	01 c0                	add    %eax,%eax
f0118c56:	89 c2                	mov    %eax,%edx
f0118c58:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0118c5e:	01 d0                	add    %edx,%eax
f0118c60:	66 8b 00             	mov    (%eax),%ax
f0118c63:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118c67:	74 17                	je     f0118c80 <test_kmalloc+0xd8c>
f0118c69:	83 ec 04             	sub    $0x4,%esp
f0118c6c:	68 90 b6 13 f0       	push   $0xf013b690
f0118c71:	68 b3 00 00 00       	push   $0xb3
f0118c76:	68 3a b5 13 f0       	push   $0xf013b53a
f0118c7b:	e8 85 75 fe ff       	call   f0100205 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f0118c80:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118c86:	8b 00                	mov    (%eax),%eax
f0118c88:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118c8b:	75 1c                	jne    f0118ca9 <test_kmalloc+0xdb5>
f0118c8d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0118c93:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118c9a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0118ca0:	01 d0                	add    %edx,%eax
f0118ca2:	8b 00                	mov    (%eax),%eax
f0118ca4:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118ca7:	74 17                	je     f0118cc0 <test_kmalloc+0xdcc>
f0118ca9:	83 ec 04             	sub    $0x4,%esp
f0118cac:	68 90 b6 13 f0       	push   $0xf013b690
f0118cb1:	68 b4 00 00 00       	push   $0xb4
f0118cb6:	68 3a b5 13 f0       	push   $0xf013b53a
f0118cbb:	e8 45 75 fe ff       	call   f0100205 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118cc0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118cc6:	8a 00                	mov    (%eax),%al
f0118cc8:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118ccb:	75 1c                	jne    f0118ce9 <test_kmalloc+0xdf5>
f0118ccd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118cd3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118cda:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118ce0:	01 d0                	add    %edx,%eax
f0118ce2:	8a 00                	mov    (%eax),%al
f0118ce4:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118ce7:	74 17                	je     f0118d00 <test_kmalloc+0xe0c>
f0118ce9:	83 ec 04             	sub    $0x4,%esp
f0118cec:	68 90 b6 13 f0       	push   $0xf013b690
f0118cf1:	68 b6 00 00 00       	push   $0xb6
f0118cf6:	68 3a b5 13 f0       	push   $0xf013b53a
f0118cfb:	e8 05 75 fe ff       	call   f0100205 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118d00:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d06:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118d0a:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118d0e:	75 1f                	jne    f0118d2f <test_kmalloc+0xe3b>
f0118d10:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d16:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118d1d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d23:	01 d0                	add    %edx,%eax
f0118d25:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118d29:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118d2d:	74 17                	je     f0118d46 <test_kmalloc+0xe52>
f0118d2f:	83 ec 04             	sub    $0x4,%esp
f0118d32:	68 90 b6 13 f0       	push   $0xf013b690
f0118d37:	68 b7 00 00 00       	push   $0xb7
f0118d3c:	68 3a b5 13 f0       	push   $0xf013b53a
f0118d41:	e8 bf 74 fe ff       	call   f0100205 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f0118d46:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d4c:	8b 40 04             	mov    0x4(%eax),%eax
f0118d4f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0118d52:	75 1d                	jne    f0118d71 <test_kmalloc+0xe7d>
f0118d54:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0118d5a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118d61:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118d67:	01 d0                	add    %edx,%eax
f0118d69:	8b 40 04             	mov    0x4(%eax),%eax
f0118d6c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118d6f:	74 17                	je     f0118d88 <test_kmalloc+0xe94>
f0118d71:	83 ec 04             	sub    $0x4,%esp
f0118d74:	68 90 b6 13 f0       	push   $0xf013b690
f0118d79:	68 b8 00 00 00       	push   $0xb8
f0118d7e:	68 3a b5 13 f0       	push   $0xf013b53a
f0118d83:	e8 7d 74 fe ff       	call   f0100205 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f0118d88:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118d8e:	8a 00                	mov    (%eax),%al
f0118d90:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0118d93:	75 40                	jne    f0118dd5 <test_kmalloc+0xee1>
f0118d95:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0118d9b:	89 c2                	mov    %eax,%edx
f0118d9d:	c1 ea 1f             	shr    $0x1f,%edx
f0118da0:	01 d0                	add    %edx,%eax
f0118da2:	d1 f8                	sar    %eax
f0118da4:	89 c2                	mov    %eax,%edx
f0118da6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118dac:	01 d0                	add    %edx,%eax
f0118dae:	8a 10                	mov    (%eax),%dl
f0118db0:	8a 45 f2             	mov    -0xe(%ebp),%al
f0118db3:	88 c1                	mov    %al,%cl
f0118db5:	c0 e9 07             	shr    $0x7,%cl
f0118db8:	01 c8                	add    %ecx,%eax
f0118dba:	d0 f8                	sar    %al
f0118dbc:	38 c2                	cmp    %al,%dl
f0118dbe:	75 15                	jne    f0118dd5 <test_kmalloc+0xee1>
f0118dc0:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0118dc6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0118dcc:	01 d0                	add    %edx,%eax
f0118dce:	8a 00                	mov    (%eax),%al
f0118dd0:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0118dd3:	74 17                	je     f0118dec <test_kmalloc+0xef8>
f0118dd5:	83 ec 04             	sub    $0x4,%esp
f0118dd8:	68 90 b6 13 f0       	push   $0xf013b690
f0118ddd:	68 ba 00 00 00       	push   $0xba
f0118de2:	68 3a b5 13 f0       	push   $0xf013b53a
f0118de7:	e8 19 74 fe ff       	call   f0100205 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0118dec:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118df2:	66 8b 00             	mov    (%eax),%ax
f0118df5:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0118df9:	75 1b                	jne    f0118e16 <test_kmalloc+0xf22>
f0118dfb:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0118e01:	01 c0                	add    %eax,%eax
f0118e03:	89 c2                	mov    %eax,%edx
f0118e05:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0118e0b:	01 d0                	add    %edx,%eax
f0118e0d:	66 8b 00             	mov    (%eax),%ax
f0118e10:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0118e14:	74 17                	je     f0118e2d <test_kmalloc+0xf39>
f0118e16:	83 ec 04             	sub    $0x4,%esp
f0118e19:	68 90 b6 13 f0       	push   $0xf013b690
f0118e1e:	68 bb 00 00 00       	push   $0xbb
f0118e23:	68 3a b5 13 f0       	push   $0xf013b53a
f0118e28:	e8 d8 73 fe ff       	call   f0100205 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118e2d:	e8 7f 43 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0118e32:	89 c2                	mov    %eax,%edx
f0118e34:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e37:	39 c2                	cmp    %eax,%edx
f0118e39:	74 17                	je     f0118e52 <test_kmalloc+0xf5e>
f0118e3b:	83 ec 04             	sub    $0x4,%esp
f0118e3e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118e43:	68 bd 00 00 00       	push   $0xbd
f0118e48:	68 3a b5 13 f0       	push   $0xf013b53a
f0118e4d:	e8 b3 73 fe ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e52:	e8 58 af fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118e57:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118e5a:	74 17                	je     f0118e73 <test_kmalloc+0xf7f>
f0118e5c:	83 ec 04             	sub    $0x4,%esp
f0118e5f:	68 54 b5 13 f0       	push   $0xf013b554
f0118e64:	68 be 00 00 00       	push   $0xbe
f0118e69:	68 3a b5 13 f0       	push   $0xf013b53a
f0118e6e:	e8 92 73 fe ff       	call   f0100205 <_panic>
		}

		cprintf("\b\b\b80%");
f0118e73:	83 ec 0c             	sub    $0xc,%esp
f0118e76:	68 c5 b6 13 f0       	push   $0xf013b6c5
f0118e7b:	e8 8e 7e fe ff       	call   f0100d0e <cprintf>
f0118e80:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0118e83:	e8 29 43 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0118e88:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e8b:	e8 1f af fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118e90:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118e93:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0118e9a:	10 00 00 
f0118e9d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0118ea3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118ea8:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0118eae:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118eb4:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eb9:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0118ebf:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0118ec5:	29 d0                	sub    %edx,%eax
f0118ec7:	89 c1                	mov    %eax,%ecx
f0118ec9:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0118ed0:	10 00 00 
f0118ed3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0118ed8:	0f b6 d0             	movzbl %al,%edx
f0118edb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0118ee1:	01 d0                	add    %edx,%eax
f0118ee3:	48                   	dec    %eax
f0118ee4:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0118eea:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118ef0:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ef5:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0118efb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118f01:	29 d0                	sub    %edx,%eax
f0118f03:	01 c1                	add    %eax,%ecx
f0118f05:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0118f0c:	10 00 00 
f0118f0f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0118f14:	0f b6 c0             	movzbl %al,%eax
f0118f17:	c1 e0 04             	shl    $0x4,%eax
f0118f1a:	89 c2                	mov    %eax,%edx
f0118f1c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118f22:	01 d0                	add    %edx,%eax
f0118f24:	48                   	dec    %eax
f0118f25:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0118f2b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f31:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f36:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0118f3c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118f42:	29 d0                	sub    %edx,%eax
f0118f44:	01 c8                	add    %ecx,%eax
f0118f46:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0118f4b:	29 c2                	sub    %eax,%edx
f0118f4d:	89 d0                	mov    %edx,%eax
f0118f4f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118f55:	83 ec 0c             	sub    $0xc,%esp
f0118f58:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0118f5e:	e8 01 ec fe ff       	call   f0107b64 <kmalloc>
f0118f63:	83 c4 10             	add    $0x10,%esp
f0118f66:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0118f6c:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118f72:	85 c0                	test   %eax,%eax
f0118f74:	74 17                	je     f0118f8d <test_kmalloc+0x1099>
f0118f76:	83 ec 04             	sub    $0x4,%esp
f0118f79:	68 08 b5 13 f0       	push   $0xf013b508
f0118f7e:	68 c8 00 00 00       	push   $0xc8
f0118f83:	68 3a b5 13 f0       	push   $0xf013b53a
f0118f88:	e8 78 72 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f8d:	e8 1d ae fe ff       	call   f0103daf <pf_calculate_free_frames>
f0118f92:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0118f95:	74 17                	je     f0118fae <test_kmalloc+0x10ba>
f0118f97:	83 ec 04             	sub    $0x4,%esp
f0118f9a:	68 54 b5 13 f0       	push   $0xf013b554
f0118f9f:	68 c9 00 00 00       	push   $0xc9
f0118fa4:	68 3a b5 13 f0       	push   $0xf013b53a
f0118fa9:	e8 57 72 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118fae:	e8 fe 41 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0118fb3:	89 c2                	mov    %eax,%edx
f0118fb5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118fb8:	39 c2                	cmp    %eax,%edx
f0118fba:	74 17                	je     f0118fd3 <test_kmalloc+0x10df>
f0118fbc:	83 ec 04             	sub    $0x4,%esp
f0118fbf:	68 bc b5 13 f0       	push   $0xf013b5bc
f0118fc4:	68 ca 00 00 00       	push   $0xca
f0118fc9:	68 3a b5 13 f0       	push   $0xf013b53a
f0118fce:	e8 32 72 fe ff       	call   f0100205 <_panic>

		cprintf("\b\b\b90%");
f0118fd3:	83 ec 0c             	sub    $0xc,%esp
f0118fd6:	68 cc b6 13 f0       	push   $0xf013b6cc
f0118fdb:	e8 2e 7d fe ff       	call   f0100d0e <cprintf>
f0118fe0:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118fe3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118fe9:	05 00 40 00 00       	add    $0x4000,%eax
f0118fee:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118ff4:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0118ffb:	10 00 00 
f0118ffe:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119004:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119009:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011900f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119015:	ba 00 00 00 00       	mov    $0x0,%edx
f011901a:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0119020:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119026:	29 d0                	sub    %edx,%eax
f0119028:	89 c1                	mov    %eax,%ecx
f011902a:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0119031:	10 00 00 
f0119034:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119039:	0f b6 d0             	movzbl %al,%edx
f011903c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119042:	01 d0                	add    %edx,%eax
f0119044:	48                   	dec    %eax
f0119045:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011904b:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119051:	ba 00 00 00 00       	mov    $0x0,%edx
f0119056:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011905c:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119062:	29 d0                	sub    %edx,%eax
f0119064:	01 c1                	add    %eax,%ecx
f0119066:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011906d:	10 00 00 
f0119070:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119075:	0f b6 c0             	movzbl %al,%eax
f0119078:	c1 e0 04             	shl    $0x4,%eax
f011907b:	89 c2                	mov    %eax,%edx
f011907d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119083:	01 d0                	add    %edx,%eax
f0119085:	48                   	dec    %eax
f0119086:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011908c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119092:	ba 00 00 00 00       	mov    $0x0,%edx
f0119097:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011909d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f01190a3:	29 d0                	sub    %edx,%eax
f01190a5:	01 c8                	add    %ecx,%eax
f01190a7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01190ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01190af:	eb 6a                	jmp    f011911b <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f01190b1:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01190b6:	83 ec 04             	sub    $0x4,%esp
f01190b9:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f01190bf:	52                   	push   %edx
f01190c0:	ff 75 f4             	pushl  -0xc(%ebp)
f01190c3:	50                   	push   %eax
f01190c4:	e8 cf d9 fe ff       	call   f0106a98 <get_page_table>
f01190c9:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f01190cc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01190d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01190d5:	c1 ea 0c             	shr    $0xc,%edx
f01190d8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01190de:	c1 e2 02             	shl    $0x2,%edx
f01190e1:	01 d0                	add    %edx,%eax
f01190e3:	8b 00                	mov    (%eax),%eax
f01190e5:	25 ff 0f 00 00       	and    $0xfff,%eax
f01190ea:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f01190f0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f01190f6:	83 e0 04             	and    $0x4,%eax
f01190f9:	85 c0                	test   %eax,%eax
f01190fb:	74 17                	je     f0119114 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f01190fd:	83 ec 04             	sub    $0x4,%esp
f0119100:	68 d4 b6 13 f0       	push   $0xf013b6d4
f0119105:	68 d7 00 00 00       	push   $0xd7
f011910a:	68 3a b5 13 f0       	push   $0xf013b53a
f011910f:	e8 f1 70 fe ff       	call   f0100205 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119114:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011911b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011911e:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0119124:	72 8b                	jb     f01190b1 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0119126:	83 ec 0c             	sub    $0xc,%esp
f0119129:	68 1e b7 13 f0       	push   $0xf013b71e
f011912e:	e8 db 7b fe ff       	call   f0100d0e <cprintf>
f0119133:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0119136:	83 ec 0c             	sub    $0xc,%esp
f0119139:	68 28 b7 13 f0       	push   $0xf013b728
f011913e:	e8 cb 7b fe ff       	call   f0100d0e <cprintf>
f0119143:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119146:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011914b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011914e:	5b                   	pop    %ebx
f011914f:	5f                   	pop    %edi
f0119150:	5d                   	pop    %ebp
f0119151:	c3                   	ret    

f0119152 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0119152:	55                   	push   %ebp
f0119153:	89 e5                	mov    %esp,%ebp
f0119155:	57                   	push   %edi
f0119156:	53                   	push   %ebx
f0119157:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f011915d:	83 ec 0c             	sub    $0xc,%esp
f0119160:	68 7c b4 13 f0       	push   $0xf013b47c
f0119165:	e8 a4 7b fe ff       	call   f0100d0e <cprintf>
f011916a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011916d:	83 ec 0c             	sub    $0xc,%esp
f0119170:	68 ac b4 13 f0       	push   $0xf013b4ac
f0119175:	e8 94 7b fe ff       	call   f0100d0e <cprintf>
f011917a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011917d:	83 ec 0c             	sub    $0xc,%esp
f0119180:	68 7c b4 13 f0       	push   $0xf013b47c
f0119185:	e8 84 7b fe ff       	call   f0100d0e <cprintf>
f011918a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011918d:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0119193:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0119198:	b8 00 00 00 00       	mov    $0x0,%eax
f011919d:	89 d7                	mov    %edx,%edi
f011919f:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f01191a1:	83 ec 0c             	sub    $0xc,%esp
f01191a4:	68 64 b7 13 f0       	push   $0xf013b764
f01191a9:	e8 60 7b fe ff       	call   f0100d0e <cprintf>
f01191ae:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f01191b1:	e8 fb 3f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f01191b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f01191b9:	e8 f1 ab fe ff       	call   f0103daf <pf_calculate_free_frames>
f01191be:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01191c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01191c8:	eb 1f                	jmp    f01191e9 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f01191ca:	83 ec 0c             	sub    $0xc,%esp
f01191cd:	68 00 00 20 00       	push   $0x200000
f01191d2:	e8 8d e9 fe ff       	call   f0107b64 <kmalloc>
f01191d7:	83 c4 10             	add    $0x10,%esp
f01191da:	89 c2                	mov    %eax,%edx
f01191dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01191df:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f01191e6:	ff 45 f4             	incl   -0xc(%ebp)
f01191e9:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01191ed:	7e db                	jle    f01191ca <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f01191ef:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f01191f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01191f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01191fe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119201:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119204:	ba 00 00 00 00       	mov    $0x0,%edx
f0119209:	f7 75 e8             	divl   -0x18(%ebp)
f011920c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011920f:	29 d0                	sub    %edx,%eax
f0119211:	89 c1                	mov    %eax,%ecx
f0119213:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f011921a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011921f:	0f b6 d0             	movzbl %al,%edx
f0119222:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119225:	01 d0                	add    %edx,%eax
f0119227:	48                   	dec    %eax
f0119228:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011922b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011922e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119233:	f7 75 e0             	divl   -0x20(%ebp)
f0119236:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119239:	29 d0                	sub    %edx,%eax
f011923b:	01 c1                	add    %eax,%ecx
f011923d:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0119244:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119249:	0f b6 c0             	movzbl %al,%eax
f011924c:	c1 e0 04             	shl    $0x4,%eax
f011924f:	89 c2                	mov    %eax,%edx
f0119251:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119254:	01 d0                	add    %edx,%eax
f0119256:	48                   	dec    %eax
f0119257:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011925a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011925d:	ba 00 00 00 00       	mov    $0x0,%edx
f0119262:	f7 75 d8             	divl   -0x28(%ebp)
f0119265:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119268:	29 d0                	sub    %edx,%eax
f011926a:	01 c8                	add    %ecx,%eax
f011926c:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0119271:	29 c2                	sub    %eax,%edx
f0119273:	89 d0                	mov    %edx,%eax
f0119275:	83 ec 0c             	sub    $0xc,%esp
f0119278:	50                   	push   %eax
f0119279:	e8 e6 e8 fe ff       	call   f0107b64 <kmalloc>
f011927e:	83 c4 10             	add    $0x10,%esp
f0119281:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0119287:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011928d:	89 c1                	mov    %eax,%ecx
f011928f:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0119296:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119299:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011929e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01192a1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01192a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01192a9:	f7 75 d0             	divl   -0x30(%ebp)
f01192ac:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01192af:	29 d0                	sub    %edx,%eax
f01192b1:	89 c3                	mov    %eax,%ebx
f01192b3:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01192ba:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01192bf:	0f b6 d0             	movzbl %al,%edx
f01192c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01192c5:	01 d0                	add    %edx,%eax
f01192c7:	48                   	dec    %eax
f01192c8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01192cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01192ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01192d3:	f7 75 c8             	divl   -0x38(%ebp)
f01192d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01192d9:	29 d0                	sub    %edx,%eax
f01192db:	01 c3                	add    %eax,%ebx
f01192dd:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01192e4:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01192e9:	0f b6 c0             	movzbl %al,%eax
f01192ec:	c1 e0 04             	shl    $0x4,%eax
f01192ef:	89 c2                	mov    %eax,%edx
f01192f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01192f4:	01 d0                	add    %edx,%eax
f01192f6:	48                   	dec    %eax
f01192f7:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01192fa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01192fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0119302:	f7 75 c0             	divl   -0x40(%ebp)
f0119305:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119308:	29 d0                	sub    %edx,%eax
f011930a:	01 d8                	add    %ebx,%eax
f011930c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0119311:	39 c1                	cmp    %eax,%ecx
f0119313:	0f 85 ed 04 00 00    	jne    f0119806 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119319:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011931f:	89 c1                	mov    %eax,%ecx
f0119321:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0119328:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011932b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119330:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0119333:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119336:	ba 00 00 00 00       	mov    $0x0,%edx
f011933b:	f7 75 b8             	divl   -0x48(%ebp)
f011933e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119341:	29 d0                	sub    %edx,%eax
f0119343:	89 c3                	mov    %eax,%ebx
f0119345:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011934c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119351:	0f b6 d0             	movzbl %al,%edx
f0119354:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119357:	01 d0                	add    %edx,%eax
f0119359:	48                   	dec    %eax
f011935a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011935d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119360:	ba 00 00 00 00       	mov    $0x0,%edx
f0119365:	f7 75 b0             	divl   -0x50(%ebp)
f0119368:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011936b:	29 d0                	sub    %edx,%eax
f011936d:	01 c3                	add    %eax,%ebx
f011936f:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0119376:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011937b:	0f b6 c0             	movzbl %al,%eax
f011937e:	c1 e0 04             	shl    $0x4,%eax
f0119381:	89 c2                	mov    %eax,%edx
f0119383:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119386:	01 d0                	add    %edx,%eax
f0119388:	48                   	dec    %eax
f0119389:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011938c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011938f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119394:	f7 75 a8             	divl   -0x58(%ebp)
f0119397:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011939a:	29 d0                	sub    %edx,%eax
f011939c:	01 d8                	add    %ebx,%eax
f011939e:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01193a3:	39 c1                	cmp    %eax,%ecx
f01193a5:	0f 85 5b 04 00 00    	jne    f0119806 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01193ab:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f01193b1:	89 c1                	mov    %eax,%ecx
f01193b3:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01193ba:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01193bd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01193c2:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01193c5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01193c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01193cd:	f7 75 a0             	divl   -0x60(%ebp)
f01193d0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01193d3:	29 d0                	sub    %edx,%eax
f01193d5:	89 c3                	mov    %eax,%ebx
f01193d7:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01193de:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01193e3:	0f b6 d0             	movzbl %al,%edx
f01193e6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01193e9:	01 d0                	add    %edx,%eax
f01193eb:	48                   	dec    %eax
f01193ec:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01193ef:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01193f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01193f7:	f7 75 98             	divl   -0x68(%ebp)
f01193fa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01193fd:	29 d0                	sub    %edx,%eax
f01193ff:	01 c3                	add    %eax,%ebx
f0119401:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0119408:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011940d:	0f b6 c0             	movzbl %al,%eax
f0119410:	c1 e0 04             	shl    $0x4,%eax
f0119413:	89 c2                	mov    %eax,%edx
f0119415:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119418:	01 d0                	add    %edx,%eax
f011941a:	48                   	dec    %eax
f011941b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011941e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119421:	ba 00 00 00 00       	mov    $0x0,%edx
f0119426:	f7 75 90             	divl   -0x70(%ebp)
f0119429:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011942c:	29 d0                	sub    %edx,%eax
f011942e:	01 d8                	add    %ebx,%eax
f0119430:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0119435:	39 c1                	cmp    %eax,%ecx
f0119437:	0f 85 c9 03 00 00    	jne    f0119806 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011943d:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119443:	89 c1                	mov    %eax,%ecx
f0119445:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011944c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011944f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119454:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0119457:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011945a:	ba 00 00 00 00       	mov    $0x0,%edx
f011945f:	f7 75 88             	divl   -0x78(%ebp)
f0119462:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119465:	29 d0                	sub    %edx,%eax
f0119467:	89 c3                	mov    %eax,%ebx
f0119469:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0119470:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119475:	0f b6 d0             	movzbl %al,%edx
f0119478:	8b 45 80             	mov    -0x80(%ebp),%eax
f011947b:	01 d0                	add    %edx,%eax
f011947d:	48                   	dec    %eax
f011947e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0119484:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011948a:	ba 00 00 00 00       	mov    $0x0,%edx
f011948f:	f7 75 80             	divl   -0x80(%ebp)
f0119492:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119498:	29 d0                	sub    %edx,%eax
f011949a:	01 c3                	add    %eax,%ebx
f011949c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01194a3:	10 00 00 
f01194a6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01194ab:	0f b6 c0             	movzbl %al,%eax
f01194ae:	c1 e0 04             	shl    $0x4,%eax
f01194b1:	89 c2                	mov    %eax,%edx
f01194b3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01194b9:	01 d0                	add    %edx,%eax
f01194bb:	48                   	dec    %eax
f01194bc:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01194c2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01194c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01194cd:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01194d3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01194d9:	29 d0                	sub    %edx,%eax
f01194db:	01 d8                	add    %ebx,%eax
f01194dd:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01194e2:	39 c1                	cmp    %eax,%ecx
f01194e4:	0f 85 1c 03 00 00    	jne    f0119806 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01194ea:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f01194f0:	89 c1                	mov    %eax,%ecx
f01194f2:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01194f9:	10 00 00 
f01194fc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119502:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119507:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f011950d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119513:	ba 00 00 00 00       	mov    $0x0,%edx
f0119518:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f011951e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119524:	29 d0                	sub    %edx,%eax
f0119526:	89 c3                	mov    %eax,%ebx
f0119528:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f011952f:	10 00 00 
f0119532:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119537:	0f b6 d0             	movzbl %al,%edx
f011953a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119540:	01 d0                	add    %edx,%eax
f0119542:	48                   	dec    %eax
f0119543:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0119549:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011954f:	ba 00 00 00 00       	mov    $0x0,%edx
f0119554:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f011955a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119560:	29 d0                	sub    %edx,%eax
f0119562:	01 c3                	add    %eax,%ebx
f0119564:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f011956b:	10 00 00 
f011956e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119573:	0f b6 c0             	movzbl %al,%eax
f0119576:	c1 e0 04             	shl    $0x4,%eax
f0119579:	89 c2                	mov    %eax,%edx
f011957b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119581:	01 d0                	add    %edx,%eax
f0119583:	48                   	dec    %eax
f0119584:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f011958a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119590:	ba 00 00 00 00       	mov    $0x0,%edx
f0119595:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f011959b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01195a1:	29 d0                	sub    %edx,%eax
f01195a3:	01 d8                	add    %ebx,%eax
f01195a5:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01195aa:	39 c1                	cmp    %eax,%ecx
f01195ac:	0f 85 54 02 00 00    	jne    f0119806 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f01195b2:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01195b8:	89 c1                	mov    %eax,%ecx
f01195ba:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01195c1:	10 00 00 
f01195c4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01195ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01195cf:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01195d5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195db:	ba 00 00 00 00       	mov    $0x0,%edx
f01195e0:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01195e6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01195ec:	29 d0                	sub    %edx,%eax
f01195ee:	89 c3                	mov    %eax,%ebx
f01195f0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01195f7:	10 00 00 
f01195fa:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01195ff:	0f b6 d0             	movzbl %al,%edx
f0119602:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119608:	01 d0                	add    %edx,%eax
f011960a:	48                   	dec    %eax
f011960b:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0119611:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119617:	ba 00 00 00 00       	mov    $0x0,%edx
f011961c:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0119622:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119628:	29 d0                	sub    %edx,%eax
f011962a:	01 c3                	add    %eax,%ebx
f011962c:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0119633:	10 00 00 
f0119636:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011963b:	0f b6 c0             	movzbl %al,%eax
f011963e:	c1 e0 04             	shl    $0x4,%eax
f0119641:	89 c2                	mov    %eax,%edx
f0119643:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119649:	01 d0                	add    %edx,%eax
f011964b:	48                   	dec    %eax
f011964c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0119652:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119658:	ba 00 00 00 00       	mov    $0x0,%edx
f011965d:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0119663:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119669:	29 d0                	sub    %edx,%eax
f011966b:	01 d8                	add    %ebx,%eax
f011966d:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f0119672:	39 c1                	cmp    %eax,%ecx
f0119674:	0f 85 8c 01 00 00    	jne    f0119806 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f011967a:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f0119680:	89 c1                	mov    %eax,%ecx
f0119682:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0119689:	10 00 00 
f011968c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119692:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119697:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011969d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01196a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01196a8:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01196ae:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01196b4:	29 d0                	sub    %edx,%eax
f01196b6:	89 c3                	mov    %eax,%ebx
f01196b8:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01196bf:	10 00 00 
f01196c2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01196c7:	0f b6 d0             	movzbl %al,%edx
f01196ca:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01196d0:	01 d0                	add    %edx,%eax
f01196d2:	48                   	dec    %eax
f01196d3:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01196d9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01196df:	ba 00 00 00 00       	mov    $0x0,%edx
f01196e4:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01196ea:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01196f0:	29 d0                	sub    %edx,%eax
f01196f2:	01 c3                	add    %eax,%ebx
f01196f4:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01196fb:	10 00 00 
f01196fe:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119703:	0f b6 c0             	movzbl %al,%eax
f0119706:	c1 e0 04             	shl    $0x4,%eax
f0119709:	89 c2                	mov    %eax,%edx
f011970b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119711:	01 d0                	add    %edx,%eax
f0119713:	48                   	dec    %eax
f0119714:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011971a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119720:	ba 00 00 00 00       	mov    $0x0,%edx
f0119725:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f011972b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119731:	29 d0                	sub    %edx,%eax
f0119733:	01 d8                	add    %ebx,%eax
f0119735:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011973a:	39 c1                	cmp    %eax,%ecx
f011973c:	0f 85 c4 00 00 00    	jne    f0119806 <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0119742:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0119748:	89 c1                	mov    %eax,%ecx
f011974a:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0119751:	10 00 00 
f0119754:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011975a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011975f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0119765:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011976b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119770:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0119776:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011977c:	29 d0                	sub    %edx,%eax
f011977e:	89 c3                	mov    %eax,%ebx
f0119780:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0119787:	10 00 00 
f011978a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011978f:	0f b6 d0             	movzbl %al,%edx
f0119792:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0119798:	01 d0                	add    %edx,%eax
f011979a:	48                   	dec    %eax
f011979b:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01197a1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01197a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01197ac:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01197b2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01197b8:	29 d0                	sub    %edx,%eax
f01197ba:	01 c3                	add    %eax,%ebx
f01197bc:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01197c3:	10 00 00 
f01197c6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01197cb:	0f b6 c0             	movzbl %al,%eax
f01197ce:	c1 e0 04             	shl    $0x4,%eax
f01197d1:	89 c2                	mov    %eax,%edx
f01197d3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01197d9:	01 d0                	add    %edx,%eax
f01197db:	48                   	dec    %eax
f01197dc:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01197e2:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01197e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01197ed:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01197f3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01197f9:	29 d0                	sub    %edx,%eax
f01197fb:	01 d8                	add    %ebx,%eax
f01197fd:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0119802:	39 c1                	cmp    %eax,%ecx
f0119804:	74 17                	je     f011981d <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f0119806:	83 ec 04             	sub    $0x4,%esp
f0119809:	68 b4 b7 13 f0       	push   $0xf013b7b4
f011980e:	68 03 01 00 00       	push   $0x103
f0119813:	68 3a b5 13 f0       	push   $0xf013b53a
f0119818:	e8 e8 69 fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011981d:	e8 8d a5 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119822:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119825:	74 17                	je     f011983e <test_kmalloc_nextfit+0x6ec>
f0119827:	83 ec 04             	sub    $0x4,%esp
f011982a:	68 54 b5 13 f0       	push   $0xf013b554
f011982f:	68 05 01 00 00       	push   $0x105
f0119834:	68 3a b5 13 f0       	push   $0xf013b53a
f0119839:	e8 c7 69 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f011983e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119841:	e8 6b 39 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119846:	29 c3                	sub    %eax,%ebx
f0119848:	89 d9                	mov    %ebx,%ecx
f011984a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0119851:	10 00 00 
f0119854:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011985a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011985f:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0119865:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011986b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119870:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0119876:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011987c:	29 d0                	sub    %edx,%eax
f011987e:	89 c3                	mov    %eax,%ebx
f0119880:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0119887:	10 00 00 
f011988a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011988f:	0f b6 d0             	movzbl %al,%edx
f0119892:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119898:	01 d0                	add    %edx,%eax
f011989a:	48                   	dec    %eax
f011989b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01198a1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01198a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01198ac:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01198b2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01198b8:	29 d0                	sub    %edx,%eax
f01198ba:	01 c3                	add    %eax,%ebx
f01198bc:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01198c3:	10 00 00 
f01198c6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01198cb:	0f b6 c0             	movzbl %al,%eax
f01198ce:	c1 e0 04             	shl    $0x4,%eax
f01198d1:	89 c2                	mov    %eax,%edx
f01198d3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01198d9:	01 d0                	add    %edx,%eax
f01198db:	48                   	dec    %eax
f01198dc:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01198e2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01198e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01198ed:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01198f3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01198f9:	29 d0                	sub    %edx,%eax
f01198fb:	01 d8                	add    %ebx,%eax
f01198fd:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0119902:	29 c2                	sub    %eax,%edx
f0119904:	89 d0                	mov    %edx,%eax
f0119906:	c1 e8 0c             	shr    $0xc,%eax
f0119909:	39 c1                	cmp    %eax,%ecx
f011990b:	74 17                	je     f0119924 <test_kmalloc_nextfit+0x7d2>
f011990d:	83 ec 04             	sub    $0x4,%esp
f0119910:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119915:	68 06 01 00 00       	push   $0x106
f011991a:	68 3a b5 13 f0       	push   $0xf013b53a
f011991f:	e8 e1 68 fe ff       	call   f0100205 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0119924:	e8 86 a4 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119929:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011992c:	e8 80 38 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119931:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0119934:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011993a:	83 ec 0c             	sub    $0xc,%esp
f011993d:	50                   	push   %eax
f011993e:	e8 29 e3 fe ff       	call   f0107c6c <kfree>
f0119943:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f0119946:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f011994c:	83 ec 0c             	sub    $0xc,%esp
f011994f:	50                   	push   %eax
f0119950:	e8 17 e3 fe ff       	call   f0107c6c <kfree>
f0119955:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f0119958:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f011995e:	83 ec 0c             	sub    $0xc,%esp
f0119961:	50                   	push   %eax
f0119962:	e8 05 e3 fe ff       	call   f0107c6c <kfree>
f0119967:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f011996a:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f0119970:	83 ec 0c             	sub    $0xc,%esp
f0119973:	50                   	push   %eax
f0119974:	e8 f3 e2 fe ff       	call   f0107c6c <kfree>
f0119979:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f011997c:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0119982:	83 ec 0c             	sub    $0xc,%esp
f0119985:	50                   	push   %eax
f0119986:	e8 e1 e2 fe ff       	call   f0107c6c <kfree>
f011998b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011998e:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f0119994:	83 ec 0c             	sub    $0xc,%esp
f0119997:	50                   	push   %eax
f0119998:	e8 cf e2 fe ff       	call   f0107c6c <kfree>
f011999d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01199a0:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f01199a6:	83 ec 0c             	sub    $0xc,%esp
f01199a9:	50                   	push   %eax
f01199aa:	e8 bd e2 fe ff       	call   f0107c6c <kfree>
f01199af:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f01199b2:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f01199b8:	83 ec 0c             	sub    $0xc,%esp
f01199bb:	50                   	push   %eax
f01199bc:	e8 ab e2 fe ff       	call   f0107c6c <kfree>
f01199c1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f01199c4:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01199ca:	83 ec 0c             	sub    $0xc,%esp
f01199cd:	50                   	push   %eax
f01199ce:	e8 99 e2 fe ff       	call   f0107c6c <kfree>
f01199d3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f01199d6:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f01199dc:	83 ec 0c             	sub    $0xc,%esp
f01199df:	50                   	push   %eax
f01199e0:	e8 87 e2 fe ff       	call   f0107c6c <kfree>
f01199e5:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01199e8:	e8 c2 a3 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01199ed:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01199f0:	74 17                	je     f0119a09 <test_kmalloc_nextfit+0x8b7>
f01199f2:	83 ec 04             	sub    $0x4,%esp
f01199f5:	68 54 b5 13 f0       	push   $0xf013b554
f01199fa:	68 17 01 00 00       	push   $0x117
f01199ff:	68 3a b5 13 f0       	push   $0xf013b53a
f0119a04:	e8 fc 67 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0119a09:	e8 a3 37 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119a0e:	89 c2                	mov    %eax,%edx
f0119a10:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119a13:	89 d1                	mov    %edx,%ecx
f0119a15:	29 c1                	sub    %eax,%ecx
f0119a17:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0119a1e:	10 00 00 
f0119a21:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119a27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119a2c:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0119a32:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119a38:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a3d:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0119a43:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0119a49:	29 d0                	sub    %edx,%eax
f0119a4b:	89 c3                	mov    %eax,%ebx
f0119a4d:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0119a54:	10 00 00 
f0119a57:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119a5c:	0f b6 d0             	movzbl %al,%edx
f0119a5f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119a65:	01 d0                	add    %edx,%eax
f0119a67:	48                   	dec    %eax
f0119a68:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0119a6e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119a74:	ba 00 00 00 00       	mov    $0x0,%edx
f0119a79:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0119a7f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0119a85:	29 d0                	sub    %edx,%eax
f0119a87:	01 c3                	add    %eax,%ebx
f0119a89:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119a90:	10 00 00 
f0119a93:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119a98:	0f b6 c0             	movzbl %al,%eax
f0119a9b:	c1 e0 04             	shl    $0x4,%eax
f0119a9e:	89 c2                	mov    %eax,%edx
f0119aa0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0119aa6:	01 d0                	add    %edx,%eax
f0119aa8:	48                   	dec    %eax
f0119aa9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0119aaf:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119ab5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119aba:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0119ac0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0119ac6:	29 d0                	sub    %edx,%eax
f0119ac8:	01 d8                	add    %ebx,%eax
f0119aca:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0119acf:	29 c2                	sub    %eax,%edx
f0119ad1:	89 d0                	mov    %edx,%eax
f0119ad3:	c1 e8 0c             	shr    $0xc,%eax
f0119ad6:	39 c1                	cmp    %eax,%ecx
f0119ad8:	74 17                	je     f0119af1 <test_kmalloc_nextfit+0x99f>
f0119ada:	83 ec 04             	sub    $0x4,%esp
f0119add:	68 08 b8 13 f0       	push   $0xf013b808
f0119ae2:	68 18 01 00 00       	push   $0x118
f0119ae7:	68 3a b5 13 f0       	push   $0xf013b53a
f0119aec:	e8 14 67 fe ff       	call   f0100205 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0119af1:	e8 b9 a2 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119af6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119af9:	e8 b3 36 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119afe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0119b01:	83 ec 0c             	sub    $0xc,%esp
f0119b04:	68 00 fc 0f 00       	push   $0xffc00
f0119b09:	e8 56 e0 fe ff       	call   f0107b64 <kmalloc>
f0119b0e:	83 c4 10             	add    $0x10,%esp
f0119b11:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0119b17:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0119b1e:	10 00 00 
f0119b21:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0119b27:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119b2c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0119b32:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119b38:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b3d:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0119b43:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0119b49:	29 d0                	sub    %edx,%eax
f0119b4b:	89 c1                	mov    %eax,%ecx
f0119b4d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119b54:	10 00 00 
f0119b57:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119b5c:	0f b6 d0             	movzbl %al,%edx
f0119b5f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119b65:	01 d0                	add    %edx,%eax
f0119b67:	48                   	dec    %eax
f0119b68:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0119b6e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119b74:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b79:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0119b7f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119b85:	29 d0                	sub    %edx,%eax
f0119b87:	01 c1                	add    %eax,%ecx
f0119b89:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0119b90:	10 00 00 
f0119b93:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119b98:	0f b6 c0             	movzbl %al,%eax
f0119b9b:	c1 e0 04             	shl    $0x4,%eax
f0119b9e:	89 c2                	mov    %eax,%edx
f0119ba0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119ba6:	01 d0                	add    %edx,%eax
f0119ba8:	48                   	dec    %eax
f0119ba9:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0119baf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119bb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bba:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0119bc0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119bc6:	29 d0                	sub    %edx,%eax
f0119bc8:	01 c8                	add    %ecx,%eax
f0119bca:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0119bd0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119bd6:	39 c2                	cmp    %eax,%edx
f0119bd8:	74 17                	je     f0119bf1 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f0119bda:	83 ec 04             	sub    $0x4,%esp
f0119bdd:	68 48 b8 13 f0       	push   $0xf013b848
f0119be2:	68 1f 01 00 00       	push   $0x11f
f0119be7:	68 3a b5 13 f0       	push   $0xf013b53a
f0119bec:	e8 14 66 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119bf1:	e8 b9 a1 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119bf6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119bf9:	74 17                	je     f0119c12 <test_kmalloc_nextfit+0xac0>
f0119bfb:	83 ec 04             	sub    $0x4,%esp
f0119bfe:	68 54 b5 13 f0       	push   $0xf013b554
f0119c03:	68 20 01 00 00       	push   $0x120
f0119c08:	68 3a b5 13 f0       	push   $0xf013b53a
f0119c0d:	e8 f3 65 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119c12:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119c15:	e8 97 35 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119c1a:	29 c3                	sub    %eax,%ebx
f0119c1c:	89 d8                	mov    %ebx,%eax
f0119c1e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119c23:	74 17                	je     f0119c3c <test_kmalloc_nextfit+0xaea>
f0119c25:	83 ec 04             	sub    $0x4,%esp
f0119c28:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119c2d:	68 21 01 00 00       	push   $0x121
f0119c32:	68 3a b5 13 f0       	push   $0xf013b53a
f0119c37:	e8 c9 65 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119c3c:	e8 6e a1 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119c41:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119c44:	e8 68 35 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119c49:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f0119c4c:	83 ec 0c             	sub    $0xc,%esp
f0119c4f:	68 00 04 00 00       	push   $0x400
f0119c54:	e8 0b df fe ff       	call   f0107b64 <kmalloc>
f0119c59:	83 c4 10             	add    $0x10,%esp
f0119c5c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f0119c62:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0119c69:	10 00 00 
f0119c6c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0119c72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119c77:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0119c7d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119c83:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c88:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0119c8e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0119c94:	29 d0                	sub    %edx,%eax
f0119c96:	89 c1                	mov    %eax,%ecx
f0119c98:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0119c9f:	10 00 00 
f0119ca2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119ca7:	0f b6 d0             	movzbl %al,%edx
f0119caa:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0119cb0:	01 d0                	add    %edx,%eax
f0119cb2:	48                   	dec    %eax
f0119cb3:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0119cb9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119cbf:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cc4:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0119cca:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119cd0:	29 d0                	sub    %edx,%eax
f0119cd2:	01 c1                	add    %eax,%ecx
f0119cd4:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0119cdb:	10 00 00 
f0119cde:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119ce3:	0f b6 c0             	movzbl %al,%eax
f0119ce6:	c1 e0 04             	shl    $0x4,%eax
f0119ce9:	89 c2                	mov    %eax,%edx
f0119ceb:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119cf1:	01 d0                	add    %edx,%eax
f0119cf3:	48                   	dec    %eax
f0119cf4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0119cfa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119d00:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d05:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0119d0b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119d11:	29 d0                	sub    %edx,%eax
f0119d13:	01 c8                	add    %ecx,%eax
f0119d15:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0119d1b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119d21:	39 c2                	cmp    %eax,%edx
f0119d23:	74 17                	je     f0119d3c <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f0119d25:	83 ec 04             	sub    $0x4,%esp
f0119d28:	68 48 b8 13 f0       	push   $0xf013b848
f0119d2d:	68 27 01 00 00       	push   $0x127
f0119d32:	68 3a b5 13 f0       	push   $0xf013b53a
f0119d37:	e8 c9 64 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d3c:	e8 6e a0 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119d41:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119d44:	74 17                	je     f0119d5d <test_kmalloc_nextfit+0xc0b>
f0119d46:	83 ec 04             	sub    $0x4,%esp
f0119d49:	68 54 b5 13 f0       	push   $0xf013b554
f0119d4e:	68 28 01 00 00       	push   $0x128
f0119d53:	68 3a b5 13 f0       	push   $0xf013b53a
f0119d58:	e8 a8 64 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0119d5d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119d60:	e8 4c 34 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119d65:	29 c3                	sub    %eax,%ebx
f0119d67:	89 d8                	mov    %ebx,%eax
f0119d69:	83 f8 01             	cmp    $0x1,%eax
f0119d6c:	74 17                	je     f0119d85 <test_kmalloc_nextfit+0xc33>
f0119d6e:	83 ec 04             	sub    $0x4,%esp
f0119d71:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119d76:	68 29 01 00 00       	push   $0x129
f0119d7b:	68 3a b5 13 f0       	push   $0xf013b53a
f0119d80:	e8 80 64 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119d85:	e8 25 a0 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119d8a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119d8d:	e8 1f 34 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119d92:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0119d95:	83 ec 0c             	sub    $0xc,%esp
f0119d98:	68 00 00 50 00       	push   $0x500000
f0119d9d:	e8 c2 dd fe ff       	call   f0107b64 <kmalloc>
f0119da2:	83 c4 10             	add    $0x10,%esp
f0119da5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0119dab:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0119db2:	10 00 00 
f0119db5:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119dbb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119dc0:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0119dc6:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119dcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dd1:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0119dd7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119ddd:	29 d0                	sub    %edx,%eax
f0119ddf:	89 c1                	mov    %eax,%ecx
f0119de1:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0119de8:	10 00 00 
f0119deb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119df0:	0f b6 d0             	movzbl %al,%edx
f0119df3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0119df9:	01 d0                	add    %edx,%eax
f0119dfb:	48                   	dec    %eax
f0119dfc:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0119e02:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119e08:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e0d:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0119e13:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0119e19:	29 d0                	sub    %edx,%eax
f0119e1b:	01 c1                	add    %eax,%ecx
f0119e1d:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0119e24:	10 00 00 
f0119e27:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119e2c:	0f b6 c0             	movzbl %al,%eax
f0119e2f:	c1 e0 04             	shl    $0x4,%eax
f0119e32:	89 c2                	mov    %eax,%edx
f0119e34:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0119e3a:	01 d0                	add    %edx,%eax
f0119e3c:	48                   	dec    %eax
f0119e3d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0119e43:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119e49:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e4e:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0119e54:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0119e5a:	29 d0                	sub    %edx,%eax
f0119e5c:	01 c8                	add    %ecx,%eax
f0119e5e:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0119e64:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119e6a:	39 c2                	cmp    %eax,%edx
f0119e6c:	74 17                	je     f0119e85 <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0119e6e:	83 ec 04             	sub    $0x4,%esp
f0119e71:	68 48 b8 13 f0       	push   $0xf013b848
f0119e76:	68 2f 01 00 00       	push   $0x12f
f0119e7b:	68 3a b5 13 f0       	push   $0xf013b53a
f0119e80:	e8 80 63 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e85:	e8 25 9f fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119e8a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119e8d:	74 17                	je     f0119ea6 <test_kmalloc_nextfit+0xd54>
f0119e8f:	83 ec 04             	sub    $0x4,%esp
f0119e92:	68 54 b5 13 f0       	push   $0xf013b554
f0119e97:	68 30 01 00 00       	push   $0x130
f0119e9c:	68 3a b5 13 f0       	push   $0xf013b53a
f0119ea1:	e8 5f 63 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119ea6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ea9:	e8 03 33 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119eae:	29 c3                	sub    %eax,%ebx
f0119eb0:	89 d8                	mov    %ebx,%eax
f0119eb2:	3d 00 05 00 00       	cmp    $0x500,%eax
f0119eb7:	74 17                	je     f0119ed0 <test_kmalloc_nextfit+0xd7e>
f0119eb9:	83 ec 04             	sub    $0x4,%esp
f0119ebc:	68 f7 b7 13 f0       	push   $0xf013b7f7
f0119ec1:	68 31 01 00 00       	push   $0x131
f0119ec6:	68 3a b5 13 f0       	push   $0xf013b53a
f0119ecb:	e8 35 63 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119ed0:	e8 da 9e fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119ed5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119ed8:	e8 d4 32 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119edd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0119ee0:	83 ec 0c             	sub    $0xc,%esp
f0119ee3:	68 00 00 10 00       	push   $0x100000
f0119ee8:	e8 77 dc fe ff       	call   f0107b64 <kmalloc>
f0119eed:	83 c4 10             	add    $0x10,%esp
f0119ef0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0119ef6:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0119efd:	10 00 00 
f0119f00:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0119f06:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119f0b:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0119f11:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119f17:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f1c:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0119f22:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0119f28:	29 d0                	sub    %edx,%eax
f0119f2a:	89 c1                	mov    %eax,%ecx
f0119f2c:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0119f33:	10 00 00 
f0119f36:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119f3b:	0f b6 d0             	movzbl %al,%edx
f0119f3e:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0119f44:	01 d0                	add    %edx,%eax
f0119f46:	48                   	dec    %eax
f0119f47:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0119f4d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119f53:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f58:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0119f5e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119f64:	29 d0                	sub    %edx,%eax
f0119f66:	01 c1                	add    %eax,%ecx
f0119f68:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0119f6f:	10 00 00 
f0119f72:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0119f77:	0f b6 c0             	movzbl %al,%eax
f0119f7a:	c1 e0 04             	shl    $0x4,%eax
f0119f7d:	89 c2                	mov    %eax,%edx
f0119f7f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119f85:	01 d0                	add    %edx,%eax
f0119f87:	48                   	dec    %eax
f0119f88:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0119f8e:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119f94:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f99:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0119f9f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119fa5:	29 d0                	sub    %edx,%eax
f0119fa7:	01 c8                	add    %ecx,%eax
f0119fa9:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0119faf:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119fb5:	39 c2                	cmp    %eax,%edx
f0119fb7:	74 17                	je     f0119fd0 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0119fb9:	83 ec 04             	sub    $0x4,%esp
f0119fbc:	68 48 b8 13 f0       	push   $0xf013b848
f0119fc1:	68 37 01 00 00       	push   $0x137
f0119fc6:	68 3a b5 13 f0       	push   $0xf013b53a
f0119fcb:	e8 35 62 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119fd0:	e8 da 9d fe ff       	call   f0103daf <pf_calculate_free_frames>
f0119fd5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119fd8:	74 17                	je     f0119ff1 <test_kmalloc_nextfit+0xe9f>
f0119fda:	83 ec 04             	sub    $0x4,%esp
f0119fdd:	68 54 b5 13 f0       	push   $0xf013b554
f0119fe2:	68 38 01 00 00       	push   $0x138
f0119fe7:	68 3a b5 13 f0       	push   $0xf013b53a
f0119fec:	e8 14 62 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0119ff1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119ff4:	e8 b8 31 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f0119ff9:	29 c3                	sub    %eax,%ebx
f0119ffb:	89 d8                	mov    %ebx,%eax
f0119ffd:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a002:	74 17                	je     f011a01b <test_kmalloc_nextfit+0xec9>
f011a004:	83 ec 04             	sub    $0x4,%esp
f011a007:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a00c:	68 39 01 00 00       	push   $0x139
f011a011:	68 3a b5 13 f0       	push   $0xf013b53a
f011a016:	e8 ea 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a01b:	e8 8f 9d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a020:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a023:	e8 89 31 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a028:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f011a02b:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f011a031:	83 ec 0c             	sub    $0xc,%esp
f011a034:	50                   	push   %eax
f011a035:	e8 32 dc fe ff       	call   f0107c6c <kfree>
f011a03a:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a03d:	e8 6d 9d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a042:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a045:	74 17                	je     f011a05e <test_kmalloc_nextfit+0xf0c>
f011a047:	83 ec 04             	sub    $0x4,%esp
f011a04a:	68 54 b5 13 f0       	push   $0xf013b554
f011a04f:	68 3e 01 00 00       	push   $0x13e
f011a054:	68 3a b5 13 f0       	push   $0xf013b53a
f011a059:	e8 a7 61 fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a05e:	e8 4e 31 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a063:	89 c2                	mov    %eax,%edx
f011a065:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a068:	29 c2                	sub    %eax,%edx
f011a06a:	89 d0                	mov    %edx,%eax
f011a06c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a071:	74 17                	je     f011a08a <test_kmalloc_nextfit+0xf38>
f011a073:	83 ec 04             	sub    $0x4,%esp
f011a076:	68 08 b8 13 f0       	push   $0xf013b808
f011a07b:	68 3f 01 00 00       	push   $0x13f
f011a080:	68 3a b5 13 f0       	push   $0xf013b53a
f011a085:	e8 7b 61 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a08a:	e8 20 9d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a08f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a092:	e8 1a 31 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a097:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f011a09a:	83 ec 0c             	sub    $0xc,%esp
f011a09d:	68 00 04 00 00       	push   $0x400
f011a0a2:	e8 bd da fe ff       	call   f0107b64 <kmalloc>
f011a0a7:	83 c4 10             	add    $0x10,%esp
f011a0aa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f011a0b0:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f011a0b7:	10 00 00 
f011a0ba:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011a0c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a0c5:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f011a0cb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a0d1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0d6:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f011a0dc:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a0e2:	29 d0                	sub    %edx,%eax
f011a0e4:	89 c1                	mov    %eax,%ecx
f011a0e6:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f011a0ed:	10 00 00 
f011a0f0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a0f5:	0f b6 d0             	movzbl %al,%edx
f011a0f8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011a0fe:	01 d0                	add    %edx,%eax
f011a100:	48                   	dec    %eax
f011a101:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f011a107:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a10d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a112:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f011a118:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011a11e:	29 d0                	sub    %edx,%eax
f011a120:	01 c1                	add    %eax,%ecx
f011a122:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f011a129:	10 00 00 
f011a12c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a131:	0f b6 c0             	movzbl %al,%eax
f011a134:	c1 e0 04             	shl    $0x4,%eax
f011a137:	89 c2                	mov    %eax,%edx
f011a139:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a13f:	01 d0                	add    %edx,%eax
f011a141:	48                   	dec    %eax
f011a142:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f011a148:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a14e:	ba 00 00 00 00       	mov    $0x0,%edx
f011a153:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f011a159:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a15f:	29 d0                	sub    %edx,%eax
f011a161:	01 c8                	add    %ecx,%eax
f011a163:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f011a169:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a16f:	39 c2                	cmp    %eax,%edx
f011a171:	74 17                	je     f011a18a <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f011a173:	83 ec 04             	sub    $0x4,%esp
f011a176:	68 48 b8 13 f0       	push   $0xf013b848
f011a17b:	68 45 01 00 00       	push   $0x145
f011a180:	68 3a b5 13 f0       	push   $0xf013b53a
f011a185:	e8 7b 60 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a18a:	e8 20 9c fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a18f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a192:	74 17                	je     f011a1ab <test_kmalloc_nextfit+0x1059>
f011a194:	83 ec 04             	sub    $0x4,%esp
f011a197:	68 54 b5 13 f0       	push   $0xf013b554
f011a19c:	68 46 01 00 00       	push   $0x146
f011a1a1:	68 3a b5 13 f0       	push   $0xf013b53a
f011a1a6:	e8 5a 60 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f011a1ab:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a1ae:	e8 fe 2f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a1b3:	29 c3                	sub    %eax,%ebx
f011a1b5:	89 d8                	mov    %ebx,%eax
f011a1b7:	83 f8 01             	cmp    $0x1,%eax
f011a1ba:	74 17                	je     f011a1d3 <test_kmalloc_nextfit+0x1081>
f011a1bc:	83 ec 04             	sub    $0x4,%esp
f011a1bf:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a1c4:	68 47 01 00 00       	push   $0x147
f011a1c9:	68 3a b5 13 f0       	push   $0xf013b53a
f011a1ce:	e8 32 60 fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a1d3:	e8 d7 9b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a1d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a1db:	e8 d1 2f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a1e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f011a1e3:	83 ec 0c             	sub    $0xc,%esp
f011a1e6:	68 00 e0 1f 00       	push   $0x1fe000
f011a1eb:	e8 74 d9 fe ff       	call   f0107b64 <kmalloc>
f011a1f0:	83 c4 10             	add    $0x10,%esp
f011a1f3:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f011a1f9:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f011a200:	10 00 00 
f011a203:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011a209:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a20e:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f011a214:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a21a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a21f:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f011a225:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011a22b:	29 d0                	sub    %edx,%eax
f011a22d:	89 c1                	mov    %eax,%ecx
f011a22f:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f011a236:	10 00 00 
f011a239:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a23e:	0f b6 d0             	movzbl %al,%edx
f011a241:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011a247:	01 d0                	add    %edx,%eax
f011a249:	48                   	dec    %eax
f011a24a:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f011a250:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a256:	ba 00 00 00 00       	mov    $0x0,%edx
f011a25b:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f011a261:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011a267:	29 d0                	sub    %edx,%eax
f011a269:	01 c1                	add    %eax,%ecx
f011a26b:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f011a272:	10 00 00 
f011a275:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a27a:	0f b6 c0             	movzbl %al,%eax
f011a27d:	c1 e0 04             	shl    $0x4,%eax
f011a280:	89 c2                	mov    %eax,%edx
f011a282:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a288:	01 d0                	add    %edx,%eax
f011a28a:	48                   	dec    %eax
f011a28b:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f011a291:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a297:	ba 00 00 00 00       	mov    $0x0,%edx
f011a29c:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f011a2a2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a2a8:	29 d0                	sub    %edx,%eax
f011a2aa:	01 c8                	add    %ecx,%eax
f011a2ac:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f011a2b2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a2b8:	39 c2                	cmp    %eax,%edx
f011a2ba:	74 17                	je     f011a2d3 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f011a2bc:	83 ec 04             	sub    $0x4,%esp
f011a2bf:	68 48 b8 13 f0       	push   $0xf013b848
f011a2c4:	68 4d 01 00 00       	push   $0x14d
f011a2c9:	68 3a b5 13 f0       	push   $0xf013b53a
f011a2ce:	e8 32 5f fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a2d3:	e8 d7 9a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a2d8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a2db:	74 17                	je     f011a2f4 <test_kmalloc_nextfit+0x11a2>
f011a2dd:	83 ec 04             	sub    $0x4,%esp
f011a2e0:	68 54 b5 13 f0       	push   $0xf013b554
f011a2e5:	68 4e 01 00 00       	push   $0x14e
f011a2ea:	68 3a b5 13 f0       	push   $0xf013b53a
f011a2ef:	e8 11 5f fe ff       	call   f0100205 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a2f4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a2f7:	e8 b5 2e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a2fc:	29 c3                	sub    %eax,%ebx
f011a2fe:	89 d8                	mov    %ebx,%eax
f011a300:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f011a305:	74 17                	je     f011a31e <test_kmalloc_nextfit+0x11cc>
f011a307:	83 ec 04             	sub    $0x4,%esp
f011a30a:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a30f:	68 50 01 00 00       	push   $0x150
f011a314:	68 3a b5 13 f0       	push   $0xf013b53a
f011a319:	e8 e7 5e fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a31e:	e8 8c 9a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a323:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a326:	e8 86 2e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a32b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f011a32e:	83 ec 0c             	sub    $0xc,%esp
f011a331:	68 00 00 08 00       	push   $0x80000
f011a336:	e8 29 d8 fe ff       	call   f0107b64 <kmalloc>
f011a33b:	83 c4 10             	add    $0x10,%esp
f011a33e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f011a344:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f011a34b:	10 00 00 
f011a34e:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011a354:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a359:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f011a35f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a365:	ba 00 00 00 00       	mov    $0x0,%edx
f011a36a:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f011a370:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011a376:	29 d0                	sub    %edx,%eax
f011a378:	89 c1                	mov    %eax,%ecx
f011a37a:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f011a381:	10 00 00 
f011a384:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a389:	0f b6 d0             	movzbl %al,%edx
f011a38c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011a392:	01 d0                	add    %edx,%eax
f011a394:	48                   	dec    %eax
f011a395:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f011a39b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a3a1:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3a6:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f011a3ac:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011a3b2:	29 d0                	sub    %edx,%eax
f011a3b4:	01 c1                	add    %eax,%ecx
f011a3b6:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f011a3bd:	10 00 00 
f011a3c0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a3c5:	0f b6 c0             	movzbl %al,%eax
f011a3c8:	c1 e0 04             	shl    $0x4,%eax
f011a3cb:	89 c2                	mov    %eax,%edx
f011a3cd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011a3d3:	01 d0                	add    %edx,%eax
f011a3d5:	48                   	dec    %eax
f011a3d6:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f011a3dc:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3e7:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f011a3ed:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011a3f3:	29 d0                	sub    %edx,%eax
f011a3f5:	01 c8                	add    %ecx,%eax
f011a3f7:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f011a3fd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a403:	39 c2                	cmp    %eax,%edx
f011a405:	74 17                	je     f011a41e <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011a407:	83 ec 04             	sub    $0x4,%esp
f011a40a:	68 48 b8 13 f0       	push   $0xf013b848
f011a40f:	68 56 01 00 00       	push   $0x156
f011a414:	68 3a b5 13 f0       	push   $0xf013b53a
f011a419:	e8 e7 5d fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a41e:	e8 8c 99 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a423:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a426:	74 17                	je     f011a43f <test_kmalloc_nextfit+0x12ed>
f011a428:	83 ec 04             	sub    $0x4,%esp
f011a42b:	68 54 b5 13 f0       	push   $0xf013b554
f011a430:	68 57 01 00 00       	push   $0x157
f011a435:	68 3a b5 13 f0       	push   $0xf013b53a
f011a43a:	e8 c6 5d fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a43f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a442:	e8 6a 2d ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a447:	29 c3                	sub    %eax,%ebx
f011a449:	89 d8                	mov    %ebx,%eax
f011a44b:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a450:	74 17                	je     f011a469 <test_kmalloc_nextfit+0x1317>
f011a452:	83 ec 04             	sub    $0x4,%esp
f011a455:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a45a:	68 58 01 00 00       	push   $0x158
f011a45f:	68 3a b5 13 f0       	push   $0xf013b53a
f011a464:	e8 9c 5d fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f011a469:	83 ec 0c             	sub    $0xc,%esp
f011a46c:	68 68 b8 13 f0       	push   $0xf013b868
f011a471:	e8 98 68 fe ff       	call   f0100d0e <cprintf>
f011a476:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f011a479:	e8 31 99 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a47e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a481:	e8 2b 2d ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a486:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f011a489:	83 ec 0c             	sub    $0xc,%esp
f011a48c:	68 00 00 38 00       	push   $0x380000
f011a491:	e8 ce d6 fe ff       	call   f0107b64 <kmalloc>
f011a496:	83 c4 10             	add    $0x10,%esp
f011a499:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011a49f:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f011a4a6:	10 00 00 
f011a4a9:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011a4af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a4b4:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011a4ba:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a4c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011a4c5:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f011a4cb:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011a4d1:	29 d0                	sub    %edx,%eax
f011a4d3:	89 c1                	mov    %eax,%ecx
f011a4d5:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f011a4dc:	10 00 00 
f011a4df:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a4e4:	0f b6 d0             	movzbl %al,%edx
f011a4e7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011a4ed:	01 d0                	add    %edx,%eax
f011a4ef:	48                   	dec    %eax
f011a4f0:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011a4f6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a4fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011a501:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011a507:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f011a50d:	29 d0                	sub    %edx,%eax
f011a50f:	01 c1                	add    %eax,%ecx
f011a511:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011a518:	10 00 00 
f011a51b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a520:	0f b6 c0             	movzbl %al,%eax
f011a523:	c1 e0 04             	shl    $0x4,%eax
f011a526:	89 c2                	mov    %eax,%edx
f011a528:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f011a52e:	01 d0                	add    %edx,%eax
f011a530:	48                   	dec    %eax
f011a531:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011a537:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a53d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a542:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011a548:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f011a54e:	29 d0                	sub    %edx,%eax
f011a550:	01 c8                	add    %ecx,%eax
f011a552:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011a558:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a55e:	39 c2                	cmp    %eax,%edx
f011a560:	74 17                	je     f011a579 <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f011a562:	83 ec 04             	sub    $0x4,%esp
f011a565:	68 48 b8 13 f0       	push   $0xf013b848
f011a56a:	68 62 01 00 00       	push   $0x162
f011a56f:	68 3a b5 13 f0       	push   $0xf013b53a
f011a574:	e8 8c 5c fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a579:	e8 31 98 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a57e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a581:	74 17                	je     f011a59a <test_kmalloc_nextfit+0x1448>
f011a583:	83 ec 04             	sub    $0x4,%esp
f011a586:	68 54 b5 13 f0       	push   $0xf013b554
f011a58b:	68 63 01 00 00       	push   $0x163
f011a590:	68 3a b5 13 f0       	push   $0xf013b53a
f011a595:	e8 6b 5c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f011a59a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a59d:	e8 0f 2c ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a5a2:	29 c3                	sub    %eax,%ebx
f011a5a4:	89 d8                	mov    %ebx,%eax
f011a5a6:	3d 80 03 00 00       	cmp    $0x380,%eax
f011a5ab:	74 17                	je     f011a5c4 <test_kmalloc_nextfit+0x1472>
f011a5ad:	83 ec 04             	sub    $0x4,%esp
f011a5b0:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a5b5:	68 64 01 00 00       	push   $0x164
f011a5ba:	68 3a b5 13 f0       	push   $0xf013b53a
f011a5bf:	e8 41 5c fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a5c4:	e8 e6 97 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a5c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a5cc:	e8 e0 2b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a5d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f011a5d4:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011a5da:	83 ec 0c             	sub    $0xc,%esp
f011a5dd:	50                   	push   %eax
f011a5de:	e8 89 d6 fe ff       	call   f0107c6c <kfree>
f011a5e3:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a5e6:	e8 c4 97 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a5eb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a5ee:	74 17                	je     f011a607 <test_kmalloc_nextfit+0x14b5>
f011a5f0:	83 ec 04             	sub    $0x4,%esp
f011a5f3:	68 54 b5 13 f0       	push   $0xf013b554
f011a5f8:	68 69 01 00 00       	push   $0x169
f011a5fd:	68 3a b5 13 f0       	push   $0xf013b53a
f011a602:	e8 fe 5b fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011a607:	e8 a5 2b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a60c:	89 c2                	mov    %eax,%edx
f011a60e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a611:	29 c2                	sub    %eax,%edx
f011a613:	89 d0                	mov    %edx,%eax
f011a615:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a61a:	74 17                	je     f011a633 <test_kmalloc_nextfit+0x14e1>
f011a61c:	83 ec 04             	sub    $0x4,%esp
f011a61f:	68 08 b8 13 f0       	push   $0xf013b808
f011a624:	68 6a 01 00 00       	push   $0x16a
f011a629:	68 3a b5 13 f0       	push   $0xf013b53a
f011a62e:	e8 d2 5b fe ff       	call   f0100205 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f011a633:	e8 77 97 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a638:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a63b:	e8 71 2b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a640:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f011a643:	83 ec 0c             	sub    $0xc,%esp
f011a646:	68 00 fc 3f 00       	push   $0x3ffc00
f011a64b:	e8 14 d5 fe ff       	call   f0107b64 <kmalloc>
f011a650:	83 c4 10             	add    $0x10,%esp
f011a653:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f011a659:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f011a660:	10 00 00 
f011a663:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f011a669:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a66e:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f011a674:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a67a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a67f:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f011a685:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f011a68b:	29 d0                	sub    %edx,%eax
f011a68d:	89 c1                	mov    %eax,%ecx
f011a68f:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f011a696:	10 00 00 
f011a699:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a69e:	0f b6 d0             	movzbl %al,%edx
f011a6a1:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f011a6a7:	01 d0                	add    %edx,%eax
f011a6a9:	48                   	dec    %eax
f011a6aa:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f011a6b0:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a6b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6bb:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f011a6c1:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011a6c7:	29 d0                	sub    %edx,%eax
f011a6c9:	01 c1                	add    %eax,%ecx
f011a6cb:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f011a6d2:	10 00 00 
f011a6d5:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a6da:	0f b6 c0             	movzbl %al,%eax
f011a6dd:	c1 e0 04             	shl    $0x4,%eax
f011a6e0:	89 c2                	mov    %eax,%edx
f011a6e2:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011a6e8:	01 d0                	add    %edx,%eax
f011a6ea:	48                   	dec    %eax
f011a6eb:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f011a6f1:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a6f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a6fc:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f011a702:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011a708:	29 d0                	sub    %edx,%eax
f011a70a:	01 c8                	add    %ecx,%eax
f011a70c:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f011a712:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a718:	39 c2                	cmp    %eax,%edx
f011a71a:	74 17                	je     f011a733 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f011a71c:	83 ec 04             	sub    $0x4,%esp
f011a71f:	68 48 b8 13 f0       	push   $0xf013b848
f011a724:	68 70 01 00 00       	push   $0x170
f011a729:	68 3a b5 13 f0       	push   $0xf013b53a
f011a72e:	e8 d2 5a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a733:	e8 77 96 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a738:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a73b:	74 17                	je     f011a754 <test_kmalloc_nextfit+0x1602>
f011a73d:	83 ec 04             	sub    $0x4,%esp
f011a740:	68 54 b5 13 f0       	push   $0xf013b554
f011a745:	68 71 01 00 00       	push   $0x171
f011a74a:	68 3a b5 13 f0       	push   $0xf013b53a
f011a74f:	e8 b1 5a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f011a754:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011a757:	e8 55 2a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a75c:	29 c3                	sub    %eax,%ebx
f011a75e:	89 d8                	mov    %ebx,%eax
f011a760:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a765:	74 17                	je     f011a77e <test_kmalloc_nextfit+0x162c>
f011a767:	83 ec 04             	sub    $0x4,%esp
f011a76a:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a76f:	68 72 01 00 00       	push   $0x172
f011a774:	68 3a b5 13 f0       	push   $0xf013b53a
f011a779:	e8 87 5a fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f011a77e:	83 ec 0c             	sub    $0xc,%esp
f011a781:	68 a4 b8 13 f0       	push   $0xf013b8a4
f011a786:	e8 83 65 fe ff       	call   f0100d0e <cprintf>
f011a78b:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f011a78e:	e8 1c 96 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a793:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011a796:	e8 16 2a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a79b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f011a79e:	83 ec 0c             	sub    $0xc,%esp
f011a7a1:	68 00 00 60 00       	push   $0x600000
f011a7a6:	e8 b9 d3 fe ff       	call   f0107b64 <kmalloc>
f011a7ab:	83 c4 10             	add    $0x10,%esp
f011a7ae:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f011a7b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a7ba:	85 c0                	test   %eax,%eax
f011a7bc:	74 17                	je     f011a7d5 <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f011a7be:	83 ec 04             	sub    $0x4,%esp
f011a7c1:	68 48 b8 13 f0       	push   $0xf013b848
f011a7c6:	68 7c 01 00 00       	push   $0x17c
f011a7cb:	68 3a b5 13 f0       	push   $0xf013b53a
f011a7d0:	e8 30 5a fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a7d5:	e8 d5 95 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a7da:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a7dd:	74 17                	je     f011a7f6 <test_kmalloc_nextfit+0x16a4>
f011a7df:	83 ec 04             	sub    $0x4,%esp
f011a7e2:	68 54 b5 13 f0       	push   $0xf013b554
f011a7e7:	68 7d 01 00 00       	push   $0x17d
f011a7ec:	68 3a b5 13 f0       	push   $0xf013b53a
f011a7f1:	e8 0f 5a fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011a7f6:	e8 b6 29 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a7fb:	89 c2                	mov    %eax,%edx
f011a7fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a800:	39 c2                	cmp    %eax,%edx
f011a802:	74 17                	je     f011a81b <test_kmalloc_nextfit+0x16c9>
f011a804:	83 ec 04             	sub    $0x4,%esp
f011a807:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011a80c:	68 7e 01 00 00       	push   $0x17e
f011a811:	68 3a b5 13 f0       	push   $0xf013b53a
f011a816:	e8 ea 59 fe ff       	call   f0100205 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f011a81b:	83 ec 0c             	sub    $0xc,%esp
f011a81e:	68 dc b8 13 f0       	push   $0xf013b8dc
f011a823:	e8 e6 64 fe ff       	call   f0100d0e <cprintf>
f011a828:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f011a82b:	83 ec 0c             	sub    $0xc,%esp
f011a82e:	68 18 b9 13 f0       	push   $0xf013b918
f011a833:	e8 d6 64 fe ff       	call   f0100d0e <cprintf>
f011a838:	83 c4 10             	add    $0x10,%esp
	return 1;
f011a83b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a840:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a843:	5b                   	pop    %ebx
f011a844:	5f                   	pop    %edi
f011a845:	5d                   	pop    %ebp
f011a846:	c3                   	ret    

f011a847 <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011a847:	55                   	push   %ebp
f011a848:	89 e5                	mov    %esp,%ebp
f011a84a:	57                   	push   %edi
f011a84b:	53                   	push   %ebx
f011a84c:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f011a852:	83 ec 0c             	sub    $0xc,%esp
f011a855:	68 7c b4 13 f0       	push   $0xf013b47c
f011a85a:	e8 af 64 fe ff       	call   f0100d0e <cprintf>
f011a85f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a862:	83 ec 0c             	sub    $0xc,%esp
f011a865:	68 ac b4 13 f0       	push   $0xf013b4ac
f011a86a:	e8 9f 64 fe ff       	call   f0100d0e <cprintf>
f011a86f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a872:	83 ec 0c             	sub    $0xc,%esp
f011a875:	68 7c b4 13 f0       	push   $0xf013b47c
f011a87a:	e8 8f 64 fe ff       	call   f0100d0e <cprintf>
f011a87f:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a882:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011a888:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a88d:	b8 00 00 00 00       	mov    $0x0,%eax
f011a892:	89 d7                	mov    %edx,%edi
f011a894:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a896:	e8 16 29 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a89b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a89e:	e8 0c 95 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a8a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f011a8a6:	83 ec 0c             	sub    $0xc,%esp
f011a8a9:	68 00 fc 2f 00       	push   $0x2ffc00
f011a8ae:	e8 b1 d2 fe ff       	call   f0107b64 <kmalloc>
f011a8b3:	83 c4 10             	add    $0x10,%esp
f011a8b6:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a8bc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011a8c2:	89 c1                	mov    %eax,%ecx
f011a8c4:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a8cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a8ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a8d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a8d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a8d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a8de:	f7 75 ec             	divl   -0x14(%ebp)
f011a8e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a8e4:	29 d0                	sub    %edx,%eax
f011a8e6:	89 c3                	mov    %eax,%ebx
f011a8e8:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a8ef:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a8f4:	0f b6 d0             	movzbl %al,%edx
f011a8f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a8fa:	01 d0                	add    %edx,%eax
f011a8fc:	48                   	dec    %eax
f011a8fd:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a900:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a903:	ba 00 00 00 00       	mov    $0x0,%edx
f011a908:	f7 75 e4             	divl   -0x1c(%ebp)
f011a90b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a90e:	29 d0                	sub    %edx,%eax
f011a910:	01 c3                	add    %eax,%ebx
f011a912:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011a919:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011a91e:	0f b6 c0             	movzbl %al,%eax
f011a921:	c1 e0 04             	shl    $0x4,%eax
f011a924:	89 c2                	mov    %eax,%edx
f011a926:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a929:	01 d0                	add    %edx,%eax
f011a92b:	48                   	dec    %eax
f011a92c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a92f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a932:	ba 00 00 00 00       	mov    $0x0,%edx
f011a937:	f7 75 dc             	divl   -0x24(%ebp)
f011a93a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a93d:	29 d0                	sub    %edx,%eax
f011a93f:	01 d8                	add    %ebx,%eax
f011a941:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a946:	39 c1                	cmp    %eax,%ecx
f011a948:	74 17                	je     f011a961 <test_kmalloc_bestfit1+0x11a>
f011a94a:	83 ec 04             	sub    $0x4,%esp
f011a94d:	68 54 b9 13 f0       	push   $0xf013b954
f011a952:	68 98 01 00 00       	push   $0x198
f011a957:	68 3a b5 13 f0       	push   $0xf013b53a
f011a95c:	e8 a4 58 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a961:	e8 49 94 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a966:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a969:	74 17                	je     f011a982 <test_kmalloc_bestfit1+0x13b>
f011a96b:	83 ec 04             	sub    $0x4,%esp
f011a96e:	68 54 b5 13 f0       	push   $0xf013b554
f011a973:	68 99 01 00 00       	push   $0x199
f011a978:	68 3a b5 13 f0       	push   $0xf013b53a
f011a97d:	e8 83 58 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011a982:	e8 2a 28 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a987:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a98a:	29 c2                	sub    %eax,%edx
f011a98c:	89 d0                	mov    %edx,%eax
f011a98e:	3d 00 03 00 00       	cmp    $0x300,%eax
f011a993:	74 17                	je     f011a9ac <test_kmalloc_bestfit1+0x165>
f011a995:	83 ec 04             	sub    $0x4,%esp
f011a998:	68 84 b9 13 f0       	push   $0xf013b984
f011a99d:	68 9a 01 00 00       	push   $0x19a
f011a9a2:	68 3a b5 13 f0       	push   $0xf013b53a
f011a9a7:	e8 59 58 fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011a9ac:	e8 00 28 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011a9b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a9b4:	e8 f6 93 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011a9b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f011a9bc:	83 ec 0c             	sub    $0xc,%esp
f011a9bf:	68 00 fc 2f 00       	push   $0x2ffc00
f011a9c4:	e8 9b d1 fe ff       	call   f0107b64 <kmalloc>
f011a9c9:	83 c4 10             	add    $0x10,%esp
f011a9cc:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011a9d2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011a9d8:	89 c1                	mov    %eax,%ecx
f011a9da:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a9e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a9e4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a9e9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a9ec:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a9ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9f4:	f7 75 d4             	divl   -0x2c(%ebp)
f011a9f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a9fa:	29 d0                	sub    %edx,%eax
f011a9fc:	89 c3                	mov    %eax,%ebx
f011a9fe:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011aa05:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011aa0a:	0f b6 d0             	movzbl %al,%edx
f011aa0d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011aa10:	01 d0                	add    %edx,%eax
f011aa12:	48                   	dec    %eax
f011aa13:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011aa16:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aa19:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa1e:	f7 75 cc             	divl   -0x34(%ebp)
f011aa21:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011aa24:	29 d0                	sub    %edx,%eax
f011aa26:	01 c3                	add    %eax,%ebx
f011aa28:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011aa2f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011aa34:	0f b6 c0             	movzbl %al,%eax
f011aa37:	c1 e0 04             	shl    $0x4,%eax
f011aa3a:	89 c2                	mov    %eax,%edx
f011aa3c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aa3f:	01 d0                	add    %edx,%eax
f011aa41:	48                   	dec    %eax
f011aa42:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011aa45:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa48:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa4d:	f7 75 c4             	divl   -0x3c(%ebp)
f011aa50:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa53:	29 d0                	sub    %edx,%eax
f011aa55:	01 d8                	add    %ebx,%eax
f011aa57:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011aa5c:	39 c1                	cmp    %eax,%ecx
f011aa5e:	74 17                	je     f011aa77 <test_kmalloc_bestfit1+0x230>
f011aa60:	83 ec 04             	sub    $0x4,%esp
f011aa63:	68 54 b9 13 f0       	push   $0xf013b954
f011aa68:	68 a0 01 00 00       	push   $0x1a0
f011aa6d:	68 3a b5 13 f0       	push   $0xf013b53a
f011aa72:	e8 8e 57 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aa77:	e8 33 93 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011aa7c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011aa7f:	74 17                	je     f011aa98 <test_kmalloc_bestfit1+0x251>
f011aa81:	83 ec 04             	sub    $0x4,%esp
f011aa84:	68 54 b5 13 f0       	push   $0xf013b554
f011aa89:	68 a1 01 00 00       	push   $0x1a1
f011aa8e:	68 3a b5 13 f0       	push   $0xf013b53a
f011aa93:	e8 6d 57 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011aa98:	e8 14 27 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011aa9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aaa0:	29 c2                	sub    %eax,%edx
f011aaa2:	89 d0                	mov    %edx,%eax
f011aaa4:	3d 00 03 00 00       	cmp    $0x300,%eax
f011aaa9:	74 17                	je     f011aac2 <test_kmalloc_bestfit1+0x27b>
f011aaab:	83 ec 04             	sub    $0x4,%esp
f011aaae:	68 84 b9 13 f0       	push   $0xf013b984
f011aab3:	68 a2 01 00 00       	push   $0x1a2
f011aab8:	68 3a b5 13 f0       	push   $0xf013b53a
f011aabd:	e8 43 57 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011aac2:	e8 ea 26 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011aac7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011aaca:	e8 e0 92 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011aacf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f011aad2:	83 ec 0c             	sub    $0xc,%esp
f011aad5:	68 00 fc 1f 00       	push   $0x1ffc00
f011aada:	e8 85 d0 fe ff       	call   f0107b64 <kmalloc>
f011aadf:	83 c4 10             	add    $0x10,%esp
f011aae2:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011aae8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011aaee:	89 c1                	mov    %eax,%ecx
f011aaf0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011aaf7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011aafa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aaff:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ab02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ab05:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab0a:	f7 75 bc             	divl   -0x44(%ebp)
f011ab0d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ab10:	29 d0                	sub    %edx,%eax
f011ab12:	89 c3                	mov    %eax,%ebx
f011ab14:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011ab1b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ab20:	0f b6 d0             	movzbl %al,%edx
f011ab23:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011ab26:	01 d0                	add    %edx,%eax
f011ab28:	48                   	dec    %eax
f011ab29:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ab2c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ab2f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab34:	f7 75 b4             	divl   -0x4c(%ebp)
f011ab37:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ab3a:	29 d0                	sub    %edx,%eax
f011ab3c:	01 c3                	add    %eax,%ebx
f011ab3e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011ab45:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ab4a:	0f b6 c0             	movzbl %al,%eax
f011ab4d:	c1 e0 04             	shl    $0x4,%eax
f011ab50:	89 c2                	mov    %eax,%edx
f011ab52:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ab55:	01 d0                	add    %edx,%eax
f011ab57:	48                   	dec    %eax
f011ab58:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011ab5b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab5e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab63:	f7 75 ac             	divl   -0x54(%ebp)
f011ab66:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ab69:	29 d0                	sub    %edx,%eax
f011ab6b:	01 d8                	add    %ebx,%eax
f011ab6d:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011ab72:	39 c1                	cmp    %eax,%ecx
f011ab74:	74 17                	je     f011ab8d <test_kmalloc_bestfit1+0x346>
f011ab76:	83 ec 04             	sub    $0x4,%esp
f011ab79:	68 54 b9 13 f0       	push   $0xf013b954
f011ab7e:	68 a8 01 00 00       	push   $0x1a8
f011ab83:	68 3a b5 13 f0       	push   $0xf013b53a
f011ab88:	e8 78 56 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ab8d:	e8 1d 92 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ab92:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ab95:	74 17                	je     f011abae <test_kmalloc_bestfit1+0x367>
f011ab97:	83 ec 04             	sub    $0x4,%esp
f011ab9a:	68 54 b5 13 f0       	push   $0xf013b554
f011ab9f:	68 a9 01 00 00       	push   $0x1a9
f011aba4:	68 3a b5 13 f0       	push   $0xf013b53a
f011aba9:	e8 57 56 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011abae:	e8 fe 25 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011abb3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011abb6:	29 c2                	sub    %eax,%edx
f011abb8:	89 d0                	mov    %edx,%eax
f011abba:	3d 00 02 00 00       	cmp    $0x200,%eax
f011abbf:	74 17                	je     f011abd8 <test_kmalloc_bestfit1+0x391>
f011abc1:	83 ec 04             	sub    $0x4,%esp
f011abc4:	68 84 b9 13 f0       	push   $0xf013b984
f011abc9:	68 aa 01 00 00       	push   $0x1aa
f011abce:	68 3a b5 13 f0       	push   $0xf013b53a
f011abd3:	e8 2d 56 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011abd8:	e8 d4 25 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011abdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011abe0:	e8 ca 91 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011abe5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011abe8:	83 ec 0c             	sub    $0xc,%esp
f011abeb:	68 00 fc 1f 00       	push   $0x1ffc00
f011abf0:	e8 6f cf fe ff       	call   f0107b64 <kmalloc>
f011abf5:	83 c4 10             	add    $0x10,%esp
f011abf8:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011abfe:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011ac04:	89 c1                	mov    %eax,%ecx
f011ac06:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011ac0d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ac10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ac15:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011ac18:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac1b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac20:	f7 75 a4             	divl   -0x5c(%ebp)
f011ac23:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac26:	29 d0                	sub    %edx,%eax
f011ac28:	89 c3                	mov    %eax,%ebx
f011ac2a:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011ac31:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ac36:	0f b6 d0             	movzbl %al,%edx
f011ac39:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ac3c:	01 d0                	add    %edx,%eax
f011ac3e:	48                   	dec    %eax
f011ac3f:	89 45 98             	mov    %eax,-0x68(%ebp)
f011ac42:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac45:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac4a:	f7 75 9c             	divl   -0x64(%ebp)
f011ac4d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac50:	29 d0                	sub    %edx,%eax
f011ac52:	01 c3                	add    %eax,%ebx
f011ac54:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011ac5b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ac60:	0f b6 c0             	movzbl %al,%eax
f011ac63:	c1 e0 04             	shl    $0x4,%eax
f011ac66:	89 c2                	mov    %eax,%edx
f011ac68:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ac6b:	01 d0                	add    %edx,%eax
f011ac6d:	48                   	dec    %eax
f011ac6e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011ac71:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac74:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac79:	f7 75 94             	divl   -0x6c(%ebp)
f011ac7c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ac7f:	29 d0                	sub    %edx,%eax
f011ac81:	01 d8                	add    %ebx,%eax
f011ac83:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011ac88:	39 c1                	cmp    %eax,%ecx
f011ac8a:	74 17                	je     f011aca3 <test_kmalloc_bestfit1+0x45c>
f011ac8c:	83 ec 04             	sub    $0x4,%esp
f011ac8f:	68 54 b9 13 f0       	push   $0xf013b954
f011ac94:	68 b0 01 00 00       	push   $0x1b0
f011ac99:	68 3a b5 13 f0       	push   $0xf013b53a
f011ac9e:	e8 62 55 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aca3:	e8 07 91 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011aca8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011acab:	74 17                	je     f011acc4 <test_kmalloc_bestfit1+0x47d>
f011acad:	83 ec 04             	sub    $0x4,%esp
f011acb0:	68 54 b5 13 f0       	push   $0xf013b554
f011acb5:	68 b1 01 00 00       	push   $0x1b1
f011acba:	68 3a b5 13 f0       	push   $0xf013b53a
f011acbf:	e8 41 55 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011acc4:	e8 e8 24 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011acc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011accc:	29 c2                	sub    %eax,%edx
f011acce:	89 d0                	mov    %edx,%eax
f011acd0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011acd5:	74 17                	je     f011acee <test_kmalloc_bestfit1+0x4a7>
f011acd7:	83 ec 04             	sub    $0x4,%esp
f011acda:	68 84 b9 13 f0       	push   $0xf013b984
f011acdf:	68 b2 01 00 00       	push   $0x1b2
f011ace4:	68 3a b5 13 f0       	push   $0xf013b53a
f011ace9:	e8 17 55 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011acee:	e8 be 24 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011acf3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acf6:	e8 b4 90 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011acfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f011acfe:	83 ec 0c             	sub    $0xc,%esp
f011ad01:	68 00 fc 0f 00       	push   $0xffc00
f011ad06:	e8 59 ce fe ff       	call   f0107b64 <kmalloc>
f011ad0b:	83 c4 10             	add    $0x10,%esp
f011ad0e:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f011ad14:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ad1a:	89 c1                	mov    %eax,%ecx
f011ad1c:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ad23:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ad26:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad2b:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ad2e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad36:	f7 75 8c             	divl   -0x74(%ebp)
f011ad39:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ad3c:	29 d0                	sub    %edx,%eax
f011ad3e:	89 c3                	mov    %eax,%ebx
f011ad40:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ad47:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ad4c:	0f b6 d0             	movzbl %al,%edx
f011ad4f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ad52:	01 d0                	add    %edx,%eax
f011ad54:	48                   	dec    %eax
f011ad55:	89 45 80             	mov    %eax,-0x80(%ebp)
f011ad58:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad5b:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad60:	f7 75 84             	divl   -0x7c(%ebp)
f011ad63:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ad66:	29 d0                	sub    %edx,%eax
f011ad68:	01 c3                	add    %eax,%ebx
f011ad6a:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011ad71:	10 00 00 
f011ad74:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ad79:	0f b6 c0             	movzbl %al,%eax
f011ad7c:	c1 e0 04             	shl    $0x4,%eax
f011ad7f:	89 c2                	mov    %eax,%edx
f011ad81:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ad87:	01 d0                	add    %edx,%eax
f011ad89:	48                   	dec    %eax
f011ad8a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011ad90:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ad96:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad9b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011ada1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ada7:	29 d0                	sub    %edx,%eax
f011ada9:	01 d8                	add    %ebx,%eax
f011adab:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f011adb0:	39 c1                	cmp    %eax,%ecx
f011adb2:	74 17                	je     f011adcb <test_kmalloc_bestfit1+0x584>
f011adb4:	83 ec 04             	sub    $0x4,%esp
f011adb7:	68 54 b9 13 f0       	push   $0xf013b954
f011adbc:	68 b8 01 00 00       	push   $0x1b8
f011adc1:	68 3a b5 13 f0       	push   $0xf013b53a
f011adc6:	e8 3a 54 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adcb:	e8 df 8f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011add0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011add3:	74 17                	je     f011adec <test_kmalloc_bestfit1+0x5a5>
f011add5:	83 ec 04             	sub    $0x4,%esp
f011add8:	68 54 b5 13 f0       	push   $0xf013b554
f011addd:	68 b9 01 00 00       	push   $0x1b9
f011ade2:	68 3a b5 13 f0       	push   $0xf013b53a
f011ade7:	e8 19 54 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011adec:	e8 c0 23 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011adf1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adf4:	29 c2                	sub    %eax,%edx
f011adf6:	89 d0                	mov    %edx,%eax
f011adf8:	3d 00 01 00 00       	cmp    $0x100,%eax
f011adfd:	74 17                	je     f011ae16 <test_kmalloc_bestfit1+0x5cf>
f011adff:	83 ec 04             	sub    $0x4,%esp
f011ae02:	68 84 b9 13 f0       	push   $0xf013b984
f011ae07:	68 ba 01 00 00       	push   $0x1ba
f011ae0c:	68 3a b5 13 f0       	push   $0xf013b53a
f011ae11:	e8 ef 53 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae16:	e8 96 23 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ae1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ae1e:	e8 8c 8f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ae23:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f011ae26:	83 ec 0c             	sub    $0xc,%esp
f011ae29:	68 00 fc 0f 00       	push   $0xffc00
f011ae2e:	e8 31 cd fe ff       	call   f0107b64 <kmalloc>
f011ae33:	83 c4 10             	add    $0x10,%esp
f011ae36:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011ae3c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ae42:	89 c1                	mov    %eax,%ecx
f011ae44:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011ae4b:	10 00 00 
f011ae4e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae54:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ae59:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ae5f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae65:	ba 00 00 00 00       	mov    $0x0,%edx
f011ae6a:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ae70:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ae76:	29 d0                	sub    %edx,%eax
f011ae78:	89 c3                	mov    %eax,%ebx
f011ae7a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ae81:	10 00 00 
f011ae84:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ae89:	0f b6 d0             	movzbl %al,%edx
f011ae8c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ae92:	01 d0                	add    %edx,%eax
f011ae94:	48                   	dec    %eax
f011ae95:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ae9b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aea1:	ba 00 00 00 00       	mov    $0x0,%edx
f011aea6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011aeac:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011aeb2:	29 d0                	sub    %edx,%eax
f011aeb4:	01 c3                	add    %eax,%ebx
f011aeb6:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011aebd:	10 00 00 
f011aec0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011aec5:	0f b6 c0             	movzbl %al,%eax
f011aec8:	c1 e0 04             	shl    $0x4,%eax
f011aecb:	89 c2                	mov    %eax,%edx
f011aecd:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011aed3:	01 d0                	add    %edx,%eax
f011aed5:	48                   	dec    %eax
f011aed6:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011aedc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aee2:	ba 00 00 00 00       	mov    $0x0,%edx
f011aee7:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011aeed:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011aef3:	29 d0                	sub    %edx,%eax
f011aef5:	01 d8                	add    %ebx,%eax
f011aef7:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011aefc:	39 c1                	cmp    %eax,%ecx
f011aefe:	74 17                	je     f011af17 <test_kmalloc_bestfit1+0x6d0>
f011af00:	83 ec 04             	sub    $0x4,%esp
f011af03:	68 54 b9 13 f0       	push   $0xf013b954
f011af08:	68 c0 01 00 00       	push   $0x1c0
f011af0d:	68 3a b5 13 f0       	push   $0xf013b53a
f011af12:	e8 ee 52 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af17:	e8 93 8e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011af1c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011af1f:	74 17                	je     f011af38 <test_kmalloc_bestfit1+0x6f1>
f011af21:	83 ec 04             	sub    $0x4,%esp
f011af24:	68 54 b5 13 f0       	push   $0xf013b554
f011af29:	68 c1 01 00 00       	push   $0x1c1
f011af2e:	68 3a b5 13 f0       	push   $0xf013b53a
f011af33:	e8 cd 52 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011af38:	e8 74 22 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011af3d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011af40:	29 c2                	sub    %eax,%edx
f011af42:	89 d0                	mov    %edx,%eax
f011af44:	3d 00 01 00 00       	cmp    $0x100,%eax
f011af49:	74 17                	je     f011af62 <test_kmalloc_bestfit1+0x71b>
f011af4b:	83 ec 04             	sub    $0x4,%esp
f011af4e:	68 84 b9 13 f0       	push   $0xf013b984
f011af53:	68 c2 01 00 00       	push   $0x1c2
f011af58:	68 3a b5 13 f0       	push   $0xf013b53a
f011af5d:	e8 a3 52 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011af62:	e8 4a 22 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011af67:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011af6a:	e8 40 8e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011af6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f011af72:	83 ec 0c             	sub    $0xc,%esp
f011af75:	68 00 fc 0f 00       	push   $0xffc00
f011af7a:	e8 e5 cb fe ff       	call   f0107b64 <kmalloc>
f011af7f:	83 c4 10             	add    $0x10,%esp
f011af82:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f011af88:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011af8e:	89 c1                	mov    %eax,%ecx
f011af90:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011af97:	10 00 00 
f011af9a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011afa0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011afa5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011afab:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011afb1:	ba 00 00 00 00       	mov    $0x0,%edx
f011afb6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011afbc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011afc2:	29 d0                	sub    %edx,%eax
f011afc4:	89 c3                	mov    %eax,%ebx
f011afc6:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011afcd:	10 00 00 
f011afd0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011afd5:	0f b6 d0             	movzbl %al,%edx
f011afd8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011afde:	01 d0                	add    %edx,%eax
f011afe0:	48                   	dec    %eax
f011afe1:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011afe7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011afed:	ba 00 00 00 00       	mov    $0x0,%edx
f011aff2:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011aff8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011affe:	29 d0                	sub    %edx,%eax
f011b000:	01 c3                	add    %eax,%ebx
f011b002:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011b009:	10 00 00 
f011b00c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b011:	0f b6 c0             	movzbl %al,%eax
f011b014:	c1 e0 04             	shl    $0x4,%eax
f011b017:	89 c2                	mov    %eax,%edx
f011b019:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011b01f:	01 d0                	add    %edx,%eax
f011b021:	48                   	dec    %eax
f011b022:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011b028:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b02e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b033:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011b039:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011b03f:	29 d0                	sub    %edx,%eax
f011b041:	01 d8                	add    %ebx,%eax
f011b043:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f011b048:	39 c1                	cmp    %eax,%ecx
f011b04a:	74 17                	je     f011b063 <test_kmalloc_bestfit1+0x81c>
f011b04c:	83 ec 04             	sub    $0x4,%esp
f011b04f:	68 54 b9 13 f0       	push   $0xf013b954
f011b054:	68 c8 01 00 00       	push   $0x1c8
f011b059:	68 3a b5 13 f0       	push   $0xf013b53a
f011b05e:	e8 a2 51 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b063:	e8 47 8d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b068:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b06b:	74 17                	je     f011b084 <test_kmalloc_bestfit1+0x83d>
f011b06d:	83 ec 04             	sub    $0x4,%esp
f011b070:	68 54 b5 13 f0       	push   $0xf013b554
f011b075:	68 c9 01 00 00       	push   $0x1c9
f011b07a:	68 3a b5 13 f0       	push   $0xf013b53a
f011b07f:	e8 81 51 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b084:	e8 28 21 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b089:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b08c:	29 c2                	sub    %eax,%edx
f011b08e:	89 d0                	mov    %edx,%eax
f011b090:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b095:	74 17                	je     f011b0ae <test_kmalloc_bestfit1+0x867>
f011b097:	83 ec 04             	sub    $0x4,%esp
f011b09a:	68 84 b9 13 f0       	push   $0xf013b984
f011b09f:	68 ca 01 00 00       	push   $0x1ca
f011b0a4:	68 3a b5 13 f0       	push   $0xf013b53a
f011b0a9:	e8 57 51 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b0ae:	e8 fe 20 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b0b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b0b6:	e8 f4 8c fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b0bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f011b0be:	83 ec 0c             	sub    $0xc,%esp
f011b0c1:	68 00 fc 0f 00       	push   $0xffc00
f011b0c6:	e8 99 ca fe ff       	call   f0107b64 <kmalloc>
f011b0cb:	83 c4 10             	add    $0x10,%esp
f011b0ce:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f011b0d4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011b0da:	89 c1                	mov    %eax,%ecx
f011b0dc:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011b0e3:	10 00 00 
f011b0e6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b0ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b0f1:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b0f7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b0fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011b102:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b108:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b10e:	29 d0                	sub    %edx,%eax
f011b110:	89 c3                	mov    %eax,%ebx
f011b112:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b119:	10 00 00 
f011b11c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b121:	0f b6 d0             	movzbl %al,%edx
f011b124:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b12a:	01 d0                	add    %edx,%eax
f011b12c:	48                   	dec    %eax
f011b12d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b133:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b139:	ba 00 00 00 00       	mov    $0x0,%edx
f011b13e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b144:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b14a:	29 d0                	sub    %edx,%eax
f011b14c:	01 c3                	add    %eax,%ebx
f011b14e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b155:	10 00 00 
f011b158:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b15d:	0f b6 c0             	movzbl %al,%eax
f011b160:	c1 e0 04             	shl    $0x4,%eax
f011b163:	89 c2                	mov    %eax,%edx
f011b165:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b16b:	01 d0                	add    %edx,%eax
f011b16d:	48                   	dec    %eax
f011b16e:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b174:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b17a:	ba 00 00 00 00       	mov    $0x0,%edx
f011b17f:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b185:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b18b:	29 d0                	sub    %edx,%eax
f011b18d:	01 d8                	add    %ebx,%eax
f011b18f:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f011b194:	39 c1                	cmp    %eax,%ecx
f011b196:	74 17                	je     f011b1af <test_kmalloc_bestfit1+0x968>
f011b198:	83 ec 04             	sub    $0x4,%esp
f011b19b:	68 54 b9 13 f0       	push   $0xf013b954
f011b1a0:	68 d0 01 00 00       	push   $0x1d0
f011b1a5:	68 3a b5 13 f0       	push   $0xf013b53a
f011b1aa:	e8 56 50 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b1af:	e8 fb 8b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b1b4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b1b7:	74 17                	je     f011b1d0 <test_kmalloc_bestfit1+0x989>
f011b1b9:	83 ec 04             	sub    $0x4,%esp
f011b1bc:	68 54 b5 13 f0       	push   $0xf013b554
f011b1c1:	68 d1 01 00 00       	push   $0x1d1
f011b1c6:	68 3a b5 13 f0       	push   $0xf013b53a
f011b1cb:	e8 35 50 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b1d0:	e8 dc 1f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b1d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b1d8:	29 c2                	sub    %eax,%edx
f011b1da:	89 d0                	mov    %edx,%eax
f011b1dc:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b1e1:	74 17                	je     f011b1fa <test_kmalloc_bestfit1+0x9b3>
f011b1e3:	83 ec 04             	sub    $0x4,%esp
f011b1e6:	68 84 b9 13 f0       	push   $0xf013b984
f011b1eb:	68 d2 01 00 00       	push   $0x1d2
f011b1f0:	68 3a b5 13 f0       	push   $0xf013b53a
f011b1f5:	e8 0b 50 fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b1fa:	e8 b2 1f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b1ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b202:	e8 a8 8b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b207:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011b20a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b210:	83 ec 0c             	sub    $0xc,%esp
f011b213:	50                   	push   %eax
f011b214:	e8 53 ca fe ff       	call   f0107c6c <kfree>
f011b219:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b21c:	e8 8e 8b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b221:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b224:	74 17                	je     f011b23d <test_kmalloc_bestfit1+0x9f6>
f011b226:	83 ec 04             	sub    $0x4,%esp
f011b229:	68 54 b5 13 f0       	push   $0xf013b554
f011b22e:	68 db 01 00 00       	push   $0x1db
f011b233:	68 3a b5 13 f0       	push   $0xf013b53a
f011b238:	e8 c8 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b23d:	e8 6f 1f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b242:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b245:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b24a:	74 17                	je     f011b263 <test_kmalloc_bestfit1+0xa1c>
f011b24c:	83 ec 04             	sub    $0x4,%esp
f011b24f:	68 97 b9 13 f0       	push   $0xf013b997
f011b254:	68 dc 01 00 00       	push   $0x1dc
f011b259:	68 3a b5 13 f0       	push   $0xf013b53a
f011b25e:	e8 a2 4f fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b263:	e8 49 1f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b268:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b26b:	e8 3f 8b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b270:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011b273:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b279:	83 ec 0c             	sub    $0xc,%esp
f011b27c:	50                   	push   %eax
f011b27d:	e8 ea c9 fe ff       	call   f0107c6c <kfree>
f011b282:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b285:	e8 25 8b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b28a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b28d:	74 17                	je     f011b2a6 <test_kmalloc_bestfit1+0xa5f>
f011b28f:	83 ec 04             	sub    $0x4,%esp
f011b292:	68 54 b5 13 f0       	push   $0xf013b554
f011b297:	68 e2 01 00 00       	push   $0x1e2
f011b29c:	68 3a b5 13 f0       	push   $0xf013b53a
f011b2a1:	e8 5f 4f fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f011b2a6:	e8 06 1f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b2ab:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b2ae:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b2b3:	74 17                	je     f011b2cc <test_kmalloc_bestfit1+0xa85>
f011b2b5:	83 ec 04             	sub    $0x4,%esp
f011b2b8:	68 97 b9 13 f0       	push   $0xf013b997
f011b2bd:	68 e3 01 00 00       	push   $0x1e3
f011b2c2:	68 3a b5 13 f0       	push   $0xf013b53a
f011b2c7:	e8 39 4f fe ff       	call   f0100205 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b2cc:	e8 e0 1e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b2d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b2d4:	e8 d6 8a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b2d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f011b2dc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b2e2:	83 ec 0c             	sub    $0xc,%esp
f011b2e5:	50                   	push   %eax
f011b2e6:	e8 81 c9 fe ff       	call   f0107c6c <kfree>
f011b2eb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2ee:	e8 bc 8a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b2f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b2f6:	74 17                	je     f011b30f <test_kmalloc_bestfit1+0xac8>
f011b2f8:	83 ec 04             	sub    $0x4,%esp
f011b2fb:	68 54 b5 13 f0       	push   $0xf013b554
f011b300:	68 e9 01 00 00       	push   $0x1e9
f011b305:	68 3a b5 13 f0       	push   $0xf013b53a
f011b30a:	e8 f6 4e fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b30f:	e8 9d 1e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b314:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b317:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b31c:	74 17                	je     f011b335 <test_kmalloc_bestfit1+0xaee>
f011b31e:	83 ec 04             	sub    $0x4,%esp
f011b321:	68 97 b9 13 f0       	push   $0xf013b997
f011b326:	68 ea 01 00 00       	push   $0x1ea
f011b32b:	68 3a b5 13 f0       	push   $0xf013b53a
f011b330:	e8 d0 4e fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b335:	e8 77 1e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b33a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b33d:	e8 6d 8a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b342:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f011b345:	83 ec 0c             	sub    $0xc,%esp
f011b348:	68 00 00 08 00       	push   $0x80000
f011b34d:	e8 12 c8 fe ff       	call   f0107b64 <kmalloc>
f011b352:	83 c4 10             	add    $0x10,%esp
f011b355:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011b35b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b361:	89 c1                	mov    %eax,%ecx
f011b363:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b36a:	10 00 00 
f011b36d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b373:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b378:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b37e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b384:	ba 00 00 00 00       	mov    $0x0,%edx
f011b389:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b38f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b395:	29 d0                	sub    %edx,%eax
f011b397:	89 c3                	mov    %eax,%ebx
f011b399:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b3a0:	10 00 00 
f011b3a3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b3a8:	0f b6 d0             	movzbl %al,%edx
f011b3ab:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b3b1:	01 d0                	add    %edx,%eax
f011b3b3:	48                   	dec    %eax
f011b3b4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b3ba:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b3c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3c5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b3cb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b3d1:	29 d0                	sub    %edx,%eax
f011b3d3:	01 c3                	add    %eax,%ebx
f011b3d5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b3dc:	10 00 00 
f011b3df:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b3e4:	0f b6 c0             	movzbl %al,%eax
f011b3e7:	c1 e0 04             	shl    $0x4,%eax
f011b3ea:	89 c2                	mov    %eax,%edx
f011b3ec:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b3f2:	01 d0                	add    %edx,%eax
f011b3f4:	48                   	dec    %eax
f011b3f5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b3fb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b401:	ba 00 00 00 00       	mov    $0x0,%edx
f011b406:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b40c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b412:	29 d0                	sub    %edx,%eax
f011b414:	01 d8                	add    %ebx,%eax
f011b416:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011b41b:	39 c1                	cmp    %eax,%ecx
f011b41d:	74 17                	je     f011b436 <test_kmalloc_bestfit1+0xbef>
f011b41f:	83 ec 04             	sub    $0x4,%esp
f011b422:	68 54 b9 13 f0       	push   $0xf013b954
f011b427:	68 f3 01 00 00       	push   $0x1f3
f011b42c:	68 3a b5 13 f0       	push   $0xf013b53a
f011b431:	e8 cf 4d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b436:	e8 74 89 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b43b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b43e:	74 17                	je     f011b457 <test_kmalloc_bestfit1+0xc10>
f011b440:	83 ec 04             	sub    $0x4,%esp
f011b443:	68 54 b5 13 f0       	push   $0xf013b554
f011b448:	68 f4 01 00 00       	push   $0x1f4
f011b44d:	68 3a b5 13 f0       	push   $0xf013b53a
f011b452:	e8 ae 4d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011b457:	e8 55 1d ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b45c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b45f:	29 c2                	sub    %eax,%edx
f011b461:	89 d0                	mov    %edx,%eax
f011b463:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b468:	74 17                	je     f011b481 <test_kmalloc_bestfit1+0xc3a>
f011b46a:	83 ec 04             	sub    $0x4,%esp
f011b46d:	68 84 b9 13 f0       	push   $0xf013b984
f011b472:	68 f5 01 00 00       	push   $0x1f5
f011b477:	68 3a b5 13 f0       	push   $0xf013b53a
f011b47c:	e8 84 4d fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011b481:	e8 2b 1d ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b486:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b489:	e8 21 89 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b48e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b491:	83 ec 0c             	sub    $0xc,%esp
f011b494:	68 00 fc 0f 00       	push   $0xffc00
f011b499:	e8 c6 c6 fe ff       	call   f0107b64 <kmalloc>
f011b49e:	83 c4 10             	add    $0x10,%esp
f011b4a1:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011b4a7:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011b4ad:	89 c1                	mov    %eax,%ecx
f011b4af:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b4b6:	10 00 00 
f011b4b9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b4bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b4c4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b4ca:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b4d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4d5:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b4db:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b4e1:	29 d0                	sub    %edx,%eax
f011b4e3:	89 c3                	mov    %eax,%ebx
f011b4e5:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b4ec:	10 00 00 
f011b4ef:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b4f4:	0f b6 d0             	movzbl %al,%edx
f011b4f7:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b4fd:	01 d0                	add    %edx,%eax
f011b4ff:	48                   	dec    %eax
f011b500:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b506:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b50c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b511:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b517:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b51d:	29 d0                	sub    %edx,%eax
f011b51f:	01 c3                	add    %eax,%ebx
f011b521:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b528:	10 00 00 
f011b52b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b530:	0f b6 c0             	movzbl %al,%eax
f011b533:	c1 e0 04             	shl    $0x4,%eax
f011b536:	89 c2                	mov    %eax,%edx
f011b538:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b53e:	01 d0                	add    %edx,%eax
f011b540:	48                   	dec    %eax
f011b541:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b547:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b54d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b552:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b558:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b55e:	29 d0                	sub    %edx,%eax
f011b560:	01 d8                	add    %ebx,%eax
f011b562:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011b567:	39 c1                	cmp    %eax,%ecx
f011b569:	74 17                	je     f011b582 <test_kmalloc_bestfit1+0xd3b>
f011b56b:	83 ec 04             	sub    $0x4,%esp
f011b56e:	68 54 b9 13 f0       	push   $0xf013b954
f011b573:	68 fb 01 00 00       	push   $0x1fb
f011b578:	68 3a b5 13 f0       	push   $0xf013b53a
f011b57d:	e8 83 4c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b582:	e8 28 88 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b587:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b58a:	74 17                	je     f011b5a3 <test_kmalloc_bestfit1+0xd5c>
f011b58c:	83 ec 04             	sub    $0x4,%esp
f011b58f:	68 54 b5 13 f0       	push   $0xf013b554
f011b594:	68 fc 01 00 00       	push   $0x1fc
f011b599:	68 3a b5 13 f0       	push   $0xf013b53a
f011b59e:	e8 62 4c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011b5a3:	e8 09 1c ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b5a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b5ab:	29 c2                	sub    %eax,%edx
f011b5ad:	89 d0                	mov    %edx,%eax
f011b5af:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b5b4:	74 17                	je     f011b5cd <test_kmalloc_bestfit1+0xd86>
f011b5b6:	83 ec 04             	sub    $0x4,%esp
f011b5b9:	68 84 b9 13 f0       	push   $0xf013b984
f011b5be:	68 fd 01 00 00       	push   $0x1fd
f011b5c3:	68 3a b5 13 f0       	push   $0xf013b53a
f011b5c8:	e8 38 4c fe ff       	call   f0100205 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011b5cd:	e8 df 1b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b5d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b5d5:	e8 d5 87 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b5da:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b5dd:	83 ec 0c             	sub    $0xc,%esp
f011b5e0:	68 00 fc 03 00       	push   $0x3fc00
f011b5e5:	e8 7a c5 fe ff       	call   f0107b64 <kmalloc>
f011b5ea:	83 c4 10             	add    $0x10,%esp
f011b5ed:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011b5f3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011b5f9:	89 c1                	mov    %eax,%ecx
f011b5fb:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b602:	10 00 00 
f011b605:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b60b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b610:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b616:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b61c:	ba 00 00 00 00       	mov    $0x0,%edx
f011b621:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b627:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b62d:	29 d0                	sub    %edx,%eax
f011b62f:	89 c3                	mov    %eax,%ebx
f011b631:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b638:	10 00 00 
f011b63b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b640:	0f b6 d0             	movzbl %al,%edx
f011b643:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b649:	01 d0                	add    %edx,%eax
f011b64b:	48                   	dec    %eax
f011b64c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b652:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b658:	ba 00 00 00 00       	mov    $0x0,%edx
f011b65d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b663:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b669:	29 d0                	sub    %edx,%eax
f011b66b:	01 c3                	add    %eax,%ebx
f011b66d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b674:	10 00 00 
f011b677:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b67c:	0f b6 c0             	movzbl %al,%eax
f011b67f:	c1 e0 04             	shl    $0x4,%eax
f011b682:	89 c2                	mov    %eax,%edx
f011b684:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b68a:	01 d0                	add    %edx,%eax
f011b68c:	48                   	dec    %eax
f011b68d:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b693:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b699:	ba 00 00 00 00       	mov    $0x0,%edx
f011b69e:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b6a4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b6aa:	29 d0                	sub    %edx,%eax
f011b6ac:	01 d8                	add    %ebx,%eax
f011b6ae:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011b6b3:	39 c1                	cmp    %eax,%ecx
f011b6b5:	74 17                	je     f011b6ce <test_kmalloc_bestfit1+0xe87>
f011b6b7:	83 ec 04             	sub    $0x4,%esp
f011b6ba:	68 54 b9 13 f0       	push   $0xf013b954
f011b6bf:	68 03 02 00 00       	push   $0x203
f011b6c4:	68 3a b5 13 f0       	push   $0xf013b53a
f011b6c9:	e8 37 4b fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b6ce:	e8 dc 86 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b6d3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b6d6:	74 17                	je     f011b6ef <test_kmalloc_bestfit1+0xea8>
f011b6d8:	83 ec 04             	sub    $0x4,%esp
f011b6db:	68 54 b5 13 f0       	push   $0xf013b554
f011b6e0:	68 04 02 00 00       	push   $0x204
f011b6e5:	68 3a b5 13 f0       	push   $0xf013b53a
f011b6ea:	e8 16 4b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011b6ef:	e8 bd 1a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b6f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b6f7:	29 c2                	sub    %eax,%edx
f011b6f9:	89 d0                	mov    %edx,%eax
f011b6fb:	83 f8 40             	cmp    $0x40,%eax
f011b6fe:	74 17                	je     f011b717 <test_kmalloc_bestfit1+0xed0>
f011b700:	83 ec 04             	sub    $0x4,%esp
f011b703:	68 84 b9 13 f0       	push   $0xf013b984
f011b708:	68 05 02 00 00       	push   $0x205
f011b70d:	68 3a b5 13 f0       	push   $0xf013b53a
f011b712:	e8 ee 4a fe ff       	call   f0100205 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011b717:	e8 95 1a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b71c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b71f:	e8 8b 86 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b724:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011b727:	83 ec 0c             	sub    $0xc,%esp
f011b72a:	68 00 fc 3f 00       	push   $0x3ffc00
f011b72f:	e8 30 c4 fe ff       	call   f0107b64 <kmalloc>
f011b734:	83 c4 10             	add    $0x10,%esp
f011b737:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011b73d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011b743:	89 c1                	mov    %eax,%ecx
f011b745:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b74c:	10 00 00 
f011b74f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b755:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b75a:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b760:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b766:	ba 00 00 00 00       	mov    $0x0,%edx
f011b76b:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b771:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b777:	29 d0                	sub    %edx,%eax
f011b779:	89 c3                	mov    %eax,%ebx
f011b77b:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b782:	10 00 00 
f011b785:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b78a:	0f b6 d0             	movzbl %al,%edx
f011b78d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b793:	01 d0                	add    %edx,%eax
f011b795:	48                   	dec    %eax
f011b796:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b79c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b7a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7a7:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b7ad:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b7b3:	29 d0                	sub    %edx,%eax
f011b7b5:	01 c3                	add    %eax,%ebx
f011b7b7:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b7be:	10 00 00 
f011b7c1:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b7c6:	0f b6 c0             	movzbl %al,%eax
f011b7c9:	c1 e0 04             	shl    $0x4,%eax
f011b7cc:	89 c2                	mov    %eax,%edx
f011b7ce:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b7d4:	01 d0                	add    %edx,%eax
f011b7d6:	48                   	dec    %eax
f011b7d7:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b7dd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b7e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7e8:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b7ee:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b7f4:	29 d0                	sub    %edx,%eax
f011b7f6:	01 d8                	add    %ebx,%eax
f011b7f8:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011b7fd:	39 c1                	cmp    %eax,%ecx
f011b7ff:	74 17                	je     f011b818 <test_kmalloc_bestfit1+0xfd1>
f011b801:	83 ec 04             	sub    $0x4,%esp
f011b804:	68 54 b9 13 f0       	push   $0xf013b954
f011b809:	68 0b 02 00 00       	push   $0x20b
f011b80e:	68 3a b5 13 f0       	push   $0xf013b53a
f011b813:	e8 ed 49 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b818:	e8 92 85 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b81d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b820:	74 17                	je     f011b839 <test_kmalloc_bestfit1+0xff2>
f011b822:	83 ec 04             	sub    $0x4,%esp
f011b825:	68 54 b5 13 f0       	push   $0xf013b554
f011b82a:	68 0c 02 00 00       	push   $0x20c
f011b82f:	68 3a b5 13 f0       	push   $0xf013b53a
f011b834:	e8 cc 49 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011b839:	e8 73 19 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b83e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b841:	29 c2                	sub    %eax,%edx
f011b843:	89 d0                	mov    %edx,%eax
f011b845:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b84a:	74 17                	je     f011b863 <test_kmalloc_bestfit1+0x101c>
f011b84c:	83 ec 04             	sub    $0x4,%esp
f011b84f:	68 84 b9 13 f0       	push   $0xf013b984
f011b854:	68 0d 02 00 00       	push   $0x20d
f011b859:	68 3a b5 13 f0       	push   $0xf013b53a
f011b85e:	e8 a2 49 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011b863:	e8 49 19 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b868:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b86b:	e8 3f 85 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b870:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011b873:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b879:	83 ec 0c             	sub    $0xc,%esp
f011b87c:	50                   	push   %eax
f011b87d:	e8 ea c3 fe ff       	call   f0107c6c <kfree>
f011b882:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b885:	e8 25 85 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b88a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b88d:	74 17                	je     f011b8a6 <test_kmalloc_bestfit1+0x105f>
f011b88f:	83 ec 04             	sub    $0x4,%esp
f011b892:	68 54 b5 13 f0       	push   $0xf013b554
f011b897:	68 16 02 00 00       	push   $0x216
f011b89c:	68 3a b5 13 f0       	push   $0xf013b53a
f011b8a1:	e8 5f 49 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011b8a6:	e8 06 19 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b8ab:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b8ae:	3d 00 01 00 00       	cmp    $0x100,%eax
f011b8b3:	74 17                	je     f011b8cc <test_kmalloc_bestfit1+0x1085>
f011b8b5:	83 ec 04             	sub    $0x4,%esp
f011b8b8:	68 97 b9 13 f0       	push   $0xf013b997
f011b8bd:	68 17 02 00 00       	push   $0x217
f011b8c2:	68 3a b5 13 f0       	push   $0xf013b53a
f011b8c7:	e8 39 49 fe ff       	call   f0100205 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011b8cc:	e8 e0 18 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b8d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8d4:	e8 d6 84 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b8d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011b8dc:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011b8e2:	83 ec 0c             	sub    $0xc,%esp
f011b8e5:	50                   	push   %eax
f011b8e6:	e8 81 c3 fe ff       	call   f0107c6c <kfree>
f011b8eb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b8ee:	e8 bc 84 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b8f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b8f6:	74 17                	je     f011b90f <test_kmalloc_bestfit1+0x10c8>
f011b8f8:	83 ec 04             	sub    $0x4,%esp
f011b8fb:	68 54 b5 13 f0       	push   $0xf013b554
f011b900:	68 1d 02 00 00       	push   $0x21d
f011b905:	68 3a b5 13 f0       	push   $0xf013b53a
f011b90a:	e8 f6 48 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011b90f:	e8 9d 18 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b914:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011b917:	3d 80 00 00 00       	cmp    $0x80,%eax
f011b91c:	74 17                	je     f011b935 <test_kmalloc_bestfit1+0x10ee>
f011b91e:	83 ec 04             	sub    $0x4,%esp
f011b921:	68 97 b9 13 f0       	push   $0xf013b997
f011b926:	68 1e 02 00 00       	push   $0x21e
f011b92b:	68 3a b5 13 f0       	push   $0xf013b53a
f011b930:	e8 d0 48 fe ff       	call   f0100205 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011b935:	e8 77 18 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011b93a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b93d:	e8 6d 84 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011b942:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011b945:	83 ec 0c             	sub    $0xc,%esp
f011b948:	68 00 fc 1f 00       	push   $0x1ffc00
f011b94d:	e8 12 c2 fe ff       	call   f0107b64 <kmalloc>
f011b952:	83 c4 10             	add    $0x10,%esp
f011b955:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011b95b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011b961:	89 c1                	mov    %eax,%ecx
f011b963:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b96a:	10 00 00 
f011b96d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b973:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b978:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b97e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b984:	ba 00 00 00 00       	mov    $0x0,%edx
f011b989:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b98f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b995:	29 d0                	sub    %edx,%eax
f011b997:	89 c3                	mov    %eax,%ebx
f011b999:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b9a0:	10 00 00 
f011b9a3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b9a8:	0f b6 d0             	movzbl %al,%edx
f011b9ab:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b9b1:	01 d0                	add    %edx,%eax
f011b9b3:	48                   	dec    %eax
f011b9b4:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b9ba:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b9c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011b9c5:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b9cb:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b9d1:	29 d0                	sub    %edx,%eax
f011b9d3:	01 c3                	add    %eax,%ebx
f011b9d5:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b9dc:	10 00 00 
f011b9df:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011b9e4:	0f b6 c0             	movzbl %al,%eax
f011b9e7:	c1 e0 04             	shl    $0x4,%eax
f011b9ea:	89 c2                	mov    %eax,%edx
f011b9ec:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b9f2:	01 d0                	add    %edx,%eax
f011b9f4:	48                   	dec    %eax
f011b9f5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b9fb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ba01:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba06:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011ba0c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ba12:	29 d0                	sub    %edx,%eax
f011ba14:	01 d8                	add    %ebx,%eax
f011ba16:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011ba1b:	39 c1                	cmp    %eax,%ecx
f011ba1d:	74 17                	je     f011ba36 <test_kmalloc_bestfit1+0x11ef>
f011ba1f:	83 ec 04             	sub    $0x4,%esp
f011ba22:	68 54 b9 13 f0       	push   $0xf013b954
f011ba27:	68 27 02 00 00       	push   $0x227
f011ba2c:	68 3a b5 13 f0       	push   $0xf013b53a
f011ba31:	e8 cf 47 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ba36:	e8 74 83 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ba3b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ba3e:	74 17                	je     f011ba57 <test_kmalloc_bestfit1+0x1210>
f011ba40:	83 ec 04             	sub    $0x4,%esp
f011ba43:	68 54 b5 13 f0       	push   $0xf013b554
f011ba48:	68 28 02 00 00       	push   $0x228
f011ba4d:	68 3a b5 13 f0       	push   $0xf013b53a
f011ba52:	e8 ae 47 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011ba57:	e8 55 17 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ba5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ba5f:	29 c2                	sub    %eax,%edx
f011ba61:	89 d0                	mov    %edx,%eax
f011ba63:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ba68:	74 17                	je     f011ba81 <test_kmalloc_bestfit1+0x123a>
f011ba6a:	83 ec 04             	sub    $0x4,%esp
f011ba6d:	68 84 b9 13 f0       	push   $0xf013b984
f011ba72:	68 29 02 00 00       	push   $0x229
f011ba77:	68 3a b5 13 f0       	push   $0xf013b53a
f011ba7c:	e8 84 47 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011ba81:	83 ec 0c             	sub    $0xc,%esp
f011ba84:	68 a4 b9 13 f0       	push   $0xf013b9a4
f011ba89:	e8 80 52 fe ff       	call   f0100d0e <cprintf>
f011ba8e:	83 c4 10             	add    $0x10,%esp

	return 1;
f011ba91:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011ba96:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ba99:	5b                   	pop    %ebx
f011ba9a:	5f                   	pop    %edi
f011ba9b:	5d                   	pop    %ebp
f011ba9c:	c3                   	ret    

f011ba9d <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011ba9d:	55                   	push   %ebp
f011ba9e:	89 e5                	mov    %esp,%ebp
f011baa0:	57                   	push   %edi
f011baa1:	53                   	push   %ebx
f011baa2:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011baa8:	83 ec 0c             	sub    $0xc,%esp
f011baab:	68 7c b4 13 f0       	push   $0xf013b47c
f011bab0:	e8 59 52 fe ff       	call   f0100d0e <cprintf>
f011bab5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011bab8:	83 ec 0c             	sub    $0xc,%esp
f011babb:	68 ac b4 13 f0       	push   $0xf013b4ac
f011bac0:	e8 49 52 fe ff       	call   f0100d0e <cprintf>
f011bac5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011bac8:	83 ec 0c             	sub    $0xc,%esp
f011bacb:	68 7c b4 13 f0       	push   $0xf013b47c
f011bad0:	e8 39 52 fe ff       	call   f0100d0e <cprintf>
f011bad5:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011bad8:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011bade:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bae3:	b8 00 00 00 00       	mov    $0x0,%eax
f011bae8:	89 d7                	mov    %edx,%edi
f011baea:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011baec:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011baf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011baf6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bafb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011bafe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bb01:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb06:	f7 75 f4             	divl   -0xc(%ebp)
f011bb09:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011bb0c:	29 d0                	sub    %edx,%eax
f011bb0e:	89 c1                	mov    %eax,%ecx
f011bb10:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011bb17:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011bb1c:	0f b6 d0             	movzbl %al,%edx
f011bb1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011bb22:	01 d0                	add    %edx,%eax
f011bb24:	48                   	dec    %eax
f011bb25:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011bb28:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bb2b:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb30:	f7 75 ec             	divl   -0x14(%ebp)
f011bb33:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011bb36:	29 d0                	sub    %edx,%eax
f011bb38:	01 c1                	add    %eax,%ecx
f011bb3a:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011bb41:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011bb46:	0f b6 c0             	movzbl %al,%eax
f011bb49:	c1 e0 04             	shl    $0x4,%eax
f011bb4c:	89 c2                	mov    %eax,%edx
f011bb4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011bb51:	01 d0                	add    %edx,%eax
f011bb53:	48                   	dec    %eax
f011bb54:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011bb57:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bb5a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb5f:	f7 75 e4             	divl   -0x1c(%ebp)
f011bb62:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bb65:	29 d0                	sub    %edx,%eax
f011bb67:	01 c8                	add    %ecx,%eax
f011bb69:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011bb6e:	29 c2                	sub    %eax,%edx
f011bb70:	89 d0                	mov    %edx,%eax
f011bb72:	83 ec 0c             	sub    $0xc,%esp
f011bb75:	50                   	push   %eax
f011bb76:	e8 e9 bf fe ff       	call   f0107b64 <kmalloc>
f011bb7b:	83 c4 10             	add    $0x10,%esp
f011bb7e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011bb84:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bb8a:	85 c0                	test   %eax,%eax
f011bb8c:	74 17                	je     f011bba5 <test_kmalloc_bestfit2+0x108>
f011bb8e:	83 ec 04             	sub    $0x4,%esp
f011bb91:	68 ec b9 13 f0       	push   $0xf013b9ec
f011bb96:	68 3f 02 00 00       	push   $0x23f
f011bb9b:	68 3a b5 13 f0       	push   $0xf013b53a
f011bba0:	e8 60 46 fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bba5:	e8 07 16 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011bbaa:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bbad:	e8 fd 81 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011bbb2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011bbb5:	83 ec 0c             	sub    $0xc,%esp
f011bbb8:	68 00 fc 1f 00       	push   $0x1ffc00
f011bbbd:	e8 a2 bf fe ff       	call   f0107b64 <kmalloc>
f011bbc2:	83 c4 10             	add    $0x10,%esp
f011bbc5:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011bbcb:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011bbd1:	89 c1                	mov    %eax,%ecx
f011bbd3:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011bbda:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bbdd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bbe2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011bbe5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bbe8:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbed:	f7 75 d4             	divl   -0x2c(%ebp)
f011bbf0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bbf3:	29 d0                	sub    %edx,%eax
f011bbf5:	89 c3                	mov    %eax,%ebx
f011bbf7:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bbfe:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011bc03:	0f b6 d0             	movzbl %al,%edx
f011bc06:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bc09:	01 d0                	add    %edx,%eax
f011bc0b:	48                   	dec    %eax
f011bc0c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bc0f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bc12:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc17:	f7 75 cc             	divl   -0x34(%ebp)
f011bc1a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bc1d:	29 d0                	sub    %edx,%eax
f011bc1f:	01 c3                	add    %eax,%ebx
f011bc21:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bc28:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011bc2d:	0f b6 c0             	movzbl %al,%eax
f011bc30:	c1 e0 04             	shl    $0x4,%eax
f011bc33:	89 c2                	mov    %eax,%edx
f011bc35:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bc38:	01 d0                	add    %edx,%eax
f011bc3a:	48                   	dec    %eax
f011bc3b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bc3e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bc41:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc46:	f7 75 c4             	divl   -0x3c(%ebp)
f011bc49:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bc4c:	29 d0                	sub    %edx,%eax
f011bc4e:	01 d8                	add    %ebx,%eax
f011bc50:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bc55:	39 c1                	cmp    %eax,%ecx
f011bc57:	74 17                	je     f011bc70 <test_kmalloc_bestfit2+0x1d3>
f011bc59:	83 ec 04             	sub    $0x4,%esp
f011bc5c:	68 54 b9 13 f0       	push   $0xf013b954
f011bc61:	68 49 02 00 00       	push   $0x249
f011bc66:	68 3a b5 13 f0       	push   $0xf013b53a
f011bc6b:	e8 95 45 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc70:	e8 3a 81 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011bc75:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bc78:	74 17                	je     f011bc91 <test_kmalloc_bestfit2+0x1f4>
f011bc7a:	83 ec 04             	sub    $0x4,%esp
f011bc7d:	68 54 b5 13 f0       	push   $0xf013b554
f011bc82:	68 4a 02 00 00       	push   $0x24a
f011bc87:	68 3a b5 13 f0       	push   $0xf013b53a
f011bc8c:	e8 74 45 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bc91:	e8 1b 15 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011bc96:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bc99:	29 c2                	sub    %eax,%edx
f011bc9b:	89 d0                	mov    %edx,%eax
f011bc9d:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bca2:	74 17                	je     f011bcbb <test_kmalloc_bestfit2+0x21e>
f011bca4:	83 ec 04             	sub    $0x4,%esp
f011bca7:	68 84 b9 13 f0       	push   $0xf013b984
f011bcac:	68 4b 02 00 00       	push   $0x24b
f011bcb1:	68 3a b5 13 f0       	push   $0xf013b53a
f011bcb6:	e8 4a 45 fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bcbb:	e8 f1 14 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011bcc0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bcc3:	e8 e7 80 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011bcc8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011bccb:	83 ec 0c             	sub    $0xc,%esp
f011bcce:	68 00 fc 1f 00       	push   $0x1ffc00
f011bcd3:	e8 8c be fe ff       	call   f0107b64 <kmalloc>
f011bcd8:	83 c4 10             	add    $0x10,%esp
f011bcdb:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bce1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bce7:	89 c1                	mov    %eax,%ecx
f011bce9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bcf0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bcf3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bcf8:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bcfb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bcfe:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd03:	f7 75 bc             	divl   -0x44(%ebp)
f011bd06:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bd09:	29 d0                	sub    %edx,%eax
f011bd0b:	89 c3                	mov    %eax,%ebx
f011bd0d:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bd14:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011bd19:	0f b6 d0             	movzbl %al,%edx
f011bd1c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bd1f:	01 d0                	add    %edx,%eax
f011bd21:	48                   	dec    %eax
f011bd22:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bd25:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bd28:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd2d:	f7 75 b4             	divl   -0x4c(%ebp)
f011bd30:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bd33:	29 d0                	sub    %edx,%eax
f011bd35:	01 c3                	add    %eax,%ebx
f011bd37:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bd3e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011bd43:	0f b6 c0             	movzbl %al,%eax
f011bd46:	c1 e0 04             	shl    $0x4,%eax
f011bd49:	89 c2                	mov    %eax,%edx
f011bd4b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bd4e:	01 d0                	add    %edx,%eax
f011bd50:	48                   	dec    %eax
f011bd51:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bd54:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bd57:	ba 00 00 00 00       	mov    $0x0,%edx
f011bd5c:	f7 75 ac             	divl   -0x54(%ebp)
f011bd5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bd62:	29 d0                	sub    %edx,%eax
f011bd64:	01 d8                	add    %ebx,%eax
f011bd66:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bd6b:	39 c1                	cmp    %eax,%ecx
f011bd6d:	74 17                	je     f011bd86 <test_kmalloc_bestfit2+0x2e9>
f011bd6f:	83 ec 04             	sub    $0x4,%esp
f011bd72:	68 54 b9 13 f0       	push   $0xf013b954
f011bd77:	68 51 02 00 00       	push   $0x251
f011bd7c:	68 3a b5 13 f0       	push   $0xf013b53a
f011bd81:	e8 7f 44 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd86:	e8 24 80 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011bd8b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bd8e:	74 17                	je     f011bda7 <test_kmalloc_bestfit2+0x30a>
f011bd90:	83 ec 04             	sub    $0x4,%esp
f011bd93:	68 54 b5 13 f0       	push   $0xf013b554
f011bd98:	68 52 02 00 00       	push   $0x252
f011bd9d:	68 3a b5 13 f0       	push   $0xf013b53a
f011bda2:	e8 5e 44 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011bda7:	e8 05 14 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011bdac:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bdaf:	29 c2                	sub    %eax,%edx
f011bdb1:	89 d0                	mov    %edx,%eax
f011bdb3:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bdb8:	74 17                	je     f011bdd1 <test_kmalloc_bestfit2+0x334>
f011bdba:	83 ec 04             	sub    $0x4,%esp
f011bdbd:	68 84 b9 13 f0       	push   $0xf013b984
f011bdc2:	68 53 02 00 00       	push   $0x253
f011bdc7:	68 3a b5 13 f0       	push   $0xf013b53a
f011bdcc:	e8 34 44 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bdd1:	e8 db 13 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011bdd6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011bdd9:	e8 d1 7f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011bdde:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011bde1:	83 ec 0c             	sub    $0xc,%esp
f011bde4:	68 00 08 00 00       	push   $0x800
f011bde9:	e8 76 bd fe ff       	call   f0107b64 <kmalloc>
f011bdee:	83 c4 10             	add    $0x10,%esp
f011bdf1:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011bdf7:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bdfd:	89 c1                	mov    %eax,%ecx
f011bdff:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011be06:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011be09:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011be0e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011be11:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011be14:	ba 00 00 00 00       	mov    $0x0,%edx
f011be19:	f7 75 a4             	divl   -0x5c(%ebp)
f011be1c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011be1f:	29 d0                	sub    %edx,%eax
f011be21:	89 c3                	mov    %eax,%ebx
f011be23:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011be2a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011be2f:	0f b6 d0             	movzbl %al,%edx
f011be32:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011be35:	01 d0                	add    %edx,%eax
f011be37:	48                   	dec    %eax
f011be38:	89 45 98             	mov    %eax,-0x68(%ebp)
f011be3b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011be3e:	ba 00 00 00 00       	mov    $0x0,%edx
f011be43:	f7 75 9c             	divl   -0x64(%ebp)
f011be46:	8b 45 98             	mov    -0x68(%ebp),%eax
f011be49:	29 d0                	sub    %edx,%eax
f011be4b:	01 c3                	add    %eax,%ebx
f011be4d:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011be54:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011be59:	0f b6 c0             	movzbl %al,%eax
f011be5c:	c1 e0 04             	shl    $0x4,%eax
f011be5f:	89 c2                	mov    %eax,%edx
f011be61:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011be64:	01 d0                	add    %edx,%eax
f011be66:	48                   	dec    %eax
f011be67:	89 45 90             	mov    %eax,-0x70(%ebp)
f011be6a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be6d:	ba 00 00 00 00       	mov    $0x0,%edx
f011be72:	f7 75 94             	divl   -0x6c(%ebp)
f011be75:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be78:	29 d0                	sub    %edx,%eax
f011be7a:	01 d8                	add    %ebx,%eax
f011be7c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011be81:	39 c1                	cmp    %eax,%ecx
f011be83:	74 17                	je     f011be9c <test_kmalloc_bestfit2+0x3ff>
f011be85:	83 ec 04             	sub    $0x4,%esp
f011be88:	68 54 b9 13 f0       	push   $0xf013b954
f011be8d:	68 59 02 00 00       	push   $0x259
f011be92:	68 3a b5 13 f0       	push   $0xf013b53a
f011be97:	e8 69 43 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be9c:	e8 0e 7f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011bea1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bea4:	74 17                	je     f011bebd <test_kmalloc_bestfit2+0x420>
f011bea6:	83 ec 04             	sub    $0x4,%esp
f011bea9:	68 54 b5 13 f0       	push   $0xf013b554
f011beae:	68 5a 02 00 00       	push   $0x25a
f011beb3:	68 3a b5 13 f0       	push   $0xf013b53a
f011beb8:	e8 48 43 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bebd:	e8 ef 12 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011bec2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bec5:	29 c2                	sub    %eax,%edx
f011bec7:	89 d0                	mov    %edx,%eax
f011bec9:	83 f8 01             	cmp    $0x1,%eax
f011becc:	74 17                	je     f011bee5 <test_kmalloc_bestfit2+0x448>
f011bece:	83 ec 04             	sub    $0x4,%esp
f011bed1:	68 84 b9 13 f0       	push   $0xf013b984
f011bed6:	68 5b 02 00 00       	push   $0x25b
f011bedb:	68 3a b5 13 f0       	push   $0xf013b53a
f011bee0:	e8 20 43 fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011bee5:	e8 c7 12 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011beea:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011beed:	e8 bd 7e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011bef2:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011bef5:	83 ec 0c             	sub    $0xc,%esp
f011bef8:	68 00 08 00 00       	push   $0x800
f011befd:	e8 62 bc fe ff       	call   f0107b64 <kmalloc>
f011bf02:	83 c4 10             	add    $0x10,%esp
f011bf05:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011bf0b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011bf11:	89 c1                	mov    %eax,%ecx
f011bf13:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011bf1a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011bf1d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bf22:	89 45 88             	mov    %eax,-0x78(%ebp)
f011bf25:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf28:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf2d:	f7 75 8c             	divl   -0x74(%ebp)
f011bf30:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bf33:	29 d0                	sub    %edx,%eax
f011bf35:	89 c3                	mov    %eax,%ebx
f011bf37:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bf3e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011bf43:	0f b6 d0             	movzbl %al,%edx
f011bf46:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bf49:	01 d0                	add    %edx,%eax
f011bf4b:	48                   	dec    %eax
f011bf4c:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bf4f:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf52:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf57:	f7 75 84             	divl   -0x7c(%ebp)
f011bf5a:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bf5d:	29 d0                	sub    %edx,%eax
f011bf5f:	01 c3                	add    %eax,%ebx
f011bf61:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011bf68:	10 00 00 
f011bf6b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011bf70:	0f b6 c0             	movzbl %al,%eax
f011bf73:	c1 e0 04             	shl    $0x4,%eax
f011bf76:	89 c2                	mov    %eax,%edx
f011bf78:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bf7e:	01 d0                	add    %edx,%eax
f011bf80:	48                   	dec    %eax
f011bf81:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bf87:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf92:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bf98:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf9e:	29 d0                	sub    %edx,%eax
f011bfa0:	01 d8                	add    %ebx,%eax
f011bfa2:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011bfa7:	39 c1                	cmp    %eax,%ecx
f011bfa9:	74 17                	je     f011bfc2 <test_kmalloc_bestfit2+0x525>
f011bfab:	83 ec 04             	sub    $0x4,%esp
f011bfae:	68 54 b9 13 f0       	push   $0xf013b954
f011bfb3:	68 61 02 00 00       	push   $0x261
f011bfb8:	68 3a b5 13 f0       	push   $0xf013b53a
f011bfbd:	e8 43 42 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bfc2:	e8 e8 7d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011bfc7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011bfca:	74 17                	je     f011bfe3 <test_kmalloc_bestfit2+0x546>
f011bfcc:	83 ec 04             	sub    $0x4,%esp
f011bfcf:	68 54 b5 13 f0       	push   $0xf013b554
f011bfd4:	68 62 02 00 00       	push   $0x262
f011bfd9:	68 3a b5 13 f0       	push   $0xf013b53a
f011bfde:	e8 22 42 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011bfe3:	e8 c9 11 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011bfe8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bfeb:	29 c2                	sub    %eax,%edx
f011bfed:	89 d0                	mov    %edx,%eax
f011bfef:	83 f8 01             	cmp    $0x1,%eax
f011bff2:	74 17                	je     f011c00b <test_kmalloc_bestfit2+0x56e>
f011bff4:	83 ec 04             	sub    $0x4,%esp
f011bff7:	68 84 b9 13 f0       	push   $0xf013b984
f011bffc:	68 63 02 00 00       	push   $0x263
f011c001:	68 3a b5 13 f0       	push   $0xf013b53a
f011c006:	e8 fa 41 fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c00b:	e8 a1 11 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c010:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c013:	e8 97 7d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c018:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011c01b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011c021:	83 ec 0c             	sub    $0xc,%esp
f011c024:	50                   	push   %eax
f011c025:	e8 42 bc fe ff       	call   f0107c6c <kfree>
f011c02a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c02d:	e8 7d 7d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c032:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c035:	74 17                	je     f011c04e <test_kmalloc_bestfit2+0x5b1>
f011c037:	83 ec 04             	sub    $0x4,%esp
f011c03a:	68 54 b5 13 f0       	push   $0xf013b554
f011c03f:	68 69 02 00 00       	push   $0x269
f011c044:	68 3a b5 13 f0       	push   $0xf013b53a
f011c049:	e8 b7 41 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011c04e:	e8 5e 11 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c053:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c056:	83 f8 01             	cmp    $0x1,%eax
f011c059:	74 17                	je     f011c072 <test_kmalloc_bestfit2+0x5d5>
f011c05b:	83 ec 04             	sub    $0x4,%esp
f011c05e:	68 84 b9 13 f0       	push   $0xf013b984
f011c063:	68 6a 02 00 00       	push   $0x26a
f011c068:	68 3a b5 13 f0       	push   $0xf013b53a
f011c06d:	e8 93 41 fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011c072:	e8 3a 11 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c077:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c07a:	e8 30 7d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c07f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011c082:	83 ec 0c             	sub    $0xc,%esp
f011c085:	68 00 1c 00 00       	push   $0x1c00
f011c08a:	e8 d5 ba fe ff       	call   f0107b64 <kmalloc>
f011c08f:	83 c4 10             	add    $0x10,%esp
f011c092:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011c098:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c09e:	89 c1                	mov    %eax,%ecx
f011c0a0:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011c0a7:	10 00 00 
f011c0aa:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c0b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c0b5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011c0bb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c0c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c0c6:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011c0cc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c0d2:	29 d0                	sub    %edx,%eax
f011c0d4:	89 c3                	mov    %eax,%ebx
f011c0d6:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c0dd:	10 00 00 
f011c0e0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c0e5:	0f b6 d0             	movzbl %al,%edx
f011c0e8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c0ee:	01 d0                	add    %edx,%eax
f011c0f0:	48                   	dec    %eax
f011c0f1:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c0f7:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c0fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011c102:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c108:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c10e:	29 d0                	sub    %edx,%eax
f011c110:	01 c3                	add    %eax,%ebx
f011c112:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c119:	10 00 00 
f011c11c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c121:	0f b6 c0             	movzbl %al,%eax
f011c124:	c1 e0 04             	shl    $0x4,%eax
f011c127:	89 c2                	mov    %eax,%edx
f011c129:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c12f:	01 d0                	add    %edx,%eax
f011c131:	48                   	dec    %eax
f011c132:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c138:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c13e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c143:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c149:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c14f:	29 d0                	sub    %edx,%eax
f011c151:	01 d8                	add    %ebx,%eax
f011c153:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011c158:	39 c1                	cmp    %eax,%ecx
f011c15a:	74 17                	je     f011c173 <test_kmalloc_bestfit2+0x6d6>
f011c15c:	83 ec 04             	sub    $0x4,%esp
f011c15f:	68 54 b9 13 f0       	push   $0xf013b954
f011c164:	68 70 02 00 00       	push   $0x270
f011c169:	68 3a b5 13 f0       	push   $0xf013b53a
f011c16e:	e8 92 40 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c173:	e8 37 7c fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c178:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c17b:	74 17                	je     f011c194 <test_kmalloc_bestfit2+0x6f7>
f011c17d:	83 ec 04             	sub    $0x4,%esp
f011c180:	68 54 b5 13 f0       	push   $0xf013b554
f011c185:	68 71 02 00 00       	push   $0x271
f011c18a:	68 3a b5 13 f0       	push   $0xf013b53a
f011c18f:	e8 71 40 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011c194:	e8 18 10 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c199:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c19c:	29 c2                	sub    %eax,%edx
f011c19e:	89 d0                	mov    %edx,%eax
f011c1a0:	83 f8 02             	cmp    $0x2,%eax
f011c1a3:	74 17                	je     f011c1bc <test_kmalloc_bestfit2+0x71f>
f011c1a5:	83 ec 04             	sub    $0x4,%esp
f011c1a8:	68 84 b9 13 f0       	push   $0xf013b984
f011c1ad:	68 72 02 00 00       	push   $0x272
f011c1b2:	68 3a b5 13 f0       	push   $0xf013b53a
f011c1b7:	e8 49 40 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c1bc:	e8 f0 0f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c1c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c1c4:	e8 e6 7b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c1c9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011c1cc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011c1d2:	83 ec 0c             	sub    $0xc,%esp
f011c1d5:	50                   	push   %eax
f011c1d6:	e8 91 ba fe ff       	call   f0107c6c <kfree>
f011c1db:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1de:	e8 cc 7b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c1e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c1e6:	74 17                	je     f011c1ff <test_kmalloc_bestfit2+0x762>
f011c1e8:	83 ec 04             	sub    $0x4,%esp
f011c1eb:	68 54 b5 13 f0       	push   $0xf013b554
f011c1f0:	68 78 02 00 00       	push   $0x278
f011c1f5:	68 3a b5 13 f0       	push   $0xf013b53a
f011c1fa:	e8 06 40 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011c1ff:	e8 ad 0f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c204:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c207:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c20c:	74 17                	je     f011c225 <test_kmalloc_bestfit2+0x788>
f011c20e:	83 ec 04             	sub    $0x4,%esp
f011c211:	68 08 b8 13 f0       	push   $0xf013b808
f011c216:	68 79 02 00 00       	push   $0x279
f011c21b:	68 3a b5 13 f0       	push   $0xf013b53a
f011c220:	e8 e0 3f fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c225:	e8 87 0f ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c22a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c22d:	e8 7d 7b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c232:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c235:	83 ec 0c             	sub    $0xc,%esp
f011c238:	68 00 fc 2f 00       	push   $0x2ffc00
f011c23d:	e8 22 b9 fe ff       	call   f0107b64 <kmalloc>
f011c242:	83 c4 10             	add    $0x10,%esp
f011c245:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c24b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c251:	89 c1                	mov    %eax,%ecx
f011c253:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c25a:	10 00 00 
f011c25d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c263:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c268:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c26e:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c274:	ba 00 00 00 00       	mov    $0x0,%edx
f011c279:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c27f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c285:	29 d0                	sub    %edx,%eax
f011c287:	89 c3                	mov    %eax,%ebx
f011c289:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c290:	10 00 00 
f011c293:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c298:	0f b6 d0             	movzbl %al,%edx
f011c29b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c2a1:	01 d0                	add    %edx,%eax
f011c2a3:	48                   	dec    %eax
f011c2a4:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c2aa:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c2b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2b5:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c2bb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c2c1:	29 d0                	sub    %edx,%eax
f011c2c3:	01 c3                	add    %eax,%ebx
f011c2c5:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c2cc:	10 00 00 
f011c2cf:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c2d4:	0f b6 c0             	movzbl %al,%eax
f011c2d7:	c1 e0 04             	shl    $0x4,%eax
f011c2da:	89 c2                	mov    %eax,%edx
f011c2dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c2e2:	01 d0                	add    %edx,%eax
f011c2e4:	48                   	dec    %eax
f011c2e5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c2eb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c2f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2f6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c2fc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c302:	29 d0                	sub    %edx,%eax
f011c304:	01 d8                	add    %ebx,%eax
f011c306:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011c30b:	39 c1                	cmp    %eax,%ecx
f011c30d:	74 17                	je     f011c326 <test_kmalloc_bestfit2+0x889>
f011c30f:	83 ec 04             	sub    $0x4,%esp
f011c312:	68 54 b9 13 f0       	push   $0xf013b954
f011c317:	68 7f 02 00 00       	push   $0x27f
f011c31c:	68 3a b5 13 f0       	push   $0xf013b53a
f011c321:	e8 df 3e fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c326:	e8 84 7a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c32b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c32e:	74 17                	je     f011c347 <test_kmalloc_bestfit2+0x8aa>
f011c330:	83 ec 04             	sub    $0x4,%esp
f011c333:	68 54 b5 13 f0       	push   $0xf013b554
f011c338:	68 80 02 00 00       	push   $0x280
f011c33d:	68 3a b5 13 f0       	push   $0xf013b53a
f011c342:	e8 be 3e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011c347:	e8 65 0e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c34c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c34f:	29 c2                	sub    %eax,%edx
f011c351:	89 d0                	mov    %edx,%eax
f011c353:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c358:	74 17                	je     f011c371 <test_kmalloc_bestfit2+0x8d4>
f011c35a:	83 ec 04             	sub    $0x4,%esp
f011c35d:	68 84 b9 13 f0       	push   $0xf013b984
f011c362:	68 81 02 00 00       	push   $0x281
f011c367:	68 3a b5 13 f0       	push   $0xf013b53a
f011c36c:	e8 94 3e fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c371:	e8 3b 0e ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c376:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c379:	e8 31 7a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c37e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011c381:	83 ec 0c             	sub    $0xc,%esp
f011c384:	68 00 18 20 00       	push   $0x201800
f011c389:	e8 d6 b7 fe ff       	call   f0107b64 <kmalloc>
f011c38e:	83 c4 10             	add    $0x10,%esp
f011c391:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c397:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c39d:	89 c1                	mov    %eax,%ecx
f011c39f:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c3a6:	10 00 00 
f011c3a9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c3af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c3b4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c3ba:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c3c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011c3c5:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c3cb:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c3d1:	29 d0                	sub    %edx,%eax
f011c3d3:	89 c3                	mov    %eax,%ebx
f011c3d5:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c3dc:	10 00 00 
f011c3df:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c3e4:	0f b6 d0             	movzbl %al,%edx
f011c3e7:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c3ed:	01 d0                	add    %edx,%eax
f011c3ef:	48                   	dec    %eax
f011c3f0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c3f6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c3fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011c401:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c407:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c40d:	29 d0                	sub    %edx,%eax
f011c40f:	01 c3                	add    %eax,%ebx
f011c411:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c418:	10 00 00 
f011c41b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c420:	0f b6 c0             	movzbl %al,%eax
f011c423:	c1 e0 04             	shl    $0x4,%eax
f011c426:	89 c2                	mov    %eax,%edx
f011c428:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c42e:	01 d0                	add    %edx,%eax
f011c430:	48                   	dec    %eax
f011c431:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c437:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c43d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c442:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c448:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c44e:	29 d0                	sub    %edx,%eax
f011c450:	01 d8                	add    %ebx,%eax
f011c452:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c457:	39 c1                	cmp    %eax,%ecx
f011c459:	74 17                	je     f011c472 <test_kmalloc_bestfit2+0x9d5>
f011c45b:	83 ec 04             	sub    $0x4,%esp
f011c45e:	68 54 b9 13 f0       	push   $0xf013b954
f011c463:	68 87 02 00 00       	push   $0x287
f011c468:	68 3a b5 13 f0       	push   $0xf013b53a
f011c46d:	e8 93 3d fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c472:	e8 38 79 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c477:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c47a:	74 17                	je     f011c493 <test_kmalloc_bestfit2+0x9f6>
f011c47c:	83 ec 04             	sub    $0x4,%esp
f011c47f:	68 54 b5 13 f0       	push   $0xf013b554
f011c484:	68 88 02 00 00       	push   $0x288
f011c489:	68 3a b5 13 f0       	push   $0xf013b53a
f011c48e:	e8 72 3d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011c493:	e8 19 0d ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c498:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c49b:	29 c2                	sub    %eax,%edx
f011c49d:	89 d0                	mov    %edx,%eax
f011c49f:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c4a4:	74 17                	je     f011c4bd <test_kmalloc_bestfit2+0xa20>
f011c4a6:	83 ec 04             	sub    $0x4,%esp
f011c4a9:	68 84 b9 13 f0       	push   $0xf013b984
f011c4ae:	68 89 02 00 00       	push   $0x289
f011c4b3:	68 3a b5 13 f0       	push   $0xf013b53a
f011c4b8:	e8 48 3d fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011c4bd:	e8 ef 0c ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c4c2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c4c5:	e8 e5 78 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c4ca:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011c4cd:	83 ec 0c             	sub    $0xc,%esp
f011c4d0:	68 00 fc 4f 00       	push   $0x4ffc00
f011c4d5:	e8 8a b6 fe ff       	call   f0107b64 <kmalloc>
f011c4da:	83 c4 10             	add    $0x10,%esp
f011c4dd:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011c4e3:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c4e9:	89 c1                	mov    %eax,%ecx
f011c4eb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c4f2:	10 00 00 
f011c4f5:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c4fb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c500:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c506:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c50c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c511:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c517:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c51d:	29 d0                	sub    %edx,%eax
f011c51f:	89 c3                	mov    %eax,%ebx
f011c521:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c528:	10 00 00 
f011c52b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c530:	0f b6 d0             	movzbl %al,%edx
f011c533:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c539:	01 d0                	add    %edx,%eax
f011c53b:	48                   	dec    %eax
f011c53c:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c542:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c548:	ba 00 00 00 00       	mov    $0x0,%edx
f011c54d:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c553:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c559:	29 d0                	sub    %edx,%eax
f011c55b:	01 c3                	add    %eax,%ebx
f011c55d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c564:	10 00 00 
f011c567:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c56c:	0f b6 c0             	movzbl %al,%eax
f011c56f:	c1 e0 04             	shl    $0x4,%eax
f011c572:	89 c2                	mov    %eax,%edx
f011c574:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c57a:	01 d0                	add    %edx,%eax
f011c57c:	48                   	dec    %eax
f011c57d:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c583:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c589:	ba 00 00 00 00       	mov    $0x0,%edx
f011c58e:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c594:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c59a:	29 d0                	sub    %edx,%eax
f011c59c:	01 d8                	add    %ebx,%eax
f011c59e:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011c5a3:	39 c1                	cmp    %eax,%ecx
f011c5a5:	74 17                	je     f011c5be <test_kmalloc_bestfit2+0xb21>
f011c5a7:	83 ec 04             	sub    $0x4,%esp
f011c5aa:	68 54 b9 13 f0       	push   $0xf013b954
f011c5af:	68 8f 02 00 00       	push   $0x28f
f011c5b4:	68 3a b5 13 f0       	push   $0xf013b53a
f011c5b9:	e8 47 3c fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5be:	e8 ec 77 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c5c3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c5c6:	74 17                	je     f011c5df <test_kmalloc_bestfit2+0xb42>
f011c5c8:	83 ec 04             	sub    $0x4,%esp
f011c5cb:	68 54 b5 13 f0       	push   $0xf013b554
f011c5d0:	68 90 02 00 00       	push   $0x290
f011c5d5:	68 3a b5 13 f0       	push   $0xf013b53a
f011c5da:	e8 26 3c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011c5df:	e8 cd 0b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c5e4:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c5e7:	29 c2                	sub    %eax,%edx
f011c5e9:	89 d0                	mov    %edx,%eax
f011c5eb:	3d 00 05 00 00       	cmp    $0x500,%eax
f011c5f0:	74 17                	je     f011c609 <test_kmalloc_bestfit2+0xb6c>
f011c5f2:	83 ec 04             	sub    $0x4,%esp
f011c5f5:	68 84 b9 13 f0       	push   $0xf013b984
f011c5fa:	68 91 02 00 00       	push   $0x291
f011c5ff:	68 3a b5 13 f0       	push   $0xf013b53a
f011c604:	e8 fc 3b fe ff       	call   f0100205 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c609:	e8 a3 0b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c60e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c611:	e8 99 77 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c616:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011c619:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c61f:	83 ec 0c             	sub    $0xc,%esp
f011c622:	50                   	push   %eax
f011c623:	e8 44 b6 fe ff       	call   f0107c6c <kfree>
f011c628:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c62b:	e8 7f 77 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c630:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c633:	74 17                	je     f011c64c <test_kmalloc_bestfit2+0xbaf>
f011c635:	83 ec 04             	sub    $0x4,%esp
f011c638:	68 54 b5 13 f0       	push   $0xf013b554
f011c63d:	68 97 02 00 00       	push   $0x297
f011c642:	68 3a b5 13 f0       	push   $0xf013b53a
f011c647:	e8 b9 3b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011c64c:	e8 60 0b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c651:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c654:	3d 02 02 00 00       	cmp    $0x202,%eax
f011c659:	74 17                	je     f011c672 <test_kmalloc_bestfit2+0xbd5>
f011c65b:	83 ec 04             	sub    $0x4,%esp
f011c65e:	68 08 b8 13 f0       	push   $0xf013b808
f011c663:	68 98 02 00 00       	push   $0x298
f011c668:	68 3a b5 13 f0       	push   $0xf013b53a
f011c66d:	e8 93 3b fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c672:	e8 3a 0b ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c677:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c67a:	e8 30 77 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c67f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011c682:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c688:	83 ec 0c             	sub    $0xc,%esp
f011c68b:	50                   	push   %eax
f011c68c:	e8 db b5 fe ff       	call   f0107c6c <kfree>
f011c691:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c694:	e8 16 77 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c699:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c69c:	74 17                	je     f011c6b5 <test_kmalloc_bestfit2+0xc18>
f011c69e:	83 ec 04             	sub    $0x4,%esp
f011c6a1:	68 54 b5 13 f0       	push   $0xf013b554
f011c6a6:	68 9e 02 00 00       	push   $0x29e
f011c6ab:	68 3a b5 13 f0       	push   $0xf013b53a
f011c6b0:	e8 50 3b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c6b5:	e8 f7 0a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c6ba:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c6bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c6c2:	74 17                	je     f011c6db <test_kmalloc_bestfit2+0xc3e>
f011c6c4:	83 ec 04             	sub    $0x4,%esp
f011c6c7:	68 34 ba 13 f0       	push   $0xf013ba34
f011c6cc:	68 9f 02 00 00       	push   $0x29f
f011c6d1:	68 3a b5 13 f0       	push   $0xf013b53a
f011c6d6:	e8 2a 3b fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c6db:	e8 d1 0a ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c6e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c6e3:	e8 c7 76 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c6e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011c6eb:	83 ec 0c             	sub    $0xc,%esp
f011c6ee:	68 00 fc 1f 00       	push   $0x1ffc00
f011c6f3:	e8 6c b4 fe ff       	call   f0107b64 <kmalloc>
f011c6f8:	83 c4 10             	add    $0x10,%esp
f011c6fb:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c701:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c707:	89 c1                	mov    %eax,%ecx
f011c709:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c710:	10 00 00 
f011c713:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c719:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c71e:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c724:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c72a:	ba 00 00 00 00       	mov    $0x0,%edx
f011c72f:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c735:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c73b:	29 d0                	sub    %edx,%eax
f011c73d:	89 c3                	mov    %eax,%ebx
f011c73f:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c746:	10 00 00 
f011c749:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c74e:	0f b6 d0             	movzbl %al,%edx
f011c751:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c757:	01 d0                	add    %edx,%eax
f011c759:	48                   	dec    %eax
f011c75a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c760:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c766:	ba 00 00 00 00       	mov    $0x0,%edx
f011c76b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c771:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c777:	29 d0                	sub    %edx,%eax
f011c779:	01 c3                	add    %eax,%ebx
f011c77b:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c782:	10 00 00 
f011c785:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c78a:	0f b6 c0             	movzbl %al,%eax
f011c78d:	c1 e0 04             	shl    $0x4,%eax
f011c790:	89 c2                	mov    %eax,%edx
f011c792:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c798:	01 d0                	add    %edx,%eax
f011c79a:	48                   	dec    %eax
f011c79b:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c7a1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c7a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7ac:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c7b2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c7b8:	29 d0                	sub    %edx,%eax
f011c7ba:	01 d8                	add    %ebx,%eax
f011c7bc:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011c7c1:	39 c1                	cmp    %eax,%ecx
f011c7c3:	74 17                	je     f011c7dc <test_kmalloc_bestfit2+0xd3f>
f011c7c5:	83 ec 04             	sub    $0x4,%esp
f011c7c8:	68 54 b9 13 f0       	push   $0xf013b954
f011c7cd:	68 a5 02 00 00       	push   $0x2a5
f011c7d2:	68 3a b5 13 f0       	push   $0xf013b53a
f011c7d7:	e8 29 3a fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c7dc:	e8 ce 75 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c7e1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c7e4:	74 17                	je     f011c7fd <test_kmalloc_bestfit2+0xd60>
f011c7e6:	83 ec 04             	sub    $0x4,%esp
f011c7e9:	68 54 b5 13 f0       	push   $0xf013b554
f011c7ee:	68 a6 02 00 00       	push   $0x2a6
f011c7f3:	68 3a b5 13 f0       	push   $0xf013b53a
f011c7f8:	e8 08 3a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011c7fd:	e8 af 09 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c802:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c805:	29 c2                	sub    %eax,%edx
f011c807:	89 d0                	mov    %edx,%eax
f011c809:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c80e:	74 17                	je     f011c827 <test_kmalloc_bestfit2+0xd8a>
f011c810:	83 ec 04             	sub    $0x4,%esp
f011c813:	68 72 ba 13 f0       	push   $0xf013ba72
f011c818:	68 a7 02 00 00       	push   $0x2a7
f011c81d:	68 3a b5 13 f0       	push   $0xf013b53a
f011c822:	e8 de 39 fe ff       	call   f0100205 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011c827:	e8 85 09 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c82c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c82f:	e8 7b 75 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c834:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011c837:	83 ec 0c             	sub    $0xc,%esp
f011c83a:	68 00 18 00 00       	push   $0x1800
f011c83f:	e8 20 b3 fe ff       	call   f0107b64 <kmalloc>
f011c844:	83 c4 10             	add    $0x10,%esp
f011c847:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011c84d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c853:	89 c1                	mov    %eax,%ecx
f011c855:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c85c:	10 00 00 
f011c85f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c865:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c86a:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c870:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c876:	ba 00 00 00 00       	mov    $0x0,%edx
f011c87b:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c881:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c887:	29 d0                	sub    %edx,%eax
f011c889:	89 c3                	mov    %eax,%ebx
f011c88b:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c892:	10 00 00 
f011c895:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c89a:	0f b6 d0             	movzbl %al,%edx
f011c89d:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c8a3:	01 d0                	add    %edx,%eax
f011c8a5:	48                   	dec    %eax
f011c8a6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c8ac:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c8b2:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8b7:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c8bd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c8c3:	29 d0                	sub    %edx,%eax
f011c8c5:	01 c3                	add    %eax,%ebx
f011c8c7:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c8ce:	10 00 00 
f011c8d1:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011c8d6:	0f b6 c0             	movzbl %al,%eax
f011c8d9:	c1 e0 04             	shl    $0x4,%eax
f011c8dc:	89 c2                	mov    %eax,%edx
f011c8de:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c8e4:	01 d0                	add    %edx,%eax
f011c8e6:	48                   	dec    %eax
f011c8e7:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c8ed:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c8f3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8f8:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c8fe:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c904:	29 d0                	sub    %edx,%eax
f011c906:	01 d8                	add    %ebx,%eax
f011c908:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011c90d:	39 c1                	cmp    %eax,%ecx
f011c90f:	74 17                	je     f011c928 <test_kmalloc_bestfit2+0xe8b>
f011c911:	83 ec 04             	sub    $0x4,%esp
f011c914:	68 54 b9 13 f0       	push   $0xf013b954
f011c919:	68 ad 02 00 00       	push   $0x2ad
f011c91e:	68 3a b5 13 f0       	push   $0xf013b53a
f011c923:	e8 dd 38 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c928:	e8 82 74 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c92d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c930:	74 17                	je     f011c949 <test_kmalloc_bestfit2+0xeac>
f011c932:	83 ec 04             	sub    $0x4,%esp
f011c935:	68 54 b5 13 f0       	push   $0xf013b554
f011c93a:	68 ae 02 00 00       	push   $0x2ae
f011c93f:	68 3a b5 13 f0       	push   $0xf013b53a
f011c944:	e8 bc 38 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011c949:	e8 63 08 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c94e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011c951:	29 c2                	sub    %eax,%edx
f011c953:	89 d0                	mov    %edx,%eax
f011c955:	83 f8 02             	cmp    $0x2,%eax
f011c958:	74 17                	je     f011c971 <test_kmalloc_bestfit2+0xed4>
f011c95a:	83 ec 04             	sub    $0x4,%esp
f011c95d:	68 72 ba 13 f0       	push   $0xf013ba72
f011c962:	68 af 02 00 00       	push   $0x2af
f011c967:	68 3a b5 13 f0       	push   $0xf013b53a
f011c96c:	e8 94 38 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c971:	e8 3b 08 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c976:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c979:	e8 31 74 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c97e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011c981:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c987:	83 ec 0c             	sub    $0xc,%esp
f011c98a:	50                   	push   %eax
f011c98b:	e8 dc b2 fe ff       	call   f0107c6c <kfree>
f011c990:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c993:	e8 17 74 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c998:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011c99b:	74 17                	je     f011c9b4 <test_kmalloc_bestfit2+0xf17>
f011c99d:	83 ec 04             	sub    $0x4,%esp
f011c9a0:	68 54 b5 13 f0       	push   $0xf013b554
f011c9a5:	68 b5 02 00 00       	push   $0x2b5
f011c9aa:	68 3a b5 13 f0       	push   $0xf013b53a
f011c9af:	e8 51 38 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011c9b4:	e8 f8 07 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c9b9:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011c9bc:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c9c1:	74 17                	je     f011c9da <test_kmalloc_bestfit2+0xf3d>
f011c9c3:	83 ec 04             	sub    $0x4,%esp
f011c9c6:	68 34 ba 13 f0       	push   $0xf013ba34
f011c9cb:	68 b6 02 00 00       	push   $0x2b6
f011c9d0:	68 3a b5 13 f0       	push   $0xf013b53a
f011c9d5:	e8 2b 38 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c9da:	e8 d2 07 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011c9df:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011c9e2:	e8 c8 73 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011c9e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011c9ea:	83 ec 0c             	sub    $0xc,%esp
f011c9ed:	68 00 fc 2f 00       	push   $0x2ffc00
f011c9f2:	e8 6d b1 fe ff       	call   f0107b64 <kmalloc>
f011c9f7:	83 c4 10             	add    $0x10,%esp
f011c9fa:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ca00:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011ca06:	89 c1                	mov    %eax,%ecx
f011ca08:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011ca0f:	10 00 00 
f011ca12:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ca18:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca1d:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011ca23:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ca29:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca2e:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011ca34:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ca3a:	29 d0                	sub    %edx,%eax
f011ca3c:	89 c3                	mov    %eax,%ebx
f011ca3e:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011ca45:	10 00 00 
f011ca48:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ca4d:	0f b6 d0             	movzbl %al,%edx
f011ca50:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ca56:	01 d0                	add    %edx,%eax
f011ca58:	48                   	dec    %eax
f011ca59:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011ca5f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ca65:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca6a:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011ca70:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ca76:	29 d0                	sub    %edx,%eax
f011ca78:	01 c3                	add    %eax,%ebx
f011ca7a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011ca81:	10 00 00 
f011ca84:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ca89:	0f b6 c0             	movzbl %al,%eax
f011ca8c:	c1 e0 04             	shl    $0x4,%eax
f011ca8f:	89 c2                	mov    %eax,%edx
f011ca91:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ca97:	01 d0                	add    %edx,%eax
f011ca99:	48                   	dec    %eax
f011ca9a:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011caa0:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011caa6:	ba 00 00 00 00       	mov    $0x0,%edx
f011caab:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011cab1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cab7:	29 d0                	sub    %edx,%eax
f011cab9:	01 d8                	add    %ebx,%eax
f011cabb:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011cac0:	39 c1                	cmp    %eax,%ecx
f011cac2:	74 17                	je     f011cadb <test_kmalloc_bestfit2+0x103e>
f011cac4:	83 ec 04             	sub    $0x4,%esp
f011cac7:	68 54 b9 13 f0       	push   $0xf013b954
f011cacc:	68 bc 02 00 00       	push   $0x2bc
f011cad1:	68 3a b5 13 f0       	push   $0xf013b53a
f011cad6:	e8 2a 37 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cadb:	e8 cf 72 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011cae0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cae3:	74 17                	je     f011cafc <test_kmalloc_bestfit2+0x105f>
f011cae5:	83 ec 04             	sub    $0x4,%esp
f011cae8:	68 54 b5 13 f0       	push   $0xf013b554
f011caed:	68 bd 02 00 00       	push   $0x2bd
f011caf2:	68 3a b5 13 f0       	push   $0xf013b53a
f011caf7:	e8 09 37 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cafc:	e8 b0 06 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011cb01:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cb04:	29 c2                	sub    %eax,%edx
f011cb06:	89 d0                	mov    %edx,%eax
f011cb08:	3d 00 03 00 00       	cmp    $0x300,%eax
f011cb0d:	74 17                	je     f011cb26 <test_kmalloc_bestfit2+0x1089>
f011cb0f:	83 ec 04             	sub    $0x4,%esp
f011cb12:	68 34 ba 13 f0       	push   $0xf013ba34
f011cb17:	68 be 02 00 00       	push   $0x2be
f011cb1c:	68 3a b5 13 f0       	push   $0xf013b53a
f011cb21:	e8 df 36 fe ff       	call   f0100205 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb26:	e8 86 06 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011cb2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011cb2e:	e8 7c 72 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011cb33:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011cb36:	83 ec 0c             	sub    $0xc,%esp
f011cb39:	68 00 fc 3f 00       	push   $0x3ffc00
f011cb3e:	e8 21 b0 fe ff       	call   f0107b64 <kmalloc>
f011cb43:	83 c4 10             	add    $0x10,%esp
f011cb46:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cb4c:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cb52:	89 c1                	mov    %eax,%ecx
f011cb54:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011cb5b:	10 00 00 
f011cb5e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011cb64:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cb69:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011cb6f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cb75:	ba 00 00 00 00       	mov    $0x0,%edx
f011cb7a:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011cb80:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011cb86:	29 d0                	sub    %edx,%eax
f011cb88:	89 c3                	mov    %eax,%ebx
f011cb8a:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011cb91:	10 00 00 
f011cb94:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011cb99:	0f b6 d0             	movzbl %al,%edx
f011cb9c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011cba2:	01 d0                	add    %edx,%eax
f011cba4:	48                   	dec    %eax
f011cba5:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011cbab:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cbb1:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbb6:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011cbbc:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011cbc2:	29 d0                	sub    %edx,%eax
f011cbc4:	01 c3                	add    %eax,%ebx
f011cbc6:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011cbcd:	10 00 00 
f011cbd0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011cbd5:	0f b6 c0             	movzbl %al,%eax
f011cbd8:	c1 e0 04             	shl    $0x4,%eax
f011cbdb:	89 c2                	mov    %eax,%edx
f011cbdd:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011cbe3:	01 d0                	add    %edx,%eax
f011cbe5:	48                   	dec    %eax
f011cbe6:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011cbec:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cbf2:	ba 00 00 00 00       	mov    $0x0,%edx
f011cbf7:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011cbfd:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cc03:	29 d0                	sub    %edx,%eax
f011cc05:	01 d8                	add    %ebx,%eax
f011cc07:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cc0c:	39 c1                	cmp    %eax,%ecx
f011cc0e:	74 17                	je     f011cc27 <test_kmalloc_bestfit2+0x118a>
f011cc10:	83 ec 04             	sub    $0x4,%esp
f011cc13:	68 54 b9 13 f0       	push   $0xf013b954
f011cc18:	68 c4 02 00 00       	push   $0x2c4
f011cc1d:	68 3a b5 13 f0       	push   $0xf013b53a
f011cc22:	e8 de 35 fe ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cc27:	e8 83 71 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011cc2c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cc2f:	74 17                	je     f011cc48 <test_kmalloc_bestfit2+0x11ab>
f011cc31:	83 ec 04             	sub    $0x4,%esp
f011cc34:	68 54 b5 13 f0       	push   $0xf013b554
f011cc39:	68 c5 02 00 00       	push   $0x2c5
f011cc3e:	68 3a b5 13 f0       	push   $0xf013b53a
f011cc43:	e8 bd 35 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011cc48:	e8 64 05 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011cc4d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cc50:	29 c2                	sub    %eax,%edx
f011cc52:	89 d0                	mov    %edx,%eax
f011cc54:	3d 00 04 00 00       	cmp    $0x400,%eax
f011cc59:	74 17                	je     f011cc72 <test_kmalloc_bestfit2+0x11d5>
f011cc5b:	83 ec 04             	sub    $0x4,%esp
f011cc5e:	68 34 ba 13 f0       	push   $0xf013ba34
f011cc63:	68 c6 02 00 00       	push   $0x2c6
f011cc68:	68 3a b5 13 f0       	push   $0xf013b53a
f011cc6d:	e8 93 35 fe ff       	call   f0100205 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011cc72:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011cc79:	10 00 00 
f011cc7c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011cc82:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc87:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011cc8d:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc93:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc98:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011cc9e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cca4:	29 d0                	sub    %edx,%eax
f011cca6:	89 c1                	mov    %eax,%ecx
f011cca8:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011ccaf:	10 00 00 
f011ccb2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ccb7:	0f b6 d0             	movzbl %al,%edx
f011ccba:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ccc0:	01 d0                	add    %edx,%eax
f011ccc2:	48                   	dec    %eax
f011ccc3:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011ccc9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cccf:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccd4:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011ccda:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cce0:	29 d0                	sub    %edx,%eax
f011cce2:	01 c1                	add    %eax,%ecx
f011cce4:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011cceb:	10 00 00 
f011ccee:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ccf3:	0f b6 c0             	movzbl %al,%eax
f011ccf6:	c1 e0 04             	shl    $0x4,%eax
f011ccf9:	89 c2                	mov    %eax,%edx
f011ccfb:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011cd01:	01 d0                	add    %edx,%eax
f011cd03:	48                   	dec    %eax
f011cd04:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011cd0a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cd10:	ba 00 00 00 00       	mov    $0x0,%edx
f011cd15:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011cd1b:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cd21:	29 d0                	sub    %edx,%eax
f011cd23:	01 c8                	add    %ecx,%eax
f011cd25:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011cd2a:	29 c2                	sub    %eax,%edx
f011cd2c:	89 d0                	mov    %edx,%eax
f011cd2e:	83 ec 0c             	sub    $0xc,%esp
f011cd31:	50                   	push   %eax
f011cd32:	e8 2d ae fe ff       	call   f0107b64 <kmalloc>
f011cd37:	83 c4 10             	add    $0x10,%esp
f011cd3a:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011cd40:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cd46:	85 c0                	test   %eax,%eax
f011cd48:	74 17                	je     f011cd61 <test_kmalloc_bestfit2+0x12c4>
f011cd4a:	83 ec 04             	sub    $0x4,%esp
f011cd4d:	68 84 ba 13 f0       	push   $0xf013ba84
f011cd52:	68 ce 02 00 00       	push   $0x2ce
f011cd57:	68 3a b5 13 f0       	push   $0xf013b53a
f011cd5c:	e8 a4 34 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011cd61:	83 ec 0c             	sub    $0xc,%esp
f011cd64:	68 e8 ba 13 f0       	push   $0xf013bae8
f011cd69:	e8 a0 3f fe ff       	call   f0100d0e <cprintf>
f011cd6e:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011cd71:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011cd76:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011cd79:	5b                   	pop    %ebx
f011cd7a:	5f                   	pop    %edi
f011cd7b:	5d                   	pop    %ebp
f011cd7c:	c3                   	ret    

f011cd7d <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011cd7d:	55                   	push   %ebp
f011cd7e:	89 e5                	mov    %esp,%ebp
f011cd80:	57                   	push   %edi
f011cd81:	53                   	push   %ebx
f011cd82:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011cd88:	83 ec 0c             	sub    $0xc,%esp
f011cd8b:	68 7c b4 13 f0       	push   $0xf013b47c
f011cd90:	e8 79 3f fe ff       	call   f0100d0e <cprintf>
f011cd95:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011cd98:	83 ec 0c             	sub    $0xc,%esp
f011cd9b:	68 ac b4 13 f0       	push   $0xf013b4ac
f011cda0:	e8 69 3f fe ff       	call   f0100d0e <cprintf>
f011cda5:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011cda8:	83 ec 0c             	sub    $0xc,%esp
f011cdab:	68 7c b4 13 f0       	push   $0xf013b47c
f011cdb0:	e8 59 3f fe ff       	call   f0100d0e <cprintf>
f011cdb5:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011cdb8:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011cdbe:	b9 14 00 00 00       	mov    $0x14,%ecx
f011cdc3:	b8 00 00 00 00       	mov    $0x0,%eax
f011cdc8:	89 d7                	mov    %edx,%edi
f011cdca:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cdcc:	e8 e0 03 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011cdd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdd4:	e8 d6 6f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011cdd9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011cddc:	83 ec 0c             	sub    $0xc,%esp
f011cddf:	68 00 fc 0f 00       	push   $0xffc00
f011cde4:	e8 7b ad fe ff       	call   f0107b64 <kmalloc>
f011cde9:	83 c4 10             	add    $0x10,%esp
f011cdec:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cdf2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011cdf8:	89 c1                	mov    %eax,%ecx
f011cdfa:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ce01:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ce04:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ce09:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ce0c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ce0f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce14:	f7 75 ec             	divl   -0x14(%ebp)
f011ce17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ce1a:	29 d0                	sub    %edx,%eax
f011ce1c:	89 c3                	mov    %eax,%ebx
f011ce1e:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ce25:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ce2a:	0f b6 d0             	movzbl %al,%edx
f011ce2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ce30:	01 d0                	add    %edx,%eax
f011ce32:	48                   	dec    %eax
f011ce33:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ce36:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce39:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce3e:	f7 75 e4             	divl   -0x1c(%ebp)
f011ce41:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce44:	29 d0                	sub    %edx,%eax
f011ce46:	01 c3                	add    %eax,%ebx
f011ce48:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011ce4f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ce54:	0f b6 c0             	movzbl %al,%eax
f011ce57:	c1 e0 04             	shl    $0x4,%eax
f011ce5a:	89 c2                	mov    %eax,%edx
f011ce5c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ce5f:	01 d0                	add    %edx,%eax
f011ce61:	48                   	dec    %eax
f011ce62:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011ce65:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ce68:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce6d:	f7 75 dc             	divl   -0x24(%ebp)
f011ce70:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ce73:	29 d0                	sub    %edx,%eax
f011ce75:	01 d8                	add    %ebx,%eax
f011ce77:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ce7c:	39 c1                	cmp    %eax,%ecx
f011ce7e:	74 17                	je     f011ce97 <test_kmalloc_firstfit1+0x11a>
f011ce80:	83 ec 04             	sub    $0x4,%esp
f011ce83:	68 54 b9 13 f0       	push   $0xf013b954
f011ce88:	68 e6 02 00 00       	push   $0x2e6
f011ce8d:	68 3a b5 13 f0       	push   $0xf013b53a
f011ce92:	e8 6e 33 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ce97:	e8 13 6f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ce9c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011ce9f:	74 17                	je     f011ceb8 <test_kmalloc_firstfit1+0x13b>
f011cea1:	83 ec 04             	sub    $0x4,%esp
f011cea4:	68 54 b5 13 f0       	push   $0xf013b554
f011cea9:	68 e7 02 00 00       	push   $0x2e7
f011ceae:	68 3a b5 13 f0       	push   $0xf013b53a
f011ceb3:	e8 4d 33 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011ceb8:	e8 f4 02 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011cebd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cec0:	29 c2                	sub    %eax,%edx
f011cec2:	89 d0                	mov    %edx,%eax
f011cec4:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cec9:	74 17                	je     f011cee2 <test_kmalloc_firstfit1+0x165>
f011cecb:	83 ec 04             	sub    $0x4,%esp
f011cece:	68 84 b9 13 f0       	push   $0xf013b984
f011ced3:	68 e8 02 00 00       	push   $0x2e8
f011ced8:	68 3a b5 13 f0       	push   $0xf013b53a
f011cedd:	e8 23 33 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cee2:	e8 ca 02 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011cee7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ceea:	e8 c0 6e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ceef:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011cef2:	83 ec 0c             	sub    $0xc,%esp
f011cef5:	68 00 fc 0f 00       	push   $0xffc00
f011cefa:	e8 65 ac fe ff       	call   f0107b64 <kmalloc>
f011ceff:	83 c4 10             	add    $0x10,%esp
f011cf02:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011cf08:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011cf0e:	89 c1                	mov    %eax,%ecx
f011cf10:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011cf17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cf1a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cf1f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cf22:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cf25:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf2a:	f7 75 d4             	divl   -0x2c(%ebp)
f011cf2d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cf30:	29 d0                	sub    %edx,%eax
f011cf32:	89 c3                	mov    %eax,%ebx
f011cf34:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011cf3b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011cf40:	0f b6 d0             	movzbl %al,%edx
f011cf43:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cf46:	01 d0                	add    %edx,%eax
f011cf48:	48                   	dec    %eax
f011cf49:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cf4c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf4f:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf54:	f7 75 cc             	divl   -0x34(%ebp)
f011cf57:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf5a:	29 d0                	sub    %edx,%eax
f011cf5c:	01 c3                	add    %eax,%ebx
f011cf5e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011cf65:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011cf6a:	0f b6 c0             	movzbl %al,%eax
f011cf6d:	c1 e0 04             	shl    $0x4,%eax
f011cf70:	89 c2                	mov    %eax,%edx
f011cf72:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cf75:	01 d0                	add    %edx,%eax
f011cf77:	48                   	dec    %eax
f011cf78:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cf7b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf83:	f7 75 c4             	divl   -0x3c(%ebp)
f011cf86:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf89:	29 d0                	sub    %edx,%eax
f011cf8b:	01 d8                	add    %ebx,%eax
f011cf8d:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011cf92:	39 c1                	cmp    %eax,%ecx
f011cf94:	74 17                	je     f011cfad <test_kmalloc_firstfit1+0x230>
f011cf96:	83 ec 04             	sub    $0x4,%esp
f011cf99:	68 54 b9 13 f0       	push   $0xf013b954
f011cf9e:	68 ee 02 00 00       	push   $0x2ee
f011cfa3:	68 3a b5 13 f0       	push   $0xf013b53a
f011cfa8:	e8 58 32 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cfad:	e8 fd 6d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011cfb2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cfb5:	74 17                	je     f011cfce <test_kmalloc_firstfit1+0x251>
f011cfb7:	83 ec 04             	sub    $0x4,%esp
f011cfba:	68 54 b5 13 f0       	push   $0xf013b554
f011cfbf:	68 ef 02 00 00       	push   $0x2ef
f011cfc4:	68 3a b5 13 f0       	push   $0xf013b53a
f011cfc9:	e8 37 32 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cfce:	e8 de 01 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011cfd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cfd6:	29 c2                	sub    %eax,%edx
f011cfd8:	89 d0                	mov    %edx,%eax
f011cfda:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cfdf:	74 17                	je     f011cff8 <test_kmalloc_firstfit1+0x27b>
f011cfe1:	83 ec 04             	sub    $0x4,%esp
f011cfe4:	68 84 b9 13 f0       	push   $0xf013b984
f011cfe9:	68 f0 02 00 00       	push   $0x2f0
f011cfee:	68 3a b5 13 f0       	push   $0xf013b53a
f011cff3:	e8 0d 32 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cff8:	e8 b4 01 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011cffd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d000:	e8 aa 6d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d005:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011d008:	83 ec 0c             	sub    $0xc,%esp
f011d00b:	68 00 fc 0f 00       	push   $0xffc00
f011d010:	e8 4f ab fe ff       	call   f0107b64 <kmalloc>
f011d015:	83 c4 10             	add    $0x10,%esp
f011d018:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011d01e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011d024:	89 c1                	mov    %eax,%ecx
f011d026:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011d02d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011d030:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d035:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011d038:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d03b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d040:	f7 75 bc             	divl   -0x44(%ebp)
f011d043:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011d046:	29 d0                	sub    %edx,%eax
f011d048:	89 c3                	mov    %eax,%ebx
f011d04a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011d051:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d056:	0f b6 d0             	movzbl %al,%edx
f011d059:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011d05c:	01 d0                	add    %edx,%eax
f011d05e:	48                   	dec    %eax
f011d05f:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011d062:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d065:	ba 00 00 00 00       	mov    $0x0,%edx
f011d06a:	f7 75 b4             	divl   -0x4c(%ebp)
f011d06d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d070:	29 d0                	sub    %edx,%eax
f011d072:	01 c3                	add    %eax,%ebx
f011d074:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d07b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d080:	0f b6 c0             	movzbl %al,%eax
f011d083:	c1 e0 04             	shl    $0x4,%eax
f011d086:	89 c2                	mov    %eax,%edx
f011d088:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d08b:	01 d0                	add    %edx,%eax
f011d08d:	48                   	dec    %eax
f011d08e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d091:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d094:	ba 00 00 00 00       	mov    $0x0,%edx
f011d099:	f7 75 ac             	divl   -0x54(%ebp)
f011d09c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d09f:	29 d0                	sub    %edx,%eax
f011d0a1:	01 d8                	add    %ebx,%eax
f011d0a3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d0a8:	39 c1                	cmp    %eax,%ecx
f011d0aa:	74 17                	je     f011d0c3 <test_kmalloc_firstfit1+0x346>
f011d0ac:	83 ec 04             	sub    $0x4,%esp
f011d0af:	68 54 b9 13 f0       	push   $0xf013b954
f011d0b4:	68 f6 02 00 00       	push   $0x2f6
f011d0b9:	68 3a b5 13 f0       	push   $0xf013b53a
f011d0be:	e8 42 31 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d0c3:	e8 e7 6c fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d0c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d0cb:	74 17                	je     f011d0e4 <test_kmalloc_firstfit1+0x367>
f011d0cd:	83 ec 04             	sub    $0x4,%esp
f011d0d0:	68 54 b5 13 f0       	push   $0xf013b554
f011d0d5:	68 f7 02 00 00       	push   $0x2f7
f011d0da:	68 3a b5 13 f0       	push   $0xf013b53a
f011d0df:	e8 21 31 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d0e4:	e8 c8 00 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d0e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d0ec:	29 c2                	sub    %eax,%edx
f011d0ee:	89 d0                	mov    %edx,%eax
f011d0f0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d0f5:	74 17                	je     f011d10e <test_kmalloc_firstfit1+0x391>
f011d0f7:	83 ec 04             	sub    $0x4,%esp
f011d0fa:	68 84 b9 13 f0       	push   $0xf013b984
f011d0ff:	68 f8 02 00 00       	push   $0x2f8
f011d104:	68 3a b5 13 f0       	push   $0xf013b53a
f011d109:	e8 f7 30 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011d10e:	e8 9e 00 ff ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d113:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d116:	e8 94 6c fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d11b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011d11e:	83 ec 0c             	sub    $0xc,%esp
f011d121:	68 00 fc 0f 00       	push   $0xffc00
f011d126:	e8 39 aa fe ff       	call   f0107b64 <kmalloc>
f011d12b:	83 c4 10             	add    $0x10,%esp
f011d12e:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011d134:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011d13a:	89 c1                	mov    %eax,%ecx
f011d13c:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d143:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d146:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d14b:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d14e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d151:	ba 00 00 00 00       	mov    $0x0,%edx
f011d156:	f7 75 a4             	divl   -0x5c(%ebp)
f011d159:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d15c:	29 d0                	sub    %edx,%eax
f011d15e:	89 c3                	mov    %eax,%ebx
f011d160:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d167:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d16c:	0f b6 d0             	movzbl %al,%edx
f011d16f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d172:	01 d0                	add    %edx,%eax
f011d174:	48                   	dec    %eax
f011d175:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d178:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d17b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d180:	f7 75 9c             	divl   -0x64(%ebp)
f011d183:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d186:	29 d0                	sub    %edx,%eax
f011d188:	01 c3                	add    %eax,%ebx
f011d18a:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d191:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d196:	0f b6 c0             	movzbl %al,%eax
f011d199:	c1 e0 04             	shl    $0x4,%eax
f011d19c:	89 c2                	mov    %eax,%edx
f011d19e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d1a1:	01 d0                	add    %edx,%eax
f011d1a3:	48                   	dec    %eax
f011d1a4:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d1a7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d1aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011d1af:	f7 75 94             	divl   -0x6c(%ebp)
f011d1b2:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d1b5:	29 d0                	sub    %edx,%eax
f011d1b7:	01 d8                	add    %ebx,%eax
f011d1b9:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011d1be:	39 c1                	cmp    %eax,%ecx
f011d1c0:	74 17                	je     f011d1d9 <test_kmalloc_firstfit1+0x45c>
f011d1c2:	83 ec 04             	sub    $0x4,%esp
f011d1c5:	68 54 b9 13 f0       	push   $0xf013b954
f011d1ca:	68 fe 02 00 00       	push   $0x2fe
f011d1cf:	68 3a b5 13 f0       	push   $0xf013b53a
f011d1d4:	e8 2c 30 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d1d9:	e8 d1 6b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d1de:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d1e1:	74 17                	je     f011d1fa <test_kmalloc_firstfit1+0x47d>
f011d1e3:	83 ec 04             	sub    $0x4,%esp
f011d1e6:	68 54 b5 13 f0       	push   $0xf013b554
f011d1eb:	68 ff 02 00 00       	push   $0x2ff
f011d1f0:	68 3a b5 13 f0       	push   $0xf013b53a
f011d1f5:	e8 0b 30 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011d1fa:	e8 b2 ff fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d1ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d202:	29 c2                	sub    %eax,%edx
f011d204:	89 d0                	mov    %edx,%eax
f011d206:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d20b:	74 17                	je     f011d224 <test_kmalloc_firstfit1+0x4a7>
f011d20d:	83 ec 04             	sub    $0x4,%esp
f011d210:	68 84 b9 13 f0       	push   $0xf013b984
f011d215:	68 00 03 00 00       	push   $0x300
f011d21a:	68 3a b5 13 f0       	push   $0xf013b53a
f011d21f:	e8 e1 2f fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d224:	e8 88 ff fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d229:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d22c:	e8 7e 6b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d231:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011d234:	83 ec 0c             	sub    $0xc,%esp
f011d237:	68 00 fc 1f 00       	push   $0x1ffc00
f011d23c:	e8 23 a9 fe ff       	call   f0107b64 <kmalloc>
f011d241:	83 c4 10             	add    $0x10,%esp
f011d244:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d24a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d250:	89 c1                	mov    %eax,%ecx
f011d252:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d259:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d25c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d261:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d264:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d267:	ba 00 00 00 00       	mov    $0x0,%edx
f011d26c:	f7 75 8c             	divl   -0x74(%ebp)
f011d26f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d272:	29 d0                	sub    %edx,%eax
f011d274:	89 c3                	mov    %eax,%ebx
f011d276:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d27d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d282:	0f b6 d0             	movzbl %al,%edx
f011d285:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d288:	01 d0                	add    %edx,%eax
f011d28a:	48                   	dec    %eax
f011d28b:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d28e:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d291:	ba 00 00 00 00       	mov    $0x0,%edx
f011d296:	f7 75 84             	divl   -0x7c(%ebp)
f011d299:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d29c:	29 d0                	sub    %edx,%eax
f011d29e:	01 c3                	add    %eax,%ebx
f011d2a0:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d2a7:	10 00 00 
f011d2aa:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d2af:	0f b6 c0             	movzbl %al,%eax
f011d2b2:	c1 e0 04             	shl    $0x4,%eax
f011d2b5:	89 c2                	mov    %eax,%edx
f011d2b7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d2bd:	01 d0                	add    %edx,%eax
f011d2bf:	48                   	dec    %eax
f011d2c0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d2c6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d2cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011d2d1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d2d7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d2dd:	29 d0                	sub    %edx,%eax
f011d2df:	01 d8                	add    %ebx,%eax
f011d2e1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d2e6:	39 c1                	cmp    %eax,%ecx
f011d2e8:	74 17                	je     f011d301 <test_kmalloc_firstfit1+0x584>
f011d2ea:	83 ec 04             	sub    $0x4,%esp
f011d2ed:	68 54 b9 13 f0       	push   $0xf013b954
f011d2f2:	68 06 03 00 00       	push   $0x306
f011d2f7:	68 3a b5 13 f0       	push   $0xf013b53a
f011d2fc:	e8 04 2f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d301:	e8 a9 6a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d306:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d309:	74 17                	je     f011d322 <test_kmalloc_firstfit1+0x5a5>
f011d30b:	83 ec 04             	sub    $0x4,%esp
f011d30e:	68 54 b5 13 f0       	push   $0xf013b554
f011d313:	68 07 03 00 00       	push   $0x307
f011d318:	68 3a b5 13 f0       	push   $0xf013b53a
f011d31d:	e8 e3 2e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d322:	e8 8a fe fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d327:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d32a:	29 c2                	sub    %eax,%edx
f011d32c:	89 d0                	mov    %edx,%eax
f011d32e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d333:	74 17                	je     f011d34c <test_kmalloc_firstfit1+0x5cf>
f011d335:	83 ec 04             	sub    $0x4,%esp
f011d338:	68 84 b9 13 f0       	push   $0xf013b984
f011d33d:	68 08 03 00 00       	push   $0x308
f011d342:	68 3a b5 13 f0       	push   $0xf013b53a
f011d347:	e8 b9 2e fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d34c:	e8 60 fe fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d351:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d354:	e8 56 6a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d359:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011d35c:	83 ec 0c             	sub    $0xc,%esp
f011d35f:	68 00 fc 1f 00       	push   $0x1ffc00
f011d364:	e8 fb a7 fe ff       	call   f0107b64 <kmalloc>
f011d369:	83 c4 10             	add    $0x10,%esp
f011d36c:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011d372:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011d378:	89 c1                	mov    %eax,%ecx
f011d37a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d381:	10 00 00 
f011d384:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d38a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d38f:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d395:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d39b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3a0:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d3a6:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d3ac:	29 d0                	sub    %edx,%eax
f011d3ae:	89 c3                	mov    %eax,%ebx
f011d3b0:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d3b7:	10 00 00 
f011d3ba:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d3bf:	0f b6 d0             	movzbl %al,%edx
f011d3c2:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d3c8:	01 d0                	add    %edx,%eax
f011d3ca:	48                   	dec    %eax
f011d3cb:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d3d1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3d7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3dc:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d3e2:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3e8:	29 d0                	sub    %edx,%eax
f011d3ea:	01 c3                	add    %eax,%ebx
f011d3ec:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d3f3:	10 00 00 
f011d3f6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d3fb:	0f b6 c0             	movzbl %al,%eax
f011d3fe:	c1 e0 04             	shl    $0x4,%eax
f011d401:	89 c2                	mov    %eax,%edx
f011d403:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d409:	01 d0                	add    %edx,%eax
f011d40b:	48                   	dec    %eax
f011d40c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d412:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d418:	ba 00 00 00 00       	mov    $0x0,%edx
f011d41d:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d423:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d429:	29 d0                	sub    %edx,%eax
f011d42b:	01 d8                	add    %ebx,%eax
f011d42d:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011d432:	39 c1                	cmp    %eax,%ecx
f011d434:	74 17                	je     f011d44d <test_kmalloc_firstfit1+0x6d0>
f011d436:	83 ec 04             	sub    $0x4,%esp
f011d439:	68 54 b9 13 f0       	push   $0xf013b954
f011d43e:	68 0e 03 00 00       	push   $0x30e
f011d443:	68 3a b5 13 f0       	push   $0xf013b53a
f011d448:	e8 b8 2d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d44d:	e8 5d 69 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d452:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d455:	74 17                	je     f011d46e <test_kmalloc_firstfit1+0x6f1>
f011d457:	83 ec 04             	sub    $0x4,%esp
f011d45a:	68 54 b5 13 f0       	push   $0xf013b554
f011d45f:	68 0f 03 00 00       	push   $0x30f
f011d464:	68 3a b5 13 f0       	push   $0xf013b53a
f011d469:	e8 97 2d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d46e:	e8 3e fd fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d473:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d476:	29 c2                	sub    %eax,%edx
f011d478:	89 d0                	mov    %edx,%eax
f011d47a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d47f:	74 17                	je     f011d498 <test_kmalloc_firstfit1+0x71b>
f011d481:	83 ec 04             	sub    $0x4,%esp
f011d484:	68 84 b9 13 f0       	push   $0xf013b984
f011d489:	68 10 03 00 00       	push   $0x310
f011d48e:	68 3a b5 13 f0       	push   $0xf013b53a
f011d493:	e8 6d 2d fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d498:	e8 14 fd fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d49d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d4a0:	e8 0a 69 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d4a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011d4a8:	83 ec 0c             	sub    $0xc,%esp
f011d4ab:	68 00 fc 2f 00       	push   $0x2ffc00
f011d4b0:	e8 af a6 fe ff       	call   f0107b64 <kmalloc>
f011d4b5:	83 c4 10             	add    $0x10,%esp
f011d4b8:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011d4be:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d4c4:	89 c1                	mov    %eax,%ecx
f011d4c6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d4cd:	10 00 00 
f011d4d0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d4d6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d4db:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d4e1:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d4e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011d4ec:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d4f2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d4f8:	29 d0                	sub    %edx,%eax
f011d4fa:	89 c3                	mov    %eax,%ebx
f011d4fc:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d503:	10 00 00 
f011d506:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d50b:	0f b6 d0             	movzbl %al,%edx
f011d50e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d514:	01 d0                	add    %edx,%eax
f011d516:	48                   	dec    %eax
f011d517:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d51d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d523:	ba 00 00 00 00       	mov    $0x0,%edx
f011d528:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d52e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d534:	29 d0                	sub    %edx,%eax
f011d536:	01 c3                	add    %eax,%ebx
f011d538:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d53f:	10 00 00 
f011d542:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d547:	0f b6 c0             	movzbl %al,%eax
f011d54a:	c1 e0 04             	shl    $0x4,%eax
f011d54d:	89 c2                	mov    %eax,%edx
f011d54f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d555:	01 d0                	add    %edx,%eax
f011d557:	48                   	dec    %eax
f011d558:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d55e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d564:	ba 00 00 00 00       	mov    $0x0,%edx
f011d569:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d56f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d575:	29 d0                	sub    %edx,%eax
f011d577:	01 d8                	add    %ebx,%eax
f011d579:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011d57e:	39 c1                	cmp    %eax,%ecx
f011d580:	74 17                	je     f011d599 <test_kmalloc_firstfit1+0x81c>
f011d582:	83 ec 04             	sub    $0x4,%esp
f011d585:	68 54 b9 13 f0       	push   $0xf013b954
f011d58a:	68 16 03 00 00       	push   $0x316
f011d58f:	68 3a b5 13 f0       	push   $0xf013b53a
f011d594:	e8 6c 2c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d599:	e8 11 68 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d59e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d5a1:	74 17                	je     f011d5ba <test_kmalloc_firstfit1+0x83d>
f011d5a3:	83 ec 04             	sub    $0x4,%esp
f011d5a6:	68 54 b5 13 f0       	push   $0xf013b554
f011d5ab:	68 17 03 00 00       	push   $0x317
f011d5b0:	68 3a b5 13 f0       	push   $0xf013b53a
f011d5b5:	e8 4b 2c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d5ba:	e8 f2 fb fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d5bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d5c2:	29 c2                	sub    %eax,%edx
f011d5c4:	89 d0                	mov    %edx,%eax
f011d5c6:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d5cb:	74 17                	je     f011d5e4 <test_kmalloc_firstfit1+0x867>
f011d5cd:	83 ec 04             	sub    $0x4,%esp
f011d5d0:	68 84 b9 13 f0       	push   $0xf013b984
f011d5d5:	68 18 03 00 00       	push   $0x318
f011d5da:	68 3a b5 13 f0       	push   $0xf013b53a
f011d5df:	e8 21 2c fe ff       	call   f0100205 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d5e4:	e8 c8 fb fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d5e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d5ec:	e8 be 67 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d5f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011d5f4:	83 ec 0c             	sub    $0xc,%esp
f011d5f7:	68 00 fc 2f 00       	push   $0x2ffc00
f011d5fc:	e8 63 a5 fe ff       	call   f0107b64 <kmalloc>
f011d601:	83 c4 10             	add    $0x10,%esp
f011d604:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011d60a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d610:	89 c1                	mov    %eax,%ecx
f011d612:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d619:	10 00 00 
f011d61c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d622:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d627:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d62d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d633:	ba 00 00 00 00       	mov    $0x0,%edx
f011d638:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d63e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d644:	29 d0                	sub    %edx,%eax
f011d646:	89 c3                	mov    %eax,%ebx
f011d648:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d64f:	10 00 00 
f011d652:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d657:	0f b6 d0             	movzbl %al,%edx
f011d65a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d660:	01 d0                	add    %edx,%eax
f011d662:	48                   	dec    %eax
f011d663:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d669:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d66f:	ba 00 00 00 00       	mov    $0x0,%edx
f011d674:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d67a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d680:	29 d0                	sub    %edx,%eax
f011d682:	01 c3                	add    %eax,%ebx
f011d684:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d68b:	10 00 00 
f011d68e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d693:	0f b6 c0             	movzbl %al,%eax
f011d696:	c1 e0 04             	shl    $0x4,%eax
f011d699:	89 c2                	mov    %eax,%edx
f011d69b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d6a1:	01 d0                	add    %edx,%eax
f011d6a3:	48                   	dec    %eax
f011d6a4:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d6aa:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d6b0:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6b5:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d6bb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d6c1:	29 d0                	sub    %edx,%eax
f011d6c3:	01 d8                	add    %ebx,%eax
f011d6c5:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011d6ca:	39 c1                	cmp    %eax,%ecx
f011d6cc:	74 17                	je     f011d6e5 <test_kmalloc_firstfit1+0x968>
f011d6ce:	83 ec 04             	sub    $0x4,%esp
f011d6d1:	68 54 b9 13 f0       	push   $0xf013b954
f011d6d6:	68 1e 03 00 00       	push   $0x31e
f011d6db:	68 3a b5 13 f0       	push   $0xf013b53a
f011d6e0:	e8 20 2b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6e5:	e8 c5 66 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d6ea:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d6ed:	74 17                	je     f011d706 <test_kmalloc_firstfit1+0x989>
f011d6ef:	83 ec 04             	sub    $0x4,%esp
f011d6f2:	68 54 b5 13 f0       	push   $0xf013b554
f011d6f7:	68 1f 03 00 00       	push   $0x31f
f011d6fc:	68 3a b5 13 f0       	push   $0xf013b53a
f011d701:	e8 ff 2a fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011d706:	e8 a6 fa fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d70b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d70e:	29 c2                	sub    %eax,%edx
f011d710:	89 d0                	mov    %edx,%eax
f011d712:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d717:	74 17                	je     f011d730 <test_kmalloc_firstfit1+0x9b3>
f011d719:	83 ec 04             	sub    $0x4,%esp
f011d71c:	68 84 b9 13 f0       	push   $0xf013b984
f011d721:	68 20 03 00 00       	push   $0x320
f011d726:	68 3a b5 13 f0       	push   $0xf013b53a
f011d72b:	e8 d5 2a fe ff       	call   f0100205 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d730:	e8 7c fa fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d735:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d738:	e8 72 66 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d73d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011d740:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011d746:	83 ec 0c             	sub    $0xc,%esp
f011d749:	50                   	push   %eax
f011d74a:	e8 1d a5 fe ff       	call   f0107c6c <kfree>
f011d74f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d752:	e8 58 66 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d757:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d75a:	74 17                	je     f011d773 <test_kmalloc_firstfit1+0x9f6>
f011d75c:	83 ec 04             	sub    $0x4,%esp
f011d75f:	68 54 b5 13 f0       	push   $0xf013b554
f011d764:	68 29 03 00 00       	push   $0x329
f011d769:	68 3a b5 13 f0       	push   $0xf013b53a
f011d76e:	e8 92 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011d773:	e8 39 fa fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d778:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d77b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011d780:	74 17                	je     f011d799 <test_kmalloc_firstfit1+0xa1c>
f011d782:	83 ec 04             	sub    $0x4,%esp
f011d785:	68 97 b9 13 f0       	push   $0xf013b997
f011d78a:	68 2a 03 00 00       	push   $0x32a
f011d78f:	68 3a b5 13 f0       	push   $0xf013b53a
f011d794:	e8 6c 2a fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d799:	e8 13 fa fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d79e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d7a1:	e8 09 66 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d7a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011d7a9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011d7af:	83 ec 0c             	sub    $0xc,%esp
f011d7b2:	50                   	push   %eax
f011d7b3:	e8 b4 a4 fe ff       	call   f0107c6c <kfree>
f011d7b8:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7bb:	e8 ef 65 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d7c0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d7c3:	74 17                	je     f011d7dc <test_kmalloc_firstfit1+0xa5f>
f011d7c5:	83 ec 04             	sub    $0x4,%esp
f011d7c8:	68 54 b5 13 f0       	push   $0xf013b554
f011d7cd:	68 30 03 00 00       	push   $0x330
f011d7d2:	68 3a b5 13 f0       	push   $0xf013b53a
f011d7d7:	e8 29 2a fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d7dc:	e8 d0 f9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d7e1:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d7e4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d7e9:	74 17                	je     f011d802 <test_kmalloc_firstfit1+0xa85>
f011d7eb:	83 ec 04             	sub    $0x4,%esp
f011d7ee:	68 97 b9 13 f0       	push   $0xf013b997
f011d7f3:	68 31 03 00 00       	push   $0x331
f011d7f8:	68 3a b5 13 f0       	push   $0xf013b53a
f011d7fd:	e8 03 2a fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d802:	e8 aa f9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d807:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d80a:	e8 a0 65 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d80f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011d812:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d818:	83 ec 0c             	sub    $0xc,%esp
f011d81b:	50                   	push   %eax
f011d81c:	e8 4b a4 fe ff       	call   f0107c6c <kfree>
f011d821:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d824:	e8 86 65 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d829:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d82c:	74 17                	je     f011d845 <test_kmalloc_firstfit1+0xac8>
f011d82e:	83 ec 04             	sub    $0x4,%esp
f011d831:	68 54 b5 13 f0       	push   $0xf013b554
f011d836:	68 37 03 00 00       	push   $0x337
f011d83b:	68 3a b5 13 f0       	push   $0xf013b53a
f011d840:	e8 c0 29 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d845:	e8 67 f9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d84a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011d84d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d852:	74 17                	je     f011d86b <test_kmalloc_firstfit1+0xaee>
f011d854:	83 ec 04             	sub    $0x4,%esp
f011d857:	68 97 b9 13 f0       	push   $0xf013b997
f011d85c:	68 38 03 00 00       	push   $0x338
f011d861:	68 3a b5 13 f0       	push   $0xf013b53a
f011d866:	e8 9a 29 fe ff       	call   f0100205 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011d86b:	e8 41 f9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d870:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d873:	e8 37 65 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d878:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011d87b:	83 ec 0c             	sub    $0xc,%esp
f011d87e:	68 00 fc 07 00       	push   $0x7fc00
f011d883:	e8 dc a2 fe ff       	call   f0107b64 <kmalloc>
f011d888:	83 c4 10             	add    $0x10,%esp
f011d88b:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011d891:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d897:	89 c1                	mov    %eax,%ecx
f011d899:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d8a0:	10 00 00 
f011d8a3:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d8a9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d8ae:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d8b4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d8ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8bf:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d8c5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d8cb:	29 d0                	sub    %edx,%eax
f011d8cd:	89 c3                	mov    %eax,%ebx
f011d8cf:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d8d6:	10 00 00 
f011d8d9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d8de:	0f b6 d0             	movzbl %al,%edx
f011d8e1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d8e7:	01 d0                	add    %edx,%eax
f011d8e9:	48                   	dec    %eax
f011d8ea:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d8f0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d8f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8fb:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d901:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d907:	29 d0                	sub    %edx,%eax
f011d909:	01 c3                	add    %eax,%ebx
f011d90b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d912:	10 00 00 
f011d915:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011d91a:	0f b6 c0             	movzbl %al,%eax
f011d91d:	c1 e0 04             	shl    $0x4,%eax
f011d920:	89 c2                	mov    %eax,%edx
f011d922:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d928:	01 d0                	add    %edx,%eax
f011d92a:	48                   	dec    %eax
f011d92b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d931:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d937:	ba 00 00 00 00       	mov    $0x0,%edx
f011d93c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d942:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d948:	29 d0                	sub    %edx,%eax
f011d94a:	01 d8                	add    %ebx,%eax
f011d94c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011d951:	39 c1                	cmp    %eax,%ecx
f011d953:	74 17                	je     f011d96c <test_kmalloc_firstfit1+0xbef>
f011d955:	83 ec 04             	sub    $0x4,%esp
f011d958:	68 54 b9 13 f0       	push   $0xf013b954
f011d95d:	68 41 03 00 00       	push   $0x341
f011d962:	68 3a b5 13 f0       	push   $0xf013b53a
f011d967:	e8 99 28 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d96c:	e8 3e 64 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d971:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d974:	74 17                	je     f011d98d <test_kmalloc_firstfit1+0xc10>
f011d976:	83 ec 04             	sub    $0x4,%esp
f011d979:	68 54 b5 13 f0       	push   $0xf013b554
f011d97e:	68 42 03 00 00       	push   $0x342
f011d983:	68 3a b5 13 f0       	push   $0xf013b53a
f011d988:	e8 78 28 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011d98d:	e8 1f f8 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d992:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d995:	29 c2                	sub    %eax,%edx
f011d997:	89 d0                	mov    %edx,%eax
f011d999:	3d 80 00 00 00       	cmp    $0x80,%eax
f011d99e:	74 17                	je     f011d9b7 <test_kmalloc_firstfit1+0xc3a>
f011d9a0:	83 ec 04             	sub    $0x4,%esp
f011d9a3:	68 84 b9 13 f0       	push   $0xf013b984
f011d9a8:	68 43 03 00 00       	push   $0x343
f011d9ad:	68 3a b5 13 f0       	push   $0xf013b53a
f011d9b2:	e8 4e 28 fe ff       	call   f0100205 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011d9b7:	e8 f5 f7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011d9bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9bf:	e8 eb 63 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011d9c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011d9c7:	83 ec 0c             	sub    $0xc,%esp
f011d9ca:	68 00 fc 0f 00       	push   $0xffc00
f011d9cf:	e8 90 a1 fe ff       	call   f0107b64 <kmalloc>
f011d9d4:	83 c4 10             	add    $0x10,%esp
f011d9d7:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d9dd:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d9e3:	89 c1                	mov    %eax,%ecx
f011d9e5:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d9ec:	10 00 00 
f011d9ef:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d9f5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9fa:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011da00:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011da06:	ba 00 00 00 00       	mov    $0x0,%edx
f011da0b:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011da11:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011da17:	29 d0                	sub    %edx,%eax
f011da19:	89 c3                	mov    %eax,%ebx
f011da1b:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011da22:	10 00 00 
f011da25:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011da2a:	0f b6 d0             	movzbl %al,%edx
f011da2d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011da33:	01 d0                	add    %edx,%eax
f011da35:	48                   	dec    %eax
f011da36:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011da3c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da42:	ba 00 00 00 00       	mov    $0x0,%edx
f011da47:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011da4d:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da53:	29 d0                	sub    %edx,%eax
f011da55:	01 c3                	add    %eax,%ebx
f011da57:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011da5e:	10 00 00 
f011da61:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011da66:	0f b6 c0             	movzbl %al,%eax
f011da69:	c1 e0 04             	shl    $0x4,%eax
f011da6c:	89 c2                	mov    %eax,%edx
f011da6e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011da74:	01 d0                	add    %edx,%eax
f011da76:	48                   	dec    %eax
f011da77:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011da7d:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da83:	ba 00 00 00 00       	mov    $0x0,%edx
f011da88:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011da8e:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da94:	29 d0                	sub    %edx,%eax
f011da96:	01 d8                	add    %ebx,%eax
f011da98:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011da9d:	39 c1                	cmp    %eax,%ecx
f011da9f:	74 17                	je     f011dab8 <test_kmalloc_firstfit1+0xd3b>
f011daa1:	83 ec 04             	sub    $0x4,%esp
f011daa4:	68 54 b9 13 f0       	push   $0xf013b954
f011daa9:	68 49 03 00 00       	push   $0x349
f011daae:	68 3a b5 13 f0       	push   $0xf013b53a
f011dab3:	e8 4d 27 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dab8:	e8 f2 62 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011dabd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dac0:	74 17                	je     f011dad9 <test_kmalloc_firstfit1+0xd5c>
f011dac2:	83 ec 04             	sub    $0x4,%esp
f011dac5:	68 54 b5 13 f0       	push   $0xf013b554
f011daca:	68 4a 03 00 00       	push   $0x34a
f011dacf:	68 3a b5 13 f0       	push   $0xf013b53a
f011dad4:	e8 2c 27 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011dad9:	e8 d3 f6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011dade:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dae1:	29 c2                	sub    %eax,%edx
f011dae3:	89 d0                	mov    %edx,%eax
f011dae5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011daea:	74 17                	je     f011db03 <test_kmalloc_firstfit1+0xd86>
f011daec:	83 ec 04             	sub    $0x4,%esp
f011daef:	68 84 b9 13 f0       	push   $0xf013b984
f011daf4:	68 4b 03 00 00       	push   $0x34b
f011daf9:	68 3a b5 13 f0       	push   $0xf013b53a
f011dafe:	e8 02 27 fe ff       	call   f0100205 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011db03:	e8 a9 f6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011db08:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db0b:	e8 9f 62 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011db10:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011db13:	83 ec 0c             	sub    $0xc,%esp
f011db16:	68 00 fc 03 00       	push   $0x3fc00
f011db1b:	e8 44 a0 fe ff       	call   f0107b64 <kmalloc>
f011db20:	83 c4 10             	add    $0x10,%esp
f011db23:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011db29:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011db2f:	89 c1                	mov    %eax,%ecx
f011db31:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011db38:	10 00 00 
f011db3b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011db41:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db46:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011db4c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db52:	ba 00 00 00 00       	mov    $0x0,%edx
f011db57:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011db5d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db63:	29 d0                	sub    %edx,%eax
f011db65:	89 c3                	mov    %eax,%ebx
f011db67:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011db6e:	10 00 00 
f011db71:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011db76:	0f b6 d0             	movzbl %al,%edx
f011db79:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011db7f:	01 d0                	add    %edx,%eax
f011db81:	48                   	dec    %eax
f011db82:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011db88:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db8e:	ba 00 00 00 00       	mov    $0x0,%edx
f011db93:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011db99:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db9f:	29 d0                	sub    %edx,%eax
f011dba1:	01 c3                	add    %eax,%ebx
f011dba3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011dbaa:	10 00 00 
f011dbad:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011dbb2:	0f b6 c0             	movzbl %al,%eax
f011dbb5:	c1 e0 04             	shl    $0x4,%eax
f011dbb8:	89 c2                	mov    %eax,%edx
f011dbba:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011dbc0:	01 d0                	add    %edx,%eax
f011dbc2:	48                   	dec    %eax
f011dbc3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011dbc9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dbcf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dbd4:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011dbda:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dbe0:	29 d0                	sub    %edx,%eax
f011dbe2:	01 d8                	add    %ebx,%eax
f011dbe4:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011dbe9:	39 c1                	cmp    %eax,%ecx
f011dbeb:	74 17                	je     f011dc04 <test_kmalloc_firstfit1+0xe87>
f011dbed:	83 ec 04             	sub    $0x4,%esp
f011dbf0:	68 54 b9 13 f0       	push   $0xf013b954
f011dbf5:	68 52 03 00 00       	push   $0x352
f011dbfa:	68 3a b5 13 f0       	push   $0xf013b53a
f011dbff:	e8 01 26 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dc04:	e8 a6 61 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011dc09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dc0c:	74 17                	je     f011dc25 <test_kmalloc_firstfit1+0xea8>
f011dc0e:	83 ec 04             	sub    $0x4,%esp
f011dc11:	68 54 b5 13 f0       	push   $0xf013b554
f011dc16:	68 53 03 00 00       	push   $0x353
f011dc1b:	68 3a b5 13 f0       	push   $0xf013b53a
f011dc20:	e8 e0 25 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011dc25:	e8 87 f5 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011dc2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dc2d:	29 c2                	sub    %eax,%edx
f011dc2f:	89 d0                	mov    %edx,%eax
f011dc31:	83 f8 40             	cmp    $0x40,%eax
f011dc34:	74 17                	je     f011dc4d <test_kmalloc_firstfit1+0xed0>
f011dc36:	83 ec 04             	sub    $0x4,%esp
f011dc39:	68 84 b9 13 f0       	push   $0xf013b984
f011dc3e:	68 54 03 00 00       	push   $0x354
f011dc43:	68 3a b5 13 f0       	push   $0xf013b53a
f011dc48:	e8 b8 25 fe ff       	call   f0100205 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011dc4d:	e8 5f f5 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011dc52:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc55:	e8 55 61 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011dc5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011dc5d:	83 ec 0c             	sub    $0xc,%esp
f011dc60:	68 00 00 20 00       	push   $0x200000
f011dc65:	e8 fa 9e fe ff       	call   f0107b64 <kmalloc>
f011dc6a:	83 c4 10             	add    $0x10,%esp
f011dc6d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011dc73:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011dc79:	89 c1                	mov    %eax,%ecx
f011dc7b:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011dc82:	10 00 00 
f011dc85:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011dc8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dc90:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011dc96:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011dc9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011dca1:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011dca7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011dcad:	29 d0                	sub    %edx,%eax
f011dcaf:	89 c3                	mov    %eax,%ebx
f011dcb1:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011dcb8:	10 00 00 
f011dcbb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011dcc0:	0f b6 d0             	movzbl %al,%edx
f011dcc3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011dcc9:	01 d0                	add    %edx,%eax
f011dccb:	48                   	dec    %eax
f011dccc:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011dcd2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dcd8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcdd:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011dce3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011dce9:	29 d0                	sub    %edx,%eax
f011dceb:	01 c3                	add    %eax,%ebx
f011dced:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011dcf4:	10 00 00 
f011dcf7:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011dcfc:	0f b6 c0             	movzbl %al,%eax
f011dcff:	c1 e0 04             	shl    $0x4,%eax
f011dd02:	89 c2                	mov    %eax,%edx
f011dd04:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011dd0a:	01 d0                	add    %edx,%eax
f011dd0c:	48                   	dec    %eax
f011dd0d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011dd13:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dd19:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd1e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011dd24:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011dd2a:	29 d0                	sub    %edx,%eax
f011dd2c:	01 d8                	add    %ebx,%eax
f011dd2e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011dd33:	39 c1                	cmp    %eax,%ecx
f011dd35:	74 17                	je     f011dd4e <test_kmalloc_firstfit1+0xfd1>
f011dd37:	83 ec 04             	sub    $0x4,%esp
f011dd3a:	68 54 b9 13 f0       	push   $0xf013b954
f011dd3f:	68 5a 03 00 00       	push   $0x35a
f011dd44:	68 3a b5 13 f0       	push   $0xf013b53a
f011dd49:	e8 b7 24 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011dd4e:	e8 5e f4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011dd53:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dd56:	29 c2                	sub    %eax,%edx
f011dd58:	89 d0                	mov    %edx,%eax
f011dd5a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011dd5f:	74 17                	je     f011dd78 <test_kmalloc_firstfit1+0xffb>
f011dd61:	83 ec 04             	sub    $0x4,%esp
f011dd64:	68 84 b9 13 f0       	push   $0xf013b984
f011dd69:	68 5b 03 00 00       	push   $0x35b
f011dd6e:	68 3a b5 13 f0       	push   $0xf013b53a
f011dd73:	e8 8d 24 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dd78:	e8 32 60 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011dd7d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dd80:	74 17                	je     f011dd99 <test_kmalloc_firstfit1+0x101c>
f011dd82:	83 ec 04             	sub    $0x4,%esp
f011dd85:	68 54 b5 13 f0       	push   $0xf013b554
f011dd8a:	68 5c 03 00 00       	push   $0x35c
f011dd8f:	68 3a b5 13 f0       	push   $0xf013b53a
f011dd94:	e8 6c 24 fe ff       	call   f0100205 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011dd99:	e8 13 f4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011dd9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dda1:	e8 09 60 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011dda6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011dda9:	83 ec 0c             	sub    $0xc,%esp
f011ddac:	68 00 fc 3f 00       	push   $0x3ffc00
f011ddb1:	e8 ae 9d fe ff       	call   f0107b64 <kmalloc>
f011ddb6:	83 c4 10             	add    $0x10,%esp
f011ddb9:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011ddbf:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ddc5:	89 c1                	mov    %eax,%ecx
f011ddc7:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ddce:	10 00 00 
f011ddd1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ddd7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dddc:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011dde2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011dde8:	ba 00 00 00 00       	mov    $0x0,%edx
f011dded:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ddf3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ddf9:	29 d0                	sub    %edx,%eax
f011ddfb:	89 c3                	mov    %eax,%ebx
f011ddfd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011de04:	10 00 00 
f011de07:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011de0c:	0f b6 d0             	movzbl %al,%edx
f011de0f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011de15:	01 d0                	add    %edx,%eax
f011de17:	48                   	dec    %eax
f011de18:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011de1e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011de24:	ba 00 00 00 00       	mov    $0x0,%edx
f011de29:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011de2f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011de35:	29 d0                	sub    %edx,%eax
f011de37:	01 c3                	add    %eax,%ebx
f011de39:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011de40:	10 00 00 
f011de43:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011de48:	0f b6 c0             	movzbl %al,%eax
f011de4b:	c1 e0 04             	shl    $0x4,%eax
f011de4e:	89 c2                	mov    %eax,%edx
f011de50:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011de56:	01 d0                	add    %edx,%eax
f011de58:	48                   	dec    %eax
f011de59:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011de5f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011de65:	ba 00 00 00 00       	mov    $0x0,%edx
f011de6a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011de70:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011de76:	29 d0                	sub    %edx,%eax
f011de78:	01 d8                	add    %ebx,%eax
f011de7a:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011de7f:	39 c1                	cmp    %eax,%ecx
f011de81:	74 17                	je     f011de9a <test_kmalloc_firstfit1+0x111d>
f011de83:	83 ec 04             	sub    $0x4,%esp
f011de86:	68 54 b9 13 f0       	push   $0xf013b954
f011de8b:	68 63 03 00 00       	push   $0x363
f011de90:	68 3a b5 13 f0       	push   $0xf013b53a
f011de95:	e8 6b 23 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011de9a:	e8 10 5f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011de9f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011dea2:	74 17                	je     f011debb <test_kmalloc_firstfit1+0x113e>
f011dea4:	83 ec 04             	sub    $0x4,%esp
f011dea7:	68 54 b5 13 f0       	push   $0xf013b554
f011deac:	68 64 03 00 00       	push   $0x364
f011deb1:	68 3a b5 13 f0       	push   $0xf013b53a
f011deb6:	e8 4a 23 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011debb:	e8 f1 f2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011dec0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011dec3:	29 c2                	sub    %eax,%edx
f011dec5:	89 d0                	mov    %edx,%eax
f011dec7:	3d 00 04 00 00       	cmp    $0x400,%eax
f011decc:	74 17                	je     f011dee5 <test_kmalloc_firstfit1+0x1168>
f011dece:	83 ec 04             	sub    $0x4,%esp
f011ded1:	68 84 b9 13 f0       	push   $0xf013b984
f011ded6:	68 65 03 00 00       	push   $0x365
f011dedb:	68 3a b5 13 f0       	push   $0xf013b53a
f011dee0:	e8 20 23 fe ff       	call   f0100205 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011dee5:	e8 c7 f2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011deea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011deed:	e8 bd 5e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011def2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011def5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011defb:	83 ec 0c             	sub    $0xc,%esp
f011defe:	50                   	push   %eax
f011deff:	e8 68 9d fe ff       	call   f0107c6c <kfree>
f011df04:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df07:	e8 a3 5e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011df0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011df0f:	74 17                	je     f011df28 <test_kmalloc_firstfit1+0x11ab>
f011df11:	83 ec 04             	sub    $0x4,%esp
f011df14:	68 54 b5 13 f0       	push   $0xf013b554
f011df19:	68 6e 03 00 00       	push   $0x36e
f011df1e:	68 3a b5 13 f0       	push   $0xf013b53a
f011df23:	e8 dd 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011df28:	e8 84 f2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011df2d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011df30:	3d 00 01 00 00       	cmp    $0x100,%eax
f011df35:	74 17                	je     f011df4e <test_kmalloc_firstfit1+0x11d1>
f011df37:	83 ec 04             	sub    $0x4,%esp
f011df3a:	68 97 b9 13 f0       	push   $0xf013b997
f011df3f:	68 6f 03 00 00       	push   $0x36f
f011df44:	68 3a b5 13 f0       	push   $0xf013b53a
f011df49:	e8 b7 22 fe ff       	call   f0100205 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011df4e:	e8 5e f2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011df53:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df56:	e8 54 5e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011df5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011df5e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011df64:	83 ec 0c             	sub    $0xc,%esp
f011df67:	50                   	push   %eax
f011df68:	e8 ff 9c fe ff       	call   f0107c6c <kfree>
f011df6d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011df70:	e8 3a 5e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011df75:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011df78:	74 17                	je     f011df91 <test_kmalloc_firstfit1+0x1214>
f011df7a:	83 ec 04             	sub    $0x4,%esp
f011df7d:	68 54 b5 13 f0       	push   $0xf013b554
f011df82:	68 75 03 00 00       	push   $0x375
f011df87:	68 3a b5 13 f0       	push   $0xf013b53a
f011df8c:	e8 74 22 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011df91:	e8 1b f2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011df96:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011df99:	3d 00 01 00 00       	cmp    $0x100,%eax
f011df9e:	74 17                	je     f011dfb7 <test_kmalloc_firstfit1+0x123a>
f011dfa0:	83 ec 04             	sub    $0x4,%esp
f011dfa3:	68 97 b9 13 f0       	push   $0xf013b997
f011dfa8:	68 76 03 00 00       	push   $0x376
f011dfad:	68 3a b5 13 f0       	push   $0xf013b53a
f011dfb2:	e8 4e 22 fe ff       	call   f0100205 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011dfb7:	e8 f5 f1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011dfbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfbf:	e8 eb 5d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011dfc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011dfc7:	83 ec 0c             	sub    $0xc,%esp
f011dfca:	68 00 00 10 00       	push   $0x100000
f011dfcf:	e8 90 9b fe ff       	call   f0107b64 <kmalloc>
f011dfd4:	83 c4 10             	add    $0x10,%esp
f011dfd7:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011dfdd:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011dfe3:	89 c1                	mov    %eax,%ecx
f011dfe5:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011dfec:	10 00 00 
f011dfef:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011dff5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dffa:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011e000:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e006:	ba 00 00 00 00       	mov    $0x0,%edx
f011e00b:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011e011:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011e017:	29 d0                	sub    %edx,%eax
f011e019:	89 c3                	mov    %eax,%ebx
f011e01b:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011e022:	10 00 00 
f011e025:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e02a:	0f b6 d0             	movzbl %al,%edx
f011e02d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e033:	01 d0                	add    %edx,%eax
f011e035:	48                   	dec    %eax
f011e036:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011e03c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e042:	ba 00 00 00 00       	mov    $0x0,%edx
f011e047:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011e04d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e053:	29 d0                	sub    %edx,%eax
f011e055:	01 c3                	add    %eax,%ebx
f011e057:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011e05e:	10 00 00 
f011e061:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e066:	0f b6 c0             	movzbl %al,%eax
f011e069:	c1 e0 04             	shl    $0x4,%eax
f011e06c:	89 c2                	mov    %eax,%edx
f011e06e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e074:	01 d0                	add    %edx,%eax
f011e076:	48                   	dec    %eax
f011e077:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011e07d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e083:	ba 00 00 00 00       	mov    $0x0,%edx
f011e088:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011e08e:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e094:	29 d0                	sub    %edx,%eax
f011e096:	01 d8                	add    %ebx,%eax
f011e098:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011e09d:	39 c1                	cmp    %eax,%ecx
f011e09f:	74 17                	je     f011e0b8 <test_kmalloc_firstfit1+0x133b>
f011e0a1:	83 ec 04             	sub    $0x4,%esp
f011e0a4:	68 54 b9 13 f0       	push   $0xf013b954
f011e0a9:	68 80 03 00 00       	push   $0x380
f011e0ae:	68 3a b5 13 f0       	push   $0xf013b53a
f011e0b3:	e8 4d 21 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e0b8:	e8 f2 5c fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e0bd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011e0c0:	74 17                	je     f011e0d9 <test_kmalloc_firstfit1+0x135c>
f011e0c2:	83 ec 04             	sub    $0x4,%esp
f011e0c5:	68 54 b5 13 f0       	push   $0xf013b554
f011e0ca:	68 81 03 00 00       	push   $0x381
f011e0cf:	68 3a b5 13 f0       	push   $0xf013b53a
f011e0d4:	e8 2c 21 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011e0d9:	e8 d3 f0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e0de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011e0e1:	29 c2                	sub    %eax,%edx
f011e0e3:	89 d0                	mov    %edx,%eax
f011e0e5:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e0ea:	74 17                	je     f011e103 <test_kmalloc_firstfit1+0x1386>
f011e0ec:	83 ec 04             	sub    $0x4,%esp
f011e0ef:	68 84 b9 13 f0       	push   $0xf013b984
f011e0f4:	68 82 03 00 00       	push   $0x382
f011e0f9:	68 3a b5 13 f0       	push   $0xf013b53a
f011e0fe:	e8 02 21 fe ff       	call   f0100205 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011e103:	83 ec 0c             	sub    $0xc,%esp
f011e106:	68 30 bb 13 f0       	push   $0xf013bb30
f011e10b:	e8 fe 2b fe ff       	call   f0100d0e <cprintf>
f011e110:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e113:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e118:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e11b:	5b                   	pop    %ebx
f011e11c:	5f                   	pop    %edi
f011e11d:	5d                   	pop    %ebp
f011e11e:	c3                   	ret    

f011e11f <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011e11f:	55                   	push   %ebp
f011e120:	89 e5                	mov    %esp,%ebp
f011e122:	57                   	push   %edi
f011e123:	53                   	push   %ebx
f011e124:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011e12a:	83 ec 0c             	sub    $0xc,%esp
f011e12d:	68 7c b4 13 f0       	push   $0xf013b47c
f011e132:	e8 d7 2b fe ff       	call   f0100d0e <cprintf>
f011e137:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e13a:	83 ec 0c             	sub    $0xc,%esp
f011e13d:	68 ac b4 13 f0       	push   $0xf013b4ac
f011e142:	e8 c7 2b fe ff       	call   f0100d0e <cprintf>
f011e147:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e14a:	83 ec 0c             	sub    $0xc,%esp
f011e14d:	68 7c b4 13 f0       	push   $0xf013b47c
f011e152:	e8 b7 2b fe ff       	call   f0100d0e <cprintf>
f011e157:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011e15a:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011e160:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e165:	b8 00 00 00 00       	mov    $0x0,%eax
f011e16a:	89 d7                	mov    %edx,%edi
f011e16c:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011e16e:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011e175:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e178:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e17d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011e180:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e183:	ba 00 00 00 00       	mov    $0x0,%edx
f011e188:	f7 75 f4             	divl   -0xc(%ebp)
f011e18b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e18e:	29 d0                	sub    %edx,%eax
f011e190:	89 c1                	mov    %eax,%ecx
f011e192:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011e199:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e19e:	0f b6 d0             	movzbl %al,%edx
f011e1a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e1a4:	01 d0                	add    %edx,%eax
f011e1a6:	48                   	dec    %eax
f011e1a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011e1aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e1ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1b2:	f7 75 ec             	divl   -0x14(%ebp)
f011e1b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e1b8:	29 d0                	sub    %edx,%eax
f011e1ba:	01 c1                	add    %eax,%ecx
f011e1bc:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011e1c3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e1c8:	0f b6 c0             	movzbl %al,%eax
f011e1cb:	c1 e0 04             	shl    $0x4,%eax
f011e1ce:	89 c2                	mov    %eax,%edx
f011e1d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e1d3:	01 d0                	add    %edx,%eax
f011e1d5:	48                   	dec    %eax
f011e1d6:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e1d9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e1dc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1e1:	f7 75 e4             	divl   -0x1c(%ebp)
f011e1e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e1e7:	29 d0                	sub    %edx,%eax
f011e1e9:	01 c8                	add    %ecx,%eax
f011e1eb:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011e1f0:	29 c2                	sub    %eax,%edx
f011e1f2:	89 d0                	mov    %edx,%eax
f011e1f4:	83 ec 0c             	sub    $0xc,%esp
f011e1f7:	50                   	push   %eax
f011e1f8:	e8 67 99 fe ff       	call   f0107b64 <kmalloc>
f011e1fd:	83 c4 10             	add    $0x10,%esp
f011e200:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011e206:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e20c:	85 c0                	test   %eax,%eax
f011e20e:	74 17                	je     f011e227 <test_kmalloc_firstfit2+0x108>
f011e210:	83 ec 04             	sub    $0x4,%esp
f011e213:	68 7c bb 13 f0       	push   $0xf013bb7c
f011e218:	68 97 03 00 00       	push   $0x397
f011e21d:	68 3a b5 13 f0       	push   $0xf013b53a
f011e222:	e8 de 1f fe ff       	call   f0100205 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e227:	e8 85 ef fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e22c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e22f:	e8 7b 5b fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e234:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011e237:	83 ec 0c             	sub    $0xc,%esp
f011e23a:	68 00 fc 1f 00       	push   $0x1ffc00
f011e23f:	e8 20 99 fe ff       	call   f0107b64 <kmalloc>
f011e244:	83 c4 10             	add    $0x10,%esp
f011e247:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011e24d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e253:	89 c1                	mov    %eax,%ecx
f011e255:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011e25c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e25f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e264:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e267:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e26a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e26f:	f7 75 d4             	divl   -0x2c(%ebp)
f011e272:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e275:	29 d0                	sub    %edx,%eax
f011e277:	89 c3                	mov    %eax,%ebx
f011e279:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011e280:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e285:	0f b6 d0             	movzbl %al,%edx
f011e288:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011e28b:	01 d0                	add    %edx,%eax
f011e28d:	48                   	dec    %eax
f011e28e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011e291:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e294:	ba 00 00 00 00       	mov    $0x0,%edx
f011e299:	f7 75 cc             	divl   -0x34(%ebp)
f011e29c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011e29f:	29 d0                	sub    %edx,%eax
f011e2a1:	01 c3                	add    %eax,%ebx
f011e2a3:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011e2aa:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e2af:	0f b6 c0             	movzbl %al,%eax
f011e2b2:	c1 e0 04             	shl    $0x4,%eax
f011e2b5:	89 c2                	mov    %eax,%edx
f011e2b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011e2ba:	01 d0                	add    %edx,%eax
f011e2bc:	48                   	dec    %eax
f011e2bd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e2c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e2c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011e2c8:	f7 75 c4             	divl   -0x3c(%ebp)
f011e2cb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011e2ce:	29 d0                	sub    %edx,%eax
f011e2d0:	01 d8                	add    %ebx,%eax
f011e2d2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011e2d7:	39 c1                	cmp    %eax,%ecx
f011e2d9:	74 17                	je     f011e2f2 <test_kmalloc_firstfit2+0x1d3>
f011e2db:	83 ec 04             	sub    $0x4,%esp
f011e2de:	68 54 b9 13 f0       	push   $0xf013b954
f011e2e3:	68 a1 03 00 00       	push   $0x3a1
f011e2e8:	68 3a b5 13 f0       	push   $0xf013b53a
f011e2ed:	e8 13 1f fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e2f2:	e8 b8 5a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e2f7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e2fa:	74 17                	je     f011e313 <test_kmalloc_firstfit2+0x1f4>
f011e2fc:	83 ec 04             	sub    $0x4,%esp
f011e2ff:	68 54 b5 13 f0       	push   $0xf013b554
f011e304:	68 a2 03 00 00       	push   $0x3a2
f011e309:	68 3a b5 13 f0       	push   $0xf013b53a
f011e30e:	e8 f2 1e fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e313:	e8 99 ee fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e318:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e31b:	29 c2                	sub    %eax,%edx
f011e31d:	89 d0                	mov    %edx,%eax
f011e31f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e324:	74 17                	je     f011e33d <test_kmalloc_firstfit2+0x21e>
f011e326:	83 ec 04             	sub    $0x4,%esp
f011e329:	68 84 b9 13 f0       	push   $0xf013b984
f011e32e:	68 a3 03 00 00       	push   $0x3a3
f011e333:	68 3a b5 13 f0       	push   $0xf013b53a
f011e338:	e8 c8 1e fe ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e33d:	e8 6f ee fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e342:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e345:	e8 65 5a fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e34a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011e34d:	83 ec 0c             	sub    $0xc,%esp
f011e350:	68 00 fc 1f 00       	push   $0x1ffc00
f011e355:	e8 0a 98 fe ff       	call   f0107b64 <kmalloc>
f011e35a:	83 c4 10             	add    $0x10,%esp
f011e35d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011e363:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011e369:	89 c1                	mov    %eax,%ecx
f011e36b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011e372:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011e375:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e37a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011e37d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e380:	ba 00 00 00 00       	mov    $0x0,%edx
f011e385:	f7 75 bc             	divl   -0x44(%ebp)
f011e388:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011e38b:	29 d0                	sub    %edx,%eax
f011e38d:	89 c3                	mov    %eax,%ebx
f011e38f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011e396:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e39b:	0f b6 d0             	movzbl %al,%edx
f011e39e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011e3a1:	01 d0                	add    %edx,%eax
f011e3a3:	48                   	dec    %eax
f011e3a4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011e3a7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e3aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3af:	f7 75 b4             	divl   -0x4c(%ebp)
f011e3b2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011e3b5:	29 d0                	sub    %edx,%eax
f011e3b7:	01 c3                	add    %eax,%ebx
f011e3b9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011e3c0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e3c5:	0f b6 c0             	movzbl %al,%eax
f011e3c8:	c1 e0 04             	shl    $0x4,%eax
f011e3cb:	89 c2                	mov    %eax,%edx
f011e3cd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011e3d0:	01 d0                	add    %edx,%eax
f011e3d2:	48                   	dec    %eax
f011e3d3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011e3d6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e3de:	f7 75 ac             	divl   -0x54(%ebp)
f011e3e1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e3e4:	29 d0                	sub    %edx,%eax
f011e3e6:	01 d8                	add    %ebx,%eax
f011e3e8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011e3ed:	39 c1                	cmp    %eax,%ecx
f011e3ef:	74 17                	je     f011e408 <test_kmalloc_firstfit2+0x2e9>
f011e3f1:	83 ec 04             	sub    $0x4,%esp
f011e3f4:	68 54 b9 13 f0       	push   $0xf013b954
f011e3f9:	68 a9 03 00 00       	push   $0x3a9
f011e3fe:	68 3a b5 13 f0       	push   $0xf013b53a
f011e403:	e8 fd 1d fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e408:	e8 a2 59 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e40d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e410:	74 17                	je     f011e429 <test_kmalloc_firstfit2+0x30a>
f011e412:	83 ec 04             	sub    $0x4,%esp
f011e415:	68 54 b5 13 f0       	push   $0xf013b554
f011e41a:	68 aa 03 00 00       	push   $0x3aa
f011e41f:	68 3a b5 13 f0       	push   $0xf013b53a
f011e424:	e8 dc 1d fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011e429:	e8 83 ed fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e42e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e431:	29 c2                	sub    %eax,%edx
f011e433:	89 d0                	mov    %edx,%eax
f011e435:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e43a:	74 17                	je     f011e453 <test_kmalloc_firstfit2+0x334>
f011e43c:	83 ec 04             	sub    $0x4,%esp
f011e43f:	68 84 b9 13 f0       	push   $0xf013b984
f011e444:	68 ab 03 00 00       	push   $0x3ab
f011e449:	68 3a b5 13 f0       	push   $0xf013b53a
f011e44e:	e8 b2 1d fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e453:	e8 59 ed fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e458:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e45b:	e8 4f 59 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e460:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011e463:	83 ec 0c             	sub    $0xc,%esp
f011e466:	68 00 08 00 00       	push   $0x800
f011e46b:	e8 f4 96 fe ff       	call   f0107b64 <kmalloc>
f011e470:	83 c4 10             	add    $0x10,%esp
f011e473:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011e479:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e47f:	89 c1                	mov    %eax,%ecx
f011e481:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011e488:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011e48b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e490:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011e493:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e496:	ba 00 00 00 00       	mov    $0x0,%edx
f011e49b:	f7 75 a4             	divl   -0x5c(%ebp)
f011e49e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011e4a1:	29 d0                	sub    %edx,%eax
f011e4a3:	89 c3                	mov    %eax,%ebx
f011e4a5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011e4ac:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e4b1:	0f b6 d0             	movzbl %al,%edx
f011e4b4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011e4b7:	01 d0                	add    %edx,%eax
f011e4b9:	48                   	dec    %eax
f011e4ba:	89 45 98             	mov    %eax,-0x68(%ebp)
f011e4bd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e4c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4c5:	f7 75 9c             	divl   -0x64(%ebp)
f011e4c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011e4cb:	29 d0                	sub    %edx,%eax
f011e4cd:	01 c3                	add    %eax,%ebx
f011e4cf:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011e4d6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e4db:	0f b6 c0             	movzbl %al,%eax
f011e4de:	c1 e0 04             	shl    $0x4,%eax
f011e4e1:	89 c2                	mov    %eax,%edx
f011e4e3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011e4e6:	01 d0                	add    %edx,%eax
f011e4e8:	48                   	dec    %eax
f011e4e9:	89 45 90             	mov    %eax,-0x70(%ebp)
f011e4ec:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e4ef:	ba 00 00 00 00       	mov    $0x0,%edx
f011e4f4:	f7 75 94             	divl   -0x6c(%ebp)
f011e4f7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011e4fa:	29 d0                	sub    %edx,%eax
f011e4fc:	01 d8                	add    %ebx,%eax
f011e4fe:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011e503:	39 c1                	cmp    %eax,%ecx
f011e505:	73 17                	jae    f011e51e <test_kmalloc_firstfit2+0x3ff>
f011e507:	83 ec 04             	sub    $0x4,%esp
f011e50a:	68 54 b9 13 f0       	push   $0xf013b954
f011e50f:	68 b1 03 00 00       	push   $0x3b1
f011e514:	68 3a b5 13 f0       	push   $0xf013b53a
f011e519:	e8 e7 1c fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e51e:	e8 8c 58 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e523:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e526:	74 17                	je     f011e53f <test_kmalloc_firstfit2+0x420>
f011e528:	83 ec 04             	sub    $0x4,%esp
f011e52b:	68 54 b5 13 f0       	push   $0xf013b554
f011e530:	68 b2 03 00 00       	push   $0x3b2
f011e535:	68 3a b5 13 f0       	push   $0xf013b53a
f011e53a:	e8 c6 1c fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e53f:	e8 6d ec fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e544:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e547:	29 c2                	sub    %eax,%edx
f011e549:	89 d0                	mov    %edx,%eax
f011e54b:	83 f8 01             	cmp    $0x1,%eax
f011e54e:	74 17                	je     f011e567 <test_kmalloc_firstfit2+0x448>
f011e550:	83 ec 04             	sub    $0x4,%esp
f011e553:	68 84 b9 13 f0       	push   $0xf013b984
f011e558:	68 b3 03 00 00       	push   $0x3b3
f011e55d:	68 3a b5 13 f0       	push   $0xf013b53a
f011e562:	e8 9e 1c fe ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011e567:	e8 45 ec fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e56c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e56f:	e8 3b 58 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e574:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011e577:	83 ec 0c             	sub    $0xc,%esp
f011e57a:	68 00 08 00 00       	push   $0x800
f011e57f:	e8 e0 95 fe ff       	call   f0107b64 <kmalloc>
f011e584:	83 c4 10             	add    $0x10,%esp
f011e587:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011e58d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011e593:	89 c1                	mov    %eax,%ecx
f011e595:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011e59c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011e59f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e5a4:	89 45 88             	mov    %eax,-0x78(%ebp)
f011e5a7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e5aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5af:	f7 75 8c             	divl   -0x74(%ebp)
f011e5b2:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e5b5:	29 d0                	sub    %edx,%eax
f011e5b7:	89 c3                	mov    %eax,%ebx
f011e5b9:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011e5c0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e5c5:	0f b6 d0             	movzbl %al,%edx
f011e5c8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011e5cb:	01 d0                	add    %edx,%eax
f011e5cd:	48                   	dec    %eax
f011e5ce:	89 45 80             	mov    %eax,-0x80(%ebp)
f011e5d1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e5d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5d9:	f7 75 84             	divl   -0x7c(%ebp)
f011e5dc:	8b 45 80             	mov    -0x80(%ebp),%eax
f011e5df:	29 d0                	sub    %edx,%eax
f011e5e1:	01 c3                	add    %eax,%ebx
f011e5e3:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011e5ea:	10 00 00 
f011e5ed:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e5f2:	0f b6 c0             	movzbl %al,%eax
f011e5f5:	c1 e0 04             	shl    $0x4,%eax
f011e5f8:	89 c2                	mov    %eax,%edx
f011e5fa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e600:	01 d0                	add    %edx,%eax
f011e602:	48                   	dec    %eax
f011e603:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011e609:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e60f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e614:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011e61a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011e620:	29 d0                	sub    %edx,%eax
f011e622:	01 d8                	add    %ebx,%eax
f011e624:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011e629:	39 c1                	cmp    %eax,%ecx
f011e62b:	74 17                	je     f011e644 <test_kmalloc_firstfit2+0x525>
f011e62d:	83 ec 04             	sub    $0x4,%esp
f011e630:	68 54 b9 13 f0       	push   $0xf013b954
f011e635:	68 b9 03 00 00       	push   $0x3b9
f011e63a:	68 3a b5 13 f0       	push   $0xf013b53a
f011e63f:	e8 c1 1b fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e644:	e8 66 57 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e649:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e64c:	74 17                	je     f011e665 <test_kmalloc_firstfit2+0x546>
f011e64e:	83 ec 04             	sub    $0x4,%esp
f011e651:	68 54 b5 13 f0       	push   $0xf013b554
f011e656:	68 ba 03 00 00       	push   $0x3ba
f011e65b:	68 3a b5 13 f0       	push   $0xf013b53a
f011e660:	e8 a0 1b fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011e665:	e8 47 eb fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e66a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e66d:	29 c2                	sub    %eax,%edx
f011e66f:	89 d0                	mov    %edx,%eax
f011e671:	83 f8 01             	cmp    $0x1,%eax
f011e674:	74 17                	je     f011e68d <test_kmalloc_firstfit2+0x56e>
f011e676:	83 ec 04             	sub    $0x4,%esp
f011e679:	68 84 b9 13 f0       	push   $0xf013b984
f011e67e:	68 bb 03 00 00       	push   $0x3bb
f011e683:	68 3a b5 13 f0       	push   $0xf013b53a
f011e688:	e8 78 1b fe ff       	call   f0100205 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e68d:	e8 1f eb fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e692:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e695:	e8 15 57 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e69a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011e69d:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011e6a3:	83 ec 0c             	sub    $0xc,%esp
f011e6a6:	50                   	push   %eax
f011e6a7:	e8 c0 95 fe ff       	call   f0107c6c <kfree>
f011e6ac:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e6af:	e8 fb 56 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e6b4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e6b7:	74 17                	je     f011e6d0 <test_kmalloc_firstfit2+0x5b1>
f011e6b9:	83 ec 04             	sub    $0x4,%esp
f011e6bc:	68 54 b5 13 f0       	push   $0xf013b554
f011e6c1:	68 c1 03 00 00       	push   $0x3c1
f011e6c6:	68 3a b5 13 f0       	push   $0xf013b53a
f011e6cb:	e8 35 1b fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011e6d0:	e8 dc ea fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e6d5:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e6d8:	83 f8 01             	cmp    $0x1,%eax
f011e6db:	74 17                	je     f011e6f4 <test_kmalloc_firstfit2+0x5d5>
f011e6dd:	83 ec 04             	sub    $0x4,%esp
f011e6e0:	68 97 b9 13 f0       	push   $0xf013b997
f011e6e5:	68 c2 03 00 00       	push   $0x3c2
f011e6ea:	68 3a b5 13 f0       	push   $0xf013b53a
f011e6ef:	e8 11 1b fe ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e6f4:	e8 b8 ea fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e6f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e6fc:	e8 ae 56 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e701:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011e704:	83 ec 0c             	sub    $0xc,%esp
f011e707:	68 00 1c 00 00       	push   $0x1c00
f011e70c:	e8 53 94 fe ff       	call   f0107b64 <kmalloc>
f011e711:	83 c4 10             	add    $0x10,%esp
f011e714:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011e71a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011e720:	89 c1                	mov    %eax,%ecx
f011e722:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011e729:	10 00 00 
f011e72c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011e732:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e737:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011e73d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e743:	ba 00 00 00 00       	mov    $0x0,%edx
f011e748:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011e74e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e754:	29 d0                	sub    %edx,%eax
f011e756:	89 c3                	mov    %eax,%ebx
f011e758:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011e75f:	10 00 00 
f011e762:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e767:	0f b6 d0             	movzbl %al,%edx
f011e76a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011e770:	01 d0                	add    %edx,%eax
f011e772:	48                   	dec    %eax
f011e773:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011e779:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e77f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e784:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011e78a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e790:	29 d0                	sub    %edx,%eax
f011e792:	01 c3                	add    %eax,%ebx
f011e794:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011e79b:	10 00 00 
f011e79e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e7a3:	0f b6 c0             	movzbl %al,%eax
f011e7a6:	c1 e0 04             	shl    $0x4,%eax
f011e7a9:	89 c2                	mov    %eax,%edx
f011e7ab:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e7b1:	01 d0                	add    %edx,%eax
f011e7b3:	48                   	dec    %eax
f011e7b4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e7ba:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e7c0:	ba 00 00 00 00       	mov    $0x0,%edx
f011e7c5:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e7cb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e7d1:	29 d0                	sub    %edx,%eax
f011e7d3:	01 d8                	add    %ebx,%eax
f011e7d5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011e7da:	39 c1                	cmp    %eax,%ecx
f011e7dc:	74 17                	je     f011e7f5 <test_kmalloc_firstfit2+0x6d6>
f011e7de:	83 ec 04             	sub    $0x4,%esp
f011e7e1:	68 54 b9 13 f0       	push   $0xf013b954
f011e7e6:	68 c8 03 00 00       	push   $0x3c8
f011e7eb:	68 3a b5 13 f0       	push   $0xf013b53a
f011e7f0:	e8 10 1a fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e7f5:	e8 b5 55 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e7fa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e7fd:	74 17                	je     f011e816 <test_kmalloc_firstfit2+0x6f7>
f011e7ff:	83 ec 04             	sub    $0x4,%esp
f011e802:	68 54 b5 13 f0       	push   $0xf013b554
f011e807:	68 c9 03 00 00       	push   $0x3c9
f011e80c:	68 3a b5 13 f0       	push   $0xf013b53a
f011e811:	e8 ef 19 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011e816:	e8 96 e9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e81b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e81e:	29 c2                	sub    %eax,%edx
f011e820:	89 d0                	mov    %edx,%eax
f011e822:	83 f8 02             	cmp    $0x2,%eax
f011e825:	74 17                	je     f011e83e <test_kmalloc_firstfit2+0x71f>
f011e827:	83 ec 04             	sub    $0x4,%esp
f011e82a:	68 84 b9 13 f0       	push   $0xf013b984
f011e82f:	68 ca 03 00 00       	push   $0x3ca
f011e834:	68 3a b5 13 f0       	push   $0xf013b53a
f011e839:	e8 c7 19 fe ff       	call   f0100205 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011e83e:	e8 6e e9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e843:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e846:	e8 64 55 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e84b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011e84e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011e854:	83 ec 0c             	sub    $0xc,%esp
f011e857:	50                   	push   %eax
f011e858:	e8 0f 94 fe ff       	call   f0107c6c <kfree>
f011e85d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e860:	e8 4a 55 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e865:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e868:	74 17                	je     f011e881 <test_kmalloc_firstfit2+0x762>
f011e86a:	83 ec 04             	sub    $0x4,%esp
f011e86d:	68 54 b5 13 f0       	push   $0xf013b554
f011e872:	68 d0 03 00 00       	push   $0x3d0
f011e877:	68 3a b5 13 f0       	push   $0xf013b53a
f011e87c:	e8 84 19 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011e881:	e8 2b e9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e886:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011e889:	3d 00 02 00 00       	cmp    $0x200,%eax
f011e88e:	74 17                	je     f011e8a7 <test_kmalloc_firstfit2+0x788>
f011e890:	83 ec 04             	sub    $0x4,%esp
f011e893:	68 97 b9 13 f0       	push   $0xf013b997
f011e898:	68 d1 03 00 00       	push   $0x3d1
f011e89d:	68 3a b5 13 f0       	push   $0xf013b53a
f011e8a2:	e8 5e 19 fe ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e8a7:	e8 05 e9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e8ac:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e8af:	e8 fb 54 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e8b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011e8b7:	83 ec 0c             	sub    $0xc,%esp
f011e8ba:	68 00 fc 2f 00       	push   $0x2ffc00
f011e8bf:	e8 a0 92 fe ff       	call   f0107b64 <kmalloc>
f011e8c4:	83 c4 10             	add    $0x10,%esp
f011e8c7:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011e8cd:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011e8d3:	89 c1                	mov    %eax,%ecx
f011e8d5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e8dc:	10 00 00 
f011e8df:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e8e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e8ea:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e8f0:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e8f6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8fb:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e901:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e907:	29 d0                	sub    %edx,%eax
f011e909:	89 c3                	mov    %eax,%ebx
f011e90b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e912:	10 00 00 
f011e915:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e91a:	0f b6 d0             	movzbl %al,%edx
f011e91d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e923:	01 d0                	add    %edx,%eax
f011e925:	48                   	dec    %eax
f011e926:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e92c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e932:	ba 00 00 00 00       	mov    $0x0,%edx
f011e937:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e93d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e943:	29 d0                	sub    %edx,%eax
f011e945:	01 c3                	add    %eax,%ebx
f011e947:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e94e:	10 00 00 
f011e951:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011e956:	0f b6 c0             	movzbl %al,%eax
f011e959:	c1 e0 04             	shl    $0x4,%eax
f011e95c:	89 c2                	mov    %eax,%edx
f011e95e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e964:	01 d0                	add    %edx,%eax
f011e966:	48                   	dec    %eax
f011e967:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e96d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e973:	ba 00 00 00 00       	mov    $0x0,%edx
f011e978:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e97e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e984:	29 d0                	sub    %edx,%eax
f011e986:	01 d8                	add    %ebx,%eax
f011e988:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011e98d:	39 c1                	cmp    %eax,%ecx
f011e98f:	74 17                	je     f011e9a8 <test_kmalloc_firstfit2+0x889>
f011e991:	83 ec 04             	sub    $0x4,%esp
f011e994:	68 54 b9 13 f0       	push   $0xf013b954
f011e999:	68 d7 03 00 00       	push   $0x3d7
f011e99e:	68 3a b5 13 f0       	push   $0xf013b53a
f011e9a3:	e8 5d 18 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e9a8:	e8 02 54 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011e9ad:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011e9b0:	74 17                	je     f011e9c9 <test_kmalloc_firstfit2+0x8aa>
f011e9b2:	83 ec 04             	sub    $0x4,%esp
f011e9b5:	68 54 b5 13 f0       	push   $0xf013b554
f011e9ba:	68 d8 03 00 00       	push   $0x3d8
f011e9bf:	68 3a b5 13 f0       	push   $0xf013b53a
f011e9c4:	e8 3c 18 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011e9c9:	e8 e3 e7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e9ce:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e9d1:	29 c2                	sub    %eax,%edx
f011e9d3:	89 d0                	mov    %edx,%eax
f011e9d5:	3d 00 03 00 00       	cmp    $0x300,%eax
f011e9da:	74 17                	je     f011e9f3 <test_kmalloc_firstfit2+0x8d4>
f011e9dc:	83 ec 04             	sub    $0x4,%esp
f011e9df:	68 84 b9 13 f0       	push   $0xf013b984
f011e9e4:	68 d9 03 00 00       	push   $0x3d9
f011e9e9:	68 3a b5 13 f0       	push   $0xf013b53a
f011e9ee:	e8 12 18 fe ff       	call   f0100205 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011e9f3:	e8 b9 e7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011e9f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e9fb:	e8 af 53 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ea00:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011ea03:	83 ec 0c             	sub    $0xc,%esp
f011ea06:	68 00 18 20 00       	push   $0x201800
f011ea0b:	e8 54 91 fe ff       	call   f0107b64 <kmalloc>
f011ea10:	83 c4 10             	add    $0x10,%esp
f011ea13:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011ea19:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ea1f:	89 c1                	mov    %eax,%ecx
f011ea21:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011ea28:	10 00 00 
f011ea2b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011ea31:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ea36:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011ea3c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ea42:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea47:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011ea4d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011ea53:	29 d0                	sub    %edx,%eax
f011ea55:	89 c3                	mov    %eax,%ebx
f011ea57:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011ea5e:	10 00 00 
f011ea61:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ea66:	0f b6 d0             	movzbl %al,%edx
f011ea69:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011ea6f:	01 d0                	add    %edx,%eax
f011ea71:	48                   	dec    %eax
f011ea72:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011ea78:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ea7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea83:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011ea89:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011ea8f:	29 d0                	sub    %edx,%eax
f011ea91:	01 c3                	add    %eax,%ebx
f011ea93:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011ea9a:	10 00 00 
f011ea9d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011eaa2:	0f b6 c0             	movzbl %al,%eax
f011eaa5:	c1 e0 04             	shl    $0x4,%eax
f011eaa8:	89 c2                	mov    %eax,%edx
f011eaaa:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011eab0:	01 d0                	add    %edx,%eax
f011eab2:	48                   	dec    %eax
f011eab3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011eab9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011eabf:	ba 00 00 00 00       	mov    $0x0,%edx
f011eac4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011eaca:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011ead0:	29 d0                	sub    %edx,%eax
f011ead2:	01 d8                	add    %ebx,%eax
f011ead4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011ead9:	39 c1                	cmp    %eax,%ecx
f011eadb:	74 17                	je     f011eaf4 <test_kmalloc_firstfit2+0x9d5>
f011eadd:	83 ec 04             	sub    $0x4,%esp
f011eae0:	68 54 b9 13 f0       	push   $0xf013b954
f011eae5:	68 df 03 00 00       	push   $0x3df
f011eaea:	68 3a b5 13 f0       	push   $0xf013b53a
f011eaef:	e8 11 17 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eaf4:	e8 b6 52 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011eaf9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eafc:	74 17                	je     f011eb15 <test_kmalloc_firstfit2+0x9f6>
f011eafe:	83 ec 04             	sub    $0x4,%esp
f011eb01:	68 54 b5 13 f0       	push   $0xf013b554
f011eb06:	68 e0 03 00 00       	push   $0x3e0
f011eb0b:	68 3a b5 13 f0       	push   $0xf013b53a
f011eb10:	e8 f0 16 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011eb15:	e8 97 e6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011eb1a:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011eb1d:	29 c2                	sub    %eax,%edx
f011eb1f:	89 d0                	mov    %edx,%eax
f011eb21:	3d 02 02 00 00       	cmp    $0x202,%eax
f011eb26:	74 17                	je     f011eb3f <test_kmalloc_firstfit2+0xa20>
f011eb28:	83 ec 04             	sub    $0x4,%esp
f011eb2b:	68 84 b9 13 f0       	push   $0xf013b984
f011eb30:	68 e1 03 00 00       	push   $0x3e1
f011eb35:	68 3a b5 13 f0       	push   $0xf013b53a
f011eb3a:	e8 c6 16 fe ff       	call   f0100205 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011eb3f:	e8 6d e6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011eb44:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011eb47:	e8 63 52 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011eb4c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011eb4f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011eb55:	83 ec 0c             	sub    $0xc,%esp
f011eb58:	50                   	push   %eax
f011eb59:	e8 0e 91 fe ff       	call   f0107c6c <kfree>
f011eb5e:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011eb61:	e8 49 52 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011eb66:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011eb69:	74 17                	je     f011eb82 <test_kmalloc_firstfit2+0xa63>
f011eb6b:	83 ec 04             	sub    $0x4,%esp
f011eb6e:	68 54 b5 13 f0       	push   $0xf013b554
f011eb73:	68 e7 03 00 00       	push   $0x3e7
f011eb78:	68 3a b5 13 f0       	push   $0xf013b53a
f011eb7d:	e8 83 16 fe ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011eb82:	e8 2a e6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011eb87:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011eb8a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011eb8f:	74 17                	je     f011eba8 <test_kmalloc_firstfit2+0xa89>
f011eb91:	83 ec 04             	sub    $0x4,%esp
f011eb94:	68 97 b9 13 f0       	push   $0xf013b997
f011eb99:	68 e8 03 00 00       	push   $0x3e8
f011eb9e:	68 3a b5 13 f0       	push   $0xf013b53a
f011eba3:	e8 5d 16 fe ff       	call   f0100205 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011eba8:	e8 04 e6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ebad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ebb0:	e8 fa 51 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ebb5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011ebb8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011ebbe:	83 ec 0c             	sub    $0xc,%esp
f011ebc1:	50                   	push   %eax
f011ebc2:	e8 a5 90 fe ff       	call   f0107c6c <kfree>
f011ebc7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011ebca:	e8 e2 e5 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ebcf:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ebd2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ebd7:	74 17                	je     f011ebf0 <test_kmalloc_firstfit2+0xad1>
f011ebd9:	83 ec 04             	sub    $0x4,%esp
f011ebdc:	68 97 b9 13 f0       	push   $0xf013b997
f011ebe1:	68 ee 03 00 00       	push   $0x3ee
f011ebe6:	68 3a b5 13 f0       	push   $0xf013b53a
f011ebeb:	e8 15 16 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebf0:	e8 ba 51 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ebf5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ebf8:	74 17                	je     f011ec11 <test_kmalloc_firstfit2+0xaf2>
f011ebfa:	83 ec 04             	sub    $0x4,%esp
f011ebfd:	68 54 b5 13 f0       	push   $0xf013b554
f011ec02:	68 ef 03 00 00       	push   $0x3ef
f011ec07:	68 3a b5 13 f0       	push   $0xf013b53a
f011ec0c:	e8 f4 15 fe ff       	call   f0100205 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011ec11:	e8 9b e5 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ec16:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ec19:	e8 91 51 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ec1e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011ec21:	83 ec 0c             	sub    $0xc,%esp
f011ec24:	68 00 fc 4f 00       	push   $0x4ffc00
f011ec29:	e8 36 8f fe ff       	call   f0107b64 <kmalloc>
f011ec2e:	83 c4 10             	add    $0x10,%esp
f011ec31:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011ec37:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011ec3d:	89 c1                	mov    %eax,%ecx
f011ec3f:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011ec46:	10 00 00 
f011ec49:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011ec4f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec54:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011ec5a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ec60:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec65:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011ec6b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ec71:	29 d0                	sub    %edx,%eax
f011ec73:	89 c3                	mov    %eax,%ebx
f011ec75:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011ec7c:	10 00 00 
f011ec7f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ec84:	0f b6 d0             	movzbl %al,%edx
f011ec87:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ec8d:	01 d0                	add    %edx,%eax
f011ec8f:	48                   	dec    %eax
f011ec90:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011ec96:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ec9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011eca1:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011eca7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011ecad:	29 d0                	sub    %edx,%eax
f011ecaf:	01 c3                	add    %eax,%ebx
f011ecb1:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011ecb8:	10 00 00 
f011ecbb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ecc0:	0f b6 c0             	movzbl %al,%eax
f011ecc3:	c1 e0 04             	shl    $0x4,%eax
f011ecc6:	89 c2                	mov    %eax,%edx
f011ecc8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011ecce:	01 d0                	add    %edx,%eax
f011ecd0:	48                   	dec    %eax
f011ecd1:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011ecd7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ecdd:	ba 00 00 00 00       	mov    $0x0,%edx
f011ece2:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011ece8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011ecee:	29 d0                	sub    %edx,%eax
f011ecf0:	01 d8                	add    %ebx,%eax
f011ecf2:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011ecf7:	39 c1                	cmp    %eax,%ecx
f011ecf9:	74 17                	je     f011ed12 <test_kmalloc_firstfit2+0xbf3>
f011ecfb:	83 ec 04             	sub    $0x4,%esp
f011ecfe:	68 54 b9 13 f0       	push   $0xf013b954
f011ed03:	68 f5 03 00 00       	push   $0x3f5
f011ed08:	68 3a b5 13 f0       	push   $0xf013b53a
f011ed0d:	e8 f3 14 fe ff       	call   f0100205 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed12:	e8 98 50 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ed17:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ed1a:	74 17                	je     f011ed33 <test_kmalloc_firstfit2+0xc14>
f011ed1c:	83 ec 04             	sub    $0x4,%esp
f011ed1f:	68 54 b5 13 f0       	push   $0xf013b554
f011ed24:	68 f6 03 00 00       	push   $0x3f6
f011ed29:	68 3a b5 13 f0       	push   $0xf013b53a
f011ed2e:	e8 d2 14 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ed33:	e8 79 e4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ed38:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ed3b:	29 c2                	sub    %eax,%edx
f011ed3d:	89 d0                	mov    %edx,%eax
f011ed3f:	3d 00 05 00 00       	cmp    $0x500,%eax
f011ed44:	74 17                	je     f011ed5d <test_kmalloc_firstfit2+0xc3e>
f011ed46:	83 ec 04             	sub    $0x4,%esp
f011ed49:	68 84 b9 13 f0       	push   $0xf013b984
f011ed4e:	68 f7 03 00 00       	push   $0x3f7
f011ed53:	68 3a b5 13 f0       	push   $0xf013b53a
f011ed58:	e8 a8 14 fe ff       	call   f0100205 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ed5d:	e8 4f e4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ed62:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ed65:	e8 45 50 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ed6a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011ed6d:	83 ec 0c             	sub    $0xc,%esp
f011ed70:	68 00 fc 2f 00       	push   $0x2ffc00
f011ed75:	e8 ea 8d fe ff       	call   f0107b64 <kmalloc>
f011ed7a:	83 c4 10             	add    $0x10,%esp
f011ed7d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ed83:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011ed89:	89 c1                	mov    %eax,%ecx
f011ed8b:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011ed92:	10 00 00 
f011ed95:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011ed9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eda0:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011eda6:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011edac:	ba 00 00 00 00       	mov    $0x0,%edx
f011edb1:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011edb7:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011edbd:	29 d0                	sub    %edx,%eax
f011edbf:	89 c3                	mov    %eax,%ebx
f011edc1:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011edc8:	10 00 00 
f011edcb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011edd0:	0f b6 d0             	movzbl %al,%edx
f011edd3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011edd9:	01 d0                	add    %edx,%eax
f011eddb:	48                   	dec    %eax
f011eddc:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011ede2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011ede8:	ba 00 00 00 00       	mov    $0x0,%edx
f011eded:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011edf3:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011edf9:	29 d0                	sub    %edx,%eax
f011edfb:	01 c3                	add    %eax,%ebx
f011edfd:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011ee04:	10 00 00 
f011ee07:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ee0c:	0f b6 c0             	movzbl %al,%eax
f011ee0f:	c1 e0 04             	shl    $0x4,%eax
f011ee12:	89 c2                	mov    %eax,%edx
f011ee14:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ee1a:	01 d0                	add    %edx,%eax
f011ee1c:	48                   	dec    %eax
f011ee1d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011ee23:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ee29:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee2e:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011ee34:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011ee3a:	29 d0                	sub    %edx,%eax
f011ee3c:	01 d8                	add    %ebx,%eax
f011ee3e:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011ee43:	39 c1                	cmp    %eax,%ecx
f011ee45:	74 17                	je     f011ee5e <test_kmalloc_firstfit2+0xd3f>
f011ee47:	83 ec 04             	sub    $0x4,%esp
f011ee4a:	68 54 b9 13 f0       	push   $0xf013b954
f011ee4f:	68 05 04 00 00       	push   $0x405
f011ee54:	68 3a b5 13 f0       	push   $0xf013b53a
f011ee59:	e8 a7 13 fe ff       	call   f0100205 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee5e:	e8 4c 4f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ee63:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ee66:	74 17                	je     f011ee7f <test_kmalloc_firstfit2+0xd60>
f011ee68:	83 ec 04             	sub    $0x4,%esp
f011ee6b:	68 54 b5 13 f0       	push   $0xf013b554
f011ee70:	68 06 04 00 00       	push   $0x406
f011ee75:	68 3a b5 13 f0       	push   $0xf013b53a
f011ee7a:	e8 86 13 fe ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011ee7f:	e8 2d e3 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ee84:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ee87:	29 c2                	sub    %eax,%edx
f011ee89:	89 d0                	mov    %edx,%eax
f011ee8b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011ee90:	74 17                	je     f011eea9 <test_kmalloc_firstfit2+0xd8a>
f011ee92:	83 ec 04             	sub    $0x4,%esp
f011ee95:	68 84 b9 13 f0       	push   $0xf013b984
f011ee9a:	68 07 04 00 00       	push   $0x407
f011ee9f:	68 3a b5 13 f0       	push   $0xf013b53a
f011eea4:	e8 5c 13 fe ff       	call   f0100205 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011eea9:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011eeb0:	10 00 00 
f011eeb3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011eeb9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eebe:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011eec4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eeca:	ba 00 00 00 00       	mov    $0x0,%edx
f011eecf:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011eed5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011eedb:	29 d0                	sub    %edx,%eax
f011eedd:	89 c1                	mov    %eax,%ecx
f011eedf:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011eee6:	10 00 00 
f011eee9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011eeee:	0f b6 d0             	movzbl %al,%edx
f011eef1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011eef7:	01 d0                	add    %edx,%eax
f011eef9:	48                   	dec    %eax
f011eefa:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011ef00:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ef06:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef0b:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011ef11:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011ef17:	29 d0                	sub    %edx,%eax
f011ef19:	01 c1                	add    %eax,%ecx
f011ef1b:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011ef22:	10 00 00 
f011ef25:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ef2a:	0f b6 c0             	movzbl %al,%eax
f011ef2d:	c1 e0 04             	shl    $0x4,%eax
f011ef30:	89 c2                	mov    %eax,%edx
f011ef32:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ef38:	01 d0                	add    %edx,%eax
f011ef3a:	48                   	dec    %eax
f011ef3b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011ef41:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ef47:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef4c:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011ef52:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ef58:	29 d0                	sub    %edx,%eax
f011ef5a:	01 c8                	add    %ecx,%eax
f011ef5c:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011ef61:	29 c2                	sub    %eax,%edx
f011ef63:	89 d0                	mov    %edx,%eax
f011ef65:	83 ec 0c             	sub    $0xc,%esp
f011ef68:	50                   	push   %eax
f011ef69:	e8 f6 8b fe ff       	call   f0107b64 <kmalloc>
f011ef6e:	83 c4 10             	add    $0x10,%esp
f011ef71:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011ef77:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011ef7d:	85 c0                	test   %eax,%eax
f011ef7f:	74 17                	je     f011ef98 <test_kmalloc_firstfit2+0xe79>
f011ef81:	83 ec 04             	sub    $0x4,%esp
f011ef84:	68 84 ba 13 f0       	push   $0xf013ba84
f011ef89:	68 0d 04 00 00       	push   $0x40d
f011ef8e:	68 3a b5 13 f0       	push   $0xf013b53a
f011ef93:	e8 6d 12 fe ff       	call   f0100205 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011ef98:	83 ec 0c             	sub    $0xc,%esp
f011ef9b:	68 c4 bb 13 f0       	push   $0xf013bbc4
f011efa0:	e8 69 1d fe ff       	call   f0100d0e <cprintf>
f011efa5:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011efa8:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011efad:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011efb0:	5b                   	pop    %ebx
f011efb1:	5f                   	pop    %edi
f011efb2:	5d                   	pop    %ebp
f011efb3:	c3                   	ret    

f011efb4 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011efb4:	55                   	push   %ebp
f011efb5:	89 e5                	mov    %esp,%ebp
f011efb7:	57                   	push   %edi
f011efb8:	53                   	push   %ebx
f011efb9:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011efbf:	83 ec 0c             	sub    $0xc,%esp
f011efc2:	68 7c b4 13 f0       	push   $0xf013b47c
f011efc7:	e8 42 1d fe ff       	call   f0100d0e <cprintf>
f011efcc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011efcf:	83 ec 0c             	sub    $0xc,%esp
f011efd2:	68 ac b4 13 f0       	push   $0xf013b4ac
f011efd7:	e8 32 1d fe ff       	call   f0100d0e <cprintf>
f011efdc:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011efdf:	83 ec 0c             	sub    $0xc,%esp
f011efe2:	68 7c b4 13 f0       	push   $0xf013b47c
f011efe7:	e8 22 1d fe ff       	call   f0100d0e <cprintf>
f011efec:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011efef:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011eff5:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011effa:	b8 00 00 00 00       	mov    $0x0,%eax
f011efff:	89 d7                	mov    %edx,%edi
f011f001:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011f003:	e8 a9 e1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011f008:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011f00b:	e8 9f 4d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011f010:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011f013:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011f01a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f021:	eb 1f                	jmp    f011f042 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011f023:	83 ec 0c             	sub    $0xc,%esp
f011f026:	68 00 00 20 00       	push   $0x200000
f011f02b:	e8 34 8b fe ff       	call   f0107b64 <kmalloc>
f011f030:	83 c4 10             	add    $0x10,%esp
f011f033:	89 c2                	mov    %eax,%edx
f011f035:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f038:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011f03f:	ff 45 f4             	incl   -0xc(%ebp)
f011f042:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011f046:	7e db                	jle    f011f023 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011f048:	83 ec 0c             	sub    $0xc,%esp
f011f04b:	68 00 b0 1f 00       	push   $0x1fb000
f011f050:	e8 0f 8b fe ff       	call   f0107b64 <kmalloc>
f011f055:	83 c4 10             	add    $0x10,%esp
f011f058:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f05e:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f064:	89 c1                	mov    %eax,%ecx
f011f066:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011f06d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011f070:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f075:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011f078:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f07b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f080:	f7 75 e4             	divl   -0x1c(%ebp)
f011f083:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f086:	29 d0                	sub    %edx,%eax
f011f088:	89 c3                	mov    %eax,%ebx
f011f08a:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011f091:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f096:	0f b6 d0             	movzbl %al,%edx
f011f099:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f09c:	01 d0                	add    %edx,%eax
f011f09e:	48                   	dec    %eax
f011f09f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011f0a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f0a5:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0aa:	f7 75 dc             	divl   -0x24(%ebp)
f011f0ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f0b0:	29 d0                	sub    %edx,%eax
f011f0b2:	01 c3                	add    %eax,%ebx
f011f0b4:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011f0bb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f0c0:	0f b6 c0             	movzbl %al,%eax
f011f0c3:	c1 e0 04             	shl    $0x4,%eax
f011f0c6:	89 c2                	mov    %eax,%edx
f011f0c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011f0cb:	01 d0                	add    %edx,%eax
f011f0cd:	48                   	dec    %eax
f011f0ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011f0d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f0d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0d9:	f7 75 d4             	divl   -0x2c(%ebp)
f011f0dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f0df:	29 d0                	sub    %edx,%eax
f011f0e1:	01 d8                	add    %ebx,%eax
f011f0e3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f0e8:	39 c1                	cmp    %eax,%ecx
f011f0ea:	0f 85 c0 04 00 00    	jne    f011f5b0 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f0f0:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f0f6:	89 c1                	mov    %eax,%ecx
f011f0f8:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011f0ff:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f102:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f107:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011f10a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f10d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f112:	f7 75 cc             	divl   -0x34(%ebp)
f011f115:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f118:	29 d0                	sub    %edx,%eax
f011f11a:	89 c3                	mov    %eax,%ebx
f011f11c:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011f123:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f128:	0f b6 d0             	movzbl %al,%edx
f011f12b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f12e:	01 d0                	add    %edx,%eax
f011f130:	48                   	dec    %eax
f011f131:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011f134:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f137:	ba 00 00 00 00       	mov    $0x0,%edx
f011f13c:	f7 75 c4             	divl   -0x3c(%ebp)
f011f13f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f142:	29 d0                	sub    %edx,%eax
f011f144:	01 c3                	add    %eax,%ebx
f011f146:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011f14d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f152:	0f b6 c0             	movzbl %al,%eax
f011f155:	c1 e0 04             	shl    $0x4,%eax
f011f158:	89 c2                	mov    %eax,%edx
f011f15a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f15d:	01 d0                	add    %edx,%eax
f011f15f:	48                   	dec    %eax
f011f160:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011f163:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f166:	ba 00 00 00 00       	mov    $0x0,%edx
f011f16b:	f7 75 bc             	divl   -0x44(%ebp)
f011f16e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f171:	29 d0                	sub    %edx,%eax
f011f173:	01 d8                	add    %ebx,%eax
f011f175:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011f17a:	39 c1                	cmp    %eax,%ecx
f011f17c:	0f 85 2e 04 00 00    	jne    f011f5b0 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f182:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011f188:	89 c1                	mov    %eax,%ecx
f011f18a:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011f191:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f194:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f199:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011f19c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f19f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1a4:	f7 75 b4             	divl   -0x4c(%ebp)
f011f1a7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f1aa:	29 d0                	sub    %edx,%eax
f011f1ac:	89 c3                	mov    %eax,%ebx
f011f1ae:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011f1b5:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f1ba:	0f b6 d0             	movzbl %al,%edx
f011f1bd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f1c0:	01 d0                	add    %edx,%eax
f011f1c2:	48                   	dec    %eax
f011f1c3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011f1c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f1c9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1ce:	f7 75 ac             	divl   -0x54(%ebp)
f011f1d1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f1d4:	29 d0                	sub    %edx,%eax
f011f1d6:	01 c3                	add    %eax,%ebx
f011f1d8:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011f1df:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f1e4:	0f b6 c0             	movzbl %al,%eax
f011f1e7:	c1 e0 04             	shl    $0x4,%eax
f011f1ea:	89 c2                	mov    %eax,%edx
f011f1ec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f1ef:	01 d0                	add    %edx,%eax
f011f1f1:	48                   	dec    %eax
f011f1f2:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011f1f5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f1f8:	ba 00 00 00 00       	mov    $0x0,%edx
f011f1fd:	f7 75 a4             	divl   -0x5c(%ebp)
f011f200:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f203:	29 d0                	sub    %edx,%eax
f011f205:	01 d8                	add    %ebx,%eax
f011f207:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011f20c:	39 c1                	cmp    %eax,%ecx
f011f20e:	0f 85 9c 03 00 00    	jne    f011f5b0 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f214:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f21a:	89 c1                	mov    %eax,%ecx
f011f21c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011f223:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f226:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f22b:	89 45 98             	mov    %eax,-0x68(%ebp)
f011f22e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f231:	ba 00 00 00 00       	mov    $0x0,%edx
f011f236:	f7 75 9c             	divl   -0x64(%ebp)
f011f239:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f23c:	29 d0                	sub    %edx,%eax
f011f23e:	89 c3                	mov    %eax,%ebx
f011f240:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011f247:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f24c:	0f b6 d0             	movzbl %al,%edx
f011f24f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f252:	01 d0                	add    %edx,%eax
f011f254:	48                   	dec    %eax
f011f255:	89 45 90             	mov    %eax,-0x70(%ebp)
f011f258:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f25b:	ba 00 00 00 00       	mov    $0x0,%edx
f011f260:	f7 75 94             	divl   -0x6c(%ebp)
f011f263:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f266:	29 d0                	sub    %edx,%eax
f011f268:	01 c3                	add    %eax,%ebx
f011f26a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011f271:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f276:	0f b6 c0             	movzbl %al,%eax
f011f279:	c1 e0 04             	shl    $0x4,%eax
f011f27c:	89 c2                	mov    %eax,%edx
f011f27e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f281:	01 d0                	add    %edx,%eax
f011f283:	48                   	dec    %eax
f011f284:	89 45 88             	mov    %eax,-0x78(%ebp)
f011f287:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f28a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f28f:	f7 75 8c             	divl   -0x74(%ebp)
f011f292:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f295:	29 d0                	sub    %edx,%eax
f011f297:	01 d8                	add    %ebx,%eax
f011f299:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011f29e:	39 c1                	cmp    %eax,%ecx
f011f2a0:	0f 85 0a 03 00 00    	jne    f011f5b0 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f2a6:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011f2ac:	89 c1                	mov    %eax,%ecx
f011f2ae:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011f2b5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f2b8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f2bd:	89 45 80             	mov    %eax,-0x80(%ebp)
f011f2c0:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f2c3:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2c8:	f7 75 84             	divl   -0x7c(%ebp)
f011f2cb:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f2ce:	29 d0                	sub    %edx,%eax
f011f2d0:	89 c3                	mov    %eax,%ebx
f011f2d2:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f2d9:	10 00 00 
f011f2dc:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f2e1:	0f b6 d0             	movzbl %al,%edx
f011f2e4:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f2ea:	01 d0                	add    %edx,%eax
f011f2ec:	48                   	dec    %eax
f011f2ed:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f2f3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f2f9:	ba 00 00 00 00       	mov    $0x0,%edx
f011f2fe:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f304:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f30a:	29 d0                	sub    %edx,%eax
f011f30c:	01 c3                	add    %eax,%ebx
f011f30e:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f315:	10 00 00 
f011f318:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f31d:	0f b6 c0             	movzbl %al,%eax
f011f320:	c1 e0 04             	shl    $0x4,%eax
f011f323:	89 c2                	mov    %eax,%edx
f011f325:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f32b:	01 d0                	add    %edx,%eax
f011f32d:	48                   	dec    %eax
f011f32e:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f334:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f33a:	ba 00 00 00 00       	mov    $0x0,%edx
f011f33f:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f345:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f34b:	29 d0                	sub    %edx,%eax
f011f34d:	01 d8                	add    %ebx,%eax
f011f34f:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011f354:	39 c1                	cmp    %eax,%ecx
f011f356:	0f 85 54 02 00 00    	jne    f011f5b0 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f35c:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011f362:	89 c1                	mov    %eax,%ecx
f011f364:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f36b:	10 00 00 
f011f36e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f374:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f379:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f37f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f385:	ba 00 00 00 00       	mov    $0x0,%edx
f011f38a:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f390:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f396:	29 d0                	sub    %edx,%eax
f011f398:	89 c3                	mov    %eax,%ebx
f011f39a:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f3a1:	10 00 00 
f011f3a4:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f3a9:	0f b6 d0             	movzbl %al,%edx
f011f3ac:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f3b2:	01 d0                	add    %edx,%eax
f011f3b4:	48                   	dec    %eax
f011f3b5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f3bb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f3c1:	ba 00 00 00 00       	mov    $0x0,%edx
f011f3c6:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f3cc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f3d2:	29 d0                	sub    %edx,%eax
f011f3d4:	01 c3                	add    %eax,%ebx
f011f3d6:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f3dd:	10 00 00 
f011f3e0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f3e5:	0f b6 c0             	movzbl %al,%eax
f011f3e8:	c1 e0 04             	shl    $0x4,%eax
f011f3eb:	89 c2                	mov    %eax,%edx
f011f3ed:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f3f3:	01 d0                	add    %edx,%eax
f011f3f5:	48                   	dec    %eax
f011f3f6:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f3fc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f402:	ba 00 00 00 00       	mov    $0x0,%edx
f011f407:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f40d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f413:	29 d0                	sub    %edx,%eax
f011f415:	01 d8                	add    %ebx,%eax
f011f417:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011f41c:	39 c1                	cmp    %eax,%ecx
f011f41e:	0f 85 8c 01 00 00    	jne    f011f5b0 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f424:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011f42a:	89 c1                	mov    %eax,%ecx
f011f42c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f433:	10 00 00 
f011f436:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f43c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f441:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f447:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f44d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f452:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f458:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f45e:	29 d0                	sub    %edx,%eax
f011f460:	89 c3                	mov    %eax,%ebx
f011f462:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f469:	10 00 00 
f011f46c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f471:	0f b6 d0             	movzbl %al,%edx
f011f474:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f47a:	01 d0                	add    %edx,%eax
f011f47c:	48                   	dec    %eax
f011f47d:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f483:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f489:	ba 00 00 00 00       	mov    $0x0,%edx
f011f48e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f494:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f49a:	29 d0                	sub    %edx,%eax
f011f49c:	01 c3                	add    %eax,%ebx
f011f49e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f4a5:	10 00 00 
f011f4a8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f4ad:	0f b6 c0             	movzbl %al,%eax
f011f4b0:	c1 e0 04             	shl    $0x4,%eax
f011f4b3:	89 c2                	mov    %eax,%edx
f011f4b5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f4bb:	01 d0                	add    %edx,%eax
f011f4bd:	48                   	dec    %eax
f011f4be:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011f4c4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f4ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4cf:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011f4d5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f4db:	29 d0                	sub    %edx,%eax
f011f4dd:	01 d8                	add    %ebx,%eax
f011f4df:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011f4e4:	39 c1                	cmp    %eax,%ecx
f011f4e6:	0f 85 c4 00 00 00    	jne    f011f5b0 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011f4ec:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011f4f2:	89 c1                	mov    %eax,%ecx
f011f4f4:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011f4fb:	10 00 00 
f011f4fe:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f504:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f509:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011f50f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f515:	ba 00 00 00 00       	mov    $0x0,%edx
f011f51a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011f520:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f526:	29 d0                	sub    %edx,%eax
f011f528:	89 c3                	mov    %eax,%ebx
f011f52a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011f531:	10 00 00 
f011f534:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f539:	0f b6 d0             	movzbl %al,%edx
f011f53c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f542:	01 d0                	add    %edx,%eax
f011f544:	48                   	dec    %eax
f011f545:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011f54b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f551:	ba 00 00 00 00       	mov    $0x0,%edx
f011f556:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011f55c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f562:	29 d0                	sub    %edx,%eax
f011f564:	01 c3                	add    %eax,%ebx
f011f566:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011f56d:	10 00 00 
f011f570:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f575:	0f b6 c0             	movzbl %al,%eax
f011f578:	c1 e0 04             	shl    $0x4,%eax
f011f57b:	89 c2                	mov    %eax,%edx
f011f57d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f583:	01 d0                	add    %edx,%eax
f011f585:	48                   	dec    %eax
f011f586:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011f58c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f592:	ba 00 00 00 00       	mov    $0x0,%edx
f011f597:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011f59d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011f5a3:	29 d0                	sub    %edx,%eax
f011f5a5:	01 d8                	add    %ebx,%eax
f011f5a7:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011f5ac:	39 c1                	cmp    %eax,%ecx
f011f5ae:	74 17                	je     f011f5c7 <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011f5b0:	83 ec 04             	sub    $0x4,%esp
f011f5b3:	68 10 bc 13 f0       	push   $0xf013bc10
f011f5b8:	68 31 04 00 00       	push   $0x431
f011f5bd:	68 3a b5 13 f0       	push   $0xf013b53a
f011f5c2:	e8 3e 0c fe ff       	call   f0100205 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f5c7:	e8 e3 47 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011f5cc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f5cf:	74 17                	je     f011f5e8 <test_kmalloc_worstfit+0x634>
f011f5d1:	83 ec 04             	sub    $0x4,%esp
f011f5d4:	68 54 b5 13 f0       	push   $0xf013b554
f011f5d9:	68 33 04 00 00       	push   $0x433
f011f5de:	68 3a b5 13 f0       	push   $0xf013b53a
f011f5e3:	e8 1d 0c fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011f5e8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f5eb:	e8 c1 db fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011f5f0:	29 c3                	sub    %eax,%ebx
f011f5f2:	89 d8                	mov    %ebx,%eax
f011f5f4:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011f5f9:	74 17                	je     f011f612 <test_kmalloc_worstfit+0x65e>
f011f5fb:	83 ec 04             	sub    $0x4,%esp
f011f5fe:	68 f7 b7 13 f0       	push   $0xf013b7f7
f011f603:	68 34 04 00 00       	push   $0x434
f011f608:	68 3a b5 13 f0       	push   $0xf013b53a
f011f60d:	e8 f3 0b fe ff       	call   f0100205 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011f612:	e8 9a db fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011f617:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011f61a:	e8 90 47 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011f61f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011f622:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011f628:	83 ec 0c             	sub    $0xc,%esp
f011f62b:	50                   	push   %eax
f011f62c:	e8 3b 86 fe ff       	call   f0107c6c <kfree>
f011f631:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011f634:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011f63a:	83 ec 0c             	sub    $0xc,%esp
f011f63d:	50                   	push   %eax
f011f63e:	e8 29 86 fe ff       	call   f0107c6c <kfree>
f011f643:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011f646:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011f64c:	83 ec 0c             	sub    $0xc,%esp
f011f64f:	50                   	push   %eax
f011f650:	e8 17 86 fe ff       	call   f0107c6c <kfree>
f011f655:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011f658:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011f65e:	83 ec 0c             	sub    $0xc,%esp
f011f661:	50                   	push   %eax
f011f662:	e8 05 86 fe ff       	call   f0107c6c <kfree>
f011f667:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011f66a:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011f670:	83 ec 0c             	sub    $0xc,%esp
f011f673:	50                   	push   %eax
f011f674:	e8 f3 85 fe ff       	call   f0107c6c <kfree>
f011f679:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011f67c:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011f682:	83 ec 0c             	sub    $0xc,%esp
f011f685:	50                   	push   %eax
f011f686:	e8 e1 85 fe ff       	call   f0107c6c <kfree>
f011f68b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011f68e:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011f694:	83 ec 0c             	sub    $0xc,%esp
f011f697:	50                   	push   %eax
f011f698:	e8 cf 85 fe ff       	call   f0107c6c <kfree>
f011f69d:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011f6a0:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011f6a6:	83 ec 0c             	sub    $0xc,%esp
f011f6a9:	50                   	push   %eax
f011f6aa:	e8 bd 85 fe ff       	call   f0107c6c <kfree>
f011f6af:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011f6b2:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011f6b8:	83 ec 0c             	sub    $0xc,%esp
f011f6bb:	50                   	push   %eax
f011f6bc:	e8 ab 85 fe ff       	call   f0107c6c <kfree>
f011f6c1:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011f6c4:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011f6ca:	83 ec 0c             	sub    $0xc,%esp
f011f6cd:	50                   	push   %eax
f011f6ce:	e8 99 85 fe ff       	call   f0107c6c <kfree>
f011f6d3:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011f6d6:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011f6dc:	83 ec 0c             	sub    $0xc,%esp
f011f6df:	50                   	push   %eax
f011f6e0:	e8 87 85 fe ff       	call   f0107c6c <kfree>
f011f6e5:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011f6e8:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011f6ee:	83 ec 0c             	sub    $0xc,%esp
f011f6f1:	50                   	push   %eax
f011f6f2:	e8 75 85 fe ff       	call   f0107c6c <kfree>
f011f6f7:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011f6fa:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011f700:	83 ec 0c             	sub    $0xc,%esp
f011f703:	50                   	push   %eax
f011f704:	e8 63 85 fe ff       	call   f0107c6c <kfree>
f011f709:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011f70c:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011f712:	83 ec 0c             	sub    $0xc,%esp
f011f715:	50                   	push   %eax
f011f716:	e8 51 85 fe ff       	call   f0107c6c <kfree>
f011f71b:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011f71e:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011f724:	83 ec 0c             	sub    $0xc,%esp
f011f727:	50                   	push   %eax
f011f728:	e8 3f 85 fe ff       	call   f0107c6c <kfree>
f011f72d:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f730:	e8 7a 46 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011f735:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f738:	74 17                	je     f011f751 <test_kmalloc_worstfit+0x79d>
f011f73a:	83 ec 04             	sub    $0x4,%esp
f011f73d:	68 54 b5 13 f0       	push   $0xf013b554
f011f742:	68 4a 04 00 00       	push   $0x44a
f011f747:	68 3a b5 13 f0       	push   $0xf013b53a
f011f74c:	e8 b4 0a fe ff       	call   f0100205 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011f751:	e8 5b da fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011f756:	89 c2                	mov    %eax,%edx
f011f758:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f75b:	29 c2                	sub    %eax,%edx
f011f75d:	89 d0                	mov    %edx,%eax
f011f75f:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011f764:	74 17                	je     f011f77d <test_kmalloc_worstfit+0x7c9>
f011f766:	83 ec 04             	sub    $0x4,%esp
f011f769:	68 08 b8 13 f0       	push   $0xf013b808
f011f76e:	68 4b 04 00 00       	push   $0x44b
f011f773:	68 3a b5 13 f0       	push   $0xf013b53a
f011f778:	e8 88 0a fe ff       	call   f0100205 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011f77d:	e8 2f da fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011f782:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f785:	e8 25 46 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011f78a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011f78d:	83 ec 0c             	sub    $0xc,%esp
f011f790:	68 00 00 10 00       	push   $0x100000
f011f795:	e8 ca 83 fe ff       	call   f0107b64 <kmalloc>
f011f79a:	83 c4 10             	add    $0x10,%esp
f011f79d:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011f7a3:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011f7aa:	10 00 00 
f011f7ad:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f7b3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f7b8:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011f7be:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f7c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011f7c9:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011f7cf:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f7d5:	29 d0                	sub    %edx,%eax
f011f7d7:	89 c1                	mov    %eax,%ecx
f011f7d9:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011f7e0:	10 00 00 
f011f7e3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f7e8:	0f b6 d0             	movzbl %al,%edx
f011f7eb:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f7f1:	01 d0                	add    %edx,%eax
f011f7f3:	48                   	dec    %eax
f011f7f4:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011f7fa:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f800:	ba 00 00 00 00       	mov    $0x0,%edx
f011f805:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011f80b:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f811:	29 d0                	sub    %edx,%eax
f011f813:	01 c1                	add    %eax,%ecx
f011f815:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011f81c:	10 00 00 
f011f81f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f824:	0f b6 c0             	movzbl %al,%eax
f011f827:	c1 e0 04             	shl    $0x4,%eax
f011f82a:	89 c2                	mov    %eax,%edx
f011f82c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f832:	01 d0                	add    %edx,%eax
f011f834:	48                   	dec    %eax
f011f835:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011f83b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f841:	ba 00 00 00 00       	mov    $0x0,%edx
f011f846:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011f84c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f852:	29 d0                	sub    %edx,%eax
f011f854:	01 c8                	add    %ecx,%eax
f011f856:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011f85c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f862:	39 c2                	cmp    %eax,%edx
f011f864:	74 17                	je     f011f87d <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011f866:	83 ec 04             	sub    $0x4,%esp
f011f869:	68 54 bc 13 f0       	push   $0xf013bc54
f011f86e:	68 52 04 00 00       	push   $0x452
f011f873:	68 3a b5 13 f0       	push   $0xf013b53a
f011f878:	e8 88 09 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f87d:	e8 2d 45 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011f882:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f885:	74 17                	je     f011f89e <test_kmalloc_worstfit+0x8ea>
f011f887:	83 ec 04             	sub    $0x4,%esp
f011f88a:	68 54 b5 13 f0       	push   $0xf013b554
f011f88f:	68 53 04 00 00       	push   $0x453
f011f894:	68 3a b5 13 f0       	push   $0xf013b53a
f011f899:	e8 67 09 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f89e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f8a1:	e8 0b d9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011f8a6:	29 c3                	sub    %eax,%ebx
f011f8a8:	89 d8                	mov    %ebx,%eax
f011f8aa:	3d 00 01 00 00       	cmp    $0x100,%eax
f011f8af:	74 17                	je     f011f8c8 <test_kmalloc_worstfit+0x914>
f011f8b1:	83 ec 04             	sub    $0x4,%esp
f011f8b4:	68 72 ba 13 f0       	push   $0xf013ba72
f011f8b9:	68 54 04 00 00       	push   $0x454
f011f8be:	68 3a b5 13 f0       	push   $0xf013b53a
f011f8c3:	e8 3d 09 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f8c8:	ff 45 e8             	incl   -0x18(%ebp)
f011f8cb:	83 ec 08             	sub    $0x8,%esp
f011f8ce:	ff 75 e8             	pushl  -0x18(%ebp)
f011f8d1:	68 74 bc 13 f0       	push   $0xf013bc74
f011f8d6:	e8 33 14 fe ff       	call   f0100d0e <cprintf>
f011f8db:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f8de:	e8 ce d8 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011f8e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f8e6:	e8 c4 44 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011f8eb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011f8ee:	83 ec 0c             	sub    $0xc,%esp
f011f8f1:	68 00 00 40 00       	push   $0x400000
f011f8f6:	e8 69 82 fe ff       	call   f0107b64 <kmalloc>
f011f8fb:	83 c4 10             	add    $0x10,%esp
f011f8fe:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011f904:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011f90b:	10 00 00 
f011f90e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f914:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f919:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011f91f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f925:	ba 00 00 00 00       	mov    $0x0,%edx
f011f92a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011f930:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f936:	29 d0                	sub    %edx,%eax
f011f938:	89 c1                	mov    %eax,%ecx
f011f93a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011f941:	10 00 00 
f011f944:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f949:	0f b6 d0             	movzbl %al,%edx
f011f94c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011f952:	01 d0                	add    %edx,%eax
f011f954:	48                   	dec    %eax
f011f955:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011f95b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f961:	ba 00 00 00 00       	mov    $0x0,%edx
f011f966:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011f96c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f972:	29 d0                	sub    %edx,%eax
f011f974:	01 c1                	add    %eax,%ecx
f011f976:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011f97d:	10 00 00 
f011f980:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011f985:	0f b6 c0             	movzbl %al,%eax
f011f988:	c1 e0 04             	shl    $0x4,%eax
f011f98b:	89 c2                	mov    %eax,%edx
f011f98d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f993:	01 d0                	add    %edx,%eax
f011f995:	48                   	dec    %eax
f011f996:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011f99c:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f9a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9a7:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011f9ad:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f9b3:	29 d0                	sub    %edx,%eax
f011f9b5:	01 c8                	add    %ecx,%eax
f011f9b7:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011f9bd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f9c3:	39 c2                	cmp    %eax,%edx
f011f9c5:	74 17                	je     f011f9de <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011f9c7:	83 ec 04             	sub    $0x4,%esp
f011f9ca:	68 54 bc 13 f0       	push   $0xf013bc54
f011f9cf:	68 5b 04 00 00       	push   $0x45b
f011f9d4:	68 3a b5 13 f0       	push   $0xf013b53a
f011f9d9:	e8 27 08 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f9de:	e8 cc 43 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011f9e3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f9e6:	74 17                	je     f011f9ff <test_kmalloc_worstfit+0xa4b>
f011f9e8:	83 ec 04             	sub    $0x4,%esp
f011f9eb:	68 54 b5 13 f0       	push   $0xf013b554
f011f9f0:	68 5c 04 00 00       	push   $0x45c
f011f9f5:	68 3a b5 13 f0       	push   $0xf013b53a
f011f9fa:	e8 06 08 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011f9ff:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fa02:	e8 aa d7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011fa07:	29 c3                	sub    %eax,%ebx
f011fa09:	89 d8                	mov    %ebx,%eax
f011fa0b:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fa10:	74 17                	je     f011fa29 <test_kmalloc_worstfit+0xa75>
f011fa12:	83 ec 04             	sub    $0x4,%esp
f011fa15:	68 72 ba 13 f0       	push   $0xf013ba72
f011fa1a:	68 5d 04 00 00       	push   $0x45d
f011fa1f:	68 3a b5 13 f0       	push   $0xf013b53a
f011fa24:	e8 dc 07 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fa29:	ff 45 e8             	incl   -0x18(%ebp)
f011fa2c:	83 ec 08             	sub    $0x8,%esp
f011fa2f:	ff 75 e8             	pushl  -0x18(%ebp)
f011fa32:	68 74 bc 13 f0       	push   $0xf013bc74
f011fa37:	e8 d2 12 fe ff       	call   f0100d0e <cprintf>
f011fa3c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fa3f:	e8 6d d7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011fa44:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fa47:	e8 63 43 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011fa4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011fa4f:	83 ec 0c             	sub    $0xc,%esp
f011fa52:	68 00 00 60 00       	push   $0x600000
f011fa57:	e8 08 81 fe ff       	call   f0107b64 <kmalloc>
f011fa5c:	83 c4 10             	add    $0x10,%esp
f011fa5f:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011fa65:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011fa6c:	10 00 00 
f011fa6f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fa75:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fa7a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011fa80:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fa86:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa8b:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011fa91:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011fa97:	29 d0                	sub    %edx,%eax
f011fa99:	89 c1                	mov    %eax,%ecx
f011fa9b:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011faa2:	10 00 00 
f011faa5:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011faaa:	0f b6 d0             	movzbl %al,%edx
f011faad:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011fab3:	01 d0                	add    %edx,%eax
f011fab5:	48                   	dec    %eax
f011fab6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011fabc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011fac2:	ba 00 00 00 00       	mov    $0x0,%edx
f011fac7:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011facd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011fad3:	29 d0                	sub    %edx,%eax
f011fad5:	01 c1                	add    %eax,%ecx
f011fad7:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011fade:	10 00 00 
f011fae1:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011fae6:	0f b6 c0             	movzbl %al,%eax
f011fae9:	c1 e0 04             	shl    $0x4,%eax
f011faec:	89 c2                	mov    %eax,%edx
f011faee:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011faf4:	01 d0                	add    %edx,%eax
f011faf6:	48                   	dec    %eax
f011faf7:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011fafd:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011fb03:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb08:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011fb0e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011fb14:	29 d0                	sub    %edx,%eax
f011fb16:	01 c8                	add    %ecx,%eax
f011fb18:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011fb1e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fb24:	39 c2                	cmp    %eax,%edx
f011fb26:	74 17                	je     f011fb3f <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011fb28:	83 ec 04             	sub    $0x4,%esp
f011fb2b:	68 54 bc 13 f0       	push   $0xf013bc54
f011fb30:	68 64 04 00 00       	push   $0x464
f011fb35:	68 3a b5 13 f0       	push   $0xf013b53a
f011fb3a:	e8 c6 06 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb3f:	e8 6b 42 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011fb44:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fb47:	74 17                	je     f011fb60 <test_kmalloc_worstfit+0xbac>
f011fb49:	83 ec 04             	sub    $0x4,%esp
f011fb4c:	68 54 b5 13 f0       	push   $0xf013b554
f011fb51:	68 65 04 00 00       	push   $0x465
f011fb56:	68 3a b5 13 f0       	push   $0xf013b53a
f011fb5b:	e8 a5 06 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fb60:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fb63:	e8 49 d6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011fb68:	29 c3                	sub    %eax,%ebx
f011fb6a:	89 d8                	mov    %ebx,%eax
f011fb6c:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fb71:	74 17                	je     f011fb8a <test_kmalloc_worstfit+0xbd6>
f011fb73:	83 ec 04             	sub    $0x4,%esp
f011fb76:	68 72 ba 13 f0       	push   $0xf013ba72
f011fb7b:	68 66 04 00 00       	push   $0x466
f011fb80:	68 3a b5 13 f0       	push   $0xf013b53a
f011fb85:	e8 7b 06 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fb8a:	ff 45 e8             	incl   -0x18(%ebp)
f011fb8d:	83 ec 08             	sub    $0x8,%esp
f011fb90:	ff 75 e8             	pushl  -0x18(%ebp)
f011fb93:	68 74 bc 13 f0       	push   $0xf013bc74
f011fb98:	e8 71 11 fe ff       	call   f0100d0e <cprintf>
f011fb9d:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fba0:	e8 0c d6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011fba5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fba8:	e8 02 42 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011fbad:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011fbb0:	83 ec 0c             	sub    $0xc,%esp
f011fbb3:	68 00 00 50 00       	push   $0x500000
f011fbb8:	e8 a7 7f fe ff       	call   f0107b64 <kmalloc>
f011fbbd:	83 c4 10             	add    $0x10,%esp
f011fbc0:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011fbc6:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011fbcd:	10 00 00 
f011fbd0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011fbd6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fbdb:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011fbe1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fbe7:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbec:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011fbf2:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011fbf8:	29 d0                	sub    %edx,%eax
f011fbfa:	89 c1                	mov    %eax,%ecx
f011fbfc:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011fc03:	10 00 00 
f011fc06:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011fc0b:	0f b6 d0             	movzbl %al,%edx
f011fc0e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011fc14:	01 d0                	add    %edx,%eax
f011fc16:	48                   	dec    %eax
f011fc17:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011fc1d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fc23:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc28:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011fc2e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011fc34:	29 d0                	sub    %edx,%eax
f011fc36:	01 c1                	add    %eax,%ecx
f011fc38:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011fc3f:	10 00 00 
f011fc42:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011fc47:	0f b6 c0             	movzbl %al,%eax
f011fc4a:	c1 e0 04             	shl    $0x4,%eax
f011fc4d:	89 c2                	mov    %eax,%edx
f011fc4f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011fc55:	01 d0                	add    %edx,%eax
f011fc57:	48                   	dec    %eax
f011fc58:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011fc5e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fc64:	ba 00 00 00 00       	mov    $0x0,%edx
f011fc69:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011fc6f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011fc75:	29 d0                	sub    %edx,%eax
f011fc77:	01 c8                	add    %ecx,%eax
f011fc79:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011fc7f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fc85:	39 c2                	cmp    %eax,%edx
f011fc87:	74 17                	je     f011fca0 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011fc89:	83 ec 04             	sub    $0x4,%esp
f011fc8c:	68 54 bc 13 f0       	push   $0xf013bc54
f011fc91:	68 6d 04 00 00       	push   $0x46d
f011fc96:	68 3a b5 13 f0       	push   $0xf013b53a
f011fc9b:	e8 65 05 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fca0:	e8 0a 41 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011fca5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fca8:	74 17                	je     f011fcc1 <test_kmalloc_worstfit+0xd0d>
f011fcaa:	83 ec 04             	sub    $0x4,%esp
f011fcad:	68 54 b5 13 f0       	push   $0xf013b554
f011fcb2:	68 6e 04 00 00       	push   $0x46e
f011fcb7:	68 3a b5 13 f0       	push   $0xf013b53a
f011fcbc:	e8 44 05 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fcc1:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fcc4:	e8 e8 d4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011fcc9:	29 c3                	sub    %eax,%ebx
f011fccb:	89 d8                	mov    %ebx,%eax
f011fccd:	3d 00 05 00 00       	cmp    $0x500,%eax
f011fcd2:	74 17                	je     f011fceb <test_kmalloc_worstfit+0xd37>
f011fcd4:	83 ec 04             	sub    $0x4,%esp
f011fcd7:	68 72 ba 13 f0       	push   $0xf013ba72
f011fcdc:	68 6f 04 00 00       	push   $0x46f
f011fce1:	68 3a b5 13 f0       	push   $0xf013b53a
f011fce6:	e8 1a 05 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fceb:	ff 45 e8             	incl   -0x18(%ebp)
f011fcee:	83 ec 08             	sub    $0x8,%esp
f011fcf1:	ff 75 e8             	pushl  -0x18(%ebp)
f011fcf4:	68 74 bc 13 f0       	push   $0xf013bc74
f011fcf9:	e8 10 10 fe ff       	call   f0100d0e <cprintf>
f011fcfe:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fd01:	e8 ab d4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011fd06:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fd09:	e8 a1 40 fe ff       	call   f0103daf <pf_calculate_free_frames>
f011fd0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011fd11:	83 ec 0c             	sub    $0xc,%esp
f011fd14:	68 00 00 40 00       	push   $0x400000
f011fd19:	e8 46 7e fe ff       	call   f0107b64 <kmalloc>
f011fd1e:	83 c4 10             	add    $0x10,%esp
f011fd21:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011fd27:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011fd2e:	10 00 00 
f011fd31:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011fd37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fd3c:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011fd42:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fd48:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd4d:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011fd53:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011fd59:	29 d0                	sub    %edx,%eax
f011fd5b:	89 c1                	mov    %eax,%ecx
f011fd5d:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011fd64:	10 00 00 
f011fd67:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011fd6c:	0f b6 d0             	movzbl %al,%edx
f011fd6f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011fd75:	01 d0                	add    %edx,%eax
f011fd77:	48                   	dec    %eax
f011fd78:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011fd7e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fd84:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd89:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011fd8f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011fd95:	29 d0                	sub    %edx,%eax
f011fd97:	01 c1                	add    %eax,%ecx
f011fd99:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011fda0:	10 00 00 
f011fda3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011fda8:	0f b6 c0             	movzbl %al,%eax
f011fdab:	c1 e0 04             	shl    $0x4,%eax
f011fdae:	89 c2                	mov    %eax,%edx
f011fdb0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011fdb6:	01 d0                	add    %edx,%eax
f011fdb8:	48                   	dec    %eax
f011fdb9:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011fdbf:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fdc5:	ba 00 00 00 00       	mov    $0x0,%edx
f011fdca:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011fdd0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011fdd6:	29 d0                	sub    %edx,%eax
f011fdd8:	01 c8                	add    %ecx,%eax
f011fdda:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011fde0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fde6:	39 c2                	cmp    %eax,%edx
f011fde8:	74 17                	je     f011fe01 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011fdea:	83 ec 04             	sub    $0x4,%esp
f011fded:	68 54 bc 13 f0       	push   $0xf013bc54
f011fdf2:	68 76 04 00 00       	push   $0x476
f011fdf7:	68 3a b5 13 f0       	push   $0xf013b53a
f011fdfc:	e8 04 04 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe01:	e8 a9 3f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011fe06:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fe09:	74 17                	je     f011fe22 <test_kmalloc_worstfit+0xe6e>
f011fe0b:	83 ec 04             	sub    $0x4,%esp
f011fe0e:	68 54 b5 13 f0       	push   $0xf013b554
f011fe13:	68 77 04 00 00       	push   $0x477
f011fe18:	68 3a b5 13 f0       	push   $0xf013b53a
f011fe1d:	e8 e3 03 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011fe22:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011fe25:	e8 87 d3 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011fe2a:	29 c3                	sub    %eax,%ebx
f011fe2c:	89 d8                	mov    %ebx,%eax
f011fe2e:	3d 00 04 00 00       	cmp    $0x400,%eax
f011fe33:	74 17                	je     f011fe4c <test_kmalloc_worstfit+0xe98>
f011fe35:	83 ec 04             	sub    $0x4,%esp
f011fe38:	68 72 ba 13 f0       	push   $0xf013ba72
f011fe3d:	68 78 04 00 00       	push   $0x478
f011fe42:	68 3a b5 13 f0       	push   $0xf013b53a
f011fe47:	e8 b9 03 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011fe4c:	ff 45 e8             	incl   -0x18(%ebp)
f011fe4f:	83 ec 08             	sub    $0x8,%esp
f011fe52:	ff 75 e8             	pushl  -0x18(%ebp)
f011fe55:	68 74 bc 13 f0       	push   $0xf013bc74
f011fe5a:	e8 af 0e fe ff       	call   f0100d0e <cprintf>
f011fe5f:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011fe62:	e8 4a d3 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011fe67:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011fe6a:	e8 40 3f fe ff       	call   f0103daf <pf_calculate_free_frames>
f011fe6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011fe72:	83 ec 0c             	sub    $0xc,%esp
f011fe75:	68 00 00 20 00       	push   $0x200000
f011fe7a:	e8 e5 7c fe ff       	call   f0107b64 <kmalloc>
f011fe7f:	83 c4 10             	add    $0x10,%esp
f011fe82:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011fe88:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011fe8f:	10 00 00 
f011fe92:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011fe98:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fe9d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011fea3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011fea9:	ba 00 00 00 00       	mov    $0x0,%edx
f011feae:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011feb4:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011feba:	29 d0                	sub    %edx,%eax
f011febc:	89 c1                	mov    %eax,%ecx
f011febe:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011fec5:	10 00 00 
f011fec8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011fecd:	0f b6 d0             	movzbl %al,%edx
f011fed0:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011fed6:	01 d0                	add    %edx,%eax
f011fed8:	48                   	dec    %eax
f011fed9:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011fedf:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fee5:	ba 00 00 00 00       	mov    $0x0,%edx
f011feea:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011fef0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011fef6:	29 d0                	sub    %edx,%eax
f011fef8:	01 c1                	add    %eax,%ecx
f011fefa:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011ff01:	10 00 00 
f011ff04:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f011ff09:	0f b6 c0             	movzbl %al,%eax
f011ff0c:	c1 e0 04             	shl    $0x4,%eax
f011ff0f:	89 c2                	mov    %eax,%edx
f011ff11:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ff17:	01 d0                	add    %edx,%eax
f011ff19:	48                   	dec    %eax
f011ff1a:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011ff20:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ff26:	ba 00 00 00 00       	mov    $0x0,%edx
f011ff2b:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011ff31:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011ff37:	29 d0                	sub    %edx,%eax
f011ff39:	01 c8                	add    %ecx,%eax
f011ff3b:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011ff41:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ff47:	39 c2                	cmp    %eax,%edx
f011ff49:	74 17                	je     f011ff62 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011ff4b:	83 ec 04             	sub    $0x4,%esp
f011ff4e:	68 54 bc 13 f0       	push   $0xf013bc54
f011ff53:	68 7f 04 00 00       	push   $0x47f
f011ff58:	68 3a b5 13 f0       	push   $0xf013b53a
f011ff5d:	e8 a3 02 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff62:	e8 48 3e fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ff67:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ff6a:	74 17                	je     f011ff83 <test_kmalloc_worstfit+0xfcf>
f011ff6c:	83 ec 04             	sub    $0x4,%esp
f011ff6f:	68 54 b5 13 f0       	push   $0xf013b554
f011ff74:	68 80 04 00 00       	push   $0x480
f011ff79:	68 3a b5 13 f0       	push   $0xf013b53a
f011ff7e:	e8 82 02 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ff83:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ff86:	e8 26 d2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ff8b:	29 c3                	sub    %eax,%ebx
f011ff8d:	89 d8                	mov    %ebx,%eax
f011ff8f:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ff94:	74 17                	je     f011ffad <test_kmalloc_worstfit+0xff9>
f011ff96:	83 ec 04             	sub    $0x4,%esp
f011ff99:	68 72 ba 13 f0       	push   $0xf013ba72
f011ff9e:	68 81 04 00 00       	push   $0x481
f011ffa3:	68 3a b5 13 f0       	push   $0xf013b53a
f011ffa8:	e8 58 02 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ffad:	ff 45 e8             	incl   -0x18(%ebp)
f011ffb0:	83 ec 08             	sub    $0x8,%esp
f011ffb3:	ff 75 e8             	pushl  -0x18(%ebp)
f011ffb6:	68 74 bc 13 f0       	push   $0xf013bc74
f011ffbb:	e8 4e 0d fe ff       	call   f0100d0e <cprintf>
f011ffc0:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ffc3:	e8 e9 d1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f011ffc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ffcb:	e8 df 3d fe ff       	call   f0103daf <pf_calculate_free_frames>
f011ffd0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011ffd3:	83 ec 0c             	sub    $0xc,%esp
f011ffd6:	68 00 00 18 00       	push   $0x180000
f011ffdb:	e8 84 7b fe ff       	call   f0107b64 <kmalloc>
f011ffe0:	83 c4 10             	add    $0x10,%esp
f011ffe3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011ffe9:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011fff0:	10 00 00 
f011fff3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011fff9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fffe:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120004:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012000a:	ba 00 00 00 00       	mov    $0x0,%edx
f012000f:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120015:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012001b:	29 d0                	sub    %edx,%eax
f012001d:	89 c1                	mov    %eax,%ecx
f012001f:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120026:	10 00 00 
f0120029:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012002e:	0f b6 d0             	movzbl %al,%edx
f0120031:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120037:	01 d0                	add    %edx,%eax
f0120039:	48                   	dec    %eax
f012003a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120040:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120046:	ba 00 00 00 00       	mov    $0x0,%edx
f012004b:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120051:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120057:	29 d0                	sub    %edx,%eax
f0120059:	01 c1                	add    %eax,%ecx
f012005b:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120062:	10 00 00 
f0120065:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012006a:	0f b6 c0             	movzbl %al,%eax
f012006d:	c1 e0 04             	shl    $0x4,%eax
f0120070:	89 c2                	mov    %eax,%edx
f0120072:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0120078:	01 d0                	add    %edx,%eax
f012007a:	48                   	dec    %eax
f012007b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120081:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120087:	ba 00 00 00 00       	mov    $0x0,%edx
f012008c:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120092:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0120098:	29 d0                	sub    %edx,%eax
f012009a:	01 c8                	add    %ecx,%eax
f012009c:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f01200a2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01200a8:	39 c2                	cmp    %eax,%edx
f01200aa:	74 17                	je     f01200c3 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f01200ac:	83 ec 04             	sub    $0x4,%esp
f01200af:	68 54 bc 13 f0       	push   $0xf013bc54
f01200b4:	68 88 04 00 00       	push   $0x488
f01200b9:	68 3a b5 13 f0       	push   $0xf013b53a
f01200be:	e8 42 01 fe ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01200c3:	e8 e7 3c fe ff       	call   f0103daf <pf_calculate_free_frames>
f01200c8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01200cb:	74 17                	je     f01200e4 <test_kmalloc_worstfit+0x1130>
f01200cd:	83 ec 04             	sub    $0x4,%esp
f01200d0:	68 54 b5 13 f0       	push   $0xf013b554
f01200d5:	68 89 04 00 00       	push   $0x489
f01200da:	68 3a b5 13 f0       	push   $0xf013b53a
f01200df:	e8 21 01 fe ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01200e4:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01200e7:	e8 c5 d0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01200ec:	29 c3                	sub    %eax,%ebx
f01200ee:	89 d8                	mov    %ebx,%eax
f01200f0:	3d 80 01 00 00       	cmp    $0x180,%eax
f01200f5:	74 17                	je     f012010e <test_kmalloc_worstfit+0x115a>
f01200f7:	83 ec 04             	sub    $0x4,%esp
f01200fa:	68 72 ba 13 f0       	push   $0xf013ba72
f01200ff:	68 8a 04 00 00       	push   $0x48a
f0120104:	68 3a b5 13 f0       	push   $0xf013b53a
f0120109:	e8 f7 00 fe ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012010e:	ff 45 e8             	incl   -0x18(%ebp)
f0120111:	83 ec 08             	sub    $0x8,%esp
f0120114:	ff 75 e8             	pushl  -0x18(%ebp)
f0120117:	68 74 bc 13 f0       	push   $0xf013bc74
f012011c:	e8 ed 0b fe ff       	call   f0100d0e <cprintf>
f0120121:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120124:	e8 88 d0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120129:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012012c:	e8 7e 3c fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120131:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f0120134:	83 ec 0c             	sub    $0xc,%esp
f0120137:	68 00 00 08 00       	push   $0x80000
f012013c:	e8 23 7a fe ff       	call   f0107b64 <kmalloc>
f0120141:	83 c4 10             	add    $0x10,%esp
f0120144:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f012014a:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0120151:	10 00 00 
f0120154:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012015a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012015f:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0120165:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012016b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120170:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0120176:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012017c:	29 d0                	sub    %edx,%eax
f012017e:	89 c1                	mov    %eax,%ecx
f0120180:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0120187:	10 00 00 
f012018a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012018f:	0f b6 d0             	movzbl %al,%edx
f0120192:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0120198:	01 d0                	add    %edx,%eax
f012019a:	48                   	dec    %eax
f012019b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01201a1:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01201a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01201ac:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01201b2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01201b8:	29 d0                	sub    %edx,%eax
f01201ba:	01 c1                	add    %eax,%ecx
f01201bc:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01201c3:	10 00 00 
f01201c6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01201cb:	0f b6 c0             	movzbl %al,%eax
f01201ce:	c1 e0 04             	shl    $0x4,%eax
f01201d1:	89 c2                	mov    %eax,%edx
f01201d3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01201d9:	01 d0                	add    %edx,%eax
f01201db:	48                   	dec    %eax
f01201dc:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f01201e2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01201e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01201ed:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f01201f3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01201f9:	29 d0                	sub    %edx,%eax
f01201fb:	01 c8                	add    %ecx,%eax
f01201fd:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f0120203:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120209:	39 c2                	cmp    %eax,%edx
f012020b:	74 17                	je     f0120224 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f012020d:	83 ec 04             	sub    $0x4,%esp
f0120210:	68 54 bc 13 f0       	push   $0xf013bc54
f0120215:	68 91 04 00 00       	push   $0x491
f012021a:	68 3a b5 13 f0       	push   $0xf013b53a
f012021f:	e8 e1 ff fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120224:	e8 86 3b fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120229:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012022c:	74 17                	je     f0120245 <test_kmalloc_worstfit+0x1291>
f012022e:	83 ec 04             	sub    $0x4,%esp
f0120231:	68 54 b5 13 f0       	push   $0xf013b554
f0120236:	68 92 04 00 00       	push   $0x492
f012023b:	68 3a b5 13 f0       	push   $0xf013b53a
f0120240:	e8 c0 ff fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120245:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120248:	e8 64 cf fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012024d:	29 c3                	sub    %eax,%ebx
f012024f:	89 d8                	mov    %ebx,%eax
f0120251:	3d 80 00 00 00       	cmp    $0x80,%eax
f0120256:	74 17                	je     f012026f <test_kmalloc_worstfit+0x12bb>
f0120258:	83 ec 04             	sub    $0x4,%esp
f012025b:	68 72 ba 13 f0       	push   $0xf013ba72
f0120260:	68 93 04 00 00       	push   $0x493
f0120265:	68 3a b5 13 f0       	push   $0xf013b53a
f012026a:	e8 96 ff fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012026f:	ff 45 e8             	incl   -0x18(%ebp)
f0120272:	83 ec 08             	sub    $0x8,%esp
f0120275:	ff 75 e8             	pushl  -0x18(%ebp)
f0120278:	68 74 bc 13 f0       	push   $0xf013bc74
f012027d:	e8 8c 0a fe ff       	call   f0100d0e <cprintf>
f0120282:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0120285:	e8 27 cf fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012028a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012028d:	e8 1d 3b fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120292:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f0120295:	83 ec 0c             	sub    $0xc,%esp
f0120298:	68 00 04 00 00       	push   $0x400
f012029d:	e8 c2 78 fe ff       	call   f0107b64 <kmalloc>
f01202a2:	83 c4 10             	add    $0x10,%esp
f01202a5:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f01202ab:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f01202b2:	10 00 00 
f01202b5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01202bb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01202c0:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f01202c6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01202cc:	ba 00 00 00 00       	mov    $0x0,%edx
f01202d1:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f01202d7:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01202dd:	29 d0                	sub    %edx,%eax
f01202df:	89 c1                	mov    %eax,%ecx
f01202e1:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f01202e8:	10 00 00 
f01202eb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01202f0:	0f b6 d0             	movzbl %al,%edx
f01202f3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01202f9:	01 d0                	add    %edx,%eax
f01202fb:	48                   	dec    %eax
f01202fc:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0120302:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120308:	ba 00 00 00 00       	mov    $0x0,%edx
f012030d:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0120313:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120319:	29 d0                	sub    %edx,%eax
f012031b:	01 c1                	add    %eax,%ecx
f012031d:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0120324:	10 00 00 
f0120327:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012032c:	0f b6 c0             	movzbl %al,%eax
f012032f:	c1 e0 04             	shl    $0x4,%eax
f0120332:	89 c2                	mov    %eax,%edx
f0120334:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012033a:	01 d0                	add    %edx,%eax
f012033c:	48                   	dec    %eax
f012033d:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0120343:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120349:	ba 00 00 00 00       	mov    $0x0,%edx
f012034e:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0120354:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012035a:	29 d0                	sub    %edx,%eax
f012035c:	01 c8                	add    %ecx,%eax
f012035e:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f0120364:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012036a:	39 c2                	cmp    %eax,%edx
f012036c:	74 17                	je     f0120385 <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f012036e:	83 ec 04             	sub    $0x4,%esp
f0120371:	68 54 bc 13 f0       	push   $0xf013bc54
f0120376:	68 9a 04 00 00       	push   $0x49a
f012037b:	68 3a b5 13 f0       	push   $0xf013b53a
f0120380:	e8 80 fe fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120385:	e8 25 3a fe ff       	call   f0103daf <pf_calculate_free_frames>
f012038a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012038d:	74 17                	je     f01203a6 <test_kmalloc_worstfit+0x13f2>
f012038f:	83 ec 04             	sub    $0x4,%esp
f0120392:	68 54 b5 13 f0       	push   $0xf013b554
f0120397:	68 9b 04 00 00       	push   $0x49b
f012039c:	68 3a b5 13 f0       	push   $0xf013b53a
f01203a1:	e8 5f fe fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01203a6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01203a9:	e8 03 ce fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01203ae:	29 c3                	sub    %eax,%ebx
f01203b0:	89 d8                	mov    %ebx,%eax
f01203b2:	83 f8 01             	cmp    $0x1,%eax
f01203b5:	74 17                	je     f01203ce <test_kmalloc_worstfit+0x141a>
f01203b7:	83 ec 04             	sub    $0x4,%esp
f01203ba:	68 72 ba 13 f0       	push   $0xf013ba72
f01203bf:	68 9c 04 00 00       	push   $0x49c
f01203c4:	68 3a b5 13 f0       	push   $0xf013b53a
f01203c9:	e8 37 fe fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01203ce:	ff 45 e8             	incl   -0x18(%ebp)
f01203d1:	83 ec 08             	sub    $0x8,%esp
f01203d4:	ff 75 e8             	pushl  -0x18(%ebp)
f01203d7:	68 74 bc 13 f0       	push   $0xf013bc74
f01203dc:	e8 2d 09 fe ff       	call   f0100d0e <cprintf>
f01203e1:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01203e4:	e8 c8 cd fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01203e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01203ec:	e8 be 39 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01203f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f01203f4:	83 ec 0c             	sub    $0xc,%esp
f01203f7:	68 00 f0 1f 00       	push   $0x1ff000
f01203fc:	e8 63 77 fe ff       	call   f0107b64 <kmalloc>
f0120401:	83 c4 10             	add    $0x10,%esp
f0120404:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f012040a:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0120411:	10 00 00 
f0120414:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012041a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012041f:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120425:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012042b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120430:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120436:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012043c:	29 d0                	sub    %edx,%eax
f012043e:	89 c1                	mov    %eax,%ecx
f0120440:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0120447:	10 00 00 
f012044a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012044f:	0f b6 d0             	movzbl %al,%edx
f0120452:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120458:	01 d0                	add    %edx,%eax
f012045a:	48                   	dec    %eax
f012045b:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0120461:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120467:	ba 00 00 00 00       	mov    $0x0,%edx
f012046c:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120472:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120478:	29 d0                	sub    %edx,%eax
f012047a:	01 c1                	add    %eax,%ecx
f012047c:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0120483:	10 00 00 
f0120486:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012048b:	0f b6 c0             	movzbl %al,%eax
f012048e:	c1 e0 04             	shl    $0x4,%eax
f0120491:	89 c2                	mov    %eax,%edx
f0120493:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120499:	01 d0                	add    %edx,%eax
f012049b:	48                   	dec    %eax
f012049c:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f01204a2:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01204a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01204ad:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f01204b3:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f01204b9:	29 d0                	sub    %edx,%eax
f01204bb:	01 c8                	add    %ecx,%eax
f01204bd:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f01204c3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01204c9:	39 c2                	cmp    %eax,%edx
f01204cb:	74 17                	je     f01204e4 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f01204cd:	83 ec 04             	sub    $0x4,%esp
f01204d0:	68 54 bc 13 f0       	push   $0xf013bc54
f01204d5:	68 a3 04 00 00       	push   $0x4a3
f01204da:	68 3a b5 13 f0       	push   $0xf013b53a
f01204df:	e8 21 fd fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01204e4:	e8 c6 38 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01204e9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01204ec:	74 17                	je     f0120505 <test_kmalloc_worstfit+0x1551>
f01204ee:	83 ec 04             	sub    $0x4,%esp
f01204f1:	68 54 b5 13 f0       	push   $0xf013b554
f01204f6:	68 a4 04 00 00       	push   $0x4a4
f01204fb:	68 3a b5 13 f0       	push   $0xf013b53a
f0120500:	e8 00 fd fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0120505:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0120508:	e8 a4 cc fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012050d:	29 c3                	sub    %eax,%ebx
f012050f:	89 d8                	mov    %ebx,%eax
f0120511:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0120516:	74 17                	je     f012052f <test_kmalloc_worstfit+0x157b>
f0120518:	83 ec 04             	sub    $0x4,%esp
f012051b:	68 72 ba 13 f0       	push   $0xf013ba72
f0120520:	68 a5 04 00 00       	push   $0x4a5
f0120525:	68 3a b5 13 f0       	push   $0xf013b53a
f012052a:	e8 d6 fc fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f012052f:	ff 45 e8             	incl   -0x18(%ebp)
f0120532:	83 ec 08             	sub    $0x8,%esp
f0120535:	ff 75 e8             	pushl  -0x18(%ebp)
f0120538:	68 74 bc 13 f0       	push   $0xf013bc74
f012053d:	e8 cc 07 fe ff       	call   f0100d0e <cprintf>
f0120542:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f0120545:	e8 67 cc fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012054a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f012054d:	e8 5d 38 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120552:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f0120555:	83 ec 0c             	sub    $0xc,%esp
f0120558:	68 00 00 40 00       	push   $0x400000
f012055d:	e8 02 76 fe ff       	call   f0107b64 <kmalloc>
f0120562:	83 c4 10             	add    $0x10,%esp
f0120565:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f012056b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120571:	85 c0                	test   %eax,%eax
f0120573:	74 17                	je     f012058c <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f0120575:	83 ec 04             	sub    $0x4,%esp
f0120578:	68 54 bc 13 f0       	push   $0xf013bc54
f012057d:	68 ad 04 00 00       	push   $0x4ad
f0120582:	68 3a b5 13 f0       	push   $0xf013b53a
f0120587:	e8 79 fc fd ff       	call   f0100205 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012058c:	e8 1e 38 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120591:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120594:	74 17                	je     f01205ad <test_kmalloc_worstfit+0x15f9>
f0120596:	83 ec 04             	sub    $0x4,%esp
f0120599:	68 54 b5 13 f0       	push   $0xf013b554
f012059e:	68 ae 04 00 00       	push   $0x4ae
f01205a3:	68 3a b5 13 f0       	push   $0xf013b53a
f01205a8:	e8 58 fc fd ff       	call   f0100205 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f01205ad:	e8 ff cb fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01205b2:	89 c2                	mov    %eax,%edx
f01205b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01205b7:	39 c2                	cmp    %eax,%edx
f01205b9:	74 17                	je     f01205d2 <test_kmalloc_worstfit+0x161e>
f01205bb:	83 ec 04             	sub    $0x4,%esp
f01205be:	68 72 ba 13 f0       	push   $0xf013ba72
f01205c3:	68 af 04 00 00       	push   $0x4af
f01205c8:	68 3a b5 13 f0       	push   $0xf013b53a
f01205cd:	e8 33 fc fd ff       	call   f0100205 <_panic>
	cprintf("Test %d Passed \n", ++count);
f01205d2:	ff 45 e8             	incl   -0x18(%ebp)
f01205d5:	83 ec 08             	sub    $0x8,%esp
f01205d8:	ff 75 e8             	pushl  -0x18(%ebp)
f01205db:	68 74 bc 13 f0       	push   $0xf013bc74
f01205e0:	e8 29 07 fe ff       	call   f0100d0e <cprintf>
f01205e5:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f01205e8:	83 ec 0c             	sub    $0xc,%esp
f01205eb:	68 88 bc 13 f0       	push   $0xf013bc88
f01205f0:	e8 19 07 fe ff       	call   f0100d0e <cprintf>
f01205f5:	83 c4 10             	add    $0x10,%esp


	return 1;
f01205f8:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01205fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0120600:	5b                   	pop    %ebx
f0120601:	5f                   	pop    %edi
f0120602:	5d                   	pop    %ebp
f0120603:	c3                   	ret    

f0120604 <test_kfree>:

int test_kfree()
{
f0120604:	55                   	push   %ebp
f0120605:	89 e5                	mov    %esp,%ebp
f0120607:	57                   	push   %edi
f0120608:	53                   	push   %ebx
f0120609:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f012060f:	83 ec 0c             	sub    $0xc,%esp
f0120612:	68 7c b4 13 f0       	push   $0xf013b47c
f0120617:	e8 f2 06 fe ff       	call   f0100d0e <cprintf>
f012061c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012061f:	83 ec 0c             	sub    $0xc,%esp
f0120622:	68 ac b4 13 f0       	push   $0xf013b4ac
f0120627:	e8 e2 06 fe ff       	call   f0100d0e <cprintf>
f012062c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012062f:	83 ec 0c             	sub    $0xc,%esp
f0120632:	68 7c b4 13 f0       	push   $0xf013b47c
f0120637:	e8 d2 06 fe ff       	call   f0100d0e <cprintf>
f012063c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012063f:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0120643:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0120647:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012064d:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0120653:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f012065a:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0120661:	e8 4b cb fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120666:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0120669:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f012066f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120674:	b8 00 00 00 00       	mov    $0x0,%eax
f0120679:	89 d7                	mov    %edx,%edi
f012067b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012067d:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f0120683:	b9 14 00 00 00       	mov    $0x14,%ecx
f0120688:	b8 00 00 00 00       	mov    $0x0,%eax
f012068d:	89 d7                	mov    %edx,%edi
f012068f:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0120691:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f0120697:	b9 14 00 00 00       	mov    $0x14,%ecx
f012069c:	b8 00 00 00 00       	mov    $0x0,%eax
f01206a1:	89 d7                	mov    %edx,%edi
f01206a3:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01206a5:	e8 07 cb fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01206aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01206ad:	e8 fd 36 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01206b2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01206b5:	83 ec 0c             	sub    $0xc,%esp
f01206b8:	68 00 fc 1f 00       	push   $0x1ffc00
f01206bd:	e8 a2 74 fe ff       	call   f0107b64 <kmalloc>
f01206c2:	83 c4 10             	add    $0x10,%esp
f01206c5:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206cb:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01206d1:	89 c1                	mov    %eax,%ecx
f01206d3:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f01206da:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01206dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01206e2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f01206e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01206e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01206ed:	f7 75 c8             	divl   -0x38(%ebp)
f01206f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01206f3:	29 d0                	sub    %edx,%eax
f01206f5:	89 c3                	mov    %eax,%ebx
f01206f7:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01206fe:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120703:	0f b6 d0             	movzbl %al,%edx
f0120706:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0120709:	01 d0                	add    %edx,%eax
f012070b:	48                   	dec    %eax
f012070c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f012070f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0120712:	ba 00 00 00 00       	mov    $0x0,%edx
f0120717:	f7 75 c0             	divl   -0x40(%ebp)
f012071a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012071d:	29 d0                	sub    %edx,%eax
f012071f:	01 c3                	add    %eax,%ebx
f0120721:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0120728:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012072d:	0f b6 c0             	movzbl %al,%eax
f0120730:	c1 e0 04             	shl    $0x4,%eax
f0120733:	89 c2                	mov    %eax,%edx
f0120735:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0120738:	01 d0                	add    %edx,%eax
f012073a:	48                   	dec    %eax
f012073b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f012073e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0120741:	ba 00 00 00 00       	mov    $0x0,%edx
f0120746:	f7 75 b8             	divl   -0x48(%ebp)
f0120749:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012074c:	29 d0                	sub    %edx,%eax
f012074e:	01 d8                	add    %ebx,%eax
f0120750:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0120755:	39 c1                	cmp    %eax,%ecx
f0120757:	74 17                	je     f0120770 <test_kfree+0x16c>
f0120759:	83 ec 04             	sub    $0x4,%esp
f012075c:	68 20 b6 13 f0       	push   $0xf013b620
f0120761:	68 d7 04 00 00       	push   $0x4d7
f0120766:	68 3a b5 13 f0       	push   $0xf013b53a
f012076b:	e8 95 fa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120770:	e8 3a 36 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120775:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120778:	74 17                	je     f0120791 <test_kfree+0x18d>
f012077a:	83 ec 04             	sub    $0x4,%esp
f012077d:	68 54 b5 13 f0       	push   $0xf013b554
f0120782:	68 d8 04 00 00       	push   $0x4d8
f0120787:	68 3a b5 13 f0       	push   $0xf013b53a
f012078c:	e8 74 fa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120791:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120794:	e8 18 ca fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120799:	29 c3                	sub    %eax,%ebx
f012079b:	89 d8                	mov    %ebx,%eax
f012079d:	3d 00 02 00 00       	cmp    $0x200,%eax
f01207a2:	74 17                	je     f01207bb <test_kfree+0x1b7>
f01207a4:	83 ec 04             	sub    $0x4,%esp
f01207a7:	68 bc b5 13 f0       	push   $0xf013b5bc
f01207ac:	68 d9 04 00 00       	push   $0x4d9
f01207b1:	68 3a b5 13 f0       	push   $0xf013b53a
f01207b6:	e8 4a fa fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01207bb:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f01207c2:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01207c5:	e8 e7 c9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01207ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01207cd:	e8 dd 35 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01207d2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01207d5:	83 ec 0c             	sub    $0xc,%esp
f01207d8:	68 00 fc 1f 00       	push   $0x1ffc00
f01207dd:	e8 82 73 fe ff       	call   f0107b64 <kmalloc>
f01207e2:	83 c4 10             	add    $0x10,%esp
f01207e5:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01207eb:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f01207f1:	89 c1                	mov    %eax,%ecx
f01207f3:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01207fa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01207fd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120802:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0120805:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0120808:	ba 00 00 00 00       	mov    $0x0,%edx
f012080d:	f7 75 b0             	divl   -0x50(%ebp)
f0120810:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0120813:	29 d0                	sub    %edx,%eax
f0120815:	89 c3                	mov    %eax,%ebx
f0120817:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f012081e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120823:	0f b6 d0             	movzbl %al,%edx
f0120826:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0120829:	01 d0                	add    %edx,%eax
f012082b:	48                   	dec    %eax
f012082c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f012082f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0120832:	ba 00 00 00 00       	mov    $0x0,%edx
f0120837:	f7 75 a8             	divl   -0x58(%ebp)
f012083a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012083d:	29 d0                	sub    %edx,%eax
f012083f:	01 c3                	add    %eax,%ebx
f0120841:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0120848:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012084d:	0f b6 c0             	movzbl %al,%eax
f0120850:	c1 e0 04             	shl    $0x4,%eax
f0120853:	89 c2                	mov    %eax,%edx
f0120855:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0120858:	01 d0                	add    %edx,%eax
f012085a:	48                   	dec    %eax
f012085b:	89 45 9c             	mov    %eax,-0x64(%ebp)
f012085e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0120861:	ba 00 00 00 00       	mov    $0x0,%edx
f0120866:	f7 75 a0             	divl   -0x60(%ebp)
f0120869:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012086c:	29 d0                	sub    %edx,%eax
f012086e:	01 d8                	add    %ebx,%eax
f0120870:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0120875:	39 c1                	cmp    %eax,%ecx
f0120877:	74 17                	je     f0120890 <test_kfree+0x28c>
f0120879:	83 ec 04             	sub    $0x4,%esp
f012087c:	68 20 b6 13 f0       	push   $0xf013b620
f0120881:	68 e0 04 00 00       	push   $0x4e0
f0120886:	68 3a b5 13 f0       	push   $0xf013b53a
f012088b:	e8 75 f9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120890:	e8 1a 35 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120895:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120898:	74 17                	je     f01208b1 <test_kfree+0x2ad>
f012089a:	83 ec 04             	sub    $0x4,%esp
f012089d:	68 54 b5 13 f0       	push   $0xf013b554
f01208a2:	68 e1 04 00 00       	push   $0x4e1
f01208a7:	68 3a b5 13 f0       	push   $0xf013b53a
f01208ac:	e8 54 f9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01208b1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01208b4:	e8 f8 c8 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01208b9:	29 c3                	sub    %eax,%ebx
f01208bb:	89 d8                	mov    %ebx,%eax
f01208bd:	3d 00 02 00 00       	cmp    $0x200,%eax
f01208c2:	74 17                	je     f01208db <test_kfree+0x2d7>
f01208c4:	83 ec 04             	sub    $0x4,%esp
f01208c7:	68 bc b5 13 f0       	push   $0xf013b5bc
f01208cc:	68 e2 04 00 00       	push   $0x4e2
f01208d1:	68 3a b5 13 f0       	push   $0xf013b53a
f01208d6:	e8 2a f9 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01208db:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f01208e2:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01208e5:	e8 c7 c8 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01208ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01208ed:	e8 bd 34 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01208f2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01208f5:	83 ec 0c             	sub    $0xc,%esp
f01208f8:	68 00 08 00 00       	push   $0x800
f01208fd:	e8 62 72 fe ff       	call   f0107b64 <kmalloc>
f0120902:	83 c4 10             	add    $0x10,%esp
f0120905:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012090b:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120911:	89 c1                	mov    %eax,%ecx
f0120913:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012091a:	8b 45 98             	mov    -0x68(%ebp),%eax
f012091d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120922:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0120925:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120928:	ba 00 00 00 00       	mov    $0x0,%edx
f012092d:	f7 75 98             	divl   -0x68(%ebp)
f0120930:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0120933:	29 d0                	sub    %edx,%eax
f0120935:	89 c3                	mov    %eax,%ebx
f0120937:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f012093e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120943:	0f b6 d0             	movzbl %al,%edx
f0120946:	8b 45 90             	mov    -0x70(%ebp),%eax
f0120949:	01 d0                	add    %edx,%eax
f012094b:	48                   	dec    %eax
f012094c:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012094f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0120952:	ba 00 00 00 00       	mov    $0x0,%edx
f0120957:	f7 75 90             	divl   -0x70(%ebp)
f012095a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012095d:	29 d0                	sub    %edx,%eax
f012095f:	01 c3                	add    %eax,%ebx
f0120961:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0120968:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012096d:	0f b6 c0             	movzbl %al,%eax
f0120970:	c1 e0 04             	shl    $0x4,%eax
f0120973:	89 c2                	mov    %eax,%edx
f0120975:	8b 45 88             	mov    -0x78(%ebp),%eax
f0120978:	01 d0                	add    %edx,%eax
f012097a:	48                   	dec    %eax
f012097b:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012097e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120981:	ba 00 00 00 00       	mov    $0x0,%edx
f0120986:	f7 75 88             	divl   -0x78(%ebp)
f0120989:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012098c:	29 d0                	sub    %edx,%eax
f012098e:	01 d8                	add    %ebx,%eax
f0120990:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0120995:	39 c1                	cmp    %eax,%ecx
f0120997:	74 17                	je     f01209b0 <test_kfree+0x3ac>
f0120999:	83 ec 04             	sub    $0x4,%esp
f012099c:	68 20 b6 13 f0       	push   $0xf013b620
f01209a1:	68 e9 04 00 00       	push   $0x4e9
f01209a6:	68 3a b5 13 f0       	push   $0xf013b53a
f01209ab:	e8 55 f8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01209b0:	e8 fa 33 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01209b5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01209b8:	74 17                	je     f01209d1 <test_kfree+0x3cd>
f01209ba:	83 ec 04             	sub    $0x4,%esp
f01209bd:	68 54 b5 13 f0       	push   $0xf013b554
f01209c2:	68 ea 04 00 00       	push   $0x4ea
f01209c7:	68 3a b5 13 f0       	push   $0xf013b53a
f01209cc:	e8 34 f8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01209d1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01209d4:	e8 d8 c7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01209d9:	29 c3                	sub    %eax,%ebx
f01209db:	89 d8                	mov    %ebx,%eax
f01209dd:	83 f8 01             	cmp    $0x1,%eax
f01209e0:	74 17                	je     f01209f9 <test_kfree+0x3f5>
f01209e2:	83 ec 04             	sub    $0x4,%esp
f01209e5:	68 bc b5 13 f0       	push   $0xf013b5bc
f01209ea:	68 eb 04 00 00       	push   $0x4eb
f01209ef:	68 3a b5 13 f0       	push   $0xf013b53a
f01209f4:	e8 0c f8 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01209f9:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f0120a00:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0120a03:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0120a09:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0120a0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120a13:	eb 0e                	jmp    f0120a23 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f0120a15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120a18:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120a1b:	01 d0                	add    %edx,%eax
f0120a1d:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0120a20:	ff 45 f4             	incl   -0xc(%ebp)
f0120a23:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0120a29:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120a2c:	7f e7                	jg     f0120a15 <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120a2e:	e8 7e c7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120a33:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120a36:	e8 74 33 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120a3b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0120a3e:	83 ec 0c             	sub    $0xc,%esp
f0120a41:	68 00 08 00 00       	push   $0x800
f0120a46:	e8 19 71 fe ff       	call   f0107b64 <kmalloc>
f0120a4b:	83 c4 10             	add    $0x10,%esp
f0120a4e:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120a54:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120a5a:	89 c1                	mov    %eax,%ecx
f0120a5c:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0120a63:	10 00 00 
f0120a66:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0120a6c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120a71:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0120a77:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120a7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a82:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0120a88:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0120a8e:	29 d0                	sub    %edx,%eax
f0120a90:	89 c3                	mov    %eax,%ebx
f0120a92:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0120a99:	10 00 00 
f0120a9c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120aa1:	0f b6 d0             	movzbl %al,%edx
f0120aa4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0120aaa:	01 d0                	add    %edx,%eax
f0120aac:	48                   	dec    %eax
f0120aad:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0120ab3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120ab9:	ba 00 00 00 00       	mov    $0x0,%edx
f0120abe:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0120ac4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0120aca:	29 d0                	sub    %edx,%eax
f0120acc:	01 c3                	add    %eax,%ebx
f0120ace:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0120ad5:	10 00 00 
f0120ad8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120add:	0f b6 c0             	movzbl %al,%eax
f0120ae0:	c1 e0 04             	shl    $0x4,%eax
f0120ae3:	89 c2                	mov    %eax,%edx
f0120ae5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0120aeb:	01 d0                	add    %edx,%eax
f0120aed:	48                   	dec    %eax
f0120aee:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0120af4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120afa:	ba 00 00 00 00       	mov    $0x0,%edx
f0120aff:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0120b05:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0120b0b:	29 d0                	sub    %edx,%eax
f0120b0d:	01 d8                	add    %ebx,%eax
f0120b0f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0120b14:	39 c1                	cmp    %eax,%ecx
f0120b16:	74 17                	je     f0120b2f <test_kfree+0x52b>
f0120b18:	83 ec 04             	sub    $0x4,%esp
f0120b1b:	68 20 b6 13 f0       	push   $0xf013b620
f0120b20:	68 f7 04 00 00       	push   $0x4f7
f0120b25:	68 3a b5 13 f0       	push   $0xf013b53a
f0120b2a:	e8 d6 f6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b2f:	e8 7b 32 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120b34:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b37:	74 17                	je     f0120b50 <test_kfree+0x54c>
f0120b39:	83 ec 04             	sub    $0x4,%esp
f0120b3c:	68 54 b5 13 f0       	push   $0xf013b554
f0120b41:	68 f8 04 00 00       	push   $0x4f8
f0120b46:	68 3a b5 13 f0       	push   $0xf013b53a
f0120b4b:	e8 b5 f6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120b50:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120b53:	e8 59 c6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120b58:	29 c3                	sub    %eax,%ebx
f0120b5a:	89 d8                	mov    %ebx,%eax
f0120b5c:	83 f8 01             	cmp    $0x1,%eax
f0120b5f:	74 17                	je     f0120b78 <test_kfree+0x574>
f0120b61:	83 ec 04             	sub    $0x4,%esp
f0120b64:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120b69:	68 f9 04 00 00       	push   $0x4f9
f0120b6e:	68 3a b5 13 f0       	push   $0xf013b53a
f0120b73:	e8 8d f6 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0120b78:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f0120b7f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0120b82:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120b88:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0120b8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b92:	eb 0e                	jmp    f0120ba2 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f0120b94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b97:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b9a:	01 d0                	add    %edx,%eax
f0120b9c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0120b9f:	ff 45 f4             	incl   -0xc(%ebp)
f0120ba2:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120ba8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120bab:	7f e7                	jg     f0120b94 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120bad:	e8 ff c5 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120bb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120bb5:	e8 f5 31 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120bba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0120bbd:	83 ec 0c             	sub    $0xc,%esp
f0120bc0:	68 00 1c 00 00       	push   $0x1c00
f0120bc5:	e8 9a 6f fe ff       	call   f0107b64 <kmalloc>
f0120bca:	83 c4 10             	add    $0x10,%esp
f0120bcd:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120bd3:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120bd9:	89 c1                	mov    %eax,%ecx
f0120bdb:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0120be2:	10 00 00 
f0120be5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0120beb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120bf0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0120bf6:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120bfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c01:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0120c07:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0120c0d:	29 d0                	sub    %edx,%eax
f0120c0f:	89 c3                	mov    %eax,%ebx
f0120c11:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0120c18:	10 00 00 
f0120c1b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120c20:	0f b6 d0             	movzbl %al,%edx
f0120c23:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0120c29:	01 d0                	add    %edx,%eax
f0120c2b:	48                   	dec    %eax
f0120c2c:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0120c32:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120c38:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c3d:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0120c43:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0120c49:	29 d0                	sub    %edx,%eax
f0120c4b:	01 c3                	add    %eax,%ebx
f0120c4d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0120c54:	10 00 00 
f0120c57:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120c5c:	0f b6 c0             	movzbl %al,%eax
f0120c5f:	c1 e0 04             	shl    $0x4,%eax
f0120c62:	89 c2                	mov    %eax,%edx
f0120c64:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0120c6a:	01 d0                	add    %edx,%eax
f0120c6c:	48                   	dec    %eax
f0120c6d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0120c73:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120c79:	ba 00 00 00 00       	mov    $0x0,%edx
f0120c7e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0120c84:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0120c8a:	29 d0                	sub    %edx,%eax
f0120c8c:	01 d8                	add    %ebx,%eax
f0120c8e:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0120c93:	39 c1                	cmp    %eax,%ecx
f0120c95:	74 17                	je     f0120cae <test_kfree+0x6aa>
f0120c97:	83 ec 04             	sub    $0x4,%esp
f0120c9a:	68 20 b6 13 f0       	push   $0xf013b620
f0120c9f:	68 05 05 00 00       	push   $0x505
f0120ca4:	68 3a b5 13 f0       	push   $0xf013b53a
f0120ca9:	e8 57 f5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120cae:	e8 fc 30 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120cb3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120cb6:	74 17                	je     f0120ccf <test_kfree+0x6cb>
f0120cb8:	83 ec 04             	sub    $0x4,%esp
f0120cbb:	68 54 b5 13 f0       	push   $0xf013b554
f0120cc0:	68 06 05 00 00       	push   $0x506
f0120cc5:	68 3a b5 13 f0       	push   $0xf013b53a
f0120cca:	e8 36 f5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120ccf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120cd2:	e8 da c4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120cd7:	29 c3                	sub    %eax,%ebx
f0120cd9:	89 d8                	mov    %ebx,%eax
f0120cdb:	83 f8 02             	cmp    $0x2,%eax
f0120cde:	74 17                	je     f0120cf7 <test_kfree+0x6f3>
f0120ce0:	83 ec 04             	sub    $0x4,%esp
f0120ce3:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120ce8:	68 07 05 00 00       	push   $0x507
f0120ced:	68 3a b5 13 f0       	push   $0xf013b53a
f0120cf2:	e8 0e f5 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0120cf7:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f0120cfe:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0120d01:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120d07:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120d0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120d11:	eb 0e                	jmp    f0120d21 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f0120d13:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120d16:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120d19:	01 d0                	add    %edx,%eax
f0120d1b:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120d1e:	ff 45 f4             	incl   -0xc(%ebp)
f0120d21:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f0120d27:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120d2a:	7f e7                	jg     f0120d13 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d2c:	e8 80 c4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120d31:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d34:	e8 76 30 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120d39:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0120d3c:	83 ec 0c             	sub    $0xc,%esp
f0120d3f:	68 00 fc 2f 00       	push   $0x2ffc00
f0120d44:	e8 1b 6e fe ff       	call   f0107b64 <kmalloc>
f0120d49:	83 c4 10             	add    $0x10,%esp
f0120d4c:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120d52:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120d58:	89 c1                	mov    %eax,%ecx
f0120d5a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0120d61:	10 00 00 
f0120d64:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0120d6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120d6f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0120d75:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120d7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120d80:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0120d86:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0120d8c:	29 d0                	sub    %edx,%eax
f0120d8e:	89 c3                	mov    %eax,%ebx
f0120d90:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0120d97:	10 00 00 
f0120d9a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120d9f:	0f b6 d0             	movzbl %al,%edx
f0120da2:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0120da8:	01 d0                	add    %edx,%eax
f0120daa:	48                   	dec    %eax
f0120dab:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0120db1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120db7:	ba 00 00 00 00       	mov    $0x0,%edx
f0120dbc:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0120dc2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0120dc8:	29 d0                	sub    %edx,%eax
f0120dca:	01 c3                	add    %eax,%ebx
f0120dcc:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0120dd3:	10 00 00 
f0120dd6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120ddb:	0f b6 c0             	movzbl %al,%eax
f0120dde:	c1 e0 04             	shl    $0x4,%eax
f0120de1:	89 c2                	mov    %eax,%edx
f0120de3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0120de9:	01 d0                	add    %edx,%eax
f0120deb:	48                   	dec    %eax
f0120dec:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0120df2:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120df8:	ba 00 00 00 00       	mov    $0x0,%edx
f0120dfd:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0120e03:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0120e09:	29 d0                	sub    %edx,%eax
f0120e0b:	01 d8                	add    %ebx,%eax
f0120e0d:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0120e12:	39 c1                	cmp    %eax,%ecx
f0120e14:	74 17                	je     f0120e2d <test_kfree+0x829>
f0120e16:	83 ec 04             	sub    $0x4,%esp
f0120e19:	68 20 b6 13 f0       	push   $0xf013b620
f0120e1e:	68 13 05 00 00       	push   $0x513
f0120e23:	68 3a b5 13 f0       	push   $0xf013b53a
f0120e28:	e8 d8 f3 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120e2d:	e8 7d 2f fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120e32:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120e35:	74 17                	je     f0120e4e <test_kfree+0x84a>
f0120e37:	83 ec 04             	sub    $0x4,%esp
f0120e3a:	68 54 b5 13 f0       	push   $0xf013b554
f0120e3f:	68 14 05 00 00       	push   $0x514
f0120e44:	68 3a b5 13 f0       	push   $0xf013b53a
f0120e49:	e8 b7 f3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120e4e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120e51:	e8 5b c3 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120e56:	29 c3                	sub    %eax,%ebx
f0120e58:	89 d8                	mov    %ebx,%eax
f0120e5a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120e5f:	74 17                	je     f0120e78 <test_kfree+0x874>
f0120e61:	83 ec 04             	sub    $0x4,%esp
f0120e64:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120e69:	68 15 05 00 00       	push   $0x515
f0120e6e:	68 3a b5 13 f0       	push   $0xf013b53a
f0120e73:	e8 8d f3 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0120e78:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f0120e7f:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0120e82:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120e88:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0120e8b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120e92:	eb 0e                	jmp    f0120ea2 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f0120e94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120e97:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120e9a:	01 d0                	add    %edx,%eax
f0120e9c:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0120e9f:	ff 45 f4             	incl   -0xc(%ebp)
f0120ea2:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f0120ea8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120eab:	7f e7                	jg     f0120e94 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0120ead:	e8 ff c2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120eb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120eb5:	e8 f5 2e fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120eba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0120ebd:	83 ec 0c             	sub    $0xc,%esp
f0120ec0:	68 00 fc 5f 00       	push   $0x5ffc00
f0120ec5:	e8 9a 6c fe ff       	call   f0107b64 <kmalloc>
f0120eca:	83 c4 10             	add    $0x10,%esp
f0120ecd:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120ed3:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0120ed9:	89 c1                	mov    %eax,%ecx
f0120edb:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0120ee2:	10 00 00 
f0120ee5:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0120eeb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120ef0:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0120ef6:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120efc:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f01:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0120f07:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0120f0d:	29 d0                	sub    %edx,%eax
f0120f0f:	89 c3                	mov    %eax,%ebx
f0120f11:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0120f18:	10 00 00 
f0120f1b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120f20:	0f b6 d0             	movzbl %al,%edx
f0120f23:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0120f29:	01 d0                	add    %edx,%eax
f0120f2b:	48                   	dec    %eax
f0120f2c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0120f32:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120f38:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f3d:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0120f43:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0120f49:	29 d0                	sub    %edx,%eax
f0120f4b:	01 c3                	add    %eax,%ebx
f0120f4d:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0120f54:	10 00 00 
f0120f57:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0120f5c:	0f b6 c0             	movzbl %al,%eax
f0120f5f:	c1 e0 04             	shl    $0x4,%eax
f0120f62:	89 c2                	mov    %eax,%edx
f0120f64:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0120f6a:	01 d0                	add    %edx,%eax
f0120f6c:	48                   	dec    %eax
f0120f6d:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0120f73:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120f79:	ba 00 00 00 00       	mov    $0x0,%edx
f0120f7e:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0120f84:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0120f8a:	29 d0                	sub    %edx,%eax
f0120f8c:	01 d8                	add    %ebx,%eax
f0120f8e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0120f93:	39 c1                	cmp    %eax,%ecx
f0120f95:	74 17                	je     f0120fae <test_kfree+0x9aa>
f0120f97:	83 ec 04             	sub    $0x4,%esp
f0120f9a:	68 20 b6 13 f0       	push   $0xf013b620
f0120f9f:	68 21 05 00 00       	push   $0x521
f0120fa4:	68 3a b5 13 f0       	push   $0xf013b53a
f0120fa9:	e8 57 f2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120fae:	e8 fc 2d fe ff       	call   f0103daf <pf_calculate_free_frames>
f0120fb3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fb6:	74 17                	je     f0120fcf <test_kfree+0x9cb>
f0120fb8:	83 ec 04             	sub    $0x4,%esp
f0120fbb:	68 54 b5 13 f0       	push   $0xf013b554
f0120fc0:	68 22 05 00 00       	push   $0x522
f0120fc5:	68 3a b5 13 f0       	push   $0xf013b53a
f0120fca:	e8 36 f2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120fcf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120fd2:	e8 da c1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0120fd7:	29 c3                	sub    %eax,%ebx
f0120fd9:	89 d8                	mov    %ebx,%eax
f0120fdb:	3d 00 06 00 00       	cmp    $0x600,%eax
f0120fe0:	74 17                	je     f0120ff9 <test_kfree+0x9f5>
f0120fe2:	83 ec 04             	sub    $0x4,%esp
f0120fe5:	68 bc b5 13 f0       	push   $0xf013b5bc
f0120fea:	68 23 05 00 00       	push   $0x523
f0120fef:	68 3a b5 13 f0       	push   $0xf013b53a
f0120ff4:	e8 0c f2 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0120ff9:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f0121000:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121003:	e8 a9 c1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121008:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012100b:	e8 9f 2d fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121010:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121013:	83 ec 0c             	sub    $0xc,%esp
f0121016:	68 00 38 00 00       	push   $0x3800
f012101b:	e8 44 6b fe ff       	call   f0107b64 <kmalloc>
f0121020:	83 c4 10             	add    $0x10,%esp
f0121023:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121029:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012102f:	89 c1                	mov    %eax,%ecx
f0121031:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0121038:	10 00 00 
f012103b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0121041:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121046:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012104c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121052:	ba 00 00 00 00       	mov    $0x0,%edx
f0121057:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012105d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121063:	29 d0                	sub    %edx,%eax
f0121065:	89 c3                	mov    %eax,%ebx
f0121067:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012106e:	10 00 00 
f0121071:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121076:	0f b6 d0             	movzbl %al,%edx
f0121079:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012107f:	01 d0                	add    %edx,%eax
f0121081:	48                   	dec    %eax
f0121082:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0121088:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012108e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121093:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0121099:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012109f:	29 d0                	sub    %edx,%eax
f01210a1:	01 c3                	add    %eax,%ebx
f01210a3:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01210aa:	10 00 00 
f01210ad:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01210b2:	0f b6 c0             	movzbl %al,%eax
f01210b5:	c1 e0 04             	shl    $0x4,%eax
f01210b8:	89 c2                	mov    %eax,%edx
f01210ba:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01210c0:	01 d0                	add    %edx,%eax
f01210c2:	48                   	dec    %eax
f01210c3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01210c9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01210cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01210d4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01210da:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01210e0:	29 d0                	sub    %edx,%eax
f01210e2:	01 d8                	add    %ebx,%eax
f01210e4:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01210e9:	39 c1                	cmp    %eax,%ecx
f01210eb:	74 17                	je     f0121104 <test_kfree+0xb00>
f01210ed:	83 ec 04             	sub    $0x4,%esp
f01210f0:	68 20 b6 13 f0       	push   $0xf013b620
f01210f5:	68 2a 05 00 00       	push   $0x52a
f01210fa:	68 3a b5 13 f0       	push   $0xf013b53a
f01210ff:	e8 01 f1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121104:	e8 a6 2c fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121109:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012110c:	74 17                	je     f0121125 <test_kfree+0xb21>
f012110e:	83 ec 04             	sub    $0x4,%esp
f0121111:	68 54 b5 13 f0       	push   $0xf013b554
f0121116:	68 2b 05 00 00       	push   $0x52b
f012111b:	68 3a b5 13 f0       	push   $0xf013b53a
f0121120:	e8 e0 f0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121125:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121128:	e8 84 c0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012112d:	29 c3                	sub    %eax,%ebx
f012112f:	89 d8                	mov    %ebx,%eax
f0121131:	83 f8 04             	cmp    $0x4,%eax
f0121134:	74 17                	je     f012114d <test_kfree+0xb49>
f0121136:	83 ec 04             	sub    $0x4,%esp
f0121139:	68 bc b5 13 f0       	push   $0xf013b5bc
f012113e:	68 2c 05 00 00       	push   $0x52c
f0121143:	68 3a b5 13 f0       	push   $0xf013b53a
f0121148:	e8 b8 f0 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012114d:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f0121154:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121157:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012115d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121160:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121167:	eb 0e                	jmp    f0121177 <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f0121169:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012116c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012116f:	01 d0                	add    %edx,%eax
f0121171:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121174:	ff 45 f4             	incl   -0xc(%ebp)
f0121177:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012117d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121180:	7f e7                	jg     f0121169 <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121182:	e8 2a c0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121187:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012118d:	e8 1d 2c fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121192:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0121198:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f012119e:	83 ec 0c             	sub    $0xc,%esp
f01211a1:	50                   	push   %eax
f01211a2:	e8 c5 6a fe ff       	call   f0107c6c <kfree>
f01211a7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211aa:	e8 00 2c fe ff       	call   f0103daf <pf_calculate_free_frames>
f01211af:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01211b5:	74 17                	je     f01211ce <test_kfree+0xbca>
f01211b7:	83 ec 04             	sub    $0x4,%esp
f01211ba:	68 54 b5 13 f0       	push   $0xf013b554
f01211bf:	68 3b 05 00 00       	push   $0x53b
f01211c4:	68 3a b5 13 f0       	push   $0xf013b53a
f01211c9:	e8 37 f0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01211ce:	e8 de bf fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01211d3:	89 c2                	mov    %eax,%edx
f01211d5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01211db:	29 c2                	sub    %eax,%edx
f01211dd:	89 d0                	mov    %edx,%eax
f01211df:	3d 00 02 00 00       	cmp    $0x200,%eax
f01211e4:	74 17                	je     f01211fd <test_kfree+0xbf9>
f01211e6:	83 ec 04             	sub    $0x4,%esp
f01211e9:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01211ee:	68 3c 05 00 00       	push   $0x53c
f01211f3:	68 3a b5 13 f0       	push   $0xf013b53a
f01211f8:	e8 08 f0 fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211fd:	e8 af bf fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121202:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121208:	e8 a2 2b fe ff       	call   f0103daf <pf_calculate_free_frames>
f012120d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0121213:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f0121219:	83 ec 0c             	sub    $0xc,%esp
f012121c:	50                   	push   %eax
f012121d:	e8 4a 6a fe ff       	call   f0107c6c <kfree>
f0121222:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121225:	e8 85 2b fe ff       	call   f0103daf <pf_calculate_free_frames>
f012122a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121230:	74 17                	je     f0121249 <test_kfree+0xc45>
f0121232:	83 ec 04             	sub    $0x4,%esp
f0121235:	68 54 b5 13 f0       	push   $0xf013b554
f012123a:	68 42 05 00 00       	push   $0x542
f012123f:	68 3a b5 13 f0       	push   $0xf013b53a
f0121244:	e8 bc ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121249:	e8 63 bf fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012124e:	89 c2                	mov    %eax,%edx
f0121250:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121256:	29 c2                	sub    %eax,%edx
f0121258:	89 d0                	mov    %edx,%eax
f012125a:	83 f8 01             	cmp    $0x1,%eax
f012125d:	74 17                	je     f0121276 <test_kfree+0xc72>
f012125f:	83 ec 04             	sub    $0x4,%esp
f0121262:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121267:	68 43 05 00 00       	push   $0x543
f012126c:	68 3a b5 13 f0       	push   $0xf013b53a
f0121271:	e8 8f ef fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121276:	e8 36 bf fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012127b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121281:	e8 29 2b fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121286:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012128c:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f0121292:	83 ec 0c             	sub    $0xc,%esp
f0121295:	50                   	push   %eax
f0121296:	e8 d1 69 fe ff       	call   f0107c6c <kfree>
f012129b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012129e:	e8 0c 2b fe ff       	call   f0103daf <pf_calculate_free_frames>
f01212a3:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01212a9:	74 17                	je     f01212c2 <test_kfree+0xcbe>
f01212ab:	83 ec 04             	sub    $0x4,%esp
f01212ae:	68 54 b5 13 f0       	push   $0xf013b554
f01212b3:	68 49 05 00 00       	push   $0x549
f01212b8:	68 3a b5 13 f0       	push   $0xf013b53a
f01212bd:	e8 43 ef fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01212c2:	e8 ea be fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01212c7:	89 c2                	mov    %eax,%edx
f01212c9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01212cf:	29 c2                	sub    %eax,%edx
f01212d1:	89 d0                	mov    %edx,%eax
f01212d3:	3d 00 02 00 00       	cmp    $0x200,%eax
f01212d8:	74 17                	je     f01212f1 <test_kfree+0xced>
f01212da:	83 ec 04             	sub    $0x4,%esp
f01212dd:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01212e2:	68 4a 05 00 00       	push   $0x54a
f01212e7:	68 3a b5 13 f0       	push   $0xf013b53a
f01212ec:	e8 14 ef fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01212f1:	e8 bb be fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01212f6:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212fc:	e8 ae 2a fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121301:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0121307:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f012130d:	83 ec 0c             	sub    $0xc,%esp
f0121310:	50                   	push   %eax
f0121311:	e8 56 69 fe ff       	call   f0107c6c <kfree>
f0121316:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121319:	e8 91 2a fe ff       	call   f0103daf <pf_calculate_free_frames>
f012131e:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121324:	74 17                	je     f012133d <test_kfree+0xd39>
f0121326:	83 ec 04             	sub    $0x4,%esp
f0121329:	68 54 b5 13 f0       	push   $0xf013b554
f012132e:	68 50 05 00 00       	push   $0x550
f0121333:	68 3a b5 13 f0       	push   $0xf013b53a
f0121338:	e8 c8 ee fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012133d:	e8 6f be fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121342:	89 c2                	mov    %eax,%edx
f0121344:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012134a:	29 c2                	sub    %eax,%edx
f012134c:	89 d0                	mov    %edx,%eax
f012134e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121353:	74 17                	je     f012136c <test_kfree+0xd68>
f0121355:	83 ec 04             	sub    $0x4,%esp
f0121358:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012135d:	68 51 05 00 00       	push   $0x551
f0121362:	68 3a b5 13 f0       	push   $0xf013b53a
f0121367:	e8 99 ee fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f012136c:	83 ec 0c             	sub    $0xc,%esp
f012136f:	68 fc bc 13 f0       	push   $0xf013bcfc
f0121374:	e8 95 f9 fd ff       	call   f0100d0e <cprintf>
f0121379:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f012137c:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121382:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121385:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012138c:	eb 1e                	jmp    f01213ac <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f012138e:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0121394:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121397:	8b 45 80             	mov    -0x80(%ebp),%eax
f012139a:	01 c8                	add    %ecx,%eax
f012139c:	8a 00                	mov    (%eax),%al
f012139e:	0f be c0             	movsbl %al,%eax
f01213a1:	01 d0                	add    %edx,%eax
f01213a3:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01213a9:	ff 45 f4             	incl   -0xc(%ebp)
f01213ac:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01213b2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01213b5:	7f d7                	jg     f012138e <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01213b7:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f01213bd:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f01213c3:	89 c1                	mov    %eax,%ecx
f01213c5:	01 c9                	add    %ecx,%ecx
f01213c7:	01 c8                	add    %ecx,%eax
f01213c9:	39 c2                	cmp    %eax,%edx
f01213cb:	74 17                	je     f01213e4 <test_kfree+0xde0>
f01213cd:	83 ec 04             	sub    $0x4,%esp
f01213d0:	68 20 bd 13 f0       	push   $0xf013bd20
f01213d5:	68 5e 05 00 00       	push   $0x55e
f01213da:	68 3a b5 13 f0       	push   $0xf013b53a
f01213df:	e8 21 ee fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f01213e4:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f01213ea:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01213ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01213f4:	eb 1e                	jmp    f0121414 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f01213f6:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01213fc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01213ff:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121402:	01 c8                	add    %ecx,%eax
f0121404:	8a 00                	mov    (%eax),%al
f0121406:	0f be c0             	movsbl %al,%eax
f0121409:	01 d0                	add    %edx,%eax
f012140b:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121411:	ff 45 f4             	incl   -0xc(%ebp)
f0121414:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012141a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012141d:	7f d7                	jg     f01213f6 <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012141f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0121425:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f012142b:	c1 e2 02             	shl    $0x2,%edx
f012142e:	39 d0                	cmp    %edx,%eax
f0121430:	74 17                	je     f0121449 <test_kfree+0xe45>
f0121432:	83 ec 04             	sub    $0x4,%esp
f0121435:	68 20 bd 13 f0       	push   $0xf013bd20
f012143a:	68 66 05 00 00       	push   $0x566
f012143f:	68 3a b5 13 f0       	push   $0xf013b53a
f0121444:	e8 bc ed fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0121449:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f012144f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121452:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121459:	eb 1e                	jmp    f0121479 <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f012145b:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f0121461:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0121464:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121467:	01 c8                	add    %ecx,%eax
f0121469:	8a 00                	mov    (%eax),%al
f012146b:	0f be c0             	movsbl %al,%eax
f012146e:	01 d0                	add    %edx,%eax
f0121470:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121476:	ff 45 f4             	incl   -0xc(%ebp)
f0121479:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012147f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121482:	7f d7                	jg     f012145b <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0121484:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012148a:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f0121490:	89 d0                	mov    %edx,%eax
f0121492:	c1 e0 02             	shl    $0x2,%eax
f0121495:	01 d0                	add    %edx,%eax
f0121497:	39 c1                	cmp    %eax,%ecx
f0121499:	74 17                	je     f01214b2 <test_kfree+0xeae>
f012149b:	83 ec 04             	sub    $0x4,%esp
f012149e:	68 20 bd 13 f0       	push   $0xf013bd20
f01214a3:	68 6e 05 00 00       	push   $0x56e
f01214a8:	68 3a b5 13 f0       	push   $0xf013b53a
f01214ad:	e8 53 ed fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01214b2:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f01214b8:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01214bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01214c2:	eb 1e                	jmp    f01214e2 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f01214c4:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f01214ca:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01214cd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01214d0:	01 c8                	add    %ecx,%eax
f01214d2:	8a 00                	mov    (%eax),%al
f01214d4:	0f be c0             	movsbl %al,%eax
f01214d7:	01 d0                	add    %edx,%eax
f01214d9:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01214df:	ff 45 f4             	incl   -0xc(%ebp)
f01214e2:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f01214e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01214eb:	7f d7                	jg     f01214c4 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01214ed:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f01214f3:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f01214f9:	89 d0                	mov    %edx,%eax
f01214fb:	01 c0                	add    %eax,%eax
f01214fd:	01 d0                	add    %edx,%eax
f01214ff:	01 c0                	add    %eax,%eax
f0121501:	01 d0                	add    %edx,%eax
f0121503:	39 c1                	cmp    %eax,%ecx
f0121505:	74 17                	je     f012151e <test_kfree+0xf1a>
f0121507:	83 ec 04             	sub    $0x4,%esp
f012150a:	68 20 bd 13 f0       	push   $0xf013bd20
f012150f:	68 76 05 00 00       	push   $0x576
f0121514:	68 3a b5 13 f0       	push   $0xf013b53a
f0121519:	e8 e7 ec fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f012151e:	83 ec 0c             	sub    $0xc,%esp
f0121521:	68 53 bd 13 f0       	push   $0xf013bd53
f0121526:	e8 e3 f7 fd ff       	call   f0100d0e <cprintf>
f012152b:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012152e:	e8 7e bc fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121533:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121536:	e8 74 28 fe ff       	call   f0103daf <pf_calculate_free_frames>
f012153b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012153e:	83 ec 0c             	sub    $0xc,%esp
f0121541:	68 00 50 00 00       	push   $0x5000
f0121546:	e8 19 66 fe ff       	call   f0107b64 <kmalloc>
f012154b:	83 c4 10             	add    $0x10,%esp
f012154e:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121554:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f012155a:	89 c1                	mov    %eax,%ecx
f012155c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0121563:	10 00 00 
f0121566:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012156c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121571:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0121577:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012157d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121582:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0121588:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012158e:	29 d0                	sub    %edx,%eax
f0121590:	89 c3                	mov    %eax,%ebx
f0121592:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0121599:	10 00 00 
f012159c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01215a1:	0f b6 d0             	movzbl %al,%edx
f01215a4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01215aa:	01 d0                	add    %edx,%eax
f01215ac:	48                   	dec    %eax
f01215ad:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01215b3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01215b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01215be:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01215c4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01215ca:	29 d0                	sub    %edx,%eax
f01215cc:	01 c3                	add    %eax,%ebx
f01215ce:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01215d5:	10 00 00 
f01215d8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01215dd:	0f b6 c0             	movzbl %al,%eax
f01215e0:	c1 e0 04             	shl    $0x4,%eax
f01215e3:	89 c2                	mov    %eax,%edx
f01215e5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01215eb:	01 d0                	add    %edx,%eax
f01215ed:	48                   	dec    %eax
f01215ee:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01215f4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01215fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01215ff:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0121605:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012160b:	29 d0                	sub    %edx,%eax
f012160d:	01 d8                	add    %ebx,%eax
f012160f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0121614:	39 c1                	cmp    %eax,%ecx
f0121616:	74 17                	je     f012162f <test_kfree+0x102b>
f0121618:	83 ec 04             	sub    $0x4,%esp
f012161b:	68 20 b6 13 f0       	push   $0xf013b620
f0121620:	68 80 05 00 00       	push   $0x580
f0121625:	68 3a b5 13 f0       	push   $0xf013b53a
f012162a:	e8 d6 eb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012162f:	e8 7b 27 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121634:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121637:	74 17                	je     f0121650 <test_kfree+0x104c>
f0121639:	83 ec 04             	sub    $0x4,%esp
f012163c:	68 54 b5 13 f0       	push   $0xf013b554
f0121641:	68 81 05 00 00       	push   $0x581
f0121646:	68 3a b5 13 f0       	push   $0xf013b53a
f012164b:	e8 b5 eb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121650:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121653:	e8 59 bb fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121658:	29 c3                	sub    %eax,%ebx
f012165a:	89 d8                	mov    %ebx,%eax
f012165c:	83 f8 05             	cmp    $0x5,%eax
f012165f:	74 17                	je     f0121678 <test_kfree+0x1074>
f0121661:	83 ec 04             	sub    $0x4,%esp
f0121664:	68 bc b5 13 f0       	push   $0xf013b5bc
f0121669:	68 82 05 00 00       	push   $0x582
f012166e:	68 3a b5 13 f0       	push   $0xf013b53a
f0121673:	e8 8d eb fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0121678:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f012167f:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0121682:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121688:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012168b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121692:	eb 0e                	jmp    f01216a2 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f0121694:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121697:	8b 45 80             	mov    -0x80(%ebp),%eax
f012169a:	01 d0                	add    %edx,%eax
f012169c:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012169f:	ff 45 f4             	incl   -0xc(%ebp)
f01216a2:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01216a8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01216ab:	7f e7                	jg     f0121694 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01216ad:	e8 ff ba fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01216b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01216b5:	e8 f5 26 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01216ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01216bd:	83 ec 0c             	sub    $0xc,%esp
f01216c0:	68 00 00 10 00       	push   $0x100000
f01216c5:	e8 9a 64 fe ff       	call   f0107b64 <kmalloc>
f01216ca:	83 c4 10             	add    $0x10,%esp
f01216cd:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216d3:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01216d9:	89 c1                	mov    %eax,%ecx
f01216db:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f01216e2:	10 00 00 
f01216e5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01216eb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01216f0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f01216f6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01216fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0121701:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0121707:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012170d:	29 d0                	sub    %edx,%eax
f012170f:	89 c3                	mov    %eax,%ebx
f0121711:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0121718:	10 00 00 
f012171b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121720:	0f b6 d0             	movzbl %al,%edx
f0121723:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0121729:	01 d0                	add    %edx,%eax
f012172b:	48                   	dec    %eax
f012172c:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0121732:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121738:	ba 00 00 00 00       	mov    $0x0,%edx
f012173d:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0121743:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0121749:	29 d0                	sub    %edx,%eax
f012174b:	01 c3                	add    %eax,%ebx
f012174d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0121754:	10 00 00 
f0121757:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012175c:	0f b6 c0             	movzbl %al,%eax
f012175f:	c1 e0 04             	shl    $0x4,%eax
f0121762:	89 c2                	mov    %eax,%edx
f0121764:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012176a:	01 d0                	add    %edx,%eax
f012176c:	48                   	dec    %eax
f012176d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0121773:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0121779:	ba 00 00 00 00       	mov    $0x0,%edx
f012177e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0121784:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012178a:	29 d0                	sub    %edx,%eax
f012178c:	01 d8                	add    %ebx,%eax
f012178e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0121793:	39 c1                	cmp    %eax,%ecx
f0121795:	74 17                	je     f01217ae <test_kfree+0x11aa>
f0121797:	83 ec 04             	sub    $0x4,%esp
f012179a:	68 20 b6 13 f0       	push   $0xf013b620
f012179f:	68 8e 05 00 00       	push   $0x58e
f01217a4:	68 3a b5 13 f0       	push   $0xf013b53a
f01217a9:	e8 57 ea fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01217ae:	e8 fc 25 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01217b3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01217b6:	74 17                	je     f01217cf <test_kfree+0x11cb>
f01217b8:	83 ec 04             	sub    $0x4,%esp
f01217bb:	68 54 b5 13 f0       	push   $0xf013b554
f01217c0:	68 8f 05 00 00       	push   $0x58f
f01217c5:	68 3a b5 13 f0       	push   $0xf013b53a
f01217ca:	e8 36 ea fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01217cf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01217d2:	e8 da b9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01217d7:	29 c3                	sub    %eax,%ebx
f01217d9:	89 d8                	mov    %ebx,%eax
f01217db:	3d 00 01 00 00       	cmp    $0x100,%eax
f01217e0:	74 17                	je     f01217f9 <test_kfree+0x11f5>
f01217e2:	83 ec 04             	sub    $0x4,%esp
f01217e5:	68 bc b5 13 f0       	push   $0xf013b5bc
f01217ea:	68 90 05 00 00       	push   $0x590
f01217ef:	68 3a b5 13 f0       	push   $0xf013b53a
f01217f4:	e8 0c ea fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01217f9:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0121800:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0121803:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0121809:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012180c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121813:	eb 0e                	jmp    f0121823 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f0121815:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121818:	8b 45 80             	mov    -0x80(%ebp),%eax
f012181b:	01 d0                	add    %edx,%eax
f012181d:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0121820:	ff 45 f4             	incl   -0xc(%ebp)
f0121823:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f0121829:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012182c:	7f e7                	jg     f0121815 <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f012182e:	e8 ac 66 ff ff       	call   f0117edf <isKHeapPlacementStrategyNEXTFIT>
f0121833:	84 c0                	test   %al,%al
f0121835:	0f 84 ac 06 00 00    	je     f0121ee7 <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f012183b:	e8 71 b9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121840:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121843:	e8 67 25 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121848:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f012184b:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0121852:	10 00 00 
f0121855:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012185b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121860:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0121866:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012186c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121871:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0121877:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012187d:	29 d0                	sub    %edx,%eax
f012187f:	89 c1                	mov    %eax,%ecx
f0121881:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0121888:	10 00 00 
f012188b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121890:	0f b6 d0             	movzbl %al,%edx
f0121893:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0121899:	01 d0                	add    %edx,%eax
f012189b:	48                   	dec    %eax
f012189c:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01218a2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01218a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01218ad:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01218b3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01218b9:	29 d0                	sub    %edx,%eax
f01218bb:	01 c1                	add    %eax,%ecx
f01218bd:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01218c4:	10 00 00 
f01218c7:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01218cc:	0f b6 c0             	movzbl %al,%eax
f01218cf:	c1 e0 04             	shl    $0x4,%eax
f01218d2:	89 c2                	mov    %eax,%edx
f01218d4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01218da:	01 d0                	add    %edx,%eax
f01218dc:	48                   	dec    %eax
f01218dd:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f01218e3:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01218e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01218ee:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01218f4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01218fa:	29 d0                	sub    %edx,%eax
f01218fc:	01 c8                	add    %ecx,%eax
f01218fe:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0121903:	29 c2                	sub    %eax,%edx
f0121905:	89 d0                	mov    %edx,%eax
f0121907:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f012190d:	83 ec 0c             	sub    $0xc,%esp
f0121910:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f0121916:	e8 49 62 fe ff       	call   f0107b64 <kmalloc>
f012191b:	83 c4 10             	add    $0x10,%esp
f012191e:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121924:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012192a:	89 c1                	mov    %eax,%ecx
f012192c:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0121933:	10 00 00 
f0121936:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012193c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121941:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0121947:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012194d:	ba 00 00 00 00       	mov    $0x0,%edx
f0121952:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0121958:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012195e:	29 d0                	sub    %edx,%eax
f0121960:	89 c3                	mov    %eax,%ebx
f0121962:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0121969:	10 00 00 
f012196c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121971:	0f b6 d0             	movzbl %al,%edx
f0121974:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012197a:	01 d0                	add    %edx,%eax
f012197c:	48                   	dec    %eax
f012197d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0121983:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0121989:	ba 00 00 00 00       	mov    $0x0,%edx
f012198e:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0121994:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012199a:	29 d0                	sub    %edx,%eax
f012199c:	01 c3                	add    %eax,%ebx
f012199e:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01219a5:	10 00 00 
f01219a8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01219ad:	0f b6 c0             	movzbl %al,%eax
f01219b0:	c1 e0 04             	shl    $0x4,%eax
f01219b3:	89 c2                	mov    %eax,%edx
f01219b5:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01219bb:	01 d0                	add    %edx,%eax
f01219bd:	48                   	dec    %eax
f01219be:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f01219c4:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01219ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01219cf:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f01219d5:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f01219db:	29 d0                	sub    %edx,%eax
f01219dd:	01 d8                	add    %ebx,%eax
f01219df:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f01219e4:	39 c1                	cmp    %eax,%ecx
f01219e6:	74 17                	je     f01219ff <test_kfree+0x13fb>
f01219e8:	83 ec 04             	sub    $0x4,%esp
f01219eb:	68 20 b6 13 f0       	push   $0xf013b620
f01219f0:	68 9f 05 00 00       	push   $0x59f
f01219f5:	68 3a b5 13 f0       	push   $0xf013b53a
f01219fa:	e8 06 e8 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01219ff:	e8 ab 23 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121a04:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a07:	74 17                	je     f0121a20 <test_kfree+0x141c>
f0121a09:	83 ec 04             	sub    $0x4,%esp
f0121a0c:	68 54 b5 13 f0       	push   $0xf013b554
f0121a11:	68 a0 05 00 00       	push   $0x5a0
f0121a16:	68 3a b5 13 f0       	push   $0xf013b53a
f0121a1b:	e8 e5 e7 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a20:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a23:	e8 89 b7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121a28:	29 c3                	sub    %eax,%ebx
f0121a2a:	89 da                	mov    %ebx,%edx
f0121a2c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121a32:	c1 e8 0c             	shr    $0xc,%eax
f0121a35:	39 c2                	cmp    %eax,%edx
f0121a37:	74 17                	je     f0121a50 <test_kfree+0x144c>
f0121a39:	83 ec 04             	sub    $0x4,%esp
f0121a3c:	68 bc b5 13 f0       	push   $0xf013b5bc
f0121a41:	68 a1 05 00 00       	push   $0x5a1
f0121a46:	68 3a b5 13 f0       	push   $0xf013b53a
f0121a4b:	e8 b5 e7 fd ff       	call   f0100205 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f0121a50:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0121a56:	48                   	dec    %eax
f0121a57:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f0121a5d:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0121a63:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f0121a66:	e8 46 b7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121a6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121a6e:	e8 3c 23 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121a73:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f0121a76:	83 ec 0c             	sub    $0xc,%esp
f0121a79:	68 00 00 30 00       	push   $0x300000
f0121a7e:	e8 e1 60 fe ff       	call   f0107b64 <kmalloc>
f0121a83:	83 c4 10             	add    $0x10,%esp
f0121a86:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121a8c:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121a92:	89 c1                	mov    %eax,%ecx
f0121a94:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0121a9b:	10 00 00 
f0121a9e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0121aa4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121aa9:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0121aaf:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121ab5:	ba 00 00 00 00       	mov    $0x0,%edx
f0121aba:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0121ac0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0121ac6:	29 d0                	sub    %edx,%eax
f0121ac8:	89 c3                	mov    %eax,%ebx
f0121aca:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0121ad1:	10 00 00 
f0121ad4:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121ad9:	0f b6 d0             	movzbl %al,%edx
f0121adc:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0121ae2:	01 d0                	add    %edx,%eax
f0121ae4:	48                   	dec    %eax
f0121ae5:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0121aeb:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121af1:	ba 00 00 00 00       	mov    $0x0,%edx
f0121af6:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0121afc:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0121b02:	29 d0                	sub    %edx,%eax
f0121b04:	01 c3                	add    %eax,%ebx
f0121b06:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0121b0d:	10 00 00 
f0121b10:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121b15:	0f b6 c0             	movzbl %al,%eax
f0121b18:	c1 e0 04             	shl    $0x4,%eax
f0121b1b:	89 c2                	mov    %eax,%edx
f0121b1d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0121b23:	01 d0                	add    %edx,%eax
f0121b25:	48                   	dec    %eax
f0121b26:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0121b2c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b32:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b37:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0121b3d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121b43:	29 d0                	sub    %edx,%eax
f0121b45:	01 d8                	add    %ebx,%eax
f0121b47:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0121b4c:	39 c1                	cmp    %eax,%ecx
f0121b4e:	74 17                	je     f0121b67 <test_kfree+0x1563>
f0121b50:	83 ec 04             	sub    $0x4,%esp
f0121b53:	68 20 b6 13 f0       	push   $0xf013b620
f0121b58:	68 ae 05 00 00       	push   $0x5ae
f0121b5d:	68 3a b5 13 f0       	push   $0xf013b53a
f0121b62:	e8 9e e6 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121b67:	e8 43 22 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121b6c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121b6f:	74 17                	je     f0121b88 <test_kfree+0x1584>
f0121b71:	83 ec 04             	sub    $0x4,%esp
f0121b74:	68 54 b5 13 f0       	push   $0xf013b554
f0121b79:	68 af 05 00 00       	push   $0x5af
f0121b7e:	68 3a b5 13 f0       	push   $0xf013b53a
f0121b83:	e8 7d e6 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121b88:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121b8b:	e8 21 b6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121b90:	29 c3                	sub    %eax,%ebx
f0121b92:	89 d8                	mov    %ebx,%eax
f0121b94:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121b99:	74 17                	je     f0121bb2 <test_kfree+0x15ae>
f0121b9b:	83 ec 04             	sub    $0x4,%esp
f0121b9e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0121ba3:	68 b0 05 00 00       	push   $0x5b0
f0121ba8:	68 3a b5 13 f0       	push   $0xf013b53a
f0121bad:	e8 53 e6 fd ff       	call   f0100205 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0121bb2:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f0121bb9:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0121bbc:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0121bc2:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f0121bc5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121bcc:	eb 0e                	jmp    f0121bdc <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0121bce:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121bd1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121bd4:	01 d0                	add    %edx,%eax
f0121bd6:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f0121bd9:	ff 45 f4             	incl   -0xc(%ebp)
f0121bdc:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0121be2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121be5:	7f e7                	jg     f0121bce <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f0121be7:	e8 c5 b5 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121bec:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121bef:	e8 bb 21 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121bf4:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f0121bf7:	83 ec 0c             	sub    $0xc,%esp
f0121bfa:	68 00 08 00 00       	push   $0x800
f0121bff:	e8 60 5f fe ff       	call   f0107b64 <kmalloc>
f0121c04:	83 c4 10             	add    $0x10,%esp
f0121c07:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c0d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121c13:	89 c1                	mov    %eax,%ecx
f0121c15:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0121c1c:	10 00 00 
f0121c1f:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0121c25:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c2a:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0121c30:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c36:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c3b:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0121c41:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c47:	29 d0                	sub    %edx,%eax
f0121c49:	89 c3                	mov    %eax,%ebx
f0121c4b:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0121c52:	10 00 00 
f0121c55:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121c5a:	0f b6 d0             	movzbl %al,%edx
f0121c5d:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121c63:	01 d0                	add    %edx,%eax
f0121c65:	48                   	dec    %eax
f0121c66:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0121c6c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121c72:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c77:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0121c7d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0121c83:	29 d0                	sub    %edx,%eax
f0121c85:	01 c3                	add    %eax,%ebx
f0121c87:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0121c8e:	10 00 00 
f0121c91:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121c96:	0f b6 c0             	movzbl %al,%eax
f0121c99:	c1 e0 04             	shl    $0x4,%eax
f0121c9c:	89 c2                	mov    %eax,%edx
f0121c9e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0121ca4:	01 d0                	add    %edx,%eax
f0121ca6:	48                   	dec    %eax
f0121ca7:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0121cad:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121cb3:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cb8:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0121cbe:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0121cc4:	29 d0                	sub    %edx,%eax
f0121cc6:	01 d8                	add    %ebx,%eax
f0121cc8:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0121ccd:	39 c1                	cmp    %eax,%ecx
f0121ccf:	74 17                	je     f0121ce8 <test_kfree+0x16e4>
f0121cd1:	83 ec 04             	sub    $0x4,%esp
f0121cd4:	68 20 b6 13 f0       	push   $0xf013b620
f0121cd9:	68 bc 05 00 00       	push   $0x5bc
f0121cde:	68 3a b5 13 f0       	push   $0xf013b53a
f0121ce3:	e8 1d e5 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ce8:	e8 c2 20 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121ced:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121cf0:	74 17                	je     f0121d09 <test_kfree+0x1705>
f0121cf2:	83 ec 04             	sub    $0x4,%esp
f0121cf5:	68 54 b5 13 f0       	push   $0xf013b554
f0121cfa:	68 bd 05 00 00       	push   $0x5bd
f0121cff:	68 3a b5 13 f0       	push   $0xf013b53a
f0121d04:	e8 fc e4 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d09:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d0c:	e8 a0 b4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121d11:	29 c3                	sub    %eax,%ebx
f0121d13:	89 d8                	mov    %ebx,%eax
f0121d15:	83 f8 01             	cmp    $0x1,%eax
f0121d18:	74 17                	je     f0121d31 <test_kfree+0x172d>
f0121d1a:	83 ec 04             	sub    $0x4,%esp
f0121d1d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0121d22:	68 be 05 00 00       	push   $0x5be
f0121d27:	68 3a b5 13 f0       	push   $0xf013b53a
f0121d2c:	e8 d4 e4 fd ff       	call   f0100205 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0121d31:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f0121d38:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0121d3b:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0121d41:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0121d44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121d4b:	eb 0e                	jmp    f0121d5b <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f0121d4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d50:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121d53:	01 d0                	add    %edx,%eax
f0121d55:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f0121d58:	ff 45 f4             	incl   -0xc(%ebp)
f0121d5b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0121d61:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121d64:	7f e7                	jg     f0121d4d <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f0121d66:	e8 46 b4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121d6b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121d6e:	e8 3c 20 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121d73:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f0121d76:	83 ec 0c             	sub    $0xc,%esp
f0121d79:	68 00 00 10 00       	push   $0x100000
f0121d7e:	e8 e1 5d fe ff       	call   f0107b64 <kmalloc>
f0121d83:	83 c4 10             	add    $0x10,%esp
f0121d86:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121d8c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121d92:	89 c1                	mov    %eax,%ecx
f0121d94:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f0121d9b:	10 00 00 
f0121d9e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0121da4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121da9:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0121daf:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121db5:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dba:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0121dc0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0121dc6:	29 d0                	sub    %edx,%eax
f0121dc8:	89 c3                	mov    %eax,%ebx
f0121dca:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0121dd1:	10 00 00 
f0121dd4:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121dd9:	0f b6 d0             	movzbl %al,%edx
f0121ddc:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0121de2:	01 d0                	add    %edx,%eax
f0121de4:	48                   	dec    %eax
f0121de5:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0121deb:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121df1:	ba 00 00 00 00       	mov    $0x0,%edx
f0121df6:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0121dfc:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0121e02:	29 d0                	sub    %edx,%eax
f0121e04:	01 c3                	add    %eax,%ebx
f0121e06:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0121e0d:	10 00 00 
f0121e10:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0121e15:	0f b6 c0             	movzbl %al,%eax
f0121e18:	c1 e0 04             	shl    $0x4,%eax
f0121e1b:	89 c2                	mov    %eax,%edx
f0121e1d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0121e23:	01 d0                	add    %edx,%eax
f0121e25:	48                   	dec    %eax
f0121e26:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0121e2c:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121e32:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e37:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0121e3d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0121e43:	29 d0                	sub    %edx,%eax
f0121e45:	01 d8                	add    %ebx,%eax
f0121e47:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0121e4c:	39 c1                	cmp    %eax,%ecx
f0121e4e:	74 17                	je     f0121e67 <test_kfree+0x1863>
f0121e50:	83 ec 04             	sub    $0x4,%esp
f0121e53:	68 20 b6 13 f0       	push   $0xf013b620
f0121e58:	68 ca 05 00 00       	push   $0x5ca
f0121e5d:	68 3a b5 13 f0       	push   $0xf013b53a
f0121e62:	e8 9e e3 fd ff       	call   f0100205 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121e67:	e8 43 1f fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121e6c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121e6f:	74 17                	je     f0121e88 <test_kfree+0x1884>
f0121e71:	83 ec 04             	sub    $0x4,%esp
f0121e74:	68 54 b5 13 f0       	push   $0xf013b554
f0121e79:	68 cb 05 00 00       	push   $0x5cb
f0121e7e:	68 3a b5 13 f0       	push   $0xf013b53a
f0121e83:	e8 7d e3 fd ff       	call   f0100205 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121e88:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121e8b:	e8 21 b3 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121e90:	29 c3                	sub    %eax,%ebx
f0121e92:	89 d8                	mov    %ebx,%eax
f0121e94:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121e99:	74 17                	je     f0121eb2 <test_kfree+0x18ae>
f0121e9b:	83 ec 04             	sub    $0x4,%esp
f0121e9e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0121ea3:	68 cc 05 00 00       	push   $0x5cc
f0121ea8:	68 3a b5 13 f0       	push   $0xf013b53a
f0121ead:	e8 53 e3 fd ff       	call   f0100205 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0121eb2:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0121eb9:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0121ebc:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121ec2:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0121ec5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ecc:	eb 0e                	jmp    f0121edc <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0121ece:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ed1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ed4:	01 d0                	add    %edx,%eax
f0121ed6:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0121ed9:	ff 45 f4             	incl   -0xc(%ebp)
f0121edc:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0121ee2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ee5:	7f e7                	jg     f0121ece <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0121ee7:	83 ec 0c             	sub    $0xc,%esp
f0121eea:	68 5a bd 13 f0       	push   $0xf013bd5a
f0121eef:	e8 1a ee fd ff       	call   f0100d0e <cprintf>
f0121ef4:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121ef7:	e8 b5 b2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121efc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121eff:	e8 ab 1e fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121f04:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0121f07:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0121f0d:	83 ec 0c             	sub    $0xc,%esp
f0121f10:	50                   	push   %eax
f0121f11:	e8 56 5d fe ff       	call   f0107c6c <kfree>
f0121f16:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f19:	e8 91 1e fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121f1e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f21:	74 17                	je     f0121f3a <test_kfree+0x1936>
f0121f23:	83 ec 04             	sub    $0x4,%esp
f0121f26:	68 54 b5 13 f0       	push   $0xf013b554
f0121f2b:	68 dd 05 00 00       	push   $0x5dd
f0121f30:	68 3a b5 13 f0       	push   $0xf013b53a
f0121f35:	e8 cb e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f3a:	e8 72 b2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121f3f:	89 c2                	mov    %eax,%edx
f0121f41:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121f44:	29 c2                	sub    %eax,%edx
f0121f46:	89 d0                	mov    %edx,%eax
f0121f48:	83 f8 02             	cmp    $0x2,%eax
f0121f4b:	74 17                	je     f0121f64 <test_kfree+0x1960>
f0121f4d:	83 ec 04             	sub    $0x4,%esp
f0121f50:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121f55:	68 de 05 00 00       	push   $0x5de
f0121f5a:	68 3a b5 13 f0       	push   $0xf013b53a
f0121f5f:	e8 a1 e2 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121f64:	e8 48 b2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121f69:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121f6c:	e8 3e 1e fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121f71:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0121f74:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0121f7a:	83 ec 0c             	sub    $0xc,%esp
f0121f7d:	50                   	push   %eax
f0121f7e:	e8 e9 5c fe ff       	call   f0107c6c <kfree>
f0121f83:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f86:	e8 24 1e fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121f8b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121f8e:	74 17                	je     f0121fa7 <test_kfree+0x19a3>
f0121f90:	83 ec 04             	sub    $0x4,%esp
f0121f93:	68 54 b5 13 f0       	push   $0xf013b554
f0121f98:	68 e4 05 00 00       	push   $0x5e4
f0121f9d:	68 3a b5 13 f0       	push   $0xf013b53a
f0121fa2:	e8 5e e2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0121fa7:	e8 05 b2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121fac:	89 c2                	mov    %eax,%edx
f0121fae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121fb1:	29 c2                	sub    %eax,%edx
f0121fb3:	89 d0                	mov    %edx,%eax
f0121fb5:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121fba:	74 17                	je     f0121fd3 <test_kfree+0x19cf>
f0121fbc:	83 ec 04             	sub    $0x4,%esp
f0121fbf:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0121fc4:	68 e5 05 00 00       	push   $0x5e5
f0121fc9:	68 3a b5 13 f0       	push   $0xf013b53a
f0121fce:	e8 32 e2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121fd3:	e8 d9 b1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0121fd8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121fdb:	e8 cf 1d fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121fe0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0121fe3:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0121fe9:	83 ec 0c             	sub    $0xc,%esp
f0121fec:	50                   	push   %eax
f0121fed:	e8 7a 5c fe ff       	call   f0107c6c <kfree>
f0121ff2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121ff5:	e8 b5 1d fe ff       	call   f0103daf <pf_calculate_free_frames>
f0121ffa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121ffd:	74 17                	je     f0122016 <test_kfree+0x1a12>
f0121fff:	83 ec 04             	sub    $0x4,%esp
f0122002:	68 54 b5 13 f0       	push   $0xf013b554
f0122007:	68 eb 05 00 00       	push   $0x5eb
f012200c:	68 3a b5 13 f0       	push   $0xf013b53a
f0122011:	e8 ef e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122016:	e8 96 b1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012201b:	89 c2                	mov    %eax,%edx
f012201d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122020:	29 c2                	sub    %eax,%edx
f0122022:	89 d0                	mov    %edx,%eax
f0122024:	83 f8 01             	cmp    $0x1,%eax
f0122027:	74 17                	je     f0122040 <test_kfree+0x1a3c>
f0122029:	83 ec 04             	sub    $0x4,%esp
f012202c:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0122031:	68 ec 05 00 00       	push   $0x5ec
f0122036:	68 3a b5 13 f0       	push   $0xf013b53a
f012203b:	e8 c5 e1 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0122040:	e8 6c b1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122045:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122048:	e8 62 1d fe ff       	call   f0103daf <pf_calculate_free_frames>
f012204d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0122050:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0122056:	83 ec 0c             	sub    $0xc,%esp
f0122059:	50                   	push   %eax
f012205a:	e8 0d 5c fe ff       	call   f0107c6c <kfree>
f012205f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122062:	e8 48 1d fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122067:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012206a:	74 17                	je     f0122083 <test_kfree+0x1a7f>
f012206c:	83 ec 04             	sub    $0x4,%esp
f012206f:	68 54 b5 13 f0       	push   $0xf013b554
f0122074:	68 f2 05 00 00       	push   $0x5f2
f0122079:	68 3a b5 13 f0       	push   $0xf013b53a
f012207e:	e8 82 e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0122083:	e8 29 b1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122088:	89 c2                	mov    %eax,%edx
f012208a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012208d:	29 c2                	sub    %eax,%edx
f012208f:	89 d0                	mov    %edx,%eax
f0122091:	83 f8 04             	cmp    $0x4,%eax
f0122094:	74 17                	je     f01220ad <test_kfree+0x1aa9>
f0122096:	83 ec 04             	sub    $0x4,%esp
f0122099:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012209e:	68 f3 05 00 00       	push   $0x5f3
f01220a3:	68 3a b5 13 f0       	push   $0xf013b53a
f01220a8:	e8 58 e1 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01220ad:	e8 ff b0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01220b2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220b5:	e8 f5 1c fe ff       	call   f0103daf <pf_calculate_free_frames>
f01220ba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01220bd:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01220c3:	83 ec 0c             	sub    $0xc,%esp
f01220c6:	50                   	push   %eax
f01220c7:	e8 a0 5b fe ff       	call   f0107c6c <kfree>
f01220cc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220cf:	e8 db 1c fe ff       	call   f0103daf <pf_calculate_free_frames>
f01220d4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01220d7:	74 17                	je     f01220f0 <test_kfree+0x1aec>
f01220d9:	83 ec 04             	sub    $0x4,%esp
f01220dc:	68 54 b5 13 f0       	push   $0xf013b554
f01220e1:	68 f9 05 00 00       	push   $0x5f9
f01220e6:	68 3a b5 13 f0       	push   $0xf013b53a
f01220eb:	e8 15 e1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01220f0:	e8 bc b0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01220f5:	89 c2                	mov    %eax,%edx
f01220f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01220fa:	29 c2                	sub    %eax,%edx
f01220fc:	89 d0                	mov    %edx,%eax
f01220fe:	83 f8 05             	cmp    $0x5,%eax
f0122101:	74 17                	je     f012211a <test_kfree+0x1b16>
f0122103:	83 ec 04             	sub    $0x4,%esp
f0122106:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012210b:	68 fa 05 00 00       	push   $0x5fa
f0122110:	68 3a b5 13 f0       	push   $0xf013b53a
f0122115:	e8 eb e0 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012211a:	e8 92 b0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012211f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122122:	e8 88 1c fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122127:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012212a:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0122130:	83 ec 0c             	sub    $0xc,%esp
f0122133:	50                   	push   %eax
f0122134:	e8 33 5b fe ff       	call   f0107c6c <kfree>
f0122139:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012213c:	e8 6e 1c fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122141:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122144:	74 17                	je     f012215d <test_kfree+0x1b59>
f0122146:	83 ec 04             	sub    $0x4,%esp
f0122149:	68 54 b5 13 f0       	push   $0xf013b554
f012214e:	68 00 06 00 00       	push   $0x600
f0122153:	68 3a b5 13 f0       	push   $0xf013b53a
f0122158:	e8 a8 e0 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012215d:	e8 4f b0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122162:	89 c2                	mov    %eax,%edx
f0122164:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122167:	29 c2                	sub    %eax,%edx
f0122169:	89 d0                	mov    %edx,%eax
f012216b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122170:	74 17                	je     f0122189 <test_kfree+0x1b85>
f0122172:	83 ec 04             	sub    $0x4,%esp
f0122175:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012217a:	68 01 06 00 00       	push   $0x601
f012217f:	68 3a b5 13 f0       	push   $0xf013b53a
f0122184:	e8 7c e0 fd ff       	call   f0100205 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0122189:	e8 51 5d ff ff       	call   f0117edf <isKHeapPlacementStrategyNEXTFIT>
f012218e:	84 c0                	test   %al,%al
f0122190:	0f 84 80 02 00 00    	je     f0122416 <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0122196:	e8 16 b0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012219b:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f012219e:	e8 0c 1c fe ff       	call   f0103daf <pf_calculate_free_frames>
f01221a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f01221a6:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01221ac:	83 ec 0c             	sub    $0xc,%esp
f01221af:	50                   	push   %eax
f01221b0:	e8 b7 5a fe ff       	call   f0107c6c <kfree>
f01221b5:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01221b8:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f01221bf:	10 00 00 
f01221c2:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01221c8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01221cd:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f01221d3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01221d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01221de:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f01221e4:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01221ea:	29 d0                	sub    %edx,%eax
f01221ec:	89 c1                	mov    %eax,%ecx
f01221ee:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f01221f5:	10 00 00 
f01221f8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01221fd:	0f b6 d0             	movzbl %al,%edx
f0122200:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0122206:	01 d0                	add    %edx,%eax
f0122208:	48                   	dec    %eax
f0122209:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f012220f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122215:	ba 00 00 00 00       	mov    $0x0,%edx
f012221a:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0122220:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0122226:	29 d0                	sub    %edx,%eax
f0122228:	01 c1                	add    %eax,%ecx
f012222a:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0122231:	10 00 00 
f0122234:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122239:	0f b6 c0             	movzbl %al,%eax
f012223c:	c1 e0 04             	shl    $0x4,%eax
f012223f:	89 c2                	mov    %eax,%edx
f0122241:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0122247:	01 d0                	add    %edx,%eax
f0122249:	48                   	dec    %eax
f012224a:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0122250:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122256:	ba 00 00 00 00       	mov    $0x0,%edx
f012225b:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0122261:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0122267:	29 d0                	sub    %edx,%eax
f0122269:	01 c8                	add    %ecx,%eax
f012226b:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0122270:	29 c2                	sub    %eax,%edx
f0122272:	89 d0                	mov    %edx,%eax
f0122274:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012227a:	e8 30 1b fe ff       	call   f0103daf <pf_calculate_free_frames>
f012227f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122282:	74 17                	je     f012229b <test_kfree+0x1c97>
f0122284:	83 ec 04             	sub    $0x4,%esp
f0122287:	68 54 b5 13 f0       	push   $0xf013b554
f012228c:	68 0b 06 00 00       	push   $0x60b
f0122291:	68 3a b5 13 f0       	push   $0xf013b53a
f0122296:	e8 6a df fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f012229b:	e8 11 af fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01222a0:	89 c2                	mov    %eax,%edx
f01222a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01222a5:	29 c2                	sub    %eax,%edx
f01222a7:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01222ad:	c1 e8 0c             	shr    $0xc,%eax
f01222b0:	39 c2                	cmp    %eax,%edx
f01222b2:	74 17                	je     f01222cb <test_kfree+0x1cc7>
f01222b4:	83 ec 04             	sub    $0x4,%esp
f01222b7:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01222bc:	68 0c 06 00 00       	push   $0x60c
f01222c1:	68 3a b5 13 f0       	push   $0xf013b53a
f01222c6:	e8 3a df fd ff       	call   f0100205 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f01222cb:	e8 e1 ae fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01222d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01222d3:	e8 d7 1a fe ff       	call   f0103daf <pf_calculate_free_frames>
f01222d8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f01222db:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01222e1:	83 ec 0c             	sub    $0xc,%esp
f01222e4:	50                   	push   %eax
f01222e5:	e8 82 59 fe ff       	call   f0107c6c <kfree>
f01222ea:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01222ed:	e8 bd 1a fe ff       	call   f0103daf <pf_calculate_free_frames>
f01222f2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01222f5:	74 17                	je     f012230e <test_kfree+0x1d0a>
f01222f7:	83 ec 04             	sub    $0x4,%esp
f01222fa:	68 54 b5 13 f0       	push   $0xf013b554
f01222ff:	68 12 06 00 00       	push   $0x612
f0122304:	68 3a b5 13 f0       	push   $0xf013b53a
f0122309:	e8 f7 de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012230e:	e8 9e ae fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122313:	89 c2                	mov    %eax,%edx
f0122315:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122318:	29 c2                	sub    %eax,%edx
f012231a:	89 d0                	mov    %edx,%eax
f012231c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122321:	74 17                	je     f012233a <test_kfree+0x1d36>
f0122323:	83 ec 04             	sub    $0x4,%esp
f0122326:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012232b:	68 13 06 00 00       	push   $0x613
f0122330:	68 3a b5 13 f0       	push   $0xf013b53a
f0122335:	e8 cb de fd ff       	call   f0100205 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f012233a:	e8 72 ae fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012233f:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0122342:	e8 68 1a fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122347:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f012234a:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0122350:	83 ec 0c             	sub    $0xc,%esp
f0122353:	50                   	push   %eax
f0122354:	e8 13 59 fe ff       	call   f0107c6c <kfree>
f0122359:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012235c:	e8 4e 1a fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122361:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122364:	74 17                	je     f012237d <test_kfree+0x1d79>
f0122366:	83 ec 04             	sub    $0x4,%esp
f0122369:	68 54 b5 13 f0       	push   $0xf013b554
f012236e:	68 19 06 00 00       	push   $0x619
f0122373:	68 3a b5 13 f0       	push   $0xf013b53a
f0122378:	e8 88 de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f012237d:	e8 2f ae fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122382:	89 c2                	mov    %eax,%edx
f0122384:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122387:	29 c2                	sub    %eax,%edx
f0122389:	89 d0                	mov    %edx,%eax
f012238b:	83 f8 01             	cmp    $0x1,%eax
f012238e:	74 17                	je     f01223a7 <test_kfree+0x1da3>
f0122390:	83 ec 04             	sub    $0x4,%esp
f0122393:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0122398:	68 1a 06 00 00       	push   $0x61a
f012239d:	68 3a b5 13 f0       	push   $0xf013b53a
f01223a2:	e8 5e de fd ff       	call   f0100205 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f01223a7:	e8 05 ae fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01223ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01223af:	e8 fb 19 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01223b4:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f01223b7:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01223bd:	83 ec 0c             	sub    $0xc,%esp
f01223c0:	50                   	push   %eax
f01223c1:	e8 a6 58 fe ff       	call   f0107c6c <kfree>
f01223c6:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223c9:	e8 e1 19 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01223ce:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223d1:	74 17                	je     f01223ea <test_kfree+0x1de6>
f01223d3:	83 ec 04             	sub    $0x4,%esp
f01223d6:	68 54 b5 13 f0       	push   $0xf013b554
f01223db:	68 20 06 00 00       	push   $0x620
f01223e0:	68 3a b5 13 f0       	push   $0xf013b53a
f01223e5:	e8 1b de fd ff       	call   f0100205 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01223ea:	e8 c2 ad fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01223ef:	89 c2                	mov    %eax,%edx
f01223f1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01223f4:	29 c2                	sub    %eax,%edx
f01223f6:	89 d0                	mov    %edx,%eax
f01223f8:	3d 00 01 00 00       	cmp    $0x100,%eax
f01223fd:	74 17                	je     f0122416 <test_kfree+0x1e12>
f01223ff:	83 ec 04             	sub    $0x4,%esp
f0122402:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0122407:	68 21 06 00 00       	push   $0x621
f012240c:	68 3a b5 13 f0       	push   $0xf013b53a
f0122411:	e8 ef dd fd ff       	call   f0100205 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122416:	e8 96 ad fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012241b:	89 c2                	mov    %eax,%edx
f012241d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122420:	39 c2                	cmp    %eax,%edx
f0122422:	74 17                	je     f012243b <test_kfree+0x1e37>
f0122424:	83 ec 04             	sub    $0x4,%esp
f0122427:	68 64 bd 13 f0       	push   $0xf013bd64
f012242c:	68 24 06 00 00       	push   $0x624
f0122431:	68 3a b5 13 f0       	push   $0xf013b53a
f0122436:	e8 ca dd fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f012243b:	83 ec 0c             	sub    $0xc,%esp
f012243e:	68 98 bd 13 f0       	push   $0xf013bd98
f0122443:	e8 c6 e8 fd ff       	call   f0100d0e <cprintf>
f0122448:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012244b:	83 ec 0c             	sub    $0xc,%esp
f012244e:	6a 03                	push   $0x3
f0122450:	e8 fc b1 fe ff       	call   f010d651 <sys_bypassPageFault>
f0122455:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122458:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012245f:	e9 82 00 00 00       	jmp    f01224e6 <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f0122464:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122467:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f012246e:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0122471:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122474:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122477:	e8 c3 b1 fe ff       	call   f010d63f <sys_rcr2>
f012247c:	89 c2                	mov    %eax,%edx
f012247e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122481:	39 c2                	cmp    %eax,%edx
f0122483:	74 17                	je     f012249c <test_kfree+0x1e98>
f0122485:	83 ec 04             	sub    $0x4,%esp
f0122488:	68 a0 bd 13 f0       	push   $0xf013bda0
f012248d:	68 33 06 00 00       	push   $0x633
f0122492:	68 3a b5 13 f0       	push   $0xf013b53a
f0122497:	e8 69 dd fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012249c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012249f:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01224a6:	89 c2                	mov    %eax,%edx
f01224a8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224ab:	01 d0                	add    %edx,%eax
f01224ad:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01224b0:	e8 8a b1 fe ff       	call   f010d63f <sys_rcr2>
f01224b5:	89 c2                	mov    %eax,%edx
f01224b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01224ba:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01224c1:	89 c1                	mov    %eax,%ecx
f01224c3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01224c6:	01 c8                	add    %ecx,%eax
f01224c8:	39 c2                	cmp    %eax,%edx
f01224ca:	74 17                	je     f01224e3 <test_kfree+0x1edf>
f01224cc:	83 ec 04             	sub    $0x4,%esp
f01224cf:	68 a0 bd 13 f0       	push   $0xf013bda0
f01224d4:	68 35 06 00 00       	push   $0x635
f01224d9:	68 3a b5 13 f0       	push   $0xf013b53a
f01224de:	e8 22 dd fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01224e3:	ff 45 f4             	incl   -0xc(%ebp)
f01224e6:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01224ea:	0f 8e 74 ff ff ff    	jle    f0122464 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01224f0:	83 ec 0c             	sub    $0xc,%esp
f01224f3:	6a 00                	push   $0x0
f01224f5:	e8 57 b1 fe ff       	call   f010d651 <sys_bypassPageFault>
f01224fa:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01224fd:	83 ec 0c             	sub    $0xc,%esp
f0122500:	68 e5 bd 13 f0       	push   $0xf013bde5
f0122505:	e8 04 e8 fd ff       	call   f0100d0e <cprintf>
f012250a:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012250d:	e8 9f ac fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122512:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122515:	e8 95 18 fe ff       	call   f0103daf <pf_calculate_free_frames>
f012251a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f012251d:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0122523:	83 ec 0c             	sub    $0xc,%esp
f0122526:	50                   	push   %eax
f0122527:	e8 40 57 fe ff       	call   f0107c6c <kfree>
f012252c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012252f:	e8 7b 18 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122534:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122537:	74 17                	je     f0122550 <test_kfree+0x1f4c>
f0122539:	83 ec 04             	sub    $0x4,%esp
f012253c:	68 54 b5 13 f0       	push   $0xf013b554
f0122541:	68 43 06 00 00       	push   $0x643
f0122546:	68 3a b5 13 f0       	push   $0xf013b53a
f012254b:	e8 b5 dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122550:	e8 5c ac fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122555:	89 c2                	mov    %eax,%edx
f0122557:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012255a:	39 c2                	cmp    %eax,%edx
f012255c:	74 17                	je     f0122575 <test_kfree+0x1f71>
f012255e:	83 ec 04             	sub    $0x4,%esp
f0122561:	68 ec bd 13 f0       	push   $0xf013bdec
f0122566:	68 44 06 00 00       	push   $0x644
f012256b:	68 3a b5 13 f0       	push   $0xf013b53a
f0122570:	e8 90 dc fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122575:	e8 37 ac fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012257a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012257d:	e8 2d 18 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122582:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122585:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f012258b:	83 ec 0c             	sub    $0xc,%esp
f012258e:	50                   	push   %eax
f012258f:	e8 d8 56 fe ff       	call   f0107c6c <kfree>
f0122594:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122597:	e8 13 18 fe ff       	call   f0103daf <pf_calculate_free_frames>
f012259c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012259f:	74 17                	je     f01225b8 <test_kfree+0x1fb4>
f01225a1:	83 ec 04             	sub    $0x4,%esp
f01225a4:	68 54 b5 13 f0       	push   $0xf013b554
f01225a9:	68 4a 06 00 00       	push   $0x64a
f01225ae:	68 3a b5 13 f0       	push   $0xf013b53a
f01225b3:	e8 4d dc fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01225b8:	e8 f4 ab fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01225bd:	89 c2                	mov    %eax,%edx
f01225bf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01225c2:	39 c2                	cmp    %eax,%edx
f01225c4:	74 17                	je     f01225dd <test_kfree+0x1fd9>
f01225c6:	83 ec 04             	sub    $0x4,%esp
f01225c9:	68 ec bd 13 f0       	push   $0xf013bdec
f01225ce:	68 4b 06 00 00       	push   $0x64b
f01225d3:	68 3a b5 13 f0       	push   $0xf013b53a
f01225d8:	e8 28 dc fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01225dd:	e8 cf ab fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01225e2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225e5:	e8 c5 17 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01225ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01225ed:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01225f3:	83 ec 0c             	sub    $0xc,%esp
f01225f6:	50                   	push   %eax
f01225f7:	e8 70 56 fe ff       	call   f0107c6c <kfree>
f01225fc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01225ff:	e8 ab 17 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122604:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122607:	74 17                	je     f0122620 <test_kfree+0x201c>
f0122609:	83 ec 04             	sub    $0x4,%esp
f012260c:	68 54 b5 13 f0       	push   $0xf013b554
f0122611:	68 51 06 00 00       	push   $0x651
f0122616:	68 3a b5 13 f0       	push   $0xf013b53a
f012261b:	e8 e5 db fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122620:	e8 8c ab fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122625:	89 c2                	mov    %eax,%edx
f0122627:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012262a:	39 c2                	cmp    %eax,%edx
f012262c:	74 17                	je     f0122645 <test_kfree+0x2041>
f012262e:	83 ec 04             	sub    $0x4,%esp
f0122631:	68 ec bd 13 f0       	push   $0xf013bdec
f0122636:	68 52 06 00 00       	push   $0x652
f012263b:	68 3a b5 13 f0       	push   $0xf013b53a
f0122640:	e8 c0 db fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122645:	e8 67 ab fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012264a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012264d:	e8 5d 17 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122652:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122655:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012265b:	83 ec 0c             	sub    $0xc,%esp
f012265e:	50                   	push   %eax
f012265f:	e8 08 56 fe ff       	call   f0107c6c <kfree>
f0122664:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122667:	e8 43 17 fe ff       	call   f0103daf <pf_calculate_free_frames>
f012266c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012266f:	74 17                	je     f0122688 <test_kfree+0x2084>
f0122671:	83 ec 04             	sub    $0x4,%esp
f0122674:	68 54 b5 13 f0       	push   $0xf013b554
f0122679:	68 58 06 00 00       	push   $0x658
f012267e:	68 3a b5 13 f0       	push   $0xf013b53a
f0122683:	e8 7d db fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122688:	e8 24 ab fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012268d:	89 c2                	mov    %eax,%edx
f012268f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122692:	39 c2                	cmp    %eax,%edx
f0122694:	74 17                	je     f01226ad <test_kfree+0x20a9>
f0122696:	83 ec 04             	sub    $0x4,%esp
f0122699:	68 ec bd 13 f0       	push   $0xf013bdec
f012269e:	68 59 06 00 00       	push   $0x659
f01226a3:	68 3a b5 13 f0       	push   $0xf013b53a
f01226a8:	e8 58 db fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f01226ad:	83 ec 0c             	sub    $0xc,%esp
f01226b0:	68 33 be 13 f0       	push   $0xf013be33
f01226b5:	e8 54 e6 fd ff       	call   f0100d0e <cprintf>
f01226ba:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01226bd:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01226c4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01226cb:	eb 48                	jmp    f0122715 <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01226cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01226d0:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01226d5:	83 ec 04             	sub    $0x4,%esp
f01226d8:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f01226de:	51                   	push   %ecx
f01226df:	52                   	push   %edx
f01226e0:	50                   	push   %eax
f01226e1:	e8 b2 43 fe ff       	call   f0106a98 <get_page_table>
f01226e6:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01226e9:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01226ef:	85 c0                	test   %eax,%eax
f01226f1:	75 17                	jne    f012270a <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01226f3:	83 ec 04             	sub    $0x4,%esp
f01226f6:	68 3c be 13 f0       	push   $0xf013be3c
f01226fb:	68 67 06 00 00       	push   $0x667
f0122700:	68 3a b5 13 f0       	push   $0xf013b53a
f0122705:	e8 fb da fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012270a:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122711:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122715:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122719:	78 b2                	js     f01226cd <test_kfree+0x20c9>
f012271b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012271f:	7f 09                	jg     f012272a <test_kfree+0x2126>
f0122721:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122728:	76 a3                	jbe    f01226cd <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012272a:	83 ec 0c             	sub    $0xc,%esp
f012272d:	68 1e b7 13 f0       	push   $0xf013b71e
f0122732:	e8 d7 e5 fd ff       	call   f0100d0e <cprintf>
f0122737:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012273a:	83 ec 0c             	sub    $0xc,%esp
f012273d:	68 a4 be 13 f0       	push   $0xf013bea4
f0122742:	e8 c7 e5 fd ff       	call   f0100d0e <cprintf>
f0122747:	83 c4 10             	add    $0x10,%esp

	return 1;
f012274a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012274f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122752:	5b                   	pop    %ebx
f0122753:	5f                   	pop    %edi
f0122754:	5d                   	pop    %ebp
f0122755:	c3                   	ret    

f0122756 <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f0122756:	55                   	push   %ebp
f0122757:	89 e5                	mov    %esp,%ebp
f0122759:	57                   	push   %edi
f012275a:	53                   	push   %ebx
f012275b:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f0122761:	83 ec 0c             	sub    $0xc,%esp
f0122764:	68 7c b4 13 f0       	push   $0xf013b47c
f0122769:	e8 a0 e5 fd ff       	call   f0100d0e <cprintf>
f012276e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122771:	83 ec 0c             	sub    $0xc,%esp
f0122774:	68 ac b4 13 f0       	push   $0xf013b4ac
f0122779:	e8 90 e5 fd ff       	call   f0100d0e <cprintf>
f012277e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122781:	83 ec 0c             	sub    $0xc,%esp
f0122784:	68 7c b4 13 f0       	push   $0xf013b47c
f0122789:	e8 80 e5 fd ff       	call   f0100d0e <cprintf>
f012278e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122791:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0122795:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0122799:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f012279f:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01227a5:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01227ac:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01227b3:	e8 f9 a9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01227b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01227bb:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01227c1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01227c6:	b8 00 00 00 00       	mov    $0x0,%eax
f01227cb:	89 d7                	mov    %edx,%edi
f01227cd:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01227cf:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01227d5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01227da:	b8 00 00 00 00       	mov    $0x0,%eax
f01227df:	89 d7                	mov    %edx,%edi
f01227e1:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01227e3:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01227e9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01227ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01227f3:	89 d7                	mov    %edx,%edi
f01227f5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01227f7:	e8 b5 a9 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01227fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227ff:	e8 ab 15 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122804:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122807:	83 ec 0c             	sub    $0xc,%esp
f012280a:	68 00 fc 1f 00       	push   $0x1ffc00
f012280f:	e8 50 53 fe ff       	call   f0107b64 <kmalloc>
f0122814:	83 c4 10             	add    $0x10,%esp
f0122817:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012281d:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122823:	89 c1                	mov    %eax,%ecx
f0122825:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f012282c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012282f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122834:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0122837:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012283a:	ba 00 00 00 00       	mov    $0x0,%edx
f012283f:	f7 75 c8             	divl   -0x38(%ebp)
f0122842:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0122845:	29 d0                	sub    %edx,%eax
f0122847:	89 c3                	mov    %eax,%ebx
f0122849:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0122850:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122855:	0f b6 d0             	movzbl %al,%edx
f0122858:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012285b:	01 d0                	add    %edx,%eax
f012285d:	48                   	dec    %eax
f012285e:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0122861:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0122864:	ba 00 00 00 00       	mov    $0x0,%edx
f0122869:	f7 75 c0             	divl   -0x40(%ebp)
f012286c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012286f:	29 d0                	sub    %edx,%eax
f0122871:	01 c3                	add    %eax,%ebx
f0122873:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f012287a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012287f:	0f b6 c0             	movzbl %al,%eax
f0122882:	c1 e0 04             	shl    $0x4,%eax
f0122885:	89 c2                	mov    %eax,%edx
f0122887:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012288a:	01 d0                	add    %edx,%eax
f012288c:	48                   	dec    %eax
f012288d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0122890:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0122893:	ba 00 00 00 00       	mov    $0x0,%edx
f0122898:	f7 75 b8             	divl   -0x48(%ebp)
f012289b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012289e:	29 d0                	sub    %edx,%eax
f01228a0:	01 d8                	add    %ebx,%eax
f01228a2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01228a7:	39 c1                	cmp    %eax,%ecx
f01228a9:	74 17                	je     f01228c2 <test_kfree_bestfirstfit+0x16c>
f01228ab:	83 ec 04             	sub    $0x4,%esp
f01228ae:	68 20 b6 13 f0       	push   $0xf013b620
f01228b3:	68 95 06 00 00       	push   $0x695
f01228b8:	68 3a b5 13 f0       	push   $0xf013b53a
f01228bd:	e8 43 d9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228c2:	e8 e8 14 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01228c7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228ca:	74 17                	je     f01228e3 <test_kfree_bestfirstfit+0x18d>
f01228cc:	83 ec 04             	sub    $0x4,%esp
f01228cf:	68 54 b5 13 f0       	push   $0xf013b554
f01228d4:	68 96 06 00 00       	push   $0x696
f01228d9:	68 3a b5 13 f0       	push   $0xf013b53a
f01228de:	e8 22 d9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01228e3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01228e6:	e8 c6 a8 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01228eb:	29 c3                	sub    %eax,%ebx
f01228ed:	89 d8                	mov    %ebx,%eax
f01228ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f01228f4:	74 17                	je     f012290d <test_kfree_bestfirstfit+0x1b7>
f01228f6:	83 ec 04             	sub    $0x4,%esp
f01228f9:	68 bc b5 13 f0       	push   $0xf013b5bc
f01228fe:	68 97 06 00 00       	push   $0x697
f0122903:	68 3a b5 13 f0       	push   $0xf013b53a
f0122908:	e8 f8 d8 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012290d:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0122914:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122917:	e8 95 a8 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012291c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012291f:	e8 8b 14 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122924:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122927:	83 ec 0c             	sub    $0xc,%esp
f012292a:	68 00 fc 1f 00       	push   $0x1ffc00
f012292f:	e8 30 52 fe ff       	call   f0107b64 <kmalloc>
f0122934:	83 c4 10             	add    $0x10,%esp
f0122937:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012293d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122943:	89 c1                	mov    %eax,%ecx
f0122945:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f012294c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012294f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122954:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0122957:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012295a:	ba 00 00 00 00       	mov    $0x0,%edx
f012295f:	f7 75 b0             	divl   -0x50(%ebp)
f0122962:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0122965:	29 d0                	sub    %edx,%eax
f0122967:	89 c3                	mov    %eax,%ebx
f0122969:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0122970:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122975:	0f b6 d0             	movzbl %al,%edx
f0122978:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012297b:	01 d0                	add    %edx,%eax
f012297d:	48                   	dec    %eax
f012297e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0122981:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0122984:	ba 00 00 00 00       	mov    $0x0,%edx
f0122989:	f7 75 a8             	divl   -0x58(%ebp)
f012298c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012298f:	29 d0                	sub    %edx,%eax
f0122991:	01 c3                	add    %eax,%ebx
f0122993:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f012299a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012299f:	0f b6 c0             	movzbl %al,%eax
f01229a2:	c1 e0 04             	shl    $0x4,%eax
f01229a5:	89 c2                	mov    %eax,%edx
f01229a7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01229aa:	01 d0                	add    %edx,%eax
f01229ac:	48                   	dec    %eax
f01229ad:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01229b0:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01229b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01229b8:	f7 75 a0             	divl   -0x60(%ebp)
f01229bb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01229be:	29 d0                	sub    %edx,%eax
f01229c0:	01 d8                	add    %ebx,%eax
f01229c2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01229c7:	39 c1                	cmp    %eax,%ecx
f01229c9:	74 17                	je     f01229e2 <test_kfree_bestfirstfit+0x28c>
f01229cb:	83 ec 04             	sub    $0x4,%esp
f01229ce:	68 20 b6 13 f0       	push   $0xf013b620
f01229d3:	68 9e 06 00 00       	push   $0x69e
f01229d8:	68 3a b5 13 f0       	push   $0xf013b53a
f01229dd:	e8 23 d8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229e2:	e8 c8 13 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01229e7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229ea:	74 17                	je     f0122a03 <test_kfree_bestfirstfit+0x2ad>
f01229ec:	83 ec 04             	sub    $0x4,%esp
f01229ef:	68 54 b5 13 f0       	push   $0xf013b554
f01229f4:	68 9f 06 00 00       	push   $0x69f
f01229f9:	68 3a b5 13 f0       	push   $0xf013b53a
f01229fe:	e8 02 d8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122a03:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122a06:	e8 a6 a7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122a0b:	29 c3                	sub    %eax,%ebx
f0122a0d:	89 d8                	mov    %ebx,%eax
f0122a0f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122a14:	74 17                	je     f0122a2d <test_kfree_bestfirstfit+0x2d7>
f0122a16:	83 ec 04             	sub    $0x4,%esp
f0122a19:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122a1e:	68 a0 06 00 00       	push   $0x6a0
f0122a23:	68 3a b5 13 f0       	push   $0xf013b53a
f0122a28:	e8 d8 d7 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0122a2d:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0122a34:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122a37:	e8 75 a7 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122a3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a3f:	e8 6b 13 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122a44:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0122a47:	83 ec 0c             	sub    $0xc,%esp
f0122a4a:	68 00 08 00 00       	push   $0x800
f0122a4f:	e8 10 51 fe ff       	call   f0107b64 <kmalloc>
f0122a54:	83 c4 10             	add    $0x10,%esp
f0122a57:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122a5d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122a63:	89 c1                	mov    %eax,%ecx
f0122a65:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122a6c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122a6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122a74:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122a77:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122a7a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122a7f:	f7 75 98             	divl   -0x68(%ebp)
f0122a82:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122a85:	29 d0                	sub    %edx,%eax
f0122a87:	89 c3                	mov    %eax,%ebx
f0122a89:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122a90:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122a95:	0f b6 d0             	movzbl %al,%edx
f0122a98:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122a9b:	01 d0                	add    %edx,%eax
f0122a9d:	48                   	dec    %eax
f0122a9e:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122aa1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122aa4:	ba 00 00 00 00       	mov    $0x0,%edx
f0122aa9:	f7 75 90             	divl   -0x70(%ebp)
f0122aac:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122aaf:	29 d0                	sub    %edx,%eax
f0122ab1:	01 c3                	add    %eax,%ebx
f0122ab3:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122aba:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122abf:	0f b6 c0             	movzbl %al,%eax
f0122ac2:	c1 e0 04             	shl    $0x4,%eax
f0122ac5:	89 c2                	mov    %eax,%edx
f0122ac7:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122aca:	01 d0                	add    %edx,%eax
f0122acc:	48                   	dec    %eax
f0122acd:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122ad0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122ad3:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ad8:	f7 75 88             	divl   -0x78(%ebp)
f0122adb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122ade:	29 d0                	sub    %edx,%eax
f0122ae0:	01 d8                	add    %ebx,%eax
f0122ae2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0122ae7:	39 c1                	cmp    %eax,%ecx
f0122ae9:	74 17                	je     f0122b02 <test_kfree_bestfirstfit+0x3ac>
f0122aeb:	83 ec 04             	sub    $0x4,%esp
f0122aee:	68 20 b6 13 f0       	push   $0xf013b620
f0122af3:	68 a7 06 00 00       	push   $0x6a7
f0122af8:	68 3a b5 13 f0       	push   $0xf013b53a
f0122afd:	e8 03 d7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b02:	e8 a8 12 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122b07:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b0a:	74 17                	je     f0122b23 <test_kfree_bestfirstfit+0x3cd>
f0122b0c:	83 ec 04             	sub    $0x4,%esp
f0122b0f:	68 54 b5 13 f0       	push   $0xf013b554
f0122b14:	68 a8 06 00 00       	push   $0x6a8
f0122b19:	68 3a b5 13 f0       	push   $0xf013b53a
f0122b1e:	e8 e2 d6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122b23:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122b26:	e8 86 a6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122b2b:	29 c3                	sub    %eax,%ebx
f0122b2d:	89 d8                	mov    %ebx,%eax
f0122b2f:	83 f8 01             	cmp    $0x1,%eax
f0122b32:	74 17                	je     f0122b4b <test_kfree_bestfirstfit+0x3f5>
f0122b34:	83 ec 04             	sub    $0x4,%esp
f0122b37:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122b3c:	68 a9 06 00 00       	push   $0x6a9
f0122b41:	68 3a b5 13 f0       	push   $0xf013b53a
f0122b46:	e8 ba d6 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0122b4b:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0122b52:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0122b55:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122b5b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0122b5e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122b65:	eb 0e                	jmp    f0122b75 <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f0122b67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122b6a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b6d:	01 d0                	add    %edx,%eax
f0122b6f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0122b72:	ff 45 f4             	incl   -0xc(%ebp)
f0122b75:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0122b7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b7e:	7f e7                	jg     f0122b67 <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122b80:	e8 2c a6 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122b85:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b88:	e8 22 12 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122b8d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0122b90:	83 ec 0c             	sub    $0xc,%esp
f0122b93:	68 00 08 00 00       	push   $0x800
f0122b98:	e8 c7 4f fe ff       	call   f0107b64 <kmalloc>
f0122b9d:	83 c4 10             	add    $0x10,%esp
f0122ba0:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ba6:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122bac:	89 c1                	mov    %eax,%ecx
f0122bae:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0122bb5:	10 00 00 
f0122bb8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122bbe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122bc3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0122bc9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122bcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0122bd4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0122bda:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0122be0:	29 d0                	sub    %edx,%eax
f0122be2:	89 c3                	mov    %eax,%ebx
f0122be4:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0122beb:	10 00 00 
f0122bee:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122bf3:	0f b6 d0             	movzbl %al,%edx
f0122bf6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0122bfc:	01 d0                	add    %edx,%eax
f0122bfe:	48                   	dec    %eax
f0122bff:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0122c05:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122c0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c10:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0122c16:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0122c1c:	29 d0                	sub    %edx,%eax
f0122c1e:	01 c3                	add    %eax,%ebx
f0122c20:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0122c27:	10 00 00 
f0122c2a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122c2f:	0f b6 c0             	movzbl %al,%eax
f0122c32:	c1 e0 04             	shl    $0x4,%eax
f0122c35:	89 c2                	mov    %eax,%edx
f0122c37:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0122c3d:	01 d0                	add    %edx,%eax
f0122c3f:	48                   	dec    %eax
f0122c40:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0122c46:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122c4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122c51:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0122c57:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0122c5d:	29 d0                	sub    %edx,%eax
f0122c5f:	01 d8                	add    %ebx,%eax
f0122c61:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0122c66:	39 c1                	cmp    %eax,%ecx
f0122c68:	74 17                	je     f0122c81 <test_kfree_bestfirstfit+0x52b>
f0122c6a:	83 ec 04             	sub    $0x4,%esp
f0122c6d:	68 20 b6 13 f0       	push   $0xf013b620
f0122c72:	68 b5 06 00 00       	push   $0x6b5
f0122c77:	68 3a b5 13 f0       	push   $0xf013b53a
f0122c7c:	e8 84 d5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c81:	e8 29 11 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122c86:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c89:	74 17                	je     f0122ca2 <test_kfree_bestfirstfit+0x54c>
f0122c8b:	83 ec 04             	sub    $0x4,%esp
f0122c8e:	68 54 b5 13 f0       	push   $0xf013b554
f0122c93:	68 b6 06 00 00       	push   $0x6b6
f0122c98:	68 3a b5 13 f0       	push   $0xf013b53a
f0122c9d:	e8 63 d5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122ca2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122ca5:	e8 07 a5 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122caa:	29 c3                	sub    %eax,%ebx
f0122cac:	89 d8                	mov    %ebx,%eax
f0122cae:	83 f8 01             	cmp    $0x1,%eax
f0122cb1:	74 17                	je     f0122cca <test_kfree_bestfirstfit+0x574>
f0122cb3:	83 ec 04             	sub    $0x4,%esp
f0122cb6:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122cbb:	68 b7 06 00 00       	push   $0x6b7
f0122cc0:	68 3a b5 13 f0       	push   $0xf013b53a
f0122cc5:	e8 3b d5 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0122cca:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0122cd1:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0122cd4:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122cda:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0122cdd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ce4:	eb 0e                	jmp    f0122cf4 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f0122ce6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122ce9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122cec:	01 d0                	add    %edx,%eax
f0122cee:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122cf1:	ff 45 f4             	incl   -0xc(%ebp)
f0122cf4:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122cfa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122cfd:	7f e7                	jg     f0122ce6 <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122cff:	e8 ad a4 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122d04:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122d07:	e8 a3 10 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122d0c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0122d0f:	83 ec 0c             	sub    $0xc,%esp
f0122d12:	68 00 1c 00 00       	push   $0x1c00
f0122d17:	e8 48 4e fe ff       	call   f0107b64 <kmalloc>
f0122d1c:	83 c4 10             	add    $0x10,%esp
f0122d1f:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122d25:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122d2b:	89 c1                	mov    %eax,%ecx
f0122d2d:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0122d34:	10 00 00 
f0122d37:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0122d3d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122d42:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0122d48:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122d4e:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d53:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0122d59:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0122d5f:	29 d0                	sub    %edx,%eax
f0122d61:	89 c3                	mov    %eax,%ebx
f0122d63:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0122d6a:	10 00 00 
f0122d6d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122d72:	0f b6 d0             	movzbl %al,%edx
f0122d75:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0122d7b:	01 d0                	add    %edx,%eax
f0122d7d:	48                   	dec    %eax
f0122d7e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0122d84:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122d8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122d8f:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0122d95:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0122d9b:	29 d0                	sub    %edx,%eax
f0122d9d:	01 c3                	add    %eax,%ebx
f0122d9f:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0122da6:	10 00 00 
f0122da9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122dae:	0f b6 c0             	movzbl %al,%eax
f0122db1:	c1 e0 04             	shl    $0x4,%eax
f0122db4:	89 c2                	mov    %eax,%edx
f0122db6:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0122dbc:	01 d0                	add    %edx,%eax
f0122dbe:	48                   	dec    %eax
f0122dbf:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0122dc5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122dcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0122dd0:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0122dd6:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0122ddc:	29 d0                	sub    %edx,%eax
f0122dde:	01 d8                	add    %ebx,%eax
f0122de0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0122de5:	39 c1                	cmp    %eax,%ecx
f0122de7:	74 17                	je     f0122e00 <test_kfree_bestfirstfit+0x6aa>
f0122de9:	83 ec 04             	sub    $0x4,%esp
f0122dec:	68 20 b6 13 f0       	push   $0xf013b620
f0122df1:	68 c3 06 00 00       	push   $0x6c3
f0122df6:	68 3a b5 13 f0       	push   $0xf013b53a
f0122dfb:	e8 05 d4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122e00:	e8 aa 0f fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122e05:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122e08:	74 17                	je     f0122e21 <test_kfree_bestfirstfit+0x6cb>
f0122e0a:	83 ec 04             	sub    $0x4,%esp
f0122e0d:	68 54 b5 13 f0       	push   $0xf013b554
f0122e12:	68 c4 06 00 00       	push   $0x6c4
f0122e17:	68 3a b5 13 f0       	push   $0xf013b53a
f0122e1c:	e8 e4 d3 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122e21:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122e24:	e8 88 a3 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122e29:	29 c3                	sub    %eax,%ebx
f0122e2b:	89 d8                	mov    %ebx,%eax
f0122e2d:	83 f8 02             	cmp    $0x2,%eax
f0122e30:	74 17                	je     f0122e49 <test_kfree_bestfirstfit+0x6f3>
f0122e32:	83 ec 04             	sub    $0x4,%esp
f0122e35:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122e3a:	68 c5 06 00 00       	push   $0x6c5
f0122e3f:	68 3a b5 13 f0       	push   $0xf013b53a
f0122e44:	e8 bc d3 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0122e49:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0122e50:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0122e53:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122e59:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122e5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122e63:	eb 0e                	jmp    f0122e73 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0122e65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e68:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122e6b:	01 d0                	add    %edx,%eax
f0122e6d:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0122e70:	ff 45 f4             	incl   -0xc(%ebp)
f0122e73:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0122e79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122e7c:	7f e7                	jg     f0122e65 <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e7e:	e8 2e a3 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122e83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e86:	e8 24 0f fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122e8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0122e8e:	83 ec 0c             	sub    $0xc,%esp
f0122e91:	68 00 fc 2f 00       	push   $0x2ffc00
f0122e96:	e8 c9 4c fe ff       	call   f0107b64 <kmalloc>
f0122e9b:	83 c4 10             	add    $0x10,%esp
f0122e9e:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122ea4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122eaa:	89 c1                	mov    %eax,%ecx
f0122eac:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0122eb3:	10 00 00 
f0122eb6:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0122ebc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122ec1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0122ec7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122ecd:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ed2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0122ed8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0122ede:	29 d0                	sub    %edx,%eax
f0122ee0:	89 c3                	mov    %eax,%ebx
f0122ee2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0122ee9:	10 00 00 
f0122eec:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122ef1:	0f b6 d0             	movzbl %al,%edx
f0122ef4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0122efa:	01 d0                	add    %edx,%eax
f0122efc:	48                   	dec    %eax
f0122efd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0122f03:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122f09:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f0e:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0122f14:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0122f1a:	29 d0                	sub    %edx,%eax
f0122f1c:	01 c3                	add    %eax,%ebx
f0122f1e:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0122f25:	10 00 00 
f0122f28:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0122f2d:	0f b6 c0             	movzbl %al,%eax
f0122f30:	c1 e0 04             	shl    $0x4,%eax
f0122f33:	89 c2                	mov    %eax,%edx
f0122f35:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0122f3b:	01 d0                	add    %edx,%eax
f0122f3d:	48                   	dec    %eax
f0122f3e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0122f44:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122f4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0122f4f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0122f55:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0122f5b:	29 d0                	sub    %edx,%eax
f0122f5d:	01 d8                	add    %ebx,%eax
f0122f5f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0122f64:	39 c1                	cmp    %eax,%ecx
f0122f66:	74 17                	je     f0122f7f <test_kfree_bestfirstfit+0x829>
f0122f68:	83 ec 04             	sub    $0x4,%esp
f0122f6b:	68 20 b6 13 f0       	push   $0xf013b620
f0122f70:	68 d1 06 00 00       	push   $0x6d1
f0122f75:	68 3a b5 13 f0       	push   $0xf013b53a
f0122f7a:	e8 86 d2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f7f:	e8 2b 0e fe ff       	call   f0103daf <pf_calculate_free_frames>
f0122f84:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122f87:	74 17                	je     f0122fa0 <test_kfree_bestfirstfit+0x84a>
f0122f89:	83 ec 04             	sub    $0x4,%esp
f0122f8c:	68 54 b5 13 f0       	push   $0xf013b554
f0122f91:	68 d2 06 00 00       	push   $0x6d2
f0122f96:	68 3a b5 13 f0       	push   $0xf013b53a
f0122f9b:	e8 65 d2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122fa0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0122fa3:	e8 09 a2 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0122fa8:	29 c3                	sub    %eax,%ebx
f0122faa:	89 d8                	mov    %ebx,%eax
f0122fac:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122fb1:	74 17                	je     f0122fca <test_kfree_bestfirstfit+0x874>
f0122fb3:	83 ec 04             	sub    $0x4,%esp
f0122fb6:	68 bc b5 13 f0       	push   $0xf013b5bc
f0122fbb:	68 d3 06 00 00       	push   $0x6d3
f0122fc0:	68 3a b5 13 f0       	push   $0xf013b53a
f0122fc5:	e8 3b d2 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0122fca:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0122fd1:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0122fd4:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0122fda:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0122fdd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122fe4:	eb 0e                	jmp    f0122ff4 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0122fe6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122fe9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122fec:	01 d0                	add    %edx,%eax
f0122fee:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0122ff1:	ff 45 f4             	incl   -0xc(%ebp)
f0122ff4:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122ffa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122ffd:	7f e7                	jg     f0122fe6 <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122fff:	e8 ad a1 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123004:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123007:	e8 a3 0d fe ff       	call   f0103daf <pf_calculate_free_frames>
f012300c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012300f:	83 ec 0c             	sub    $0xc,%esp
f0123012:	68 00 fc 5f 00       	push   $0x5ffc00
f0123017:	e8 48 4b fe ff       	call   f0107b64 <kmalloc>
f012301c:	83 c4 10             	add    $0x10,%esp
f012301f:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123025:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012302b:	89 c1                	mov    %eax,%ecx
f012302d:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0123034:	10 00 00 
f0123037:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012303d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123042:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0123048:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012304e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123053:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0123059:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012305f:	29 d0                	sub    %edx,%eax
f0123061:	89 c3                	mov    %eax,%ebx
f0123063:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012306a:	10 00 00 
f012306d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0123072:	0f b6 d0             	movzbl %al,%edx
f0123075:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012307b:	01 d0                	add    %edx,%eax
f012307d:	48                   	dec    %eax
f012307e:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0123084:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012308a:	ba 00 00 00 00       	mov    $0x0,%edx
f012308f:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0123095:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012309b:	29 d0                	sub    %edx,%eax
f012309d:	01 c3                	add    %eax,%ebx
f012309f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01230a6:	10 00 00 
f01230a9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01230ae:	0f b6 c0             	movzbl %al,%eax
f01230b1:	c1 e0 04             	shl    $0x4,%eax
f01230b4:	89 c2                	mov    %eax,%edx
f01230b6:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01230bc:	01 d0                	add    %edx,%eax
f01230be:	48                   	dec    %eax
f01230bf:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01230c5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01230cb:	ba 00 00 00 00       	mov    $0x0,%edx
f01230d0:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01230d6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01230dc:	29 d0                	sub    %edx,%eax
f01230de:	01 d8                	add    %ebx,%eax
f01230e0:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01230e5:	39 c1                	cmp    %eax,%ecx
f01230e7:	74 17                	je     f0123100 <test_kfree_bestfirstfit+0x9aa>
f01230e9:	83 ec 04             	sub    $0x4,%esp
f01230ec:	68 20 b6 13 f0       	push   $0xf013b620
f01230f1:	68 df 06 00 00       	push   $0x6df
f01230f6:	68 3a b5 13 f0       	push   $0xf013b53a
f01230fb:	e8 05 d1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123100:	e8 aa 0c fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123105:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123108:	74 17                	je     f0123121 <test_kfree_bestfirstfit+0x9cb>
f012310a:	83 ec 04             	sub    $0x4,%esp
f012310d:	68 54 b5 13 f0       	push   $0xf013b554
f0123112:	68 e0 06 00 00       	push   $0x6e0
f0123117:	68 3a b5 13 f0       	push   $0xf013b53a
f012311c:	e8 e4 d0 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123121:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123124:	e8 88 a0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123129:	29 c3                	sub    %eax,%ebx
f012312b:	89 d8                	mov    %ebx,%eax
f012312d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123132:	74 17                	je     f012314b <test_kfree_bestfirstfit+0x9f5>
f0123134:	83 ec 04             	sub    $0x4,%esp
f0123137:	68 bc b5 13 f0       	push   $0xf013b5bc
f012313c:	68 e1 06 00 00       	push   $0x6e1
f0123141:	68 3a b5 13 f0       	push   $0xf013b53a
f0123146:	e8 ba d0 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012314b:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0123152:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123155:	e8 57 a0 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012315a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012315d:	e8 4d 0c fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123162:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123165:	83 ec 0c             	sub    $0xc,%esp
f0123168:	68 00 38 00 00       	push   $0x3800
f012316d:	e8 f2 49 fe ff       	call   f0107b64 <kmalloc>
f0123172:	83 c4 10             	add    $0x10,%esp
f0123175:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012317b:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123181:	89 c1                	mov    %eax,%ecx
f0123183:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012318a:	10 00 00 
f012318d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0123193:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123198:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012319e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01231a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01231a9:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01231af:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01231b5:	29 d0                	sub    %edx,%eax
f01231b7:	89 c3                	mov    %eax,%ebx
f01231b9:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01231c0:	10 00 00 
f01231c3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01231c8:	0f b6 d0             	movzbl %al,%edx
f01231cb:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01231d1:	01 d0                	add    %edx,%eax
f01231d3:	48                   	dec    %eax
f01231d4:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01231da:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01231e0:	ba 00 00 00 00       	mov    $0x0,%edx
f01231e5:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01231eb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01231f1:	29 d0                	sub    %edx,%eax
f01231f3:	01 c3                	add    %eax,%ebx
f01231f5:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01231fc:	10 00 00 
f01231ff:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0123204:	0f b6 c0             	movzbl %al,%eax
f0123207:	c1 e0 04             	shl    $0x4,%eax
f012320a:	89 c2                	mov    %eax,%edx
f012320c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123212:	01 d0                	add    %edx,%eax
f0123214:	48                   	dec    %eax
f0123215:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012321b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123221:	ba 00 00 00 00       	mov    $0x0,%edx
f0123226:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012322c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123232:	29 d0                	sub    %edx,%eax
f0123234:	01 d8                	add    %ebx,%eax
f0123236:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012323b:	39 c1                	cmp    %eax,%ecx
f012323d:	74 17                	je     f0123256 <test_kfree_bestfirstfit+0xb00>
f012323f:	83 ec 04             	sub    $0x4,%esp
f0123242:	68 20 b6 13 f0       	push   $0xf013b620
f0123247:	68 e8 06 00 00       	push   $0x6e8
f012324c:	68 3a b5 13 f0       	push   $0xf013b53a
f0123251:	e8 af cf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123256:	e8 54 0b fe ff       	call   f0103daf <pf_calculate_free_frames>
f012325b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012325e:	74 17                	je     f0123277 <test_kfree_bestfirstfit+0xb21>
f0123260:	83 ec 04             	sub    $0x4,%esp
f0123263:	68 54 b5 13 f0       	push   $0xf013b554
f0123268:	68 e9 06 00 00       	push   $0x6e9
f012326d:	68 3a b5 13 f0       	push   $0xf013b53a
f0123272:	e8 8e cf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123277:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012327a:	e8 32 9f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012327f:	29 c3                	sub    %eax,%ebx
f0123281:	89 d8                	mov    %ebx,%eax
f0123283:	83 f8 04             	cmp    $0x4,%eax
f0123286:	74 17                	je     f012329f <test_kfree_bestfirstfit+0xb49>
f0123288:	83 ec 04             	sub    $0x4,%esp
f012328b:	68 bc b5 13 f0       	push   $0xf013b5bc
f0123290:	68 ea 06 00 00       	push   $0x6ea
f0123295:	68 3a b5 13 f0       	push   $0xf013b53a
f012329a:	e8 66 cf fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012329f:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01232a6:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01232a9:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01232af:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01232b2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01232b9:	eb 0e                	jmp    f01232c9 <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f01232bb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01232be:	8b 45 80             	mov    -0x80(%ebp),%eax
f01232c1:	01 d0                	add    %edx,%eax
f01232c3:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01232c6:	ff 45 f4             	incl   -0xc(%ebp)
f01232c9:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01232cf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01232d2:	7f e7                	jg     f01232bb <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01232d4:	e8 d8 9e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01232d9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01232df:	e8 cb 0a fe ff       	call   f0103daf <pf_calculate_free_frames>
f01232e4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01232ea:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01232f0:	83 ec 0c             	sub    $0xc,%esp
f01232f3:	50                   	push   %eax
f01232f4:	e8 73 49 fe ff       	call   f0107c6c <kfree>
f01232f9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232fc:	e8 ae 0a fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123301:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123307:	74 17                	je     f0123320 <test_kfree_bestfirstfit+0xbca>
f0123309:	83 ec 04             	sub    $0x4,%esp
f012330c:	68 54 b5 13 f0       	push   $0xf013b554
f0123311:	68 f9 06 00 00       	push   $0x6f9
f0123316:	68 3a b5 13 f0       	push   $0xf013b53a
f012331b:	e8 e5 ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123320:	e8 8c 9e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123325:	89 c2                	mov    %eax,%edx
f0123327:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012332d:	29 c2                	sub    %eax,%edx
f012332f:	89 d0                	mov    %edx,%eax
f0123331:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123336:	74 17                	je     f012334f <test_kfree_bestfirstfit+0xbf9>
f0123338:	83 ec 04             	sub    $0x4,%esp
f012333b:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123340:	68 fa 06 00 00       	push   $0x6fa
f0123345:	68 3a b5 13 f0       	push   $0xf013b53a
f012334a:	e8 b6 ce fd ff       	call   f0100205 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012334f:	e8 5d 9e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123354:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012335a:	e8 50 0a fe ff       	call   f0103daf <pf_calculate_free_frames>
f012335f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0123365:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012336b:	83 ec 0c             	sub    $0xc,%esp
f012336e:	50                   	push   %eax
f012336f:	e8 f8 48 fe ff       	call   f0107c6c <kfree>
f0123374:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123377:	e8 33 0a fe ff       	call   f0103daf <pf_calculate_free_frames>
f012337c:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123382:	74 17                	je     f012339b <test_kfree_bestfirstfit+0xc45>
f0123384:	83 ec 04             	sub    $0x4,%esp
f0123387:	68 54 b5 13 f0       	push   $0xf013b554
f012338c:	68 00 07 00 00       	push   $0x700
f0123391:	68 3a b5 13 f0       	push   $0xf013b53a
f0123396:	e8 6a ce fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012339b:	e8 11 9e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01233a0:	89 c2                	mov    %eax,%edx
f01233a2:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01233a8:	29 c2                	sub    %eax,%edx
f01233aa:	89 d0                	mov    %edx,%eax
f01233ac:	83 f8 01             	cmp    $0x1,%eax
f01233af:	74 17                	je     f01233c8 <test_kfree_bestfirstfit+0xc72>
f01233b1:	83 ec 04             	sub    $0x4,%esp
f01233b4:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01233b9:	68 01 07 00 00       	push   $0x701
f01233be:	68 3a b5 13 f0       	push   $0xf013b53a
f01233c3:	e8 3d ce fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01233c8:	e8 e4 9d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01233cd:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01233d3:	e8 d7 09 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01233d8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f01233de:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f01233e4:	83 ec 0c             	sub    $0xc,%esp
f01233e7:	50                   	push   %eax
f01233e8:	e8 7f 48 fe ff       	call   f0107c6c <kfree>
f01233ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01233f0:	e8 ba 09 fe ff       	call   f0103daf <pf_calculate_free_frames>
f01233f5:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01233fb:	74 17                	je     f0123414 <test_kfree_bestfirstfit+0xcbe>
f01233fd:	83 ec 04             	sub    $0x4,%esp
f0123400:	68 54 b5 13 f0       	push   $0xf013b554
f0123405:	68 07 07 00 00       	push   $0x707
f012340a:	68 3a b5 13 f0       	push   $0xf013b53a
f012340f:	e8 f1 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0123414:	e8 98 9d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123419:	89 c2                	mov    %eax,%edx
f012341b:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123421:	29 c2                	sub    %eax,%edx
f0123423:	89 d0                	mov    %edx,%eax
f0123425:	3d 00 02 00 00       	cmp    $0x200,%eax
f012342a:	74 17                	je     f0123443 <test_kfree_bestfirstfit+0xced>
f012342c:	83 ec 04             	sub    $0x4,%esp
f012342f:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123434:	68 08 07 00 00       	push   $0x708
f0123439:	68 3a b5 13 f0       	push   $0xf013b53a
f012343e:	e8 c2 cd fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123443:	e8 69 9d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123448:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012344e:	e8 5c 09 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123453:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0123459:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f012345f:	83 ec 0c             	sub    $0xc,%esp
f0123462:	50                   	push   %eax
f0123463:	e8 04 48 fe ff       	call   f0107c6c <kfree>
f0123468:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012346b:	e8 3f 09 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123470:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0123476:	74 17                	je     f012348f <test_kfree_bestfirstfit+0xd39>
f0123478:	83 ec 04             	sub    $0x4,%esp
f012347b:	68 54 b5 13 f0       	push   $0xf013b554
f0123480:	68 0e 07 00 00       	push   $0x70e
f0123485:	68 3a b5 13 f0       	push   $0xf013b53a
f012348a:	e8 76 cd fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012348f:	e8 1d 9d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123494:	89 c2                	mov    %eax,%edx
f0123496:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012349c:	29 c2                	sub    %eax,%edx
f012349e:	89 d0                	mov    %edx,%eax
f01234a0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01234a5:	74 17                	je     f01234be <test_kfree_bestfirstfit+0xd68>
f01234a7:	83 ec 04             	sub    $0x4,%esp
f01234aa:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01234af:	68 0f 07 00 00       	push   $0x70f
f01234b4:	68 3a b5 13 f0       	push   $0xf013b53a
f01234b9:	e8 47 cd fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f01234be:	83 ec 0c             	sub    $0xc,%esp
f01234c1:	68 fc bc 13 f0       	push   $0xf013bcfc
f01234c6:	e8 43 d8 fd ff       	call   f0100d0e <cprintf>
f01234cb:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f01234ce:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01234d4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01234d7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01234de:	eb 1e                	jmp    f01234fe <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f01234e0:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01234e6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01234e9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01234ec:	01 c8                	add    %ecx,%eax
f01234ee:	8a 00                	mov    (%eax),%al
f01234f0:	0f be c0             	movsbl %al,%eax
f01234f3:	01 d0                	add    %edx,%eax
f01234f5:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01234fb:	ff 45 f4             	incl   -0xc(%ebp)
f01234fe:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123504:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123507:	7f d7                	jg     f01234e0 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0123509:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012350f:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123515:	89 c1                	mov    %eax,%ecx
f0123517:	01 c9                	add    %ecx,%ecx
f0123519:	01 c8                	add    %ecx,%eax
f012351b:	39 c2                	cmp    %eax,%edx
f012351d:	74 17                	je     f0123536 <test_kfree_bestfirstfit+0xde0>
f012351f:	83 ec 04             	sub    $0x4,%esp
f0123522:	68 20 bd 13 f0       	push   $0xf013bd20
f0123527:	68 1c 07 00 00       	push   $0x71c
f012352c:	68 3a b5 13 f0       	push   $0xf013b53a
f0123531:	e8 cf cc fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0123536:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012353c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012353f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123546:	eb 1e                	jmp    f0123566 <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f0123548:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012354e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0123551:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123554:	01 c8                	add    %ecx,%eax
f0123556:	8a 00                	mov    (%eax),%al
f0123558:	0f be c0             	movsbl %al,%eax
f012355b:	01 d0                	add    %edx,%eax
f012355d:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0123563:	ff 45 f4             	incl   -0xc(%ebp)
f0123566:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012356c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012356f:	7f d7                	jg     f0123548 <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0123571:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0123577:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f012357d:	c1 e2 02             	shl    $0x2,%edx
f0123580:	39 d0                	cmp    %edx,%eax
f0123582:	74 17                	je     f012359b <test_kfree_bestfirstfit+0xe45>
f0123584:	83 ec 04             	sub    $0x4,%esp
f0123587:	68 20 bd 13 f0       	push   $0xf013bd20
f012358c:	68 24 07 00 00       	push   $0x724
f0123591:	68 3a b5 13 f0       	push   $0xf013b53a
f0123596:	e8 6a cc fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012359b:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01235a1:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01235a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01235ab:	eb 1e                	jmp    f01235cb <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f01235ad:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f01235b3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01235b6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01235b9:	01 c8                	add    %ecx,%eax
f01235bb:	8a 00                	mov    (%eax),%al
f01235bd:	0f be c0             	movsbl %al,%eax
f01235c0:	01 d0                	add    %edx,%eax
f01235c2:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01235c8:	ff 45 f4             	incl   -0xc(%ebp)
f01235cb:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01235d1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01235d4:	7f d7                	jg     f01235ad <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01235d6:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01235dc:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01235e2:	89 d0                	mov    %edx,%eax
f01235e4:	c1 e0 02             	shl    $0x2,%eax
f01235e7:	01 d0                	add    %edx,%eax
f01235e9:	39 c1                	cmp    %eax,%ecx
f01235eb:	74 17                	je     f0123604 <test_kfree_bestfirstfit+0xeae>
f01235ed:	83 ec 04             	sub    $0x4,%esp
f01235f0:	68 20 bd 13 f0       	push   $0xf013bd20
f01235f5:	68 2c 07 00 00       	push   $0x72c
f01235fa:	68 3a b5 13 f0       	push   $0xf013b53a
f01235ff:	e8 01 cc fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0123604:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012360a:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012360d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123614:	eb 1e                	jmp    f0123634 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f0123616:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f012361c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012361f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123622:	01 c8                	add    %ecx,%eax
f0123624:	8a 00                	mov    (%eax),%al
f0123626:	0f be c0             	movsbl %al,%eax
f0123629:	01 d0                	add    %edx,%eax
f012362b:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0123631:	ff 45 f4             	incl   -0xc(%ebp)
f0123634:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012363a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012363d:	7f d7                	jg     f0123616 <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012363f:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0123645:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012364b:	89 d0                	mov    %edx,%eax
f012364d:	01 c0                	add    %eax,%eax
f012364f:	01 d0                	add    %edx,%eax
f0123651:	01 c0                	add    %eax,%eax
f0123653:	01 d0                	add    %edx,%eax
f0123655:	39 c1                	cmp    %eax,%ecx
f0123657:	74 17                	je     f0123670 <test_kfree_bestfirstfit+0xf1a>
f0123659:	83 ec 04             	sub    $0x4,%esp
f012365c:	68 20 bd 13 f0       	push   $0xf013bd20
f0123661:	68 34 07 00 00       	push   $0x734
f0123666:	68 3a b5 13 f0       	push   $0xf013b53a
f012366b:	e8 95 cb fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b30%");
f0123670:	83 ec 0c             	sub    $0xc,%esp
f0123673:	68 53 bd 13 f0       	push   $0xf013bd53
f0123678:	e8 91 d6 fd ff       	call   f0100d0e <cprintf>
f012367d:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123680:	e8 2c 9b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123685:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123688:	e8 22 07 fe ff       	call   f0103daf <pf_calculate_free_frames>
f012368d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f0123690:	83 ec 0c             	sub    $0xc,%esp
f0123693:	68 00 00 30 00       	push   $0x300000
f0123698:	e8 c7 44 fe ff       	call   f0107b64 <kmalloc>
f012369d:	83 c4 10             	add    $0x10,%esp
f01236a0:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01236a6:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01236ac:	89 c1                	mov    %eax,%ecx
f01236ae:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01236b5:	10 00 00 
f01236b8:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01236be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01236c3:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01236c9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01236cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01236d4:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01236da:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01236e0:	29 d0                	sub    %edx,%eax
f01236e2:	89 c3                	mov    %eax,%ebx
f01236e4:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01236eb:	10 00 00 
f01236ee:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01236f3:	0f b6 d0             	movzbl %al,%edx
f01236f6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01236fc:	01 d0                	add    %edx,%eax
f01236fe:	48                   	dec    %eax
f01236ff:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0123705:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012370b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123710:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0123716:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012371c:	29 d0                	sub    %edx,%eax
f012371e:	01 c3                	add    %eax,%ebx
f0123720:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0123727:	10 00 00 
f012372a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012372f:	0f b6 c0             	movzbl %al,%eax
f0123732:	c1 e0 04             	shl    $0x4,%eax
f0123735:	89 c2                	mov    %eax,%edx
f0123737:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012373d:	01 d0                	add    %edx,%eax
f012373f:	48                   	dec    %eax
f0123740:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0123746:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012374c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123751:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0123757:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012375d:	29 d0                	sub    %edx,%eax
f012375f:	01 d8                	add    %ebx,%eax
f0123761:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0123766:	39 c1                	cmp    %eax,%ecx
f0123768:	74 17                	je     f0123781 <test_kfree_bestfirstfit+0x102b>
f012376a:	83 ec 04             	sub    $0x4,%esp
f012376d:	68 20 b6 13 f0       	push   $0xf013b620
f0123772:	68 3f 07 00 00       	push   $0x73f
f0123777:	68 3a b5 13 f0       	push   $0xf013b53a
f012377c:	e8 84 ca fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123781:	e8 29 06 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123786:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123789:	74 17                	je     f01237a2 <test_kfree_bestfirstfit+0x104c>
f012378b:	83 ec 04             	sub    $0x4,%esp
f012378e:	68 54 b5 13 f0       	push   $0xf013b554
f0123793:	68 40 07 00 00       	push   $0x740
f0123798:	68 3a b5 13 f0       	push   $0xf013b53a
f012379d:	e8 63 ca fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01237a2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01237a5:	e8 07 9a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01237aa:	29 c3                	sub    %eax,%ebx
f01237ac:	89 d8                	mov    %ebx,%eax
f01237ae:	3d 00 03 00 00       	cmp    $0x300,%eax
f01237b3:	74 17                	je     f01237cc <test_kfree_bestfirstfit+0x1076>
f01237b5:	83 ec 04             	sub    $0x4,%esp
f01237b8:	68 bc b5 13 f0       	push   $0xf013b5bc
f01237bd:	68 41 07 00 00       	push   $0x741
f01237c2:	68 3a b5 13 f0       	push   $0xf013b53a
f01237c7:	e8 39 ca fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f01237cc:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f01237d3:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f01237d6:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01237dc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01237df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01237e6:	eb 0e                	jmp    f01237f6 <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f01237e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01237eb:	8b 45 80             	mov    -0x80(%ebp),%eax
f01237ee:	01 d0                	add    %edx,%eax
f01237f0:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01237f3:	ff 45 f4             	incl   -0xc(%ebp)
f01237f6:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01237fc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01237ff:	7f e7                	jg     f01237e8 <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123801:	e8 ab 99 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123806:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123809:	e8 a1 05 fe ff       	call   f0103daf <pf_calculate_free_frames>
f012380e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0123811:	83 ec 0c             	sub    $0xc,%esp
f0123814:	68 00 08 00 00       	push   $0x800
f0123819:	e8 46 43 fe ff       	call   f0107b64 <kmalloc>
f012381e:	83 c4 10             	add    $0x10,%esp
f0123821:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123827:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012382d:	89 c1                	mov    %eax,%ecx
f012382f:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0123836:	10 00 00 
f0123839:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012383f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123844:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012384a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123850:	ba 00 00 00 00       	mov    $0x0,%edx
f0123855:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012385b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123861:	29 d0                	sub    %edx,%eax
f0123863:	89 c3                	mov    %eax,%ebx
f0123865:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012386c:	10 00 00 
f012386f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0123874:	0f b6 d0             	movzbl %al,%edx
f0123877:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012387d:	01 d0                	add    %edx,%eax
f012387f:	48                   	dec    %eax
f0123880:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0123886:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012388c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123891:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0123897:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012389d:	29 d0                	sub    %edx,%eax
f012389f:	01 c3                	add    %eax,%ebx
f01238a1:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01238a8:	10 00 00 
f01238ab:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01238b0:	0f b6 c0             	movzbl %al,%eax
f01238b3:	c1 e0 04             	shl    $0x4,%eax
f01238b6:	89 c2                	mov    %eax,%edx
f01238b8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01238be:	01 d0                	add    %edx,%eax
f01238c0:	48                   	dec    %eax
f01238c1:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01238c7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01238d2:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01238d8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238de:	29 d0                	sub    %edx,%eax
f01238e0:	01 d8                	add    %ebx,%eax
f01238e2:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01238e7:	39 c1                	cmp    %eax,%ecx
f01238e9:	74 17                	je     f0123902 <test_kfree_bestfirstfit+0x11ac>
f01238eb:	83 ec 04             	sub    $0x4,%esp
f01238ee:	68 20 b6 13 f0       	push   $0xf013b620
f01238f3:	68 4d 07 00 00       	push   $0x74d
f01238f8:	68 3a b5 13 f0       	push   $0xf013b53a
f01238fd:	e8 03 c9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123902:	e8 a8 04 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123907:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012390a:	74 17                	je     f0123923 <test_kfree_bestfirstfit+0x11cd>
f012390c:	83 ec 04             	sub    $0x4,%esp
f012390f:	68 54 b5 13 f0       	push   $0xf013b554
f0123914:	68 4e 07 00 00       	push   $0x74e
f0123919:	68 3a b5 13 f0       	push   $0xf013b53a
f012391e:	e8 e2 c8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123923:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123926:	e8 86 98 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012392b:	29 c3                	sub    %eax,%ebx
f012392d:	89 d8                	mov    %ebx,%eax
f012392f:	83 f8 01             	cmp    $0x1,%eax
f0123932:	74 17                	je     f012394b <test_kfree_bestfirstfit+0x11f5>
f0123934:	83 ec 04             	sub    $0x4,%esp
f0123937:	68 bc b5 13 f0       	push   $0xf013b5bc
f012393c:	68 4f 07 00 00       	push   $0x74f
f0123941:	68 3a b5 13 f0       	push   $0xf013b53a
f0123946:	e8 ba c8 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f012394b:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f0123952:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f0123955:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012395b:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012395e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123965:	eb 0e                	jmp    f0123975 <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f0123967:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012396a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012396d:	01 d0                	add    %edx,%eax
f012396f:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0123972:	ff 45 f4             	incl   -0xc(%ebp)
f0123975:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012397b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012397e:	7f e7                	jg     f0123967 <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123980:	e8 2c 98 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123985:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123988:	e8 22 04 fe ff       	call   f0103daf <pf_calculate_free_frames>
f012398d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f0123990:	83 ec 0c             	sub    $0xc,%esp
f0123993:	68 00 00 10 00       	push   $0x100000
f0123998:	e8 c7 41 fe ff       	call   f0107b64 <kmalloc>
f012399d:	83 c4 10             	add    $0x10,%esp
f01239a0:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01239a6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01239ac:	89 c1                	mov    %eax,%ecx
f01239ae:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01239b5:	10 00 00 
f01239b8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01239be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01239c3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01239c9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01239cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01239d4:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01239da:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01239e0:	29 d0                	sub    %edx,%eax
f01239e2:	89 c3                	mov    %eax,%ebx
f01239e4:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01239eb:	10 00 00 
f01239ee:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01239f3:	0f b6 d0             	movzbl %al,%edx
f01239f6:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01239fc:	01 d0                	add    %edx,%eax
f01239fe:	48                   	dec    %eax
f01239ff:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0123a05:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a10:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0123a16:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123a1c:	29 d0                	sub    %edx,%eax
f0123a1e:	01 c3                	add    %eax,%ebx
f0123a20:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0123a27:	10 00 00 
f0123a2a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0123a2f:	0f b6 c0             	movzbl %al,%eax
f0123a32:	c1 e0 04             	shl    $0x4,%eax
f0123a35:	89 c2                	mov    %eax,%edx
f0123a37:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123a3d:	01 d0                	add    %edx,%eax
f0123a3f:	48                   	dec    %eax
f0123a40:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123a46:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123a4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a51:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0123a57:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123a5d:	29 d0                	sub    %edx,%eax
f0123a5f:	01 d8                	add    %ebx,%eax
f0123a61:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0123a66:	39 c1                	cmp    %eax,%ecx
f0123a68:	74 17                	je     f0123a81 <test_kfree_bestfirstfit+0x132b>
f0123a6a:	83 ec 04             	sub    $0x4,%esp
f0123a6d:	68 20 b6 13 f0       	push   $0xf013b620
f0123a72:	68 5b 07 00 00       	push   $0x75b
f0123a77:	68 3a b5 13 f0       	push   $0xf013b53a
f0123a7c:	e8 84 c7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123a81:	e8 29 03 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123a86:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123a89:	74 17                	je     f0123aa2 <test_kfree_bestfirstfit+0x134c>
f0123a8b:	83 ec 04             	sub    $0x4,%esp
f0123a8e:	68 54 b5 13 f0       	push   $0xf013b554
f0123a93:	68 5c 07 00 00       	push   $0x75c
f0123a98:	68 3a b5 13 f0       	push   $0xf013b53a
f0123a9d:	e8 63 c7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123aa2:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0123aa5:	e8 07 97 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123aaa:	29 c3                	sub    %eax,%ebx
f0123aac:	89 d8                	mov    %ebx,%eax
f0123aae:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123ab3:	74 17                	je     f0123acc <test_kfree_bestfirstfit+0x1376>
f0123ab5:	83 ec 04             	sub    $0x4,%esp
f0123ab8:	68 bc b5 13 f0       	push   $0xf013b5bc
f0123abd:	68 5d 07 00 00       	push   $0x75d
f0123ac2:	68 3a b5 13 f0       	push   $0xf013b53a
f0123ac7:	e8 39 c7 fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0123acc:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0123ad3:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f0123ad6:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123adc:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0123adf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123ae6:	eb 0e                	jmp    f0123af6 <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f0123ae8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123aeb:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123aee:	01 d0                	add    %edx,%eax
f0123af0:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0123af3:	ff 45 f4             	incl   -0xc(%ebp)
f0123af6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123afc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0123aff:	7f e7                	jg     f0123ae8 <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0123b01:	83 ec 0c             	sub    $0xc,%esp
f0123b04:	68 5a bd 13 f0       	push   $0xf013bd5a
f0123b09:	e8 00 d2 fd ff       	call   f0100d0e <cprintf>
f0123b0e:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123b11:	e8 9b 96 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123b16:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b19:	e8 91 02 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123b1e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0123b21:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0123b27:	83 ec 0c             	sub    $0xc,%esp
f0123b2a:	50                   	push   %eax
f0123b2b:	e8 3c 41 fe ff       	call   f0107c6c <kfree>
f0123b30:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123b33:	e8 77 02 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123b38:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123b3b:	74 17                	je     f0123b54 <test_kfree_bestfirstfit+0x13fe>
f0123b3d:	83 ec 04             	sub    $0x4,%esp
f0123b40:	68 54 b5 13 f0       	push   $0xf013b554
f0123b45:	68 6d 07 00 00       	push   $0x76d
f0123b4a:	68 3a b5 13 f0       	push   $0xf013b53a
f0123b4f:	e8 b1 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0123b54:	e8 58 96 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123b59:	89 c2                	mov    %eax,%edx
f0123b5b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123b5e:	29 c2                	sub    %eax,%edx
f0123b60:	89 d0                	mov    %edx,%eax
f0123b62:	83 f8 02             	cmp    $0x2,%eax
f0123b65:	74 17                	je     f0123b7e <test_kfree_bestfirstfit+0x1428>
f0123b67:	83 ec 04             	sub    $0x4,%esp
f0123b6a:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123b6f:	68 6e 07 00 00       	push   $0x76e
f0123b74:	68 3a b5 13 f0       	push   $0xf013b53a
f0123b79:	e8 87 c6 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123b7e:	e8 2e 96 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123b83:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123b86:	e8 24 02 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123b8b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0123b8e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0123b94:	83 ec 0c             	sub    $0xc,%esp
f0123b97:	50                   	push   %eax
f0123b98:	e8 cf 40 fe ff       	call   f0107c6c <kfree>
f0123b9d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ba0:	e8 0a 02 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123ba5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123ba8:	74 17                	je     f0123bc1 <test_kfree_bestfirstfit+0x146b>
f0123baa:	83 ec 04             	sub    $0x4,%esp
f0123bad:	68 54 b5 13 f0       	push   $0xf013b554
f0123bb2:	68 74 07 00 00       	push   $0x774
f0123bb7:	68 3a b5 13 f0       	push   $0xf013b53a
f0123bbc:	e8 44 c6 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123bc1:	e8 eb 95 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123bc6:	89 c2                	mov    %eax,%edx
f0123bc8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123bcb:	29 c2                	sub    %eax,%edx
f0123bcd:	89 d0                	mov    %edx,%eax
f0123bcf:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123bd4:	74 17                	je     f0123bed <test_kfree_bestfirstfit+0x1497>
f0123bd6:	83 ec 04             	sub    $0x4,%esp
f0123bd9:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123bde:	68 75 07 00 00       	push   $0x775
f0123be3:	68 3a b5 13 f0       	push   $0xf013b53a
f0123be8:	e8 18 c6 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123bed:	e8 bf 95 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123bf2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123bf5:	e8 b5 01 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123bfa:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0123bfd:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0123c03:	83 ec 0c             	sub    $0xc,%esp
f0123c06:	50                   	push   %eax
f0123c07:	e8 60 40 fe ff       	call   f0107c6c <kfree>
f0123c0c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c0f:	e8 9b 01 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123c14:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c17:	74 17                	je     f0123c30 <test_kfree_bestfirstfit+0x14da>
f0123c19:	83 ec 04             	sub    $0x4,%esp
f0123c1c:	68 54 b5 13 f0       	push   $0xf013b554
f0123c21:	68 7b 07 00 00       	push   $0x77b
f0123c26:	68 3a b5 13 f0       	push   $0xf013b53a
f0123c2b:	e8 d5 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c30:	e8 7c 95 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123c35:	89 c2                	mov    %eax,%edx
f0123c37:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123c3a:	29 c2                	sub    %eax,%edx
f0123c3c:	89 d0                	mov    %edx,%eax
f0123c3e:	83 f8 01             	cmp    $0x1,%eax
f0123c41:	74 17                	je     f0123c5a <test_kfree_bestfirstfit+0x1504>
f0123c43:	83 ec 04             	sub    $0x4,%esp
f0123c46:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123c4b:	68 7c 07 00 00       	push   $0x77c
f0123c50:	68 3a b5 13 f0       	push   $0xf013b53a
f0123c55:	e8 ab c5 fd ff       	call   f0100205 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123c5a:	e8 52 95 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123c5f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c62:	e8 48 01 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123c67:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0123c6a:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0123c70:	83 ec 0c             	sub    $0xc,%esp
f0123c73:	50                   	push   %eax
f0123c74:	e8 f3 3f fe ff       	call   f0107c6c <kfree>
f0123c79:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c7c:	e8 2e 01 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123c81:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123c84:	74 17                	je     f0123c9d <test_kfree_bestfirstfit+0x1547>
f0123c86:	83 ec 04             	sub    $0x4,%esp
f0123c89:	68 54 b5 13 f0       	push   $0xf013b554
f0123c8e:	68 82 07 00 00       	push   $0x782
f0123c93:	68 3a b5 13 f0       	push   $0xf013b53a
f0123c98:	e8 68 c5 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c9d:	e8 0f 95 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123ca2:	89 c2                	mov    %eax,%edx
f0123ca4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123ca7:	29 c2                	sub    %eax,%edx
f0123ca9:	89 d0                	mov    %edx,%eax
f0123cab:	83 f8 04             	cmp    $0x4,%eax
f0123cae:	74 17                	je     f0123cc7 <test_kfree_bestfirstfit+0x1571>
f0123cb0:	83 ec 04             	sub    $0x4,%esp
f0123cb3:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123cb8:	68 83 07 00 00       	push   $0x783
f0123cbd:	68 3a b5 13 f0       	push   $0xf013b53a
f0123cc2:	e8 3e c5 fd ff       	call   f0100205 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0123cc7:	e8 e5 94 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123ccc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123ccf:	e8 db 00 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123cd4:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123cd7:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123cdd:	83 ec 0c             	sub    $0xc,%esp
f0123ce0:	50                   	push   %eax
f0123ce1:	e8 86 3f fe ff       	call   f0107c6c <kfree>
f0123ce6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ce9:	e8 c1 00 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123cee:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123cf1:	74 17                	je     f0123d0a <test_kfree_bestfirstfit+0x15b4>
f0123cf3:	83 ec 04             	sub    $0x4,%esp
f0123cf6:	68 54 b5 13 f0       	push   $0xf013b554
f0123cfb:	68 89 07 00 00       	push   $0x789
f0123d00:	68 3a b5 13 f0       	push   $0xf013b53a
f0123d05:	e8 fb c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123d0a:	e8 a2 94 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123d0f:	89 c2                	mov    %eax,%edx
f0123d11:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123d14:	29 c2                	sub    %eax,%edx
f0123d16:	89 d0                	mov    %edx,%eax
f0123d18:	3d 00 03 00 00       	cmp    $0x300,%eax
f0123d1d:	74 17                	je     f0123d36 <test_kfree_bestfirstfit+0x15e0>
f0123d1f:	83 ec 04             	sub    $0x4,%esp
f0123d22:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123d27:	68 8a 07 00 00       	push   $0x78a
f0123d2c:	68 3a b5 13 f0       	push   $0xf013b53a
f0123d31:	e8 cf c4 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123d36:	e8 76 94 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123d3b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123d3e:	e8 6c 00 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123d43:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0123d46:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0123d4c:	83 ec 0c             	sub    $0xc,%esp
f0123d4f:	50                   	push   %eax
f0123d50:	e8 17 3f fe ff       	call   f0107c6c <kfree>
f0123d55:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123d58:	e8 52 00 fe ff       	call   f0103daf <pf_calculate_free_frames>
f0123d5d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123d60:	74 17                	je     f0123d79 <test_kfree_bestfirstfit+0x1623>
f0123d62:	83 ec 04             	sub    $0x4,%esp
f0123d65:	68 54 b5 13 f0       	push   $0xf013b554
f0123d6a:	68 90 07 00 00       	push   $0x790
f0123d6f:	68 3a b5 13 f0       	push   $0xf013b53a
f0123d74:	e8 8c c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0123d79:	e8 33 94 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123d7e:	89 c2                	mov    %eax,%edx
f0123d80:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123d83:	29 c2                	sub    %eax,%edx
f0123d85:	89 d0                	mov    %edx,%eax
f0123d87:	83 f8 01             	cmp    $0x1,%eax
f0123d8a:	74 17                	je     f0123da3 <test_kfree_bestfirstfit+0x164d>
f0123d8c:	83 ec 04             	sub    $0x4,%esp
f0123d8f:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123d94:	68 91 07 00 00       	push   $0x791
f0123d99:	68 3a b5 13 f0       	push   $0xf013b53a
f0123d9e:	e8 62 c4 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0123da3:	e8 09 94 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123da8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123dab:	e8 ff ff fd ff       	call   f0103daf <pf_calculate_free_frames>
f0123db0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0123db3:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0123db9:	83 ec 0c             	sub    $0xc,%esp
f0123dbc:	50                   	push   %eax
f0123dbd:	e8 aa 3e fe ff       	call   f0107c6c <kfree>
f0123dc2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123dc5:	e8 e5 ff fd ff       	call   f0103daf <pf_calculate_free_frames>
f0123dca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123dcd:	74 17                	je     f0123de6 <test_kfree_bestfirstfit+0x1690>
f0123dcf:	83 ec 04             	sub    $0x4,%esp
f0123dd2:	68 54 b5 13 f0       	push   $0xf013b554
f0123dd7:	68 97 07 00 00       	push   $0x797
f0123ddc:	68 3a b5 13 f0       	push   $0xf013b53a
f0123de1:	e8 1f c4 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123de6:	e8 c6 93 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123deb:	89 c2                	mov    %eax,%edx
f0123ded:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123df0:	29 c2                	sub    %eax,%edx
f0123df2:	89 d0                	mov    %edx,%eax
f0123df4:	3d 00 01 00 00       	cmp    $0x100,%eax
f0123df9:	74 17                	je     f0123e12 <test_kfree_bestfirstfit+0x16bc>
f0123dfb:	83 ec 04             	sub    $0x4,%esp
f0123dfe:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0123e03:	68 98 07 00 00       	push   $0x798
f0123e08:	68 3a b5 13 f0       	push   $0xf013b53a
f0123e0d:	e8 f3 c3 fd ff       	call   f0100205 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0123e12:	e8 9a 93 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123e17:	89 c2                	mov    %eax,%edx
f0123e19:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123e1c:	39 c2                	cmp    %eax,%edx
f0123e1e:	74 17                	je     f0123e37 <test_kfree_bestfirstfit+0x16e1>
f0123e20:	83 ec 04             	sub    $0x4,%esp
f0123e23:	68 64 bd 13 f0       	push   $0xf013bd64
f0123e28:	68 9a 07 00 00       	push   $0x79a
f0123e2d:	68 3a b5 13 f0       	push   $0xf013b53a
f0123e32:	e8 ce c3 fd ff       	call   f0100205 <_panic>
	}
	cprintf("\b\b\b60%");
f0123e37:	83 ec 0c             	sub    $0xc,%esp
f0123e3a:	68 98 bd 13 f0       	push   $0xf013bd98
f0123e3f:	e8 ca ce fd ff       	call   f0100d0e <cprintf>
f0123e44:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0123e47:	83 ec 0c             	sub    $0xc,%esp
f0123e4a:	6a 03                	push   $0x3
f0123e4c:	e8 00 98 fe ff       	call   f010d651 <sys_bypassPageFault>
f0123e51:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0123e54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0123e5b:	e9 82 00 00 00       	jmp    f0123ee2 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0123e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123e63:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0123e6a:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0123e6d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e70:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123e73:	e8 c7 97 fe ff       	call   f010d63f <sys_rcr2>
f0123e78:	89 c2                	mov    %eax,%edx
f0123e7a:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123e7d:	39 c2                	cmp    %eax,%edx
f0123e7f:	74 17                	je     f0123e98 <test_kfree_bestfirstfit+0x1742>
f0123e81:	83 ec 04             	sub    $0x4,%esp
f0123e84:	68 a0 bd 13 f0       	push   $0xf013bda0
f0123e89:	68 a9 07 00 00       	push   $0x7a9
f0123e8e:	68 3a b5 13 f0       	push   $0xf013b53a
f0123e93:	e8 6d c3 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f0123e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123e9b:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123ea2:	89 c2                	mov    %eax,%edx
f0123ea4:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123ea7:	01 d0                	add    %edx,%eax
f0123ea9:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0123eac:	e8 8e 97 fe ff       	call   f010d63f <sys_rcr2>
f0123eb1:	89 c2                	mov    %eax,%edx
f0123eb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123eb6:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0123ebd:	89 c1                	mov    %eax,%ecx
f0123ebf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0123ec2:	01 c8                	add    %ecx,%eax
f0123ec4:	39 c2                	cmp    %eax,%edx
f0123ec6:	74 17                	je     f0123edf <test_kfree_bestfirstfit+0x1789>
f0123ec8:	83 ec 04             	sub    $0x4,%esp
f0123ecb:	68 a0 bd 13 f0       	push   $0xf013bda0
f0123ed0:	68 ab 07 00 00       	push   $0x7ab
f0123ed5:	68 3a b5 13 f0       	push   $0xf013b53a
f0123eda:	e8 26 c3 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0123edf:	ff 45 f4             	incl   -0xc(%ebp)
f0123ee2:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0123ee6:	0f 8e 74 ff ff ff    	jle    f0123e60 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0123eec:	83 ec 0c             	sub    $0xc,%esp
f0123eef:	6a 00                	push   $0x0
f0123ef1:	e8 5b 97 fe ff       	call   f010d651 <sys_bypassPageFault>
f0123ef6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0123ef9:	83 ec 0c             	sub    $0xc,%esp
f0123efc:	68 e5 bd 13 f0       	push   $0xf013bde5
f0123f01:	e8 08 ce fd ff       	call   f0100d0e <cprintf>
f0123f06:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123f09:	e8 a3 92 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123f0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f11:	e8 99 fe fd ff       	call   f0103daf <pf_calculate_free_frames>
f0123f16:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0123f19:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0123f1f:	83 ec 0c             	sub    $0xc,%esp
f0123f22:	50                   	push   %eax
f0123f23:	e8 44 3d fe ff       	call   f0107c6c <kfree>
f0123f28:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f2b:	e8 7f fe fd ff       	call   f0103daf <pf_calculate_free_frames>
f0123f30:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123f33:	74 17                	je     f0123f4c <test_kfree_bestfirstfit+0x17f6>
f0123f35:	83 ec 04             	sub    $0x4,%esp
f0123f38:	68 54 b5 13 f0       	push   $0xf013b554
f0123f3d:	68 b9 07 00 00       	push   $0x7b9
f0123f42:	68 3a b5 13 f0       	push   $0xf013b53a
f0123f47:	e8 b9 c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123f4c:	e8 60 92 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123f51:	89 c2                	mov    %eax,%edx
f0123f53:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123f56:	39 c2                	cmp    %eax,%edx
f0123f58:	74 17                	je     f0123f71 <test_kfree_bestfirstfit+0x181b>
f0123f5a:	83 ec 04             	sub    $0x4,%esp
f0123f5d:	68 ec bd 13 f0       	push   $0xf013bdec
f0123f62:	68 ba 07 00 00       	push   $0x7ba
f0123f67:	68 3a b5 13 f0       	push   $0xf013b53a
f0123f6c:	e8 94 c2 fd ff       	call   f0100205 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123f71:	e8 3b 92 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123f76:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123f79:	e8 31 fe fd ff       	call   f0103daf <pf_calculate_free_frames>
f0123f7e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0123f81:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0123f87:	83 ec 0c             	sub    $0xc,%esp
f0123f8a:	50                   	push   %eax
f0123f8b:	e8 dc 3c fe ff       	call   f0107c6c <kfree>
f0123f90:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123f93:	e8 17 fe fd ff       	call   f0103daf <pf_calculate_free_frames>
f0123f98:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0123f9b:	74 17                	je     f0123fb4 <test_kfree_bestfirstfit+0x185e>
f0123f9d:	83 ec 04             	sub    $0x4,%esp
f0123fa0:	68 54 b5 13 f0       	push   $0xf013b554
f0123fa5:	68 c0 07 00 00       	push   $0x7c0
f0123faa:	68 3a b5 13 f0       	push   $0xf013b53a
f0123faf:	e8 51 c2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0123fb4:	e8 f8 91 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123fb9:	89 c2                	mov    %eax,%edx
f0123fbb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0123fbe:	39 c2                	cmp    %eax,%edx
f0123fc0:	74 17                	je     f0123fd9 <test_kfree_bestfirstfit+0x1883>
f0123fc2:	83 ec 04             	sub    $0x4,%esp
f0123fc5:	68 ec bd 13 f0       	push   $0xf013bdec
f0123fca:	68 c1 07 00 00       	push   $0x7c1
f0123fcf:	68 3a b5 13 f0       	push   $0xf013b53a
f0123fd4:	e8 2c c2 fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0123fd9:	e8 d3 91 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0123fde:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123fe1:	e8 c9 fd fd ff       	call   f0103daf <pf_calculate_free_frames>
f0123fe6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0123fe9:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0123fef:	83 ec 0c             	sub    $0xc,%esp
f0123ff2:	50                   	push   %eax
f0123ff3:	e8 74 3c fe ff       	call   f0107c6c <kfree>
f0123ff8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123ffb:	e8 af fd fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124000:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0124003:	74 17                	je     f012401c <test_kfree_bestfirstfit+0x18c6>
f0124005:	83 ec 04             	sub    $0x4,%esp
f0124008:	68 54 b5 13 f0       	push   $0xf013b554
f012400d:	68 c7 07 00 00       	push   $0x7c7
f0124012:	68 3a b5 13 f0       	push   $0xf013b53a
f0124017:	e8 e9 c1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012401c:	e8 90 91 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124021:	89 c2                	mov    %eax,%edx
f0124023:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0124026:	39 c2                	cmp    %eax,%edx
f0124028:	74 17                	je     f0124041 <test_kfree_bestfirstfit+0x18eb>
f012402a:	83 ec 04             	sub    $0x4,%esp
f012402d:	68 ec bd 13 f0       	push   $0xf013bdec
f0124032:	68 c8 07 00 00       	push   $0x7c8
f0124037:	68 3a b5 13 f0       	push   $0xf013b53a
f012403c:	e8 c4 c1 fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0124041:	e8 6b 91 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124046:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124049:	e8 61 fd fd ff       	call   f0103daf <pf_calculate_free_frames>
f012404e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0124051:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0124057:	83 ec 0c             	sub    $0xc,%esp
f012405a:	50                   	push   %eax
f012405b:	e8 0c 3c fe ff       	call   f0107c6c <kfree>
f0124060:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124063:	e8 47 fd fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124068:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012406b:	74 17                	je     f0124084 <test_kfree_bestfirstfit+0x192e>
f012406d:	83 ec 04             	sub    $0x4,%esp
f0124070:	68 54 b5 13 f0       	push   $0xf013b554
f0124075:	68 ce 07 00 00       	push   $0x7ce
f012407a:	68 3a b5 13 f0       	push   $0xf013b53a
f012407f:	e8 81 c1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0124084:	e8 28 91 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124089:	89 c2                	mov    %eax,%edx
f012408b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012408e:	39 c2                	cmp    %eax,%edx
f0124090:	74 17                	je     f01240a9 <test_kfree_bestfirstfit+0x1953>
f0124092:	83 ec 04             	sub    $0x4,%esp
f0124095:	68 ec bd 13 f0       	push   $0xf013bdec
f012409a:	68 cf 07 00 00       	push   $0x7cf
f012409f:	68 3a b5 13 f0       	push   $0xf013b53a
f01240a4:	e8 5c c1 fd ff       	call   f0100205 <_panic>

	}
	cprintf("\b\b\b85%");
f01240a9:	83 ec 0c             	sub    $0xc,%esp
f01240ac:	68 33 be 13 f0       	push   $0xf013be33
f01240b1:	e8 58 cc fd ff       	call   f0100d0e <cprintf>
f01240b6:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01240b9:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01240c0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01240c7:	eb 48                	jmp    f0124111 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01240c9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01240cc:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01240d1:	83 ec 04             	sub    $0x4,%esp
f01240d4:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01240da:	51                   	push   %ecx
f01240db:	52                   	push   %edx
f01240dc:	50                   	push   %eax
f01240dd:	e8 b6 29 fe ff       	call   f0106a98 <get_page_table>
f01240e2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01240e5:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01240eb:	85 c0                	test   %eax,%eax
f01240ed:	75 17                	jne    f0124106 <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01240ef:	83 ec 04             	sub    $0x4,%esp
f01240f2:	68 3c be 13 f0       	push   $0xf013be3c
f01240f7:	68 dd 07 00 00       	push   $0x7dd
f01240fc:	68 3a b5 13 f0       	push   $0xf013b53a
f0124101:	e8 ff c0 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0124106:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f012410d:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0124111:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0124115:	78 b2                	js     f01240c9 <test_kfree_bestfirstfit+0x1973>
f0124117:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012411b:	7f 09                	jg     f0124126 <test_kfree_bestfirstfit+0x19d0>
f012411d:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0124124:	76 a3                	jbe    f01240c9 <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0124126:	83 ec 0c             	sub    $0xc,%esp
f0124129:	68 1e b7 13 f0       	push   $0xf013b71e
f012412e:	e8 db cb fd ff       	call   f0100d0e <cprintf>
f0124133:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0124136:	83 ec 0c             	sub    $0xc,%esp
f0124139:	68 a4 be 13 f0       	push   $0xf013bea4
f012413e:	e8 cb cb fd ff       	call   f0100d0e <cprintf>
f0124143:	83 c4 10             	add    $0x10,%esp

	return 1;
f0124146:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012414b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012414e:	5b                   	pop    %ebx
f012414f:	5f                   	pop    %edi
f0124150:	5d                   	pop    %ebp
f0124151:	c3                   	ret    

f0124152 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0124152:	55                   	push   %ebp
f0124153:	89 e5                	mov    %esp,%ebp
f0124155:	57                   	push   %edi
f0124156:	56                   	push   %esi
f0124157:	53                   	push   %ebx
f0124158:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f012415e:	83 ec 0c             	sub    $0xc,%esp
f0124161:	68 7c b4 13 f0       	push   $0xf013b47c
f0124166:	e8 a3 cb fd ff       	call   f0100d0e <cprintf>
f012416b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f012416e:	83 ec 0c             	sub    $0xc,%esp
f0124171:	68 ac b4 13 f0       	push   $0xf013b4ac
f0124176:	e8 93 cb fd ff       	call   f0100d0e <cprintf>
f012417b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f012417e:	83 ec 0c             	sub    $0xc,%esp
f0124181:	68 7c b4 13 f0       	push   $0xf013b47c
f0124186:	e8 83 cb fd ff       	call   f0100d0e <cprintf>
f012418b:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f012418e:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0124192:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0124196:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f012419c:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f01241a2:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f01241a9:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01241b0:	e8 fc 8f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01241b5:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01241b8:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f01241be:	b9 14 00 00 00       	mov    $0x14,%ecx
f01241c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01241c8:	89 d7                	mov    %edx,%edi
f01241ca:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01241cc:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f01241d2:	b9 14 00 00 00       	mov    $0x14,%ecx
f01241d7:	b8 00 00 00 00       	mov    $0x0,%eax
f01241dc:	89 d7                	mov    %edx,%edi
f01241de:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01241e0:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01241e6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01241eb:	b8 00 00 00 00       	mov    $0x0,%eax
f01241f0:	89 d7                	mov    %edx,%edi
f01241f2:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01241f4:	e8 b8 8f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01241f9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01241fc:	e8 ae fb fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124201:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0124204:	83 ec 0c             	sub    $0xc,%esp
f0124207:	68 00 fc 1f 00       	push   $0x1ffc00
f012420c:	e8 53 39 fe ff       	call   f0107b64 <kmalloc>
f0124211:	83 c4 10             	add    $0x10,%esp
f0124214:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012421a:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124220:	89 c1                	mov    %eax,%ecx
f0124222:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0124229:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012422c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124231:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0124234:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124237:	ba 00 00 00 00       	mov    $0x0,%edx
f012423c:	f7 75 a0             	divl   -0x60(%ebp)
f012423f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0124242:	29 d0                	sub    %edx,%eax
f0124244:	89 c3                	mov    %eax,%ebx
f0124246:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012424d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124252:	0f b6 d0             	movzbl %al,%edx
f0124255:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124258:	01 d0                	add    %edx,%eax
f012425a:	48                   	dec    %eax
f012425b:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012425e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124261:	ba 00 00 00 00       	mov    $0x0,%edx
f0124266:	f7 75 98             	divl   -0x68(%ebp)
f0124269:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012426c:	29 d0                	sub    %edx,%eax
f012426e:	01 c3                	add    %eax,%ebx
f0124270:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0124277:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012427c:	0f b6 c0             	movzbl %al,%eax
f012427f:	c1 e0 04             	shl    $0x4,%eax
f0124282:	89 c2                	mov    %eax,%edx
f0124284:	8b 45 90             	mov    -0x70(%ebp),%eax
f0124287:	01 d0                	add    %edx,%eax
f0124289:	48                   	dec    %eax
f012428a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f012428d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0124290:	ba 00 00 00 00       	mov    $0x0,%edx
f0124295:	f7 75 90             	divl   -0x70(%ebp)
f0124298:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012429b:	29 d0                	sub    %edx,%eax
f012429d:	01 d8                	add    %ebx,%eax
f012429f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01242a4:	39 c1                	cmp    %eax,%ecx
f01242a6:	74 17                	je     f01242bf <test_kheap_phys_addr+0x16d>
f01242a8:	83 ec 04             	sub    $0x4,%esp
f01242ab:	68 20 b6 13 f0       	push   $0xf013b620
f01242b0:	68 0a 08 00 00       	push   $0x80a
f01242b5:	68 3a b5 13 f0       	push   $0xf013b53a
f01242ba:	e8 46 bf fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01242bf:	e8 eb fa fd ff       	call   f0103daf <pf_calculate_free_frames>
f01242c4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01242c7:	74 17                	je     f01242e0 <test_kheap_phys_addr+0x18e>
f01242c9:	83 ec 04             	sub    $0x4,%esp
f01242cc:	68 54 b5 13 f0       	push   $0xf013b554
f01242d1:	68 0b 08 00 00       	push   $0x80b
f01242d6:	68 3a b5 13 f0       	push   $0xf013b53a
f01242db:	e8 25 bf fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01242e0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01242e3:	e8 c9 8e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01242e8:	29 c3                	sub    %eax,%ebx
f01242ea:	89 d8                	mov    %ebx,%eax
f01242ec:	3d 00 02 00 00       	cmp    $0x200,%eax
f01242f1:	74 17                	je     f012430a <test_kheap_phys_addr+0x1b8>
f01242f3:	83 ec 04             	sub    $0x4,%esp
f01242f6:	68 bc b5 13 f0       	push   $0xf013b5bc
f01242fb:	68 0c 08 00 00       	push   $0x80c
f0124300:	68 3a b5 13 f0       	push   $0xf013b53a
f0124305:	e8 fb be fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012430a:	e8 a2 8e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012430f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124312:	e8 98 fa fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124317:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012431a:	83 ec 0c             	sub    $0xc,%esp
f012431d:	68 00 fc 1f 00       	push   $0x1ffc00
f0124322:	e8 3d 38 fe ff       	call   f0107b64 <kmalloc>
f0124327:	83 c4 10             	add    $0x10,%esp
f012432a:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124330:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124336:	89 c1                	mov    %eax,%ecx
f0124338:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012433f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0124342:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124347:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012434a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012434d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124352:	f7 75 88             	divl   -0x78(%ebp)
f0124355:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124358:	29 d0                	sub    %edx,%eax
f012435a:	89 c3                	mov    %eax,%ebx
f012435c:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0124363:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124368:	0f b6 d0             	movzbl %al,%edx
f012436b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012436e:	01 d0                	add    %edx,%eax
f0124370:	48                   	dec    %eax
f0124371:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0124377:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012437d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124382:	f7 75 80             	divl   -0x80(%ebp)
f0124385:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012438b:	29 d0                	sub    %edx,%eax
f012438d:	01 c3                	add    %eax,%ebx
f012438f:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0124396:	10 00 00 
f0124399:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012439e:	0f b6 c0             	movzbl %al,%eax
f01243a1:	c1 e0 04             	shl    $0x4,%eax
f01243a4:	89 c2                	mov    %eax,%edx
f01243a6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01243ac:	01 d0                	add    %edx,%eax
f01243ae:	48                   	dec    %eax
f01243af:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01243b5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01243bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01243c0:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01243c6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01243cc:	29 d0                	sub    %edx,%eax
f01243ce:	01 d8                	add    %ebx,%eax
f01243d0:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01243d5:	39 c1                	cmp    %eax,%ecx
f01243d7:	74 17                	je     f01243f0 <test_kheap_phys_addr+0x29e>
f01243d9:	83 ec 04             	sub    $0x4,%esp
f01243dc:	68 20 b6 13 f0       	push   $0xf013b620
f01243e1:	68 12 08 00 00       	push   $0x812
f01243e6:	68 3a b5 13 f0       	push   $0xf013b53a
f01243eb:	e8 15 be fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243f0:	e8 ba f9 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01243f5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01243f8:	74 17                	je     f0124411 <test_kheap_phys_addr+0x2bf>
f01243fa:	83 ec 04             	sub    $0x4,%esp
f01243fd:	68 54 b5 13 f0       	push   $0xf013b554
f0124402:	68 13 08 00 00       	push   $0x813
f0124407:	68 3a b5 13 f0       	push   $0xf013b53a
f012440c:	e8 f4 bd fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124411:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124414:	e8 98 8d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124419:	29 c3                	sub    %eax,%ebx
f012441b:	89 d8                	mov    %ebx,%eax
f012441d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124422:	74 17                	je     f012443b <test_kheap_phys_addr+0x2e9>
f0124424:	83 ec 04             	sub    $0x4,%esp
f0124427:	68 bc b5 13 f0       	push   $0xf013b5bc
f012442c:	68 14 08 00 00       	push   $0x814
f0124431:	68 3a b5 13 f0       	push   $0xf013b53a
f0124436:	e8 ca bd fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012443b:	e8 71 8d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124440:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124443:	e8 67 f9 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124448:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012444b:	83 ec 0c             	sub    $0xc,%esp
f012444e:	68 00 08 00 00       	push   $0x800
f0124453:	e8 0c 37 fe ff       	call   f0107b64 <kmalloc>
f0124458:	83 c4 10             	add    $0x10,%esp
f012445b:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124461:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f0124467:	89 c1                	mov    %eax,%ecx
f0124469:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0124470:	10 00 00 
f0124473:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124479:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012447e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0124484:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012448a:	ba 00 00 00 00       	mov    $0x0,%edx
f012448f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0124495:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012449b:	29 d0                	sub    %edx,%eax
f012449d:	89 c3                	mov    %eax,%ebx
f012449f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01244a6:	10 00 00 
f01244a9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01244ae:	0f b6 d0             	movzbl %al,%edx
f01244b1:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01244b7:	01 d0                	add    %edx,%eax
f01244b9:	48                   	dec    %eax
f01244ba:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01244c0:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01244c6:	ba 00 00 00 00       	mov    $0x0,%edx
f01244cb:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01244d1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01244d7:	29 d0                	sub    %edx,%eax
f01244d9:	01 c3                	add    %eax,%ebx
f01244db:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01244e2:	10 00 00 
f01244e5:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01244ea:	0f b6 c0             	movzbl %al,%eax
f01244ed:	c1 e0 04             	shl    $0x4,%eax
f01244f0:	89 c2                	mov    %eax,%edx
f01244f2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01244f8:	01 d0                	add    %edx,%eax
f01244fa:	48                   	dec    %eax
f01244fb:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0124501:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124507:	ba 00 00 00 00       	mov    $0x0,%edx
f012450c:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0124512:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0124518:	29 d0                	sub    %edx,%eax
f012451a:	01 d8                	add    %ebx,%eax
f012451c:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0124521:	39 c1                	cmp    %eax,%ecx
f0124523:	74 17                	je     f012453c <test_kheap_phys_addr+0x3ea>
f0124525:	83 ec 04             	sub    $0x4,%esp
f0124528:	68 20 b6 13 f0       	push   $0xf013b620
f012452d:	68 1a 08 00 00       	push   $0x81a
f0124532:	68 3a b5 13 f0       	push   $0xf013b53a
f0124537:	e8 c9 bc fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012453c:	e8 6e f8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124541:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124544:	74 17                	je     f012455d <test_kheap_phys_addr+0x40b>
f0124546:	83 ec 04             	sub    $0x4,%esp
f0124549:	68 54 b5 13 f0       	push   $0xf013b554
f012454e:	68 1b 08 00 00       	push   $0x81b
f0124553:	68 3a b5 13 f0       	push   $0xf013b53a
f0124558:	e8 a8 bc fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012455d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124560:	e8 4c 8c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124565:	29 c3                	sub    %eax,%ebx
f0124567:	89 d8                	mov    %ebx,%eax
f0124569:	83 f8 01             	cmp    $0x1,%eax
f012456c:	74 17                	je     f0124585 <test_kheap_phys_addr+0x433>
f012456e:	83 ec 04             	sub    $0x4,%esp
f0124571:	68 bc b5 13 f0       	push   $0xf013b5bc
f0124576:	68 1c 08 00 00       	push   $0x81c
f012457b:	68 3a b5 13 f0       	push   $0xf013b53a
f0124580:	e8 80 bc fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124585:	e8 27 8c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012458a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012458d:	e8 1d f8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124592:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124595:	83 ec 0c             	sub    $0xc,%esp
f0124598:	68 00 08 00 00       	push   $0x800
f012459d:	e8 c2 35 fe ff       	call   f0107b64 <kmalloc>
f01245a2:	83 c4 10             	add    $0x10,%esp
f01245a5:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01245ab:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f01245b1:	89 c1                	mov    %eax,%ecx
f01245b3:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01245ba:	10 00 00 
f01245bd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01245c3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01245c8:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01245ce:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01245d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01245d9:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01245df:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01245e5:	29 d0                	sub    %edx,%eax
f01245e7:	89 c3                	mov    %eax,%ebx
f01245e9:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01245f0:	10 00 00 
f01245f3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01245f8:	0f b6 d0             	movzbl %al,%edx
f01245fb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0124601:	01 d0                	add    %edx,%eax
f0124603:	48                   	dec    %eax
f0124604:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012460a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124610:	ba 00 00 00 00       	mov    $0x0,%edx
f0124615:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012461b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124621:	29 d0                	sub    %edx,%eax
f0124623:	01 c3                	add    %eax,%ebx
f0124625:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012462c:	10 00 00 
f012462f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124634:	0f b6 c0             	movzbl %al,%eax
f0124637:	c1 e0 04             	shl    $0x4,%eax
f012463a:	89 c2                	mov    %eax,%edx
f012463c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124642:	01 d0                	add    %edx,%eax
f0124644:	48                   	dec    %eax
f0124645:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012464b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124651:	ba 00 00 00 00       	mov    $0x0,%edx
f0124656:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012465c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124662:	29 d0                	sub    %edx,%eax
f0124664:	01 d8                	add    %ebx,%eax
f0124666:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012466b:	39 c1                	cmp    %eax,%ecx
f012466d:	74 17                	je     f0124686 <test_kheap_phys_addr+0x534>
f012466f:	83 ec 04             	sub    $0x4,%esp
f0124672:	68 20 b6 13 f0       	push   $0xf013b620
f0124677:	68 22 08 00 00       	push   $0x822
f012467c:	68 3a b5 13 f0       	push   $0xf013b53a
f0124681:	e8 7f bb fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124686:	e8 24 f7 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012468b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012468e:	74 17                	je     f01246a7 <test_kheap_phys_addr+0x555>
f0124690:	83 ec 04             	sub    $0x4,%esp
f0124693:	68 54 b5 13 f0       	push   $0xf013b554
f0124698:	68 23 08 00 00       	push   $0x823
f012469d:	68 3a b5 13 f0       	push   $0xf013b53a
f01246a2:	e8 5e bb fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01246a7:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01246aa:	e8 02 8b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01246af:	29 c3                	sub    %eax,%ebx
f01246b1:	89 d8                	mov    %ebx,%eax
f01246b3:	83 f8 01             	cmp    $0x1,%eax
f01246b6:	74 17                	je     f01246cf <test_kheap_phys_addr+0x57d>
f01246b8:	83 ec 04             	sub    $0x4,%esp
f01246bb:	68 bc b5 13 f0       	push   $0xf013b5bc
f01246c0:	68 24 08 00 00       	push   $0x824
f01246c5:	68 3a b5 13 f0       	push   $0xf013b53a
f01246ca:	e8 36 bb fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01246cf:	e8 dd 8a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01246d4:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01246d7:	e8 d3 f6 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01246dc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01246df:	83 ec 0c             	sub    $0xc,%esp
f01246e2:	68 00 1c 00 00       	push   $0x1c00
f01246e7:	e8 78 34 fe ff       	call   f0107b64 <kmalloc>
f01246ec:	83 c4 10             	add    $0x10,%esp
f01246ef:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246f5:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01246fb:	89 c1                	mov    %eax,%ecx
f01246fd:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0124704:	10 00 00 
f0124707:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012470d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124712:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0124718:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012471e:	ba 00 00 00 00       	mov    $0x0,%edx
f0124723:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0124729:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012472f:	29 d0                	sub    %edx,%eax
f0124731:	89 c3                	mov    %eax,%ebx
f0124733:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012473a:	10 00 00 
f012473d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124742:	0f b6 d0             	movzbl %al,%edx
f0124745:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012474b:	01 d0                	add    %edx,%eax
f012474d:	48                   	dec    %eax
f012474e:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0124754:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012475a:	ba 00 00 00 00       	mov    $0x0,%edx
f012475f:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0124765:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012476b:	29 d0                	sub    %edx,%eax
f012476d:	01 c3                	add    %eax,%ebx
f012476f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0124776:	10 00 00 
f0124779:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012477e:	0f b6 c0             	movzbl %al,%eax
f0124781:	c1 e0 04             	shl    $0x4,%eax
f0124784:	89 c2                	mov    %eax,%edx
f0124786:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012478c:	01 d0                	add    %edx,%eax
f012478e:	48                   	dec    %eax
f012478f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0124795:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012479b:	ba 00 00 00 00       	mov    $0x0,%edx
f01247a0:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01247a6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01247ac:	29 d0                	sub    %edx,%eax
f01247ae:	01 d8                	add    %ebx,%eax
f01247b0:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01247b5:	39 c1                	cmp    %eax,%ecx
f01247b7:	74 17                	je     f01247d0 <test_kheap_phys_addr+0x67e>
f01247b9:	83 ec 04             	sub    $0x4,%esp
f01247bc:	68 20 b6 13 f0       	push   $0xf013b620
f01247c1:	68 2a 08 00 00       	push   $0x82a
f01247c6:	68 3a b5 13 f0       	push   $0xf013b53a
f01247cb:	e8 35 ba fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01247d0:	e8 da f5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01247d5:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01247d8:	74 17                	je     f01247f1 <test_kheap_phys_addr+0x69f>
f01247da:	83 ec 04             	sub    $0x4,%esp
f01247dd:	68 54 b5 13 f0       	push   $0xf013b554
f01247e2:	68 2b 08 00 00       	push   $0x82b
f01247e7:	68 3a b5 13 f0       	push   $0xf013b53a
f01247ec:	e8 14 ba fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01247f1:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01247f4:	e8 b8 89 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01247f9:	29 c3                	sub    %eax,%ebx
f01247fb:	89 d8                	mov    %ebx,%eax
f01247fd:	83 f8 02             	cmp    $0x2,%eax
f0124800:	74 17                	je     f0124819 <test_kheap_phys_addr+0x6c7>
f0124802:	83 ec 04             	sub    $0x4,%esp
f0124805:	68 bc b5 13 f0       	push   $0xf013b5bc
f012480a:	68 2c 08 00 00       	push   $0x82c
f012480f:	68 3a b5 13 f0       	push   $0xf013b53a
f0124814:	e8 ec b9 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124819:	e8 93 89 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012481e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124821:	e8 89 f5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124826:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124829:	83 ec 0c             	sub    $0xc,%esp
f012482c:	68 00 fc 2f 00       	push   $0x2ffc00
f0124831:	e8 2e 33 fe ff       	call   f0107b64 <kmalloc>
f0124836:	83 c4 10             	add    $0x10,%esp
f0124839:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012483f:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0124845:	89 c1                	mov    %eax,%ecx
f0124847:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012484e:	10 00 00 
f0124851:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0124857:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012485c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0124862:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124868:	ba 00 00 00 00       	mov    $0x0,%edx
f012486d:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0124873:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124879:	29 d0                	sub    %edx,%eax
f012487b:	89 c3                	mov    %eax,%ebx
f012487d:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0124884:	10 00 00 
f0124887:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012488c:	0f b6 d0             	movzbl %al,%edx
f012488f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124895:	01 d0                	add    %edx,%eax
f0124897:	48                   	dec    %eax
f0124898:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012489e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01248a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01248a9:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01248af:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01248b5:	29 d0                	sub    %edx,%eax
f01248b7:	01 c3                	add    %eax,%ebx
f01248b9:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f01248c0:	10 00 00 
f01248c3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01248c8:	0f b6 c0             	movzbl %al,%eax
f01248cb:	c1 e0 04             	shl    $0x4,%eax
f01248ce:	89 c2                	mov    %eax,%edx
f01248d0:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01248d6:	01 d0                	add    %edx,%eax
f01248d8:	48                   	dec    %eax
f01248d9:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01248df:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01248e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01248ea:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01248f0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01248f6:	29 d0                	sub    %edx,%eax
f01248f8:	01 d8                	add    %ebx,%eax
f01248fa:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01248ff:	39 c1                	cmp    %eax,%ecx
f0124901:	74 17                	je     f012491a <test_kheap_phys_addr+0x7c8>
f0124903:	83 ec 04             	sub    $0x4,%esp
f0124906:	68 20 b6 13 f0       	push   $0xf013b620
f012490b:	68 32 08 00 00       	push   $0x832
f0124910:	68 3a b5 13 f0       	push   $0xf013b53a
f0124915:	e8 eb b8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012491a:	e8 90 f4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012491f:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124922:	74 17                	je     f012493b <test_kheap_phys_addr+0x7e9>
f0124924:	83 ec 04             	sub    $0x4,%esp
f0124927:	68 54 b5 13 f0       	push   $0xf013b554
f012492c:	68 33 08 00 00       	push   $0x833
f0124931:	68 3a b5 13 f0       	push   $0xf013b53a
f0124936:	e8 ca b8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012493b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012493e:	e8 6e 88 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124943:	29 c3                	sub    %eax,%ebx
f0124945:	89 d8                	mov    %ebx,%eax
f0124947:	3d 00 03 00 00       	cmp    $0x300,%eax
f012494c:	74 17                	je     f0124965 <test_kheap_phys_addr+0x813>
f012494e:	83 ec 04             	sub    $0x4,%esp
f0124951:	68 bc b5 13 f0       	push   $0xf013b5bc
f0124956:	68 34 08 00 00       	push   $0x834
f012495b:	68 3a b5 13 f0       	push   $0xf013b53a
f0124960:	e8 a0 b8 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124965:	e8 47 88 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012496a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012496d:	e8 3d f4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124972:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124975:	83 ec 0c             	sub    $0xc,%esp
f0124978:	68 00 fc 5f 00       	push   $0x5ffc00
f012497d:	e8 e2 31 fe ff       	call   f0107b64 <kmalloc>
f0124982:	83 c4 10             	add    $0x10,%esp
f0124985:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012498b:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124991:	89 c1                	mov    %eax,%ecx
f0124993:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012499a:	10 00 00 
f012499d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01249a3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01249a8:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01249ae:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01249b4:	ba 00 00 00 00       	mov    $0x0,%edx
f01249b9:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01249bf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01249c5:	29 d0                	sub    %edx,%eax
f01249c7:	89 c3                	mov    %eax,%ebx
f01249c9:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01249d0:	10 00 00 
f01249d3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01249d8:	0f b6 d0             	movzbl %al,%edx
f01249db:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01249e1:	01 d0                	add    %edx,%eax
f01249e3:	48                   	dec    %eax
f01249e4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01249ea:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01249f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01249f5:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01249fb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124a01:	29 d0                	sub    %edx,%eax
f0124a03:	01 c3                	add    %eax,%ebx
f0124a05:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0124a0c:	10 00 00 
f0124a0f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124a14:	0f b6 c0             	movzbl %al,%eax
f0124a17:	c1 e0 04             	shl    $0x4,%eax
f0124a1a:	89 c2                	mov    %eax,%edx
f0124a1c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124a22:	01 d0                	add    %edx,%eax
f0124a24:	48                   	dec    %eax
f0124a25:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0124a2b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124a31:	ba 00 00 00 00       	mov    $0x0,%edx
f0124a36:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0124a3c:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124a42:	29 d0                	sub    %edx,%eax
f0124a44:	01 d8                	add    %ebx,%eax
f0124a46:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124a4b:	39 c1                	cmp    %eax,%ecx
f0124a4d:	74 17                	je     f0124a66 <test_kheap_phys_addr+0x914>
f0124a4f:	83 ec 04             	sub    $0x4,%esp
f0124a52:	68 20 b6 13 f0       	push   $0xf013b620
f0124a57:	68 3a 08 00 00       	push   $0x83a
f0124a5c:	68 3a b5 13 f0       	push   $0xf013b53a
f0124a61:	e8 9f b7 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a66:	e8 44 f3 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124a6b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124a6e:	74 17                	je     f0124a87 <test_kheap_phys_addr+0x935>
f0124a70:	83 ec 04             	sub    $0x4,%esp
f0124a73:	68 54 b5 13 f0       	push   $0xf013b554
f0124a78:	68 3b 08 00 00       	push   $0x83b
f0124a7d:	68 3a b5 13 f0       	push   $0xf013b53a
f0124a82:	e8 7e b7 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124a87:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124a8a:	e8 22 87 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124a8f:	29 c3                	sub    %eax,%ebx
f0124a91:	89 d8                	mov    %ebx,%eax
f0124a93:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124a98:	74 17                	je     f0124ab1 <test_kheap_phys_addr+0x95f>
f0124a9a:	83 ec 04             	sub    $0x4,%esp
f0124a9d:	68 bc b5 13 f0       	push   $0xf013b5bc
f0124aa2:	68 3c 08 00 00       	push   $0x83c
f0124aa7:	68 3a b5 13 f0       	push   $0xf013b53a
f0124aac:	e8 54 b7 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124ab1:	e8 fb 86 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124ab6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124ab9:	e8 f1 f2 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124abe:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124ac1:	83 ec 0c             	sub    $0xc,%esp
f0124ac4:	68 00 38 00 00       	push   $0x3800
f0124ac9:	e8 96 30 fe ff       	call   f0107b64 <kmalloc>
f0124ace:	83 c4 10             	add    $0x10,%esp
f0124ad1:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124ad7:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124add:	89 c1                	mov    %eax,%ecx
f0124adf:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0124ae6:	10 00 00 
f0124ae9:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124aef:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124af4:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0124afa:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124b00:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b05:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0124b0b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124b11:	29 d0                	sub    %edx,%eax
f0124b13:	89 c3                	mov    %eax,%ebx
f0124b15:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0124b1c:	10 00 00 
f0124b1f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124b24:	0f b6 d0             	movzbl %al,%edx
f0124b27:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124b2d:	01 d0                	add    %edx,%eax
f0124b2f:	48                   	dec    %eax
f0124b30:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0124b36:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124b3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b41:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0124b47:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124b4d:	29 d0                	sub    %edx,%eax
f0124b4f:	01 c3                	add    %eax,%ebx
f0124b51:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0124b58:	10 00 00 
f0124b5b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124b60:	0f b6 c0             	movzbl %al,%eax
f0124b63:	c1 e0 04             	shl    $0x4,%eax
f0124b66:	89 c2                	mov    %eax,%edx
f0124b68:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124b6e:	01 d0                	add    %edx,%eax
f0124b70:	48                   	dec    %eax
f0124b71:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0124b77:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124b7d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b82:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0124b88:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124b8e:	29 d0                	sub    %edx,%eax
f0124b90:	01 d8                	add    %ebx,%eax
f0124b92:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124b97:	39 c1                	cmp    %eax,%ecx
f0124b99:	74 17                	je     f0124bb2 <test_kheap_phys_addr+0xa60>
f0124b9b:	83 ec 04             	sub    $0x4,%esp
f0124b9e:	68 20 b6 13 f0       	push   $0xf013b620
f0124ba3:	68 42 08 00 00       	push   $0x842
f0124ba8:	68 3a b5 13 f0       	push   $0xf013b53a
f0124bad:	e8 53 b6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124bb2:	e8 f8 f1 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124bb7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0124bba:	74 17                	je     f0124bd3 <test_kheap_phys_addr+0xa81>
f0124bbc:	83 ec 04             	sub    $0x4,%esp
f0124bbf:	68 54 b5 13 f0       	push   $0xf013b554
f0124bc4:	68 43 08 00 00       	push   $0x843
f0124bc9:	68 3a b5 13 f0       	push   $0xf013b53a
f0124bce:	e8 32 b6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124bd3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0124bd6:	e8 d6 85 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124bdb:	29 c3                	sub    %eax,%ebx
f0124bdd:	89 d8                	mov    %ebx,%eax
f0124bdf:	83 f8 04             	cmp    $0x4,%eax
f0124be2:	74 17                	je     f0124bfb <test_kheap_phys_addr+0xaa9>
f0124be4:	83 ec 04             	sub    $0x4,%esp
f0124be7:	68 bc b5 13 f0       	push   $0xf013b5bc
f0124bec:	68 44 08 00 00       	push   $0x844
f0124bf1:	68 3a b5 13 f0       	push   $0xf013b53a
f0124bf6:	e8 0a b6 fd ff       	call   f0100205 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0124bfb:	89 e0                	mov    %esp,%eax
f0124bfd:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124bff:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0124c06:	10 00 00 
f0124c09:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124c0f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124c14:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0124c1a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124c20:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c25:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0124c2b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124c31:	29 d0                	sub    %edx,%eax
f0124c33:	89 c1                	mov    %eax,%ecx
f0124c35:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0124c3c:	10 00 00 
f0124c3f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124c44:	0f b6 d0             	movzbl %al,%edx
f0124c47:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124c4d:	01 d0                	add    %edx,%eax
f0124c4f:	48                   	dec    %eax
f0124c50:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0124c56:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124c5c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c61:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0124c67:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0124c6d:	29 d0                	sub    %edx,%eax
f0124c6f:	01 c1                	add    %eax,%ecx
f0124c71:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0124c78:	10 00 00 
f0124c7b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124c80:	0f b6 c0             	movzbl %al,%eax
f0124c83:	c1 e0 04             	shl    $0x4,%eax
f0124c86:	89 c2                	mov    %eax,%edx
f0124c88:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0124c8e:	01 d0                	add    %edx,%eax
f0124c90:	48                   	dec    %eax
f0124c91:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0124c97:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124c9d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ca2:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0124ca8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124cae:	29 d0                	sub    %edx,%eax
f0124cb0:	01 c8                	add    %ecx,%eax
f0124cb2:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124cb7:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0124cbd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124cc4:	10 00 00 
f0124cc7:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124ccd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124cd2:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124cd8:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124cde:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ce3:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124ce9:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124cef:	29 d0                	sub    %edx,%eax
f0124cf1:	89 c1                	mov    %eax,%ecx
f0124cf3:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124cfa:	10 00 00 
f0124cfd:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124d02:	0f b6 d0             	movzbl %al,%edx
f0124d05:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124d0b:	01 d0                	add    %edx,%eax
f0124d0d:	48                   	dec    %eax
f0124d0e:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124d14:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124d1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d1f:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124d25:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124d2b:	29 d0                	sub    %edx,%eax
f0124d2d:	01 c1                	add    %eax,%ecx
f0124d2f:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124d36:	10 00 00 
f0124d39:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0124d3e:	0f b6 c0             	movzbl %al,%eax
f0124d41:	c1 e0 04             	shl    $0x4,%eax
f0124d44:	89 c2                	mov    %eax,%edx
f0124d46:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124d4c:	01 d0                	add    %edx,%eax
f0124d4e:	48                   	dec    %eax
f0124d4f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124d55:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124d5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d60:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124d66:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124d6c:	29 d0                	sub    %edx,%eax
f0124d6e:	01 c8                	add    %ecx,%eax
f0124d70:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124d75:	c1 e8 0c             	shr    $0xc,%eax
f0124d78:	89 c2                	mov    %eax,%edx
f0124d7a:	4a                   	dec    %edx
f0124d7b:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f0124d81:	c1 e0 02             	shl    $0x2,%eax
f0124d84:	8d 50 03             	lea    0x3(%eax),%edx
f0124d87:	b8 10 00 00 00       	mov    $0x10,%eax
f0124d8c:	48                   	dec    %eax
f0124d8d:	01 d0                	add    %edx,%eax
f0124d8f:	bf 10 00 00 00       	mov    $0x10,%edi
f0124d94:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d99:	f7 f7                	div    %edi
f0124d9b:	6b c0 10             	imul   $0x10,%eax,%eax
f0124d9e:	29 c4                	sub    %eax,%esp
f0124da0:	89 e0                	mov    %esp,%eax
f0124da2:	83 c0 03             	add    $0x3,%eax
f0124da5:	c1 e8 02             	shr    $0x2,%eax
f0124da8:	c1 e0 02             	shl    $0x2,%eax
f0124dab:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0124db1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124db8:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0124dbf:	10 00 00 
f0124dc2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124dc8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124dcd:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0124dd3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124dd9:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dde:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0124de4:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124dea:	29 d0                	sub    %edx,%eax
f0124dec:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124df1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124df4:	eb 29                	jmp    f0124e1f <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0124df6:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0124df9:	8d 43 01             	lea    0x1(%ebx),%eax
f0124dfc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0124dff:	83 ec 0c             	sub    $0xc,%esp
f0124e02:	ff 75 e0             	pushl  -0x20(%ebp)
f0124e05:	e8 e6 2f fe ff       	call   f0107df0 <kheap_physical_address>
f0124e0a:	83 c4 10             	add    $0x10,%esp
f0124e0d:	89 c2                	mov    %eax,%edx
f0124e0f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124e15:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0124e18:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0124e1f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124e22:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124e28:	72 cc                	jb     f0124df6 <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0124e2a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124e2d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0124e33:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124e3a:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124e41:	10 00 00 
f0124e44:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124e4a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e4f:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124e55:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124e5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e60:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124e66:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124e6c:	29 d0                	sub    %edx,%eax
f0124e6e:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0124e73:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0124e76:	e9 ab 00 00 00       	jmp    f0124f26 <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0124e7b:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0124e80:	83 ec 04             	sub    $0x4,%esp
f0124e83:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0124e89:	52                   	push   %edx
f0124e8a:	ff 75 e0             	pushl  -0x20(%ebp)
f0124e8d:	50                   	push   %eax
f0124e8e:	e8 05 1c fe ff       	call   f0106a98 <get_page_table>
f0124e93:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0124e96:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124e9c:	85 c0                	test   %eax,%eax
f0124e9e:	75 17                	jne    f0124eb7 <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124ea0:	83 ec 04             	sub    $0x4,%esp
f0124ea3:	68 dc be 13 f0       	push   $0xf013bedc
f0124ea8:	68 59 08 00 00       	push   $0x859
f0124ead:	68 3a b5 13 f0       	push   $0xf013b53a
f0124eb2:	e8 4e b3 fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124eb7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124eba:	c1 e8 0c             	shr    $0xc,%eax
f0124ebd:	25 ff 03 00 00       	and    $0x3ff,%eax
f0124ec2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0124ec5:	eb 4b                	jmp    f0124f12 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0124ec7:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0124ecd:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0124ed0:	c1 e2 02             	shl    $0x2,%edx
f0124ed3:	01 d0                	add    %edx,%eax
f0124ed5:	8b 00                	mov    (%eax),%eax
f0124ed7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0124edc:	89 c1                	mov    %eax,%ecx
f0124ede:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124ee4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0124ee7:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0124eea:	39 c1                	cmp    %eax,%ecx
f0124eec:	74 17                	je     f0124f05 <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124eee:	83 ec 04             	sub    $0x4,%esp
f0124ef1:	68 35 bf 13 f0       	push   $0xf013bf35
f0124ef6:	68 60 08 00 00       	push   $0x860
f0124efb:	68 3a b5 13 f0       	push   $0xf013b53a
f0124f00:	e8 00 b3 fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f0124f05:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0124f0c:	ff 45 dc             	incl   -0x24(%ebp)
f0124f0f:	ff 45 e4             	incl   -0x1c(%ebp)
f0124f12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124f15:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0124f1b:	7d 09                	jge    f0124f26 <test_kheap_phys_addr+0xdd4>
f0124f1d:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0124f24:	7e a1                	jle    f0124ec7 <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124f26:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0124f29:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0124f2f:	0f 82 46 ff ff ff    	jb     f0124e7b <test_kheap_phys_addr+0xd29>
f0124f35:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0124f37:	83 ec 0c             	sub    $0xc,%esp
f0124f3a:	68 54 bf 13 f0       	push   $0xf013bf54
f0124f3f:	e8 ca bd fd ff       	call   f0100d0e <cprintf>
f0124f44:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0124f47:	e8 65 82 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124f4c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0124f52:	e8 58 ee fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124f57:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0124f5d:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0124f63:	83 ec 0c             	sub    $0xc,%esp
f0124f66:	50                   	push   %eax
f0124f67:	e8 00 2d fe ff       	call   f0107c6c <kfree>
f0124f6c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124f6f:	e8 3b ee fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124f74:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124f7a:	74 17                	je     f0124f93 <test_kheap_phys_addr+0xe41>
f0124f7c:	83 ec 04             	sub    $0x4,%esp
f0124f7f:	68 54 b5 13 f0       	push   $0xf013b554
f0124f84:	68 6e 08 00 00       	push   $0x86e
f0124f89:	68 3a b5 13 f0       	push   $0xf013b53a
f0124f8e:	e8 72 b2 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0124f93:	e8 19 82 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124f98:	89 c2                	mov    %eax,%edx
f0124f9a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0124fa0:	29 c2                	sub    %eax,%edx
f0124fa2:	89 d0                	mov    %edx,%eax
f0124fa4:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124fa9:	74 17                	je     f0124fc2 <test_kheap_phys_addr+0xe70>
f0124fab:	83 ec 04             	sub    $0x4,%esp
f0124fae:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0124fb3:	68 6f 08 00 00       	push   $0x86f
f0124fb8:	68 3a b5 13 f0       	push   $0xf013b53a
f0124fbd:	e8 43 b2 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124fc2:	e8 ea 81 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0124fc7:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124fcd:	e8 dd ed fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124fd2:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0124fd8:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124fde:	83 ec 0c             	sub    $0xc,%esp
f0124fe1:	50                   	push   %eax
f0124fe2:	e8 85 2c fe ff       	call   f0107c6c <kfree>
f0124fe7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124fea:	e8 c0 ed fd ff       	call   f0103daf <pf_calculate_free_frames>
f0124fef:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0124ff5:	74 17                	je     f012500e <test_kheap_phys_addr+0xebc>
f0124ff7:	83 ec 04             	sub    $0x4,%esp
f0124ffa:	68 54 b5 13 f0       	push   $0xf013b554
f0124fff:	68 75 08 00 00       	push   $0x875
f0125004:	68 3a b5 13 f0       	push   $0xf013b53a
f0125009:	e8 f7 b1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012500e:	e8 9e 81 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125013:	89 c2                	mov    %eax,%edx
f0125015:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012501b:	29 c2                	sub    %eax,%edx
f012501d:	89 d0                	mov    %edx,%eax
f012501f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125024:	74 17                	je     f012503d <test_kheap_phys_addr+0xeeb>
f0125026:	83 ec 04             	sub    $0x4,%esp
f0125029:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012502e:	68 76 08 00 00       	push   $0x876
f0125033:	68 3a b5 13 f0       	push   $0xf013b53a
f0125038:	e8 c8 b1 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012503d:	e8 6f 81 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125042:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125048:	e8 62 ed fd ff       	call   f0103daf <pf_calculate_free_frames>
f012504d:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0125053:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125059:	83 ec 0c             	sub    $0xc,%esp
f012505c:	50                   	push   %eax
f012505d:	e8 0a 2c fe ff       	call   f0107c6c <kfree>
f0125062:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125065:	e8 45 ed fd ff       	call   f0103daf <pf_calculate_free_frames>
f012506a:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0125070:	74 17                	je     f0125089 <test_kheap_phys_addr+0xf37>
f0125072:	83 ec 04             	sub    $0x4,%esp
f0125075:	68 54 b5 13 f0       	push   $0xf013b554
f012507a:	68 7c 08 00 00       	push   $0x87c
f012507f:	68 3a b5 13 f0       	push   $0xf013b53a
f0125084:	e8 7c b1 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0125089:	e8 23 81 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012508e:	89 c2                	mov    %eax,%edx
f0125090:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0125096:	29 c2                	sub    %eax,%edx
f0125098:	89 d0                	mov    %edx,%eax
f012509a:	3d 00 06 00 00       	cmp    $0x600,%eax
f012509f:	74 17                	je     f01250b8 <test_kheap_phys_addr+0xf66>
f01250a1:	83 ec 04             	sub    $0x4,%esp
f01250a4:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01250a9:	68 7d 08 00 00       	push   $0x87d
f01250ae:	68 3a b5 13 f0       	push   $0xf013b53a
f01250b3:	e8 4d b1 fd ff       	call   f0100205 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f01250b8:	89 e0                	mov    %esp,%eax
f01250ba:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01250bc:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f01250c3:	10 00 00 
f01250c6:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01250cc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01250d1:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f01250d7:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01250dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01250e2:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f01250e8:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01250ee:	29 d0                	sub    %edx,%eax
f01250f0:	89 c1                	mov    %eax,%ecx
f01250f2:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f01250f9:	10 00 00 
f01250fc:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125101:	0f b6 d0             	movzbl %al,%edx
f0125104:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012510a:	01 d0                	add    %edx,%eax
f012510c:	48                   	dec    %eax
f012510d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0125113:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0125119:	ba 00 00 00 00       	mov    $0x0,%edx
f012511e:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0125124:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012512a:	29 d0                	sub    %edx,%eax
f012512c:	01 c1                	add    %eax,%ecx
f012512e:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0125135:	10 00 00 
f0125138:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012513d:	0f b6 c0             	movzbl %al,%eax
f0125140:	c1 e0 04             	shl    $0x4,%eax
f0125143:	89 c2                	mov    %eax,%edx
f0125145:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012514b:	01 d0                	add    %edx,%eax
f012514d:	48                   	dec    %eax
f012514e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0125154:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012515a:	ba 00 00 00 00       	mov    $0x0,%edx
f012515f:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0125165:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012516b:	29 d0                	sub    %edx,%eax
f012516d:	01 c8                	add    %ecx,%eax
f012516f:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0125174:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f012517a:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0125181:	10 00 00 
f0125184:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012518a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012518f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0125195:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012519b:	ba 00 00 00 00       	mov    $0x0,%edx
f01251a0:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f01251a6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01251ac:	29 d0                	sub    %edx,%eax
f01251ae:	89 c1                	mov    %eax,%ecx
f01251b0:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f01251b7:	10 00 00 
f01251ba:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01251bf:	0f b6 d0             	movzbl %al,%edx
f01251c2:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f01251c8:	01 d0                	add    %edx,%eax
f01251ca:	48                   	dec    %eax
f01251cb:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f01251d1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01251d7:	ba 00 00 00 00       	mov    $0x0,%edx
f01251dc:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f01251e2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01251e8:	29 d0                	sub    %edx,%eax
f01251ea:	01 c1                	add    %eax,%ecx
f01251ec:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f01251f3:	10 00 00 
f01251f6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01251fb:	0f b6 c0             	movzbl %al,%eax
f01251fe:	c1 e0 04             	shl    $0x4,%eax
f0125201:	89 c2                	mov    %eax,%edx
f0125203:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0125209:	01 d0                	add    %edx,%eax
f012520b:	48                   	dec    %eax
f012520c:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0125212:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125218:	ba 00 00 00 00       	mov    $0x0,%edx
f012521d:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0125223:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0125229:	29 d0                	sub    %edx,%eax
f012522b:	01 c8                	add    %ecx,%eax
f012522d:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0125232:	c1 e8 0c             	shr    $0xc,%eax
f0125235:	89 c2                	mov    %eax,%edx
f0125237:	4a                   	dec    %edx
f0125238:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f012523e:	c1 e0 02             	shl    $0x2,%eax
f0125241:	8d 50 03             	lea    0x3(%eax),%edx
f0125244:	b8 10 00 00 00       	mov    $0x10,%eax
f0125249:	48                   	dec    %eax
f012524a:	01 d0                	add    %edx,%eax
f012524c:	bf 10 00 00 00       	mov    $0x10,%edi
f0125251:	ba 00 00 00 00       	mov    $0x0,%edx
f0125256:	f7 f7                	div    %edi
f0125258:	6b c0 10             	imul   $0x10,%eax,%eax
f012525b:	29 c4                	sub    %eax,%esp
f012525d:	89 e0                	mov    %esp,%eax
f012525f:	83 c0 03             	add    $0x3,%eax
f0125262:	c1 e8 02             	shr    $0x2,%eax
f0125265:	c1 e0 02             	shl    $0x2,%eax
f0125268:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f012526e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0125275:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f012527c:	10 00 00 
f012527f:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125285:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012528a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125290:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125296:	ba 00 00 00 00       	mov    $0x0,%edx
f012529b:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01252a1:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01252a7:	29 d0                	sub    %edx,%eax
f01252a9:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01252ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01252b1:	eb 29                	jmp    f01252dc <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f01252b3:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01252b6:	8d 43 01             	lea    0x1(%ebx),%eax
f01252b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01252bc:	83 ec 0c             	sub    $0xc,%esp
f01252bf:	ff 75 d8             	pushl  -0x28(%ebp)
f01252c2:	e8 29 2b fe ff       	call   f0107df0 <kheap_physical_address>
f01252c7:	83 c4 10             	add    $0x10,%esp
f01252ca:	89 c2                	mov    %eax,%edx
f01252cc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01252d2:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f01252d5:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f01252dc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01252df:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01252e5:	72 cc                	jb     f01252b3 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f01252e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01252ea:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f01252f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01252f7:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f01252fe:	10 00 00 
f0125301:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0125307:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012530c:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0125312:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125318:	ba 00 00 00 00       	mov    $0x0,%edx
f012531d:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0125323:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125329:	29 d0                	sub    %edx,%eax
f012532b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125330:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0125333:	e9 ab 00 00 00       	jmp    f01253e3 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125338:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f012533d:	83 ec 04             	sub    $0x4,%esp
f0125340:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0125346:	52                   	push   %edx
f0125347:	ff 75 d8             	pushl  -0x28(%ebp)
f012534a:	50                   	push   %eax
f012534b:	e8 48 17 fe ff       	call   f0106a98 <get_page_table>
f0125350:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125353:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0125359:	85 c0                	test   %eax,%eax
f012535b:	75 17                	jne    f0125374 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f012535d:	83 ec 04             	sub    $0x4,%esp
f0125360:	68 dc be 13 f0       	push   $0xf013bedc
f0125365:	68 93 08 00 00       	push   $0x893
f012536a:	68 3a b5 13 f0       	push   $0xf013b53a
f012536f:	e8 91 ae fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0125374:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125377:	c1 e8 0c             	shr    $0xc,%eax
f012537a:	25 ff 03 00 00       	and    $0x3ff,%eax
f012537f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0125382:	eb 4b                	jmp    f01253cf <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0125384:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f012538a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f012538d:	c1 e2 02             	shl    $0x2,%edx
f0125390:	01 d0                	add    %edx,%eax
f0125392:	8b 00                	mov    (%eax),%eax
f0125394:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125399:	89 c1                	mov    %eax,%ecx
f012539b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01253a1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01253a4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01253a7:	39 c1                	cmp    %eax,%ecx
f01253a9:	74 17                	je     f01253c2 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01253ab:	83 ec 04             	sub    $0x4,%esp
f01253ae:	68 35 bf 13 f0       	push   $0xf013bf35
f01253b3:	68 9a 08 00 00       	push   $0x89a
f01253b8:	68 3a b5 13 f0       	push   $0xf013b53a
f01253bd:	e8 43 ae fd ff       	call   f0100205 <_panic>
				}
				va += PAGE_SIZE;
f01253c2:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f01253c9:	ff 45 d4             	incl   -0x2c(%ebp)
f01253cc:	ff 45 e4             	incl   -0x1c(%ebp)
f01253cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01253d2:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f01253d8:	7d 09                	jge    f01253e3 <test_kheap_phys_addr+0x1291>
f01253da:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01253e1:	7e a1                	jle    f0125384 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01253e3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01253e6:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f01253ec:	0f 82 46 ff ff ff    	jb     f0125338 <test_kheap_phys_addr+0x11e6>
f01253f2:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f01253f4:	83 ec 0c             	sub    $0xc,%esp
f01253f7:	68 c5 b6 13 f0       	push   $0xf013b6c5
f01253fc:	e8 0d b9 fd ff       	call   f0100d0e <cprintf>
f0125401:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0125404:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f012540b:	10 00 00 
f012540e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0125414:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125419:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f012541f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125425:	ba 00 00 00 00       	mov    $0x0,%edx
f012542a:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0125430:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0125436:	29 d0                	sub    %edx,%eax
f0125438:	89 c1                	mov    %eax,%ecx
f012543a:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125441:	10 00 00 
f0125444:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125449:	0f b6 d0             	movzbl %al,%edx
f012544c:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125452:	01 d0                	add    %edx,%eax
f0125454:	48                   	dec    %eax
f0125455:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012545b:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125461:	ba 00 00 00 00       	mov    $0x0,%edx
f0125466:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012546c:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125472:	29 d0                	sub    %edx,%eax
f0125474:	01 c1                	add    %eax,%ecx
f0125476:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f012547d:	10 00 00 
f0125480:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125485:	0f b6 c0             	movzbl %al,%eax
f0125488:	c1 e0 04             	shl    $0x4,%eax
f012548b:	89 c2                	mov    %eax,%edx
f012548d:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0125493:	01 d0                	add    %edx,%eax
f0125495:	48                   	dec    %eax
f0125496:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f012549c:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01254a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01254a7:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f01254ad:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01254b3:	29 d0                	sub    %edx,%eax
f01254b5:	01 c8                	add    %ecx,%eax
f01254b7:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f01254bc:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f01254c2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01254c9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01254cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01254d2:	eb 0a                	jmp    f01254de <test_kheap_phys_addr+0x138c>
		{
			i++;
f01254d4:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f01254d7:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f01254de:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f01254e5:	76 ed                	jbe    f01254d4 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f01254e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01254ea:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f01254f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01254f7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01254fd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0125500:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0125507:	e9 cc 00 00 00       	jmp    f01255d8 <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f012550c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f012550f:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0125514:	83 ec 04             	sub    $0x4,%esp
f0125517:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f012551d:	51                   	push   %ecx
f012551e:	52                   	push   %edx
f012551f:	50                   	push   %eax
f0125520:	e8 73 15 fe ff       	call   f0106a98 <get_page_table>
f0125525:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0125528:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f012552e:	85 c0                	test   %eax,%eax
f0125530:	75 17                	jne    f0125549 <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125532:	83 ec 04             	sub    $0x4,%esp
f0125535:	68 dc be 13 f0       	push   $0xf013bedc
f012553a:	68 b6 08 00 00       	push   $0x8b6
f012553f:	68 3a b5 13 f0       	push   $0xf013b53a
f0125544:	e8 bc ac fd ff       	call   f0100205 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0125549:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0125550:	eb 67                	jmp    f01255b9 <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0125552:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125555:	c1 e0 0c             	shl    $0xc,%eax
f0125558:	89 c2                	mov    %eax,%edx
f012555a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125560:	01 d0                	add    %edx,%eax
f0125562:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f0125568:	83 ec 0c             	sub    $0xc,%esp
f012556b:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0125571:	e8 7a 28 fe ff       	call   f0107df0 <kheap_physical_address>
f0125576:	83 c4 10             	add    $0x10,%esp
f0125579:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f012557f:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0125585:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0125588:	c1 e2 02             	shl    $0x2,%edx
f012558b:	01 d0                	add    %edx,%eax
f012558d:	8b 00                	mov    (%eax),%eax
f012558f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125594:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f012559a:	74 17                	je     f01255b3 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f012559c:	83 ec 04             	sub    $0x4,%esp
f012559f:	68 35 bf 13 f0       	push   $0xf013bf35
f01255a4:	68 c0 08 00 00       	push   $0x8c0
f01255a9:	68 3a b5 13 f0       	push   $0xf013b53a
f01255ae:	e8 52 ac fd ff       	call   f0100205 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01255b3:	ff 45 cc             	incl   -0x34(%ebp)
f01255b6:	ff 45 e4             	incl   -0x1c(%ebp)
f01255b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01255bc:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f01255c2:	7d 09                	jge    f01255cd <test_kheap_phys_addr+0x147b>
f01255c4:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f01255cb:	7e 85                	jle    f0125552 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01255cd:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f01255d4:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f01255d8:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01255dc:	0f 88 2a ff ff ff    	js     f012550c <test_kheap_phys_addr+0x13ba>
f01255e2:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01255e6:	7f 0d                	jg     f01255f5 <test_kheap_phys_addr+0x14a3>
f01255e8:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01255ef:	0f 86 17 ff ff ff    	jbe    f012550c <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01255f5:	83 ec 0c             	sub    $0xc,%esp
f01255f8:	68 1e b7 13 f0       	push   $0xf013b71e
f01255fd:	e8 0c b7 fd ff       	call   f0100d0e <cprintf>
f0125602:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f0125605:	83 ec 0c             	sub    $0xc,%esp
f0125608:	68 88 bf 13 f0       	push   $0xf013bf88
f012560d:	e8 fc b6 fd ff       	call   f0100d0e <cprintf>
f0125612:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125615:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012561a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012561d:	5b                   	pop    %ebx
f012561e:	5e                   	pop    %esi
f012561f:	5f                   	pop    %edi
f0125620:	5d                   	pop    %ebp
f0125621:	c3                   	ret    

f0125622 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0125622:	55                   	push   %ebp
f0125623:	89 e5                	mov    %esp,%ebp
f0125625:	57                   	push   %edi
f0125626:	56                   	push   %esi
f0125627:	53                   	push   %ebx
f0125628:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f012562e:	89 e0                	mov    %esp,%eax
f0125630:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0125632:	83 ec 0c             	sub    $0xc,%esp
f0125635:	68 7c b4 13 f0       	push   $0xf013b47c
f012563a:	e8 cf b6 fd ff       	call   f0100d0e <cprintf>
f012563f:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0125642:	83 ec 0c             	sub    $0xc,%esp
f0125645:	68 ac b4 13 f0       	push   $0xf013b4ac
f012564a:	e8 bf b6 fd ff       	call   f0100d0e <cprintf>
f012564f:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0125652:	83 ec 0c             	sub    $0xc,%esp
f0125655:	68 7c b4 13 f0       	push   $0xf013b47c
f012565a:	e8 af b6 fd ff       	call   f0100d0e <cprintf>
f012565f:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0125662:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f0125666:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f012566a:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0125670:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f0125676:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f012567d:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0125684:	e8 28 7b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125689:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012568c:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0125692:	b9 14 00 00 00       	mov    $0x14,%ecx
f0125697:	b8 00 00 00 00       	mov    $0x0,%eax
f012569c:	89 d7                	mov    %edx,%edi
f012569e:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01256a0:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f01256a6:	b9 14 00 00 00       	mov    $0x14,%ecx
f01256ab:	b8 00 00 00 00       	mov    $0x0,%eax
f01256b0:	89 d7                	mov    %edx,%edi
f01256b2:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01256b4:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f01256ba:	b9 14 00 00 00       	mov    $0x14,%ecx
f01256bf:	b8 00 00 00 00       	mov    $0x0,%eax
f01256c4:	89 d7                	mov    %edx,%edi
f01256c6:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01256c8:	e8 e4 7a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01256cd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01256d0:	e8 da e6 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01256d5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01256d8:	83 ec 0c             	sub    $0xc,%esp
f01256db:	68 00 fc 1f 00       	push   $0x1ffc00
f01256e0:	e8 7f 24 fe ff       	call   f0107b64 <kmalloc>
f01256e5:	83 c4 10             	add    $0x10,%esp
f01256e8:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01256ee:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f01256f4:	89 c1                	mov    %eax,%ecx
f01256f6:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01256fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125700:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125705:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0125708:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012570b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125710:	f7 75 b4             	divl   -0x4c(%ebp)
f0125713:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125716:	29 d0                	sub    %edx,%eax
f0125718:	89 c3                	mov    %eax,%ebx
f012571a:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0125721:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125726:	0f b6 d0             	movzbl %al,%edx
f0125729:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012572c:	01 d0                	add    %edx,%eax
f012572e:	48                   	dec    %eax
f012572f:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0125732:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125735:	ba 00 00 00 00       	mov    $0x0,%edx
f012573a:	f7 75 ac             	divl   -0x54(%ebp)
f012573d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125740:	29 d0                	sub    %edx,%eax
f0125742:	01 c3                	add    %eax,%ebx
f0125744:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012574b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125750:	0f b6 c0             	movzbl %al,%eax
f0125753:	c1 e0 04             	shl    $0x4,%eax
f0125756:	89 c2                	mov    %eax,%edx
f0125758:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012575b:	01 d0                	add    %edx,%eax
f012575d:	48                   	dec    %eax
f012575e:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0125761:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125764:	ba 00 00 00 00       	mov    $0x0,%edx
f0125769:	f7 75 a4             	divl   -0x5c(%ebp)
f012576c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012576f:	29 d0                	sub    %edx,%eax
f0125771:	01 d8                	add    %ebx,%eax
f0125773:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125778:	39 c1                	cmp    %eax,%ecx
f012577a:	74 17                	je     f0125793 <test_kheap_virt_addr+0x171>
f012577c:	83 ec 04             	sub    $0x4,%esp
f012577f:	68 20 b6 13 f0       	push   $0xf013b620
f0125784:	68 ed 08 00 00       	push   $0x8ed
f0125789:	68 3a b5 13 f0       	push   $0xf013b53a
f012578e:	e8 72 aa fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125793:	e8 17 e6 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125798:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012579b:	74 17                	je     f01257b4 <test_kheap_virt_addr+0x192>
f012579d:	83 ec 04             	sub    $0x4,%esp
f01257a0:	68 54 b5 13 f0       	push   $0xf013b554
f01257a5:	68 ee 08 00 00       	push   $0x8ee
f01257aa:	68 3a b5 13 f0       	push   $0xf013b53a
f01257af:	e8 51 aa fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01257b4:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01257b7:	e8 f5 79 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01257bc:	29 c3                	sub    %eax,%ebx
f01257be:	89 d8                	mov    %ebx,%eax
f01257c0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01257c5:	74 17                	je     f01257de <test_kheap_virt_addr+0x1bc>
f01257c7:	83 ec 04             	sub    $0x4,%esp
f01257ca:	68 bc b5 13 f0       	push   $0xf013b5bc
f01257cf:	68 ef 08 00 00       	push   $0x8ef
f01257d4:	68 3a b5 13 f0       	push   $0xf013b53a
f01257d9:	e8 27 aa fd ff       	call   f0100205 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01257de:	e8 ce 79 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01257e3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01257e6:	e8 c4 e5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01257eb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01257ee:	83 ec 0c             	sub    $0xc,%esp
f01257f1:	68 00 fc 1f 00       	push   $0x1ffc00
f01257f6:	e8 69 23 fe ff       	call   f0107b64 <kmalloc>
f01257fb:	83 c4 10             	add    $0x10,%esp
f01257fe:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125804:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012580a:	89 c1                	mov    %eax,%ecx
f012580c:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0125813:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125816:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012581b:	89 45 98             	mov    %eax,-0x68(%ebp)
f012581e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125821:	ba 00 00 00 00       	mov    $0x0,%edx
f0125826:	f7 75 9c             	divl   -0x64(%ebp)
f0125829:	8b 45 98             	mov    -0x68(%ebp),%eax
f012582c:	29 d0                	sub    %edx,%eax
f012582e:	89 c3                	mov    %eax,%ebx
f0125830:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0125837:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012583c:	0f b6 d0             	movzbl %al,%edx
f012583f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125842:	01 d0                	add    %edx,%eax
f0125844:	48                   	dec    %eax
f0125845:	89 45 90             	mov    %eax,-0x70(%ebp)
f0125848:	8b 45 90             	mov    -0x70(%ebp),%eax
f012584b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125850:	f7 75 94             	divl   -0x6c(%ebp)
f0125853:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125856:	29 d0                	sub    %edx,%eax
f0125858:	01 c3                	add    %eax,%ebx
f012585a:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0125861:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125866:	0f b6 c0             	movzbl %al,%eax
f0125869:	c1 e0 04             	shl    $0x4,%eax
f012586c:	89 c2                	mov    %eax,%edx
f012586e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125871:	01 d0                	add    %edx,%eax
f0125873:	48                   	dec    %eax
f0125874:	89 45 88             	mov    %eax,-0x78(%ebp)
f0125877:	8b 45 88             	mov    -0x78(%ebp),%eax
f012587a:	ba 00 00 00 00       	mov    $0x0,%edx
f012587f:	f7 75 8c             	divl   -0x74(%ebp)
f0125882:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125885:	29 d0                	sub    %edx,%eax
f0125887:	01 d8                	add    %ebx,%eax
f0125889:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012588e:	39 c1                	cmp    %eax,%ecx
f0125890:	74 17                	je     f01258a9 <test_kheap_virt_addr+0x287>
f0125892:	83 ec 04             	sub    $0x4,%esp
f0125895:	68 20 b6 13 f0       	push   $0xf013b620
f012589a:	68 f5 08 00 00       	push   $0x8f5
f012589f:	68 3a b5 13 f0       	push   $0xf013b53a
f01258a4:	e8 5c a9 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01258a9:	e8 01 e5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01258ae:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01258b1:	74 17                	je     f01258ca <test_kheap_virt_addr+0x2a8>
f01258b3:	83 ec 04             	sub    $0x4,%esp
f01258b6:	68 54 b5 13 f0       	push   $0xf013b554
f01258bb:	68 f6 08 00 00       	push   $0x8f6
f01258c0:	68 3a b5 13 f0       	push   $0xf013b53a
f01258c5:	e8 3b a9 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01258ca:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01258cd:	e8 df 78 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01258d2:	29 c3                	sub    %eax,%ebx
f01258d4:	89 d8                	mov    %ebx,%eax
f01258d6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01258db:	74 17                	je     f01258f4 <test_kheap_virt_addr+0x2d2>
f01258dd:	83 ec 04             	sub    $0x4,%esp
f01258e0:	68 bc b5 13 f0       	push   $0xf013b5bc
f01258e5:	68 f7 08 00 00       	push   $0x8f7
f01258ea:	68 3a b5 13 f0       	push   $0xf013b53a
f01258ef:	e8 11 a9 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01258f4:	e8 b8 78 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01258f9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01258fc:	e8 ae e4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125901:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125904:	83 ec 0c             	sub    $0xc,%esp
f0125907:	68 00 08 00 00       	push   $0x800
f012590c:	e8 53 22 fe ff       	call   f0107b64 <kmalloc>
f0125911:	83 c4 10             	add    $0x10,%esp
f0125914:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012591a:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0125920:	89 c1                	mov    %eax,%ecx
f0125922:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0125929:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012592c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125931:	89 45 80             	mov    %eax,-0x80(%ebp)
f0125934:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125937:	ba 00 00 00 00       	mov    $0x0,%edx
f012593c:	f7 75 84             	divl   -0x7c(%ebp)
f012593f:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125942:	29 d0                	sub    %edx,%eax
f0125944:	89 c3                	mov    %eax,%ebx
f0125946:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012594d:	10 00 00 
f0125950:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125955:	0f b6 d0             	movzbl %al,%edx
f0125958:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012595e:	01 d0                	add    %edx,%eax
f0125960:	48                   	dec    %eax
f0125961:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125967:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012596d:	ba 00 00 00 00       	mov    $0x0,%edx
f0125972:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125978:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012597e:	29 d0                	sub    %edx,%eax
f0125980:	01 c3                	add    %eax,%ebx
f0125982:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125989:	10 00 00 
f012598c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125991:	0f b6 c0             	movzbl %al,%eax
f0125994:	c1 e0 04             	shl    $0x4,%eax
f0125997:	89 c2                	mov    %eax,%edx
f0125999:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012599f:	01 d0                	add    %edx,%eax
f01259a1:	48                   	dec    %eax
f01259a2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01259a8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01259ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01259b3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01259b9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01259bf:	29 d0                	sub    %edx,%eax
f01259c1:	01 d8                	add    %ebx,%eax
f01259c3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01259c8:	39 c1                	cmp    %eax,%ecx
f01259ca:	74 17                	je     f01259e3 <test_kheap_virt_addr+0x3c1>
f01259cc:	83 ec 04             	sub    $0x4,%esp
f01259cf:	68 20 b6 13 f0       	push   $0xf013b620
f01259d4:	68 fd 08 00 00       	push   $0x8fd
f01259d9:	68 3a b5 13 f0       	push   $0xf013b53a
f01259de:	e8 22 a8 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01259e3:	e8 c7 e3 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01259e8:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01259eb:	74 17                	je     f0125a04 <test_kheap_virt_addr+0x3e2>
f01259ed:	83 ec 04             	sub    $0x4,%esp
f01259f0:	68 54 b5 13 f0       	push   $0xf013b554
f01259f5:	68 fe 08 00 00       	push   $0x8fe
f01259fa:	68 3a b5 13 f0       	push   $0xf013b53a
f01259ff:	e8 01 a8 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125a04:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125a07:	e8 a5 77 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125a0c:	29 c3                	sub    %eax,%ebx
f0125a0e:	89 d8                	mov    %ebx,%eax
f0125a10:	83 f8 01             	cmp    $0x1,%eax
f0125a13:	74 17                	je     f0125a2c <test_kheap_virt_addr+0x40a>
f0125a15:	83 ec 04             	sub    $0x4,%esp
f0125a18:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125a1d:	68 ff 08 00 00       	push   $0x8ff
f0125a22:	68 3a b5 13 f0       	push   $0xf013b53a
f0125a27:	e8 d9 a7 fd ff       	call   f0100205 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125a2c:	e8 80 77 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125a31:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a34:	e8 76 e3 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125a39:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125a3c:	83 ec 0c             	sub    $0xc,%esp
f0125a3f:	68 00 08 00 00       	push   $0x800
f0125a44:	e8 1b 21 fe ff       	call   f0107b64 <kmalloc>
f0125a49:	83 c4 10             	add    $0x10,%esp
f0125a4c:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a52:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0125a58:	89 c1                	mov    %eax,%ecx
f0125a5a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125a61:	10 00 00 
f0125a64:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125a6a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a6f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125a75:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125a7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a80:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125a86:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125a8c:	29 d0                	sub    %edx,%eax
f0125a8e:	89 c3                	mov    %eax,%ebx
f0125a90:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125a97:	10 00 00 
f0125a9a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125a9f:	0f b6 d0             	movzbl %al,%edx
f0125aa2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125aa8:	01 d0                	add    %edx,%eax
f0125aaa:	48                   	dec    %eax
f0125aab:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125ab1:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125ab7:	ba 00 00 00 00       	mov    $0x0,%edx
f0125abc:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125ac2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125ac8:	29 d0                	sub    %edx,%eax
f0125aca:	01 c3                	add    %eax,%ebx
f0125acc:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125ad3:	10 00 00 
f0125ad6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125adb:	0f b6 c0             	movzbl %al,%eax
f0125ade:	c1 e0 04             	shl    $0x4,%eax
f0125ae1:	89 c2                	mov    %eax,%edx
f0125ae3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125ae9:	01 d0                	add    %edx,%eax
f0125aeb:	48                   	dec    %eax
f0125aec:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125af2:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125af8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125afd:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125b03:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125b09:	29 d0                	sub    %edx,%eax
f0125b0b:	01 d8                	add    %ebx,%eax
f0125b0d:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125b12:	39 c1                	cmp    %eax,%ecx
f0125b14:	74 17                	je     f0125b2d <test_kheap_virt_addr+0x50b>
f0125b16:	83 ec 04             	sub    $0x4,%esp
f0125b19:	68 20 b6 13 f0       	push   $0xf013b620
f0125b1e:	68 05 09 00 00       	push   $0x905
f0125b23:	68 3a b5 13 f0       	push   $0xf013b53a
f0125b28:	e8 d8 a6 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125b2d:	e8 7d e2 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125b32:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125b35:	74 17                	je     f0125b4e <test_kheap_virt_addr+0x52c>
f0125b37:	83 ec 04             	sub    $0x4,%esp
f0125b3a:	68 54 b5 13 f0       	push   $0xf013b554
f0125b3f:	68 06 09 00 00       	push   $0x906
f0125b44:	68 3a b5 13 f0       	push   $0xf013b53a
f0125b49:	e8 b7 a6 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125b4e:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125b51:	e8 5b 76 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125b56:	29 c3                	sub    %eax,%ebx
f0125b58:	89 d8                	mov    %ebx,%eax
f0125b5a:	83 f8 01             	cmp    $0x1,%eax
f0125b5d:	74 17                	je     f0125b76 <test_kheap_virt_addr+0x554>
f0125b5f:	83 ec 04             	sub    $0x4,%esp
f0125b62:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125b67:	68 07 09 00 00       	push   $0x907
f0125b6c:	68 3a b5 13 f0       	push   $0xf013b53a
f0125b71:	e8 8f a6 fd ff       	call   f0100205 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125b76:	e8 36 76 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125b7b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b7e:	e8 2c e2 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125b83:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125b86:	83 ec 0c             	sub    $0xc,%esp
f0125b89:	68 00 1c 00 00       	push   $0x1c00
f0125b8e:	e8 d1 1f fe ff       	call   f0107b64 <kmalloc>
f0125b93:	83 c4 10             	add    $0x10,%esp
f0125b96:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b9c:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f0125ba2:	89 c1                	mov    %eax,%ecx
f0125ba4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125bab:	10 00 00 
f0125bae:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125bb4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125bb9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125bbf:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125bc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bca:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125bd0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125bd6:	29 d0                	sub    %edx,%eax
f0125bd8:	89 c3                	mov    %eax,%ebx
f0125bda:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0125be1:	10 00 00 
f0125be4:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125be9:	0f b6 d0             	movzbl %al,%edx
f0125bec:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0125bf2:	01 d0                	add    %edx,%eax
f0125bf4:	48                   	dec    %eax
f0125bf5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0125bfb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125c01:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c06:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0125c0c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0125c12:	29 d0                	sub    %edx,%eax
f0125c14:	01 c3                	add    %eax,%ebx
f0125c16:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0125c1d:	10 00 00 
f0125c20:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125c25:	0f b6 c0             	movzbl %al,%eax
f0125c28:	c1 e0 04             	shl    $0x4,%eax
f0125c2b:	89 c2                	mov    %eax,%edx
f0125c2d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0125c33:	01 d0                	add    %edx,%eax
f0125c35:	48                   	dec    %eax
f0125c36:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0125c3c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125c42:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c47:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0125c4d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0125c53:	29 d0                	sub    %edx,%eax
f0125c55:	01 d8                	add    %ebx,%eax
f0125c57:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125c5c:	39 c1                	cmp    %eax,%ecx
f0125c5e:	74 17                	je     f0125c77 <test_kheap_virt_addr+0x655>
f0125c60:	83 ec 04             	sub    $0x4,%esp
f0125c63:	68 20 b6 13 f0       	push   $0xf013b620
f0125c68:	68 0d 09 00 00       	push   $0x90d
f0125c6d:	68 3a b5 13 f0       	push   $0xf013b53a
f0125c72:	e8 8e a5 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125c77:	e8 33 e1 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125c7c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125c7f:	74 17                	je     f0125c98 <test_kheap_virt_addr+0x676>
f0125c81:	83 ec 04             	sub    $0x4,%esp
f0125c84:	68 54 b5 13 f0       	push   $0xf013b554
f0125c89:	68 0e 09 00 00       	push   $0x90e
f0125c8e:	68 3a b5 13 f0       	push   $0xf013b53a
f0125c93:	e8 6d a5 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c98:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125c9b:	e8 11 75 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125ca0:	29 c3                	sub    %eax,%ebx
f0125ca2:	89 d8                	mov    %ebx,%eax
f0125ca4:	83 f8 02             	cmp    $0x2,%eax
f0125ca7:	74 17                	je     f0125cc0 <test_kheap_virt_addr+0x69e>
f0125ca9:	83 ec 04             	sub    $0x4,%esp
f0125cac:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125cb1:	68 0f 09 00 00       	push   $0x90f
f0125cb6:	68 3a b5 13 f0       	push   $0xf013b53a
f0125cbb:	e8 45 a5 fd ff       	call   f0100205 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0125cc0:	e8 ec 74 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125cc5:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125cc8:	e8 e2 e0 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125ccd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0125cd0:	83 ec 0c             	sub    $0xc,%esp
f0125cd3:	68 00 fc 2f 00       	push   $0x2ffc00
f0125cd8:	e8 87 1e fe ff       	call   f0107b64 <kmalloc>
f0125cdd:	83 c4 10             	add    $0x10,%esp
f0125ce0:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125ce6:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0125cec:	89 c1                	mov    %eax,%ecx
f0125cee:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0125cf5:	10 00 00 
f0125cf8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0125cfe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125d03:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0125d09:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d14:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0125d1a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0125d20:	29 d0                	sub    %edx,%eax
f0125d22:	89 c3                	mov    %eax,%ebx
f0125d24:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0125d2b:	10 00 00 
f0125d2e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125d33:	0f b6 d0             	movzbl %al,%edx
f0125d36:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0125d3c:	01 d0                	add    %edx,%eax
f0125d3e:	48                   	dec    %eax
f0125d3f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0125d45:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d4b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d50:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0125d56:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0125d5c:	29 d0                	sub    %edx,%eax
f0125d5e:	01 c3                	add    %eax,%ebx
f0125d60:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0125d67:	10 00 00 
f0125d6a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125d6f:	0f b6 c0             	movzbl %al,%eax
f0125d72:	c1 e0 04             	shl    $0x4,%eax
f0125d75:	89 c2                	mov    %eax,%edx
f0125d77:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0125d7d:	01 d0                	add    %edx,%eax
f0125d7f:	48                   	dec    %eax
f0125d80:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0125d86:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125d8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125d91:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0125d97:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0125d9d:	29 d0                	sub    %edx,%eax
f0125d9f:	01 d8                	add    %ebx,%eax
f0125da1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0125da6:	39 c1                	cmp    %eax,%ecx
f0125da8:	74 17                	je     f0125dc1 <test_kheap_virt_addr+0x79f>
f0125daa:	83 ec 04             	sub    $0x4,%esp
f0125dad:	68 20 b6 13 f0       	push   $0xf013b620
f0125db2:	68 15 09 00 00       	push   $0x915
f0125db7:	68 3a b5 13 f0       	push   $0xf013b53a
f0125dbc:	e8 44 a4 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125dc1:	e8 e9 df fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125dc6:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125dc9:	74 17                	je     f0125de2 <test_kheap_virt_addr+0x7c0>
f0125dcb:	83 ec 04             	sub    $0x4,%esp
f0125dce:	68 54 b5 13 f0       	push   $0xf013b554
f0125dd3:	68 16 09 00 00       	push   $0x916
f0125dd8:	68 3a b5 13 f0       	push   $0xf013b53a
f0125ddd:	e8 23 a4 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125de2:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125de5:	e8 c7 73 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125dea:	29 c3                	sub    %eax,%ebx
f0125dec:	89 d8                	mov    %ebx,%eax
f0125dee:	3d 00 03 00 00       	cmp    $0x300,%eax
f0125df3:	74 17                	je     f0125e0c <test_kheap_virt_addr+0x7ea>
f0125df5:	83 ec 04             	sub    $0x4,%esp
f0125df8:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125dfd:	68 17 09 00 00       	push   $0x917
f0125e02:	68 3a b5 13 f0       	push   $0xf013b53a
f0125e07:	e8 f9 a3 fd ff       	call   f0100205 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125e0c:	e8 a0 73 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125e11:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125e14:	e8 96 df fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125e19:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0125e1c:	83 ec 0c             	sub    $0xc,%esp
f0125e1f:	68 00 fc 5f 00       	push   $0x5ffc00
f0125e24:	e8 3b 1d fe ff       	call   f0107b64 <kmalloc>
f0125e29:	83 c4 10             	add    $0x10,%esp
f0125e2c:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125e32:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125e38:	89 c1                	mov    %eax,%ecx
f0125e3a:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0125e41:	10 00 00 
f0125e44:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0125e4a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125e4f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0125e55:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e5b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e60:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0125e66:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0125e6c:	29 d0                	sub    %edx,%eax
f0125e6e:	89 c3                	mov    %eax,%ebx
f0125e70:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0125e77:	10 00 00 
f0125e7a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125e7f:	0f b6 d0             	movzbl %al,%edx
f0125e82:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0125e88:	01 d0                	add    %edx,%eax
f0125e8a:	48                   	dec    %eax
f0125e8b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0125e91:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125e97:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e9c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0125ea2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0125ea8:	29 d0                	sub    %edx,%eax
f0125eaa:	01 c3                	add    %eax,%ebx
f0125eac:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0125eb3:	10 00 00 
f0125eb6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125ebb:	0f b6 c0             	movzbl %al,%eax
f0125ebe:	c1 e0 04             	shl    $0x4,%eax
f0125ec1:	89 c2                	mov    %eax,%edx
f0125ec3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0125ec9:	01 d0                	add    %edx,%eax
f0125ecb:	48                   	dec    %eax
f0125ecc:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0125ed2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125ed8:	ba 00 00 00 00       	mov    $0x0,%edx
f0125edd:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0125ee3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0125ee9:	29 d0                	sub    %edx,%eax
f0125eeb:	01 d8                	add    %ebx,%eax
f0125eed:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0125ef2:	39 c1                	cmp    %eax,%ecx
f0125ef4:	74 17                	je     f0125f0d <test_kheap_virt_addr+0x8eb>
f0125ef6:	83 ec 04             	sub    $0x4,%esp
f0125ef9:	68 20 b6 13 f0       	push   $0xf013b620
f0125efe:	68 1d 09 00 00       	push   $0x91d
f0125f03:	68 3a b5 13 f0       	push   $0xf013b53a
f0125f08:	e8 f8 a2 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125f0d:	e8 9d de fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125f12:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0125f15:	74 17                	je     f0125f2e <test_kheap_virt_addr+0x90c>
f0125f17:	83 ec 04             	sub    $0x4,%esp
f0125f1a:	68 54 b5 13 f0       	push   $0xf013b554
f0125f1f:	68 1e 09 00 00       	push   $0x91e
f0125f24:	68 3a b5 13 f0       	push   $0xf013b53a
f0125f29:	e8 d7 a2 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125f2e:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0125f31:	e8 7b 72 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125f36:	29 c3                	sub    %eax,%ebx
f0125f38:	89 d8                	mov    %ebx,%eax
f0125f3a:	3d 00 06 00 00       	cmp    $0x600,%eax
f0125f3f:	74 17                	je     f0125f58 <test_kheap_virt_addr+0x936>
f0125f41:	83 ec 04             	sub    $0x4,%esp
f0125f44:	68 bc b5 13 f0       	push   $0xf013b5bc
f0125f49:	68 1f 09 00 00       	push   $0x91f
f0125f4e:	68 3a b5 13 f0       	push   $0xf013b53a
f0125f53:	e8 ad a2 fd ff       	call   f0100205 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f58:	e8 54 72 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0125f5d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f60:	e8 4a de fd ff       	call   f0103daf <pf_calculate_free_frames>
f0125f65:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0125f68:	83 ec 0c             	sub    $0xc,%esp
f0125f6b:	68 00 38 00 00       	push   $0x3800
f0125f70:	e8 ef 1b fe ff       	call   f0107b64 <kmalloc>
f0125f75:	83 c4 10             	add    $0x10,%esp
f0125f78:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125f7e:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0125f84:	89 c1                	mov    %eax,%ecx
f0125f86:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0125f8d:	10 00 00 
f0125f90:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0125f96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f9b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0125fa1:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125fa7:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fac:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0125fb2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0125fb8:	29 d0                	sub    %edx,%eax
f0125fba:	89 c3                	mov    %eax,%ebx
f0125fbc:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0125fc3:	10 00 00 
f0125fc6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0125fcb:	0f b6 d0             	movzbl %al,%edx
f0125fce:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0125fd4:	01 d0                	add    %edx,%eax
f0125fd6:	48                   	dec    %eax
f0125fd7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0125fdd:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125fe3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fe8:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0125fee:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0125ff4:	29 d0                	sub    %edx,%eax
f0125ff6:	01 c3                	add    %eax,%ebx
f0125ff8:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0125fff:	10 00 00 
f0126002:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126007:	0f b6 c0             	movzbl %al,%eax
f012600a:	c1 e0 04             	shl    $0x4,%eax
f012600d:	89 c2                	mov    %eax,%edx
f012600f:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126015:	01 d0                	add    %edx,%eax
f0126017:	48                   	dec    %eax
f0126018:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012601e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126024:	ba 00 00 00 00       	mov    $0x0,%edx
f0126029:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012602f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0126035:	29 d0                	sub    %edx,%eax
f0126037:	01 d8                	add    %ebx,%eax
f0126039:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012603e:	39 c1                	cmp    %eax,%ecx
f0126040:	74 17                	je     f0126059 <test_kheap_virt_addr+0xa37>
f0126042:	83 ec 04             	sub    $0x4,%esp
f0126045:	68 20 b6 13 f0       	push   $0xf013b620
f012604a:	68 25 09 00 00       	push   $0x925
f012604f:	68 3a b5 13 f0       	push   $0xf013b53a
f0126054:	e8 ac a1 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126059:	e8 51 dd fd ff       	call   f0103daf <pf_calculate_free_frames>
f012605e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0126061:	74 17                	je     f012607a <test_kheap_virt_addr+0xa58>
f0126063:	83 ec 04             	sub    $0x4,%esp
f0126066:	68 54 b5 13 f0       	push   $0xf013b554
f012606b:	68 26 09 00 00       	push   $0x926
f0126070:	68 3a b5 13 f0       	push   $0xf013b53a
f0126075:	e8 8b a1 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012607a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012607d:	e8 2f 71 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126082:	29 c3                	sub    %eax,%ebx
f0126084:	89 d8                	mov    %ebx,%eax
f0126086:	83 f8 04             	cmp    $0x4,%eax
f0126089:	74 17                	je     f01260a2 <test_kheap_virt_addr+0xa80>
f012608b:	83 ec 04             	sub    $0x4,%esp
f012608e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126093:	68 27 09 00 00       	push   $0x927
f0126098:	68 3a b5 13 f0       	push   $0xf013b53a
f012609d:	e8 63 a1 fd ff       	call   f0100205 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f01260a2:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01260a9:	10 00 00 
f01260ac:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01260b2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260b7:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01260bd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01260c3:	ba 00 00 00 00       	mov    $0x0,%edx
f01260c8:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01260ce:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01260d4:	29 d0                	sub    %edx,%eax
f01260d6:	89 c1                	mov    %eax,%ecx
f01260d8:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01260df:	10 00 00 
f01260e2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01260e7:	0f b6 d0             	movzbl %al,%edx
f01260ea:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01260f0:	01 d0                	add    %edx,%eax
f01260f2:	48                   	dec    %eax
f01260f3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f01260f9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01260ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0126104:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012610a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126110:	29 d0                	sub    %edx,%eax
f0126112:	01 c1                	add    %eax,%ecx
f0126114:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012611b:	10 00 00 
f012611e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126123:	0f b6 c0             	movzbl %al,%eax
f0126126:	c1 e0 04             	shl    $0x4,%eax
f0126129:	89 c2                	mov    %eax,%edx
f012612b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126131:	01 d0                	add    %edx,%eax
f0126133:	48                   	dec    %eax
f0126134:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012613a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126140:	ba 00 00 00 00       	mov    $0x0,%edx
f0126145:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012614b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126151:	29 d0                	sub    %edx,%eax
f0126153:	01 c1                	add    %eax,%ecx
f0126155:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012615c:	10 00 00 
f012615f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126165:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012616a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0126170:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126176:	ba 00 00 00 00       	mov    $0x0,%edx
f012617b:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0126181:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126187:	29 d0                	sub    %edx,%eax
f0126189:	29 c1                	sub    %eax,%ecx
f012618b:	89 c8                	mov    %ecx,%eax
f012618d:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0126192:	c1 e8 0c             	shr    $0xc,%eax
f0126195:	89 c2                	mov    %eax,%edx
f0126197:	4a                   	dec    %edx
f0126198:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f012619e:	c1 e0 02             	shl    $0x2,%eax
f01261a1:	8d 50 03             	lea    0x3(%eax),%edx
f01261a4:	b8 10 00 00 00       	mov    $0x10,%eax
f01261a9:	48                   	dec    %eax
f01261aa:	01 d0                	add    %edx,%eax
f01261ac:	bf 10 00 00 00       	mov    $0x10,%edi
f01261b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01261b6:	f7 f7                	div    %edi
f01261b8:	6b c0 10             	imul   $0x10,%eax,%eax
f01261bb:	29 c4                	sub    %eax,%esp
f01261bd:	89 e0                	mov    %esp,%eax
f01261bf:	83 c0 03             	add    $0x3,%eax
f01261c2:	c1 e8 02             	shr    $0x2,%eax
f01261c5:	c1 e0 02             	shl    $0x2,%eax
f01261c8:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f01261ce:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01261d5:	10 00 00 
f01261d8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01261de:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01261e3:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01261e9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01261ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01261f4:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01261fa:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126200:	29 d0                	sub    %edx,%eax
f0126202:	89 c1                	mov    %eax,%ecx
f0126204:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012620b:	10 00 00 
f012620e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126213:	0f b6 d0             	movzbl %al,%edx
f0126216:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012621c:	01 d0                	add    %edx,%eax
f012621e:	48                   	dec    %eax
f012621f:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126225:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012622b:	ba 00 00 00 00       	mov    $0x0,%edx
f0126230:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126236:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012623c:	29 d0                	sub    %edx,%eax
f012623e:	01 c1                	add    %eax,%ecx
f0126240:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0126247:	10 00 00 
f012624a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012624f:	0f b6 c0             	movzbl %al,%eax
f0126252:	c1 e0 04             	shl    $0x4,%eax
f0126255:	89 c2                	mov    %eax,%edx
f0126257:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012625d:	01 d0                	add    %edx,%eax
f012625f:	48                   	dec    %eax
f0126260:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126266:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012626c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126271:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0126277:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012627d:	29 d0                	sub    %edx,%eax
f012627f:	01 c1                	add    %eax,%ecx
f0126281:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0126288:	10 00 00 
f012628b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0126291:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126296:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012629c:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01262a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01262a7:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01262ad:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01262b3:	29 d0                	sub    %edx,%eax
f01262b5:	29 c1                	sub    %eax,%ecx
f01262b7:	89 c8                	mov    %ecx,%eax
f01262b9:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01262be:	c1 e8 0c             	shr    $0xc,%eax
f01262c1:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01262c7:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01262ce:	10 00 00 
f01262d1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01262d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01262dc:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01262e2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01262e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01262ed:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01262f3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01262f9:	29 d0                	sub    %edx,%eax
f01262fb:	89 c1                	mov    %eax,%ecx
f01262fd:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0126304:	10 00 00 
f0126307:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012630c:	0f b6 d0             	movzbl %al,%edx
f012630f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0126315:	01 d0                	add    %edx,%eax
f0126317:	48                   	dec    %eax
f0126318:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012631e:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126324:	ba 00 00 00 00       	mov    $0x0,%edx
f0126329:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012632f:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0126335:	29 d0                	sub    %edx,%eax
f0126337:	01 c1                	add    %eax,%ecx
f0126339:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0126340:	10 00 00 
f0126343:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126348:	0f b6 c0             	movzbl %al,%eax
f012634b:	c1 e0 04             	shl    $0x4,%eax
f012634e:	89 c2                	mov    %eax,%edx
f0126350:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0126356:	01 d0                	add    %edx,%eax
f0126358:	48                   	dec    %eax
f0126359:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012635f:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0126365:	ba 00 00 00 00       	mov    $0x0,%edx
f012636a:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0126370:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0126376:	29 d0                	sub    %edx,%eax
f0126378:	01 c8                	add    %ecx,%eax
f012637a:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012637f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0126385:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f012638c:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0126393:	10 00 00 
f0126396:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012639c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01263a1:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f01263a7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01263ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01263b2:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f01263b8:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01263be:	29 d0                	sub    %edx,%eax
f01263c0:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f01263c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01263c8:	e9 21 01 00 00       	jmp    f01264ee <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f01263cd:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01263d2:	83 ec 04             	sub    $0x4,%esp
f01263d5:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f01263db:	52                   	push   %edx
f01263dc:	ff 75 e4             	pushl  -0x1c(%ebp)
f01263df:	50                   	push   %eax
f01263e0:	e8 b3 06 fe ff       	call   f0106a98 <get_page_table>
f01263e5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01263e8:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f01263ee:	85 c0                	test   %eax,%eax
f01263f0:	75 17                	jne    f0126409 <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01263f2:	83 ec 04             	sub    $0x4,%esp
f01263f5:	68 dc be 13 f0       	push   $0xf013bedc
f01263fa:	68 38 09 00 00       	push   $0x938
f01263ff:	68 3a b5 13 f0       	push   $0xf013b53a
f0126404:	e8 fc 9d fd ff       	call   f0100205 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0126409:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012640c:	c1 e8 0c             	shr    $0xc,%eax
f012640f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0126414:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0126417:	e9 ba 00 00 00       	jmp    f01264d6 <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f012641c:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0126422:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126425:	c1 e2 02             	shl    $0x2,%edx
f0126428:	01 d0                	add    %edx,%eax
f012642a:	8b 00                	mov    (%eax),%eax
f012642c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0126431:	89 c1                	mov    %eax,%ecx
f0126433:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126439:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012643c:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012643f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126445:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126448:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012644b:	83 ec 0c             	sub    $0xc,%esp
f012644e:	50                   	push   %eax
f012644f:	e8 5b 19 fe ff       	call   f0107daf <kheap_virtual_address>
f0126454:	83 c4 10             	add    $0x10,%esp
f0126457:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f012645d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0126463:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0126466:	74 61                	je     f01264c9 <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f0126468:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012646e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0126471:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126474:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f012647a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012647d:	c1 e1 02             	shl    $0x2,%ecx
f0126480:	01 ca                	add    %ecx,%edx
f0126482:	8b 12                	mov    (%edx),%edx
f0126484:	89 d1                	mov    %edx,%ecx
f0126486:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f012648c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012648f:	c1 e2 0c             	shl    $0xc,%edx
f0126492:	89 d3                	mov    %edx,%ebx
f0126494:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0126497:	01 da                	add    %ebx,%edx
f0126499:	83 ec 0c             	sub    $0xc,%esp
f012649c:	50                   	push   %eax
f012649d:	51                   	push   %ecx
f012649e:	52                   	push   %edx
f012649f:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f01264a5:	68 d0 bf 13 f0       	push   $0xf013bfd0
f01264aa:	e8 5f a8 fd ff       	call   f0100d0e <cprintf>
f01264af:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f01264b2:	83 ec 04             	sub    $0x4,%esp
f01264b5:	68 13 c0 13 f0       	push   $0xf013c013
f01264ba:	68 42 09 00 00       	push   $0x942
f01264bf:	68 3a b5 13 f0       	push   $0xf013b53a
f01264c4:	e8 3c 9d fd ff       	call   f0100205 <_panic>
				}
				va+=PAGE_SIZE;
f01264c9:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f01264d0:	ff 45 dc             	incl   -0x24(%ebp)
f01264d3:	ff 45 e0             	incl   -0x20(%ebp)
f01264d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01264d9:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f01264df:	7d 0d                	jge    f01264ee <test_kheap_virt_addr+0xecc>
f01264e1:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01264e8:	0f 8e 2e ff ff ff    	jle    f012641c <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f01264ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01264f1:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f01264f7:	0f 82 d0 fe ff ff    	jb     f01263cd <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f01264fd:	83 ec 0c             	sub    $0xc,%esp
f0126500:	68 30 c0 13 f0       	push   $0xf013c030
f0126505:	e8 04 a8 fd ff       	call   f0100d0e <cprintf>
f012650a:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012650d:	e8 9f 6c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126512:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0126518:	e8 92 d8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012651d:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0126523:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0126529:	83 ec 0c             	sub    $0xc,%esp
f012652c:	50                   	push   %eax
f012652d:	e8 3a 17 fe ff       	call   f0107c6c <kfree>
f0126532:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126535:	e8 75 d8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012653a:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126540:	74 17                	je     f0126559 <test_kheap_virt_addr+0xf37>
f0126542:	83 ec 04             	sub    $0x4,%esp
f0126545:	68 54 b5 13 f0       	push   $0xf013b554
f012654a:	68 50 09 00 00       	push   $0x950
f012654f:	68 3a b5 13 f0       	push   $0xf013b53a
f0126554:	e8 ac 9c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126559:	e8 53 6c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012655e:	89 c2                	mov    %eax,%edx
f0126560:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0126566:	29 c2                	sub    %eax,%edx
f0126568:	89 d0                	mov    %edx,%eax
f012656a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012656f:	74 17                	je     f0126588 <test_kheap_virt_addr+0xf66>
f0126571:	83 ec 04             	sub    $0x4,%esp
f0126574:	68 c4 bc 13 f0       	push   $0xf013bcc4
f0126579:	68 51 09 00 00       	push   $0x951
f012657e:	68 3a b5 13 f0       	push   $0xf013b53a
f0126583:	e8 7d 9c fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126588:	e8 24 6c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012658d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126593:	e8 17 d8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126598:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f012659e:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01265a4:	83 ec 0c             	sub    $0xc,%esp
f01265a7:	50                   	push   %eax
f01265a8:	e8 bf 16 fe ff       	call   f0107c6c <kfree>
f01265ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265b0:	e8 fa d7 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01265b5:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f01265bb:	74 17                	je     f01265d4 <test_kheap_virt_addr+0xfb2>
f01265bd:	83 ec 04             	sub    $0x4,%esp
f01265c0:	68 54 b5 13 f0       	push   $0xf013b554
f01265c5:	68 57 09 00 00       	push   $0x957
f01265ca:	68 3a b5 13 f0       	push   $0xf013b53a
f01265cf:	e8 31 9c fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01265d4:	e8 d8 6b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01265d9:	89 c2                	mov    %eax,%edx
f01265db:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01265e1:	29 c2                	sub    %eax,%edx
f01265e3:	89 d0                	mov    %edx,%eax
f01265e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01265ea:	74 17                	je     f0126603 <test_kheap_virt_addr+0xfe1>
f01265ec:	83 ec 04             	sub    $0x4,%esp
f01265ef:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01265f4:	68 58 09 00 00       	push   $0x958
f01265f9:	68 3a b5 13 f0       	push   $0xf013b53a
f01265fe:	e8 02 9c fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126603:	e8 a9 6b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126608:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012660e:	e8 9c d7 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126613:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f0126619:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f012661f:	83 ec 0c             	sub    $0xc,%esp
f0126622:	50                   	push   %eax
f0126623:	e8 44 16 fe ff       	call   f0107c6c <kfree>
f0126628:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012662b:	e8 7f d7 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126630:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0126636:	74 17                	je     f012664f <test_kheap_virt_addr+0x102d>
f0126638:	83 ec 04             	sub    $0x4,%esp
f012663b:	68 54 b5 13 f0       	push   $0xf013b554
f0126640:	68 5e 09 00 00       	push   $0x95e
f0126645:	68 3a b5 13 f0       	push   $0xf013b53a
f012664a:	e8 b6 9b fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012664f:	e8 5d 6b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126654:	89 c2                	mov    %eax,%edx
f0126656:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012665c:	29 c2                	sub    %eax,%edx
f012665e:	89 d0                	mov    %edx,%eax
f0126660:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126665:	74 17                	je     f012667e <test_kheap_virt_addr+0x105c>
f0126667:	83 ec 04             	sub    $0x4,%esp
f012666a:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012666f:	68 5f 09 00 00       	push   $0x95f
f0126674:	68 3a b5 13 f0       	push   $0xf013b53a
f0126679:	e8 87 9b fd ff       	call   f0100205 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f012667e:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0126685:	10 00 00 
f0126688:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012668e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126693:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0126699:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012669f:	ba 00 00 00 00       	mov    $0x0,%edx
f01266a4:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01266aa:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01266b0:	29 d0                	sub    %edx,%eax
f01266b2:	89 c1                	mov    %eax,%ecx
f01266b4:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01266bb:	10 00 00 
f01266be:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01266c3:	0f b6 d0             	movzbl %al,%edx
f01266c6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01266cc:	01 d0                	add    %edx,%eax
f01266ce:	48                   	dec    %eax
f01266cf:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f01266d5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01266db:	ba 00 00 00 00       	mov    $0x0,%edx
f01266e0:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f01266e6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01266ec:	29 d0                	sub    %edx,%eax
f01266ee:	01 c1                	add    %eax,%ecx
f01266f0:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01266f7:	10 00 00 
f01266fa:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01266ff:	0f b6 c0             	movzbl %al,%eax
f0126702:	c1 e0 04             	shl    $0x4,%eax
f0126705:	89 c2                	mov    %eax,%edx
f0126707:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012670d:	01 d0                	add    %edx,%eax
f012670f:	48                   	dec    %eax
f0126710:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0126716:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012671c:	ba 00 00 00 00       	mov    $0x0,%edx
f0126721:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0126727:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012672d:	29 d0                	sub    %edx,%eax
f012672f:	01 c8                	add    %ecx,%eax
f0126731:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126736:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f012673c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0126743:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f012674a:	10 00 00 
f012674d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0126753:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126758:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f012675e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126764:	ba 00 00 00 00       	mov    $0x0,%edx
f0126769:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f012676f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0126775:	29 d0                	sub    %edx,%eax
f0126777:	89 c1                	mov    %eax,%ecx
f0126779:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0126780:	10 00 00 
f0126783:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126788:	0f b6 d0             	movzbl %al,%edx
f012678b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0126791:	01 d0                	add    %edx,%eax
f0126793:	48                   	dec    %eax
f0126794:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f012679a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01267a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01267a5:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f01267ab:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01267b1:	29 d0                	sub    %edx,%eax
f01267b3:	01 c1                	add    %eax,%ecx
f01267b5:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f01267bc:	10 00 00 
f01267bf:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01267c4:	0f b6 c0             	movzbl %al,%eax
f01267c7:	c1 e0 04             	shl    $0x4,%eax
f01267ca:	89 c2                	mov    %eax,%edx
f01267cc:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01267d2:	01 d0                	add    %edx,%eax
f01267d4:	48                   	dec    %eax
f01267d5:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f01267db:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01267e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01267e6:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f01267ec:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01267f2:	29 d0                	sub    %edx,%eax
f01267f4:	01 c1                	add    %eax,%ecx
f01267f6:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f01267fd:	10 00 00 
f0126800:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0126806:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012680b:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0126811:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126817:	ba 00 00 00 00       	mov    $0x0,%edx
f012681c:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0126822:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0126828:	29 d0                	sub    %edx,%eax
f012682a:	29 c1                	sub    %eax,%ecx
f012682c:	89 c8                	mov    %ecx,%eax
f012682e:	05 00 40 00 00       	add    $0x4000,%eax
f0126833:	c1 e8 0c             	shr    $0xc,%eax
f0126836:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f012683c:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126842:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126845:	eb 41                	jmp    f0126888 <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126847:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012684d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126850:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126853:	83 ec 0c             	sub    $0xc,%esp
f0126856:	50                   	push   %eax
f0126857:	e8 53 15 fe ff       	call   f0107daf <kheap_virtual_address>
f012685c:	83 c4 10             	add    $0x10,%esp
f012685f:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f0126865:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f012686c:	74 17                	je     f0126885 <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f012686e:	83 ec 04             	sub    $0x4,%esp
f0126871:	68 13 c0 13 f0       	push   $0xf013c013
f0126876:	68 70 09 00 00       	push   $0x970
f012687b:	68 3a b5 13 f0       	push   $0xf013b53a
f0126880:	e8 80 99 fd ff       	call   f0100205 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0126885:	ff 45 d8             	incl   -0x28(%ebp)
f0126888:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012688e:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f0126894:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126897:	39 c2                	cmp    %eax,%edx
f0126899:	77 ac                	ja     f0126847 <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012689b:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01268a1:	05 00 04 00 00       	add    $0x400,%eax
f01268a6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01268a9:	e9 83 00 00 00       	jmp    f0126931 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01268ae:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01268b4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01268b7:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01268ba:	83 ec 0c             	sub    $0xc,%esp
f01268bd:	50                   	push   %eax
f01268be:	e8 ec 14 fe ff       	call   f0107daf <kheap_virtual_address>
f01268c3:	83 c4 10             	add    $0x10,%esp
f01268c6:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01268cc:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f01268d3:	10 00 00 
f01268d6:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01268dc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01268e1:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01268e7:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01268ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01268f2:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01268f8:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01268fe:	29 d0                	sub    %edx,%eax
f0126900:	89 c2                	mov    %eax,%edx
f0126902:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126905:	c1 e0 0c             	shl    $0xc,%eax
f0126908:	01 d0                	add    %edx,%eax
f012690a:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012690f:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f0126915:	74 17                	je     f012692e <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f0126917:	83 ec 04             	sub    $0x4,%esp
f012691a:	68 13 c0 13 f0       	push   $0xf013c013
f012691f:	68 7a 09 00 00       	push   $0x97a
f0126924:	68 3a b5 13 f0       	push   $0xf013b53a
f0126929:	e8 d7 98 fd ff       	call   f0100205 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012692e:	ff 45 d8             	incl   -0x28(%ebp)
f0126931:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126937:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f012693d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126940:	39 c2                	cmp    %eax,%edx
f0126942:	0f 87 66 ff ff ff    	ja     f01268ae <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126948:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012694e:	05 04 07 00 00       	add    $0x704,%eax
f0126953:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0126956:	eb 41                	jmp    f0126999 <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0126958:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012695e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0126961:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0126964:	83 ec 0c             	sub    $0xc,%esp
f0126967:	50                   	push   %eax
f0126968:	e8 42 14 fe ff       	call   f0107daf <kheap_virtual_address>
f012696d:	83 c4 10             	add    $0x10,%esp
f0126970:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f0126976:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f012697d:	74 17                	je     f0126996 <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f012697f:	83 ec 04             	sub    $0x4,%esp
f0126982:	68 13 c0 13 f0       	push   $0xf013c013
f0126987:	68 83 09 00 00       	push   $0x983
f012698c:	68 3a b5 13 f0       	push   $0xf013b53a
f0126991:	e8 6f 98 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0126996:	ff 45 d8             	incl   -0x28(%ebp)
f0126999:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012699f:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01269a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01269a8:	39 c2                	cmp    %eax,%edx
f01269aa:	77 ac                	ja     f0126958 <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f01269ac:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01269b2:	05 04 0d 00 00       	add    $0xd04,%eax
f01269b7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01269ba:	e9 83 00 00 00       	jmp    f0126a42 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01269bf:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01269c5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01269c8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01269cb:	83 ec 0c             	sub    $0xc,%esp
f01269ce:	50                   	push   %eax
f01269cf:	e8 db 13 fe ff       	call   f0107daf <kheap_virtual_address>
f01269d4:	83 c4 10             	add    $0x10,%esp
f01269d7:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f01269dd:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f01269e4:	10 00 00 
f01269e7:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01269ed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01269f2:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f01269f8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01269fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a03:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f0126a09:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0126a0f:	29 d0                	sub    %edx,%eax
f0126a11:	89 c2                	mov    %eax,%edx
f0126a13:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126a16:	c1 e0 0c             	shl    $0xc,%eax
f0126a19:	01 d0                	add    %edx,%eax
f0126a1b:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0126a20:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f0126a26:	74 17                	je     f0126a3f <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f0126a28:	83 ec 04             	sub    $0x4,%esp
f0126a2b:	68 13 c0 13 f0       	push   $0xf013c013
f0126a30:	68 8c 09 00 00       	push   $0x98c
f0126a35:	68 3a b5 13 f0       	push   $0xf013b53a
f0126a3a:	e8 c6 97 fd ff       	call   f0100205 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0126a3f:	ff 45 d8             	incl   -0x28(%ebp)
f0126a42:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0126a48:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f0126a4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0126a51:	39 c2                	cmp    %eax,%edx
f0126a53:	0f 87 66 ff ff ff    	ja     f01269bf <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f0126a59:	83 ec 0c             	sub    $0xc,%esp
f0126a5c:	68 c5 b6 13 f0       	push   $0xf013b6c5
f0126a61:	e8 a8 a2 fd ff       	call   f0100d0e <cprintf>
f0126a66:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126a69:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f0126a70:	eb 54                	jmp    f0126ac6 <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f0126a72:	83 ec 0c             	sub    $0xc,%esp
f0126a75:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126a78:	e8 32 13 fe ff       	call   f0107daf <kheap_virtual_address>
f0126a7d:	83 c4 10             	add    $0x10,%esp
f0126a80:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f0126a86:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f0126a8d:	74 30                	je     f0126abf <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f0126a8f:	83 ec 04             	sub    $0x4,%esp
f0126a92:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f0126a98:	ff 75 d4             	pushl  -0x2c(%ebp)
f0126a9b:	68 61 c0 13 f0       	push   $0xf013c061
f0126aa0:	e8 69 a2 fd ff       	call   f0100d0e <cprintf>
f0126aa5:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f0126aa8:	83 ec 04             	sub    $0x4,%esp
f0126aab:	68 13 c0 13 f0       	push   $0xf013c013
f0126ab0:	68 9c 09 00 00       	push   $0x99c
f0126ab5:	68 3a b5 13 f0       	push   $0xf013b53a
f0126aba:	e8 46 97 fd ff       	call   f0100205 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0126abf:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0126ac6:	b8 bc f8 85 00       	mov    $0x85f8bc,%eax
f0126acb:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0126ace:	72 a2                	jb     f0126a72 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0126ad0:	83 ec 0c             	sub    $0xc,%esp
f0126ad3:	68 1e b7 13 f0       	push   $0xf013b71e
f0126ad8:	e8 31 a2 fd ff       	call   f0100d0e <cprintf>
f0126add:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0126ae0:	83 ec 0c             	sub    $0xc,%esp
f0126ae3:	68 80 c0 13 f0       	push   $0xf013c080
f0126ae8:	e8 21 a2 fd ff       	call   f0100d0e <cprintf>
f0126aed:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126af0:	b8 01 00 00 00       	mov    $0x1,%eax
f0126af5:	89 f4                	mov    %esi,%esp

}
f0126af7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126afa:	5b                   	pop    %ebx
f0126afb:	5e                   	pop    %esi
f0126afc:	5f                   	pop    %edi
f0126afd:	5d                   	pop    %ebp
f0126afe:	c3                   	ret    

f0126aff <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0126aff:	55                   	push   %ebp
f0126b00:	89 e5                	mov    %esp,%ebp
f0126b02:	57                   	push   %edi
f0126b03:	56                   	push   %esi
f0126b04:	53                   	push   %ebx
f0126b05:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0126b0b:	a0 23 3d 19 f0       	mov    0xf0193d23,%al
f0126b10:	84 c0                	test   %al,%al
f0126b12:	74 56                	je     f0126b6a <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0126b14:	c6 05 23 3d 19 f0 00 	movb   $0x0,0xf0193d23
		initFreeFrames = sys_calculate_free_frames() ;
f0126b1b:	e8 91 66 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126b20:	a3 b8 f8 85 f0       	mov    %eax,0xf085f8b8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f0126b25:	e8 85 d2 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126b2a:	a3 b4 f8 85 f0       	mov    %eax,0xf085f8b4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0126b2f:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126b35:	bb dd c1 13 f0       	mov    $0xf013c1dd,%ebx
f0126b3a:	ba 11 00 00 00       	mov    $0x11,%edx
f0126b3f:	89 c7                	mov    %eax,%edi
f0126b41:	89 de                	mov    %ebx,%esi
f0126b43:	89 d1                	mov    %edx,%ecx
f0126b45:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0126b47:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f0126b4d:	b9 53 00 00 00       	mov    $0x53,%ecx
f0126b52:	b0 00                	mov    $0x0,%al
f0126b54:	89 d7                	mov    %edx,%edi
f0126b56:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f0126b58:	83 ec 0c             	sub    $0xc,%esp
f0126b5b:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f0126b61:	50                   	push   %eax
f0126b62:	e8 09 a2 fd ff       	call   f0100d70 <execute_command>
f0126b67:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f0126b6a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f0126b71:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126b78:	a1 f0 f6 85 f0       	mov    0xf085f6f0,%eax
f0126b7d:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126b80:	eb 2d                	jmp    f0126baf <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f0126b82:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126b85:	05 5c 05 00 00       	add    $0x55c,%eax
f0126b8a:	83 ec 08             	sub    $0x8,%esp
f0126b8d:	68 c7 c0 13 f0       	push   $0xf013c0c7
f0126b92:	50                   	push   %eax
f0126b93:	e8 79 af 00 00       	call   f0131b11 <strcmp>
f0126b98:	83 c4 10             	add    $0x10,%esp
f0126b9b:	85 c0                	test   %eax,%eax
f0126b9d:	75 08                	jne    f0126ba7 <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f0126b9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126ba2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f0126ba5:	eb 2f                	jmp    f0126bd6 <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0126ba7:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f0126bac:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0126baf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126bb3:	74 08                	je     f0126bbd <test_three_creation_functions+0xbe>
f0126bb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0126bb8:	8b 40 44             	mov    0x44(%eax),%eax
f0126bbb:	eb 05                	jmp    f0126bc2 <test_three_creation_functions+0xc3>
f0126bbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0126bc2:	a3 f8 f6 85 f0       	mov    %eax,0xf085f6f8
f0126bc7:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f0126bcc:	85 c0                	test   %eax,%eax
f0126bce:	75 b2                	jne    f0126b82 <test_three_creation_functions+0x83>
f0126bd0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0126bd4:	75 ac                	jne    f0126b82 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f0126bd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0126bd9:	8b 80 34 05 00 00    	mov    0x534(%eax),%eax
f0126bdf:	85 c0                	test   %eax,%eax
f0126be1:	74 17                	je     f0126bfa <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0126be3:	83 ec 04             	sub    $0x4,%esp
f0126be6:	68 d0 c0 13 f0       	push   $0xf013c0d0
f0126beb:	68 c6 09 00 00       	push   $0x9c6
f0126bf0:	68 3a b5 13 f0       	push   $0xf013b53a
f0126bf5:	e8 0b 96 fd ff       	call   f0100205 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f0126bfa:	83 ec 0c             	sub    $0xc,%esp
f0126bfd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0126c00:	e8 8c 15 fe ff       	call   f0108191 <env_page_ws_get_size>
f0126c05:	83 c4 10             	add    $0x10,%esp
f0126c08:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0126c0b:	e8 a1 65 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126c10:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0126c13:	e8 97 d1 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126c18:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126c1b:	a1 b4 f8 85 f0       	mov    0xf085f8b4,%eax
f0126c20:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0126c23:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0126c26:	74 17                	je     f0126c3f <test_three_creation_functions+0x140>
f0126c28:	83 ec 04             	sub    $0x4,%esp
f0126c2b:	68 54 b5 13 f0       	push   $0xf013b554
f0126c30:	68 cc 09 00 00       	push   $0x9cc
f0126c35:	68 3a b5 13 f0       	push   $0xf013b53a
f0126c3a:	e8 c6 95 fd ff       	call   f0100205 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126c3f:	a1 b8 f8 85 f0       	mov    0xf085f8b8,%eax
f0126c44:	2b 45 d8             	sub    -0x28(%ebp),%eax
f0126c47:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0126c4a:	83 c2 15             	add    $0x15,%edx
f0126c4d:	39 d0                	cmp    %edx,%eax
f0126c4f:	74 17                	je     f0126c68 <test_three_creation_functions+0x169>
f0126c51:	83 ec 04             	sub    $0x4,%esp
f0126c54:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126c59:	68 ce 09 00 00       	push   $0x9ce
f0126c5e:	68 3a b5 13 f0       	push   $0xf013b53a
f0126c63:	e8 9d 95 fd ff       	call   f0100205 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f0126c68:	83 ec 0c             	sub    $0xc,%esp
f0126c6b:	68 00 10 00 00       	push   $0x1000
f0126c70:	e8 ef 0e fe ff       	call   f0107b64 <kmalloc>
f0126c75:	83 c4 10             	add    $0x10,%esp
f0126c78:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f0126c7b:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0126c82:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0126c85:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126c8a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0126c8d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126c90:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c95:	f7 75 cc             	divl   -0x34(%ebp)
f0126c98:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126c9b:	29 d0                	sub    %edx,%eax
f0126c9d:	89 c1                	mov    %eax,%ecx
f0126c9f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0126ca6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126cab:	0f b6 d0             	movzbl %al,%edx
f0126cae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126cb1:	01 d0                	add    %edx,%eax
f0126cb3:	48                   	dec    %eax
f0126cb4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0126cb7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126cba:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cbf:	f7 75 c4             	divl   -0x3c(%ebp)
f0126cc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126cc5:	29 d0                	sub    %edx,%eax
f0126cc7:	01 c1                	add    %eax,%ecx
f0126cc9:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0126cd0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126cd5:	0f b6 c0             	movzbl %al,%eax
f0126cd8:	c1 e0 04             	shl    $0x4,%eax
f0126cdb:	89 c2                	mov    %eax,%edx
f0126cdd:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126ce0:	01 d0                	add    %edx,%eax
f0126ce2:	48                   	dec    %eax
f0126ce3:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0126ce6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126ce9:	ba 00 00 00 00       	mov    $0x0,%edx
f0126cee:	f7 75 bc             	divl   -0x44(%ebp)
f0126cf1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126cf4:	29 d0                	sub    %edx,%eax
f0126cf6:	01 c8                	add    %ecx,%eax
f0126cf8:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0126cfe:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126d01:	39 c2                	cmp    %eax,%edx
f0126d03:	74 17                	je     f0126d1c <test_three_creation_functions+0x21d>
f0126d05:	83 ec 04             	sub    $0x4,%esp
f0126d08:	68 20 c1 13 f0       	push   $0xf013c120
f0126d0d:	68 d2 09 00 00       	push   $0x9d2
f0126d12:	68 3a b5 13 f0       	push   $0xf013b53a
f0126d17:	e8 e9 94 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0126d1c:	83 ec 0c             	sub    $0xc,%esp
f0126d1f:	68 90 c1 13 f0       	push   $0xf013c190
f0126d24:	e8 e5 9f fd ff       	call   f0100d0e <cprintf>
f0126d29:	83 c4 10             	add    $0x10,%esp

	return 1;
f0126d2c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0126d31:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0126d34:	5b                   	pop    %ebx
f0126d35:	5e                   	pop    %esi
f0126d36:	5f                   	pop    %edi
f0126d37:	5d                   	pop    %ebp
f0126d38:	c3                   	ret    

f0126d39 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f0126d39:	55                   	push   %ebp
f0126d3a:	89 e5                	mov    %esp,%ebp
f0126d3c:	57                   	push   %edi
f0126d3d:	53                   	push   %ebx
f0126d3e:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0126d44:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0126d48:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0126d4c:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0126d52:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0126d58:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0126d5f:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0126d66:	e8 46 64 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126d6b:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0126d6e:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0126d74:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d79:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d7e:	89 d7                	mov    %edx,%edi
f0126d80:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0126d82:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f0126d88:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126d8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0126d92:	89 d7                	mov    %edx,%edi
f0126d94:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0126d96:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f0126d9c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0126da1:	b8 00 00 00 00       	mov    $0x0,%eax
f0126da6:	89 d7                	mov    %edx,%edi
f0126da8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126daa:	e8 02 64 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126daf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126db2:	e8 f8 cf fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126db7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0126dba:	83 ec 0c             	sub    $0xc,%esp
f0126dbd:	68 00 fc 1f 00       	push   $0x1ffc00
f0126dc2:	e8 9d 0d fe ff       	call   f0107b64 <kmalloc>
f0126dc7:	83 c4 10             	add    $0x10,%esp
f0126dca:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126dd0:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0126dd6:	89 c1                	mov    %eax,%ecx
f0126dd8:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0126ddf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0126de2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126de7:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0126dea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126ded:	ba 00 00 00 00       	mov    $0x0,%edx
f0126df2:	f7 75 c8             	divl   -0x38(%ebp)
f0126df5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0126df8:	29 d0                	sub    %edx,%eax
f0126dfa:	89 c3                	mov    %eax,%ebx
f0126dfc:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0126e03:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126e08:	0f b6 d0             	movzbl %al,%edx
f0126e0b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0126e0e:	01 d0                	add    %edx,%eax
f0126e10:	48                   	dec    %eax
f0126e11:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0126e14:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e17:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e1c:	f7 75 c0             	divl   -0x40(%ebp)
f0126e1f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0126e22:	29 d0                	sub    %edx,%eax
f0126e24:	01 c3                	add    %eax,%ebx
f0126e26:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0126e2d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126e32:	0f b6 c0             	movzbl %al,%eax
f0126e35:	c1 e0 04             	shl    $0x4,%eax
f0126e38:	89 c2                	mov    %eax,%edx
f0126e3a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0126e3d:	01 d0                	add    %edx,%eax
f0126e3f:	48                   	dec    %eax
f0126e40:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0126e43:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0126e4b:	f7 75 b8             	divl   -0x48(%ebp)
f0126e4e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0126e51:	29 d0                	sub    %edx,%eax
f0126e53:	01 d8                	add    %ebx,%eax
f0126e55:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0126e5a:	39 c1                	cmp    %eax,%ecx
f0126e5c:	74 17                	je     f0126e75 <test_kfreeall+0x13c>
f0126e5e:	83 ec 04             	sub    $0x4,%esp
f0126e61:	68 20 b6 13 f0       	push   $0xf013b620
f0126e66:	68 f9 09 00 00       	push   $0x9f9
f0126e6b:	68 3a b5 13 f0       	push   $0xf013b53a
f0126e70:	e8 90 93 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e75:	e8 35 cf fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126e7a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e7d:	74 17                	je     f0126e96 <test_kfreeall+0x15d>
f0126e7f:	83 ec 04             	sub    $0x4,%esp
f0126e82:	68 54 b5 13 f0       	push   $0xf013b554
f0126e87:	68 fa 09 00 00       	push   $0x9fa
f0126e8c:	68 3a b5 13 f0       	push   $0xf013b53a
f0126e91:	e8 6f 93 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e96:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e99:	e8 13 63 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126e9e:	29 c3                	sub    %eax,%ebx
f0126ea0:	89 d8                	mov    %ebx,%eax
f0126ea2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126ea7:	74 17                	je     f0126ec0 <test_kfreeall+0x187>
f0126ea9:	83 ec 04             	sub    $0x4,%esp
f0126eac:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126eb1:	68 fb 09 00 00       	push   $0x9fb
f0126eb6:	68 3a b5 13 f0       	push   $0xf013b53a
f0126ebb:	e8 45 93 fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0126ec0:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0126ec7:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126eca:	e8 e2 62 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126ecf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ed2:	e8 d8 ce fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126ed7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0126eda:	83 ec 0c             	sub    $0xc,%esp
f0126edd:	68 00 fc 1f 00       	push   $0x1ffc00
f0126ee2:	e8 7d 0c fe ff       	call   f0107b64 <kmalloc>
f0126ee7:	83 c4 10             	add    $0x10,%esp
f0126eea:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126ef0:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126ef6:	89 c1                	mov    %eax,%ecx
f0126ef8:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0126eff:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0126f02:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126f07:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0126f0a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126f0d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f12:	f7 75 b0             	divl   -0x50(%ebp)
f0126f15:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0126f18:	29 d0                	sub    %edx,%eax
f0126f1a:	89 c3                	mov    %eax,%ebx
f0126f1c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0126f23:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126f28:	0f b6 d0             	movzbl %al,%edx
f0126f2b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0126f2e:	01 d0                	add    %edx,%eax
f0126f30:	48                   	dec    %eax
f0126f31:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0126f34:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f37:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f3c:	f7 75 a8             	divl   -0x58(%ebp)
f0126f3f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0126f42:	29 d0                	sub    %edx,%eax
f0126f44:	01 c3                	add    %eax,%ebx
f0126f46:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0126f4d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0126f52:	0f b6 c0             	movzbl %al,%eax
f0126f55:	c1 e0 04             	shl    $0x4,%eax
f0126f58:	89 c2                	mov    %eax,%edx
f0126f5a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0126f5d:	01 d0                	add    %edx,%eax
f0126f5f:	48                   	dec    %eax
f0126f60:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0126f63:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126f66:	ba 00 00 00 00       	mov    $0x0,%edx
f0126f6b:	f7 75 a0             	divl   -0x60(%ebp)
f0126f6e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0126f71:	29 d0                	sub    %edx,%eax
f0126f73:	01 d8                	add    %ebx,%eax
f0126f75:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0126f7a:	39 c1                	cmp    %eax,%ecx
f0126f7c:	74 17                	je     f0126f95 <test_kfreeall+0x25c>
f0126f7e:	83 ec 04             	sub    $0x4,%esp
f0126f81:	68 20 b6 13 f0       	push   $0xf013b620
f0126f86:	68 02 0a 00 00       	push   $0xa02
f0126f8b:	68 3a b5 13 f0       	push   $0xf013b53a
f0126f90:	e8 70 92 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f95:	e8 15 ce fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126f9a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f9d:	74 17                	je     f0126fb6 <test_kfreeall+0x27d>
f0126f9f:	83 ec 04             	sub    $0x4,%esp
f0126fa2:	68 54 b5 13 f0       	push   $0xf013b554
f0126fa7:	68 03 0a 00 00       	push   $0xa03
f0126fac:	68 3a b5 13 f0       	push   $0xf013b53a
f0126fb1:	e8 4f 92 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126fb6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126fb9:	e8 f3 61 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126fbe:	29 c3                	sub    %eax,%ebx
f0126fc0:	89 d8                	mov    %ebx,%eax
f0126fc2:	3d 00 02 00 00       	cmp    $0x200,%eax
f0126fc7:	74 17                	je     f0126fe0 <test_kfreeall+0x2a7>
f0126fc9:	83 ec 04             	sub    $0x4,%esp
f0126fcc:	68 bc b5 13 f0       	push   $0xf013b5bc
f0126fd1:	68 04 0a 00 00       	push   $0xa04
f0126fd6:	68 3a b5 13 f0       	push   $0xf013b53a
f0126fdb:	e8 25 92 fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0126fe0:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0126fe7:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126fea:	e8 c2 61 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0126fef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ff2:	e8 b8 cd fd ff       	call   f0103daf <pf_calculate_free_frames>
f0126ff7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0126ffa:	83 ec 0c             	sub    $0xc,%esp
f0126ffd:	68 00 08 00 00       	push   $0x800
f0127002:	e8 5d 0b fe ff       	call   f0107b64 <kmalloc>
f0127007:	83 c4 10             	add    $0x10,%esp
f012700a:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127010:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0127016:	89 c1                	mov    %eax,%ecx
f0127018:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f012701f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127022:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127027:	89 45 94             	mov    %eax,-0x6c(%ebp)
f012702a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012702d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127032:	f7 75 98             	divl   -0x68(%ebp)
f0127035:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0127038:	29 d0                	sub    %edx,%eax
f012703a:	89 c3                	mov    %eax,%ebx
f012703c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0127043:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127048:	0f b6 d0             	movzbl %al,%edx
f012704b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012704e:	01 d0                	add    %edx,%eax
f0127050:	48                   	dec    %eax
f0127051:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0127054:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127057:	ba 00 00 00 00       	mov    $0x0,%edx
f012705c:	f7 75 90             	divl   -0x70(%ebp)
f012705f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127062:	29 d0                	sub    %edx,%eax
f0127064:	01 c3                	add    %eax,%ebx
f0127066:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012706d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127072:	0f b6 c0             	movzbl %al,%eax
f0127075:	c1 e0 04             	shl    $0x4,%eax
f0127078:	89 c2                	mov    %eax,%edx
f012707a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012707d:	01 d0                	add    %edx,%eax
f012707f:	48                   	dec    %eax
f0127080:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0127083:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127086:	ba 00 00 00 00       	mov    $0x0,%edx
f012708b:	f7 75 88             	divl   -0x78(%ebp)
f012708e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0127091:	29 d0                	sub    %edx,%eax
f0127093:	01 d8                	add    %ebx,%eax
f0127095:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012709a:	39 c1                	cmp    %eax,%ecx
f012709c:	74 17                	je     f01270b5 <test_kfreeall+0x37c>
f012709e:	83 ec 04             	sub    $0x4,%esp
f01270a1:	68 20 b6 13 f0       	push   $0xf013b620
f01270a6:	68 0b 0a 00 00       	push   $0xa0b
f01270ab:	68 3a b5 13 f0       	push   $0xf013b53a
f01270b0:	e8 50 91 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01270b5:	e8 f5 cc fd ff       	call   f0103daf <pf_calculate_free_frames>
f01270ba:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01270bd:	74 17                	je     f01270d6 <test_kfreeall+0x39d>
f01270bf:	83 ec 04             	sub    $0x4,%esp
f01270c2:	68 54 b5 13 f0       	push   $0xf013b554
f01270c7:	68 0c 0a 00 00       	push   $0xa0c
f01270cc:	68 3a b5 13 f0       	push   $0xf013b53a
f01270d1:	e8 2f 91 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01270d6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01270d9:	e8 d3 60 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01270de:	29 c3                	sub    %eax,%ebx
f01270e0:	89 d8                	mov    %ebx,%eax
f01270e2:	83 f8 01             	cmp    $0x1,%eax
f01270e5:	74 17                	je     f01270fe <test_kfreeall+0x3c5>
f01270e7:	83 ec 04             	sub    $0x4,%esp
f01270ea:	68 bc b5 13 f0       	push   $0xf013b5bc
f01270ef:	68 0d 0a 00 00       	push   $0xa0d
f01270f4:	68 3a b5 13 f0       	push   $0xf013b53a
f01270f9:	e8 07 91 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01270fe:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0127105:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127108:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012710e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127111:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127118:	eb 0e                	jmp    f0127128 <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f012711a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012711d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127120:	01 d0                	add    %edx,%eax
f0127122:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127125:	ff 45 f4             	incl   -0xc(%ebp)
f0127128:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012712e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127131:	7f e7                	jg     f012711a <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127133:	e8 79 60 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127138:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012713b:	e8 6f cc fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127140:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127143:	83 ec 0c             	sub    $0xc,%esp
f0127146:	68 00 08 00 00       	push   $0x800
f012714b:	e8 14 0a fe ff       	call   f0107b64 <kmalloc>
f0127150:	83 c4 10             	add    $0x10,%esp
f0127153:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127159:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012715f:	89 c1                	mov    %eax,%ecx
f0127161:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0127168:	10 00 00 
f012716b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0127171:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127176:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012717c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127182:	ba 00 00 00 00       	mov    $0x0,%edx
f0127187:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012718d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127193:	29 d0                	sub    %edx,%eax
f0127195:	89 c3                	mov    %eax,%ebx
f0127197:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012719e:	10 00 00 
f01271a1:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01271a6:	0f b6 d0             	movzbl %al,%edx
f01271a9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01271af:	01 d0                	add    %edx,%eax
f01271b1:	48                   	dec    %eax
f01271b2:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01271b8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01271be:	ba 00 00 00 00       	mov    $0x0,%edx
f01271c3:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01271c9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01271cf:	29 d0                	sub    %edx,%eax
f01271d1:	01 c3                	add    %eax,%ebx
f01271d3:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01271da:	10 00 00 
f01271dd:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01271e2:	0f b6 c0             	movzbl %al,%eax
f01271e5:	c1 e0 04             	shl    $0x4,%eax
f01271e8:	89 c2                	mov    %eax,%edx
f01271ea:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01271f0:	01 d0                	add    %edx,%eax
f01271f2:	48                   	dec    %eax
f01271f3:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01271f9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01271ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0127204:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012720a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127210:	29 d0                	sub    %edx,%eax
f0127212:	01 d8                	add    %ebx,%eax
f0127214:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0127219:	39 c1                	cmp    %eax,%ecx
f012721b:	74 17                	je     f0127234 <test_kfreeall+0x4fb>
f012721d:	83 ec 04             	sub    $0x4,%esp
f0127220:	68 20 b6 13 f0       	push   $0xf013b620
f0127225:	68 19 0a 00 00       	push   $0xa19
f012722a:	68 3a b5 13 f0       	push   $0xf013b53a
f012722f:	e8 d1 8f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127234:	e8 76 cb fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127239:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012723c:	74 17                	je     f0127255 <test_kfreeall+0x51c>
f012723e:	83 ec 04             	sub    $0x4,%esp
f0127241:	68 54 b5 13 f0       	push   $0xf013b554
f0127246:	68 1a 0a 00 00       	push   $0xa1a
f012724b:	68 3a b5 13 f0       	push   $0xf013b53a
f0127250:	e8 b0 8f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127255:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127258:	e8 54 5f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012725d:	29 c3                	sub    %eax,%ebx
f012725f:	89 d8                	mov    %ebx,%eax
f0127261:	83 f8 01             	cmp    $0x1,%eax
f0127264:	74 17                	je     f012727d <test_kfreeall+0x544>
f0127266:	83 ec 04             	sub    $0x4,%esp
f0127269:	68 bc b5 13 f0       	push   $0xf013b5bc
f012726e:	68 1b 0a 00 00       	push   $0xa1b
f0127273:	68 3a b5 13 f0       	push   $0xf013b53a
f0127278:	e8 88 8f fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012727d:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0127284:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127287:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012728d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127290:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127297:	eb 0e                	jmp    f01272a7 <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0127299:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012729c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012729f:	01 d0                	add    %edx,%eax
f01272a1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01272a4:	ff 45 f4             	incl   -0xc(%ebp)
f01272a7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01272ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01272b0:	7f e7                	jg     f0127299 <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01272b2:	e8 fa 5e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01272b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01272ba:	e8 f0 ca fd ff       	call   f0103daf <pf_calculate_free_frames>
f01272bf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01272c2:	83 ec 0c             	sub    $0xc,%esp
f01272c5:	68 00 1c 00 00       	push   $0x1c00
f01272ca:	e8 95 08 fe ff       	call   f0107b64 <kmalloc>
f01272cf:	83 c4 10             	add    $0x10,%esp
f01272d2:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01272d8:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f01272de:	89 c1                	mov    %eax,%ecx
f01272e0:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01272e7:	10 00 00 
f01272ea:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01272f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01272f5:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01272fb:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127301:	ba 00 00 00 00       	mov    $0x0,%edx
f0127306:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012730c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127312:	29 d0                	sub    %edx,%eax
f0127314:	89 c3                	mov    %eax,%ebx
f0127316:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012731d:	10 00 00 
f0127320:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127325:	0f b6 d0             	movzbl %al,%edx
f0127328:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012732e:	01 d0                	add    %edx,%eax
f0127330:	48                   	dec    %eax
f0127331:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0127337:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012733d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127342:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0127348:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012734e:	29 d0                	sub    %edx,%eax
f0127350:	01 c3                	add    %eax,%ebx
f0127352:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0127359:	10 00 00 
f012735c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127361:	0f b6 c0             	movzbl %al,%eax
f0127364:	c1 e0 04             	shl    $0x4,%eax
f0127367:	89 c2                	mov    %eax,%edx
f0127369:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012736f:	01 d0                	add    %edx,%eax
f0127371:	48                   	dec    %eax
f0127372:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0127378:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012737e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127383:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0127389:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012738f:	29 d0                	sub    %edx,%eax
f0127391:	01 d8                	add    %ebx,%eax
f0127393:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0127398:	39 c1                	cmp    %eax,%ecx
f012739a:	74 17                	je     f01273b3 <test_kfreeall+0x67a>
f012739c:	83 ec 04             	sub    $0x4,%esp
f012739f:	68 20 b6 13 f0       	push   $0xf013b620
f01273a4:	68 27 0a 00 00       	push   $0xa27
f01273a9:	68 3a b5 13 f0       	push   $0xf013b53a
f01273ae:	e8 52 8e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273b3:	e8 f7 c9 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01273b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01273bb:	74 17                	je     f01273d4 <test_kfreeall+0x69b>
f01273bd:	83 ec 04             	sub    $0x4,%esp
f01273c0:	68 54 b5 13 f0       	push   $0xf013b554
f01273c5:	68 28 0a 00 00       	push   $0xa28
f01273ca:	68 3a b5 13 f0       	push   $0xf013b53a
f01273cf:	e8 31 8e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01273d4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01273d7:	e8 d5 5d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01273dc:	29 c3                	sub    %eax,%ebx
f01273de:	89 d8                	mov    %ebx,%eax
f01273e0:	83 f8 02             	cmp    $0x2,%eax
f01273e3:	74 17                	je     f01273fc <test_kfreeall+0x6c3>
f01273e5:	83 ec 04             	sub    $0x4,%esp
f01273e8:	68 bc b5 13 f0       	push   $0xf013b5bc
f01273ed:	68 29 0a 00 00       	push   $0xa29
f01273f2:	68 3a b5 13 f0       	push   $0xf013b53a
f01273f7:	e8 09 8e fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01273fc:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0127403:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127406:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012740c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012740f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127416:	eb 0e                	jmp    f0127426 <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f0127418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012741b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012741e:	01 d0                	add    %edx,%eax
f0127420:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127423:	ff 45 f4             	incl   -0xc(%ebp)
f0127426:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012742c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012742f:	7f e7                	jg     f0127418 <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127431:	e8 7b 5d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127436:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127439:	e8 71 c9 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012743e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127441:	83 ec 0c             	sub    $0xc,%esp
f0127444:	68 00 fc 2f 00       	push   $0x2ffc00
f0127449:	e8 16 07 fe ff       	call   f0107b64 <kmalloc>
f012744e:	83 c4 10             	add    $0x10,%esp
f0127451:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127457:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012745d:	89 c1                	mov    %eax,%ecx
f012745f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0127466:	10 00 00 
f0127469:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012746f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127474:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012747a:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127480:	ba 00 00 00 00       	mov    $0x0,%edx
f0127485:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012748b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127491:	29 d0                	sub    %edx,%eax
f0127493:	89 c3                	mov    %eax,%ebx
f0127495:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012749c:	10 00 00 
f012749f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01274a4:	0f b6 d0             	movzbl %al,%edx
f01274a7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01274ad:	01 d0                	add    %edx,%eax
f01274af:	48                   	dec    %eax
f01274b0:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f01274b6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01274bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01274c1:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01274c7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01274cd:	29 d0                	sub    %edx,%eax
f01274cf:	01 c3                	add    %eax,%ebx
f01274d1:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01274d8:	10 00 00 
f01274db:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01274e0:	0f b6 c0             	movzbl %al,%eax
f01274e3:	c1 e0 04             	shl    $0x4,%eax
f01274e6:	89 c2                	mov    %eax,%edx
f01274e8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01274ee:	01 d0                	add    %edx,%eax
f01274f0:	48                   	dec    %eax
f01274f1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01274f7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01274fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0127502:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0127508:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012750e:	29 d0                	sub    %edx,%eax
f0127510:	01 d8                	add    %ebx,%eax
f0127512:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127517:	39 c1                	cmp    %eax,%ecx
f0127519:	74 17                	je     f0127532 <test_kfreeall+0x7f9>
f012751b:	83 ec 04             	sub    $0x4,%esp
f012751e:	68 20 b6 13 f0       	push   $0xf013b620
f0127523:	68 35 0a 00 00       	push   $0xa35
f0127528:	68 3a b5 13 f0       	push   $0xf013b53a
f012752d:	e8 d3 8c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127532:	e8 78 c8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127537:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012753a:	74 17                	je     f0127553 <test_kfreeall+0x81a>
f012753c:	83 ec 04             	sub    $0x4,%esp
f012753f:	68 54 b5 13 f0       	push   $0xf013b554
f0127544:	68 36 0a 00 00       	push   $0xa36
f0127549:	68 3a b5 13 f0       	push   $0xf013b53a
f012754e:	e8 b2 8c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127553:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127556:	e8 56 5c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012755b:	29 c3                	sub    %eax,%ebx
f012755d:	89 d8                	mov    %ebx,%eax
f012755f:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127564:	74 17                	je     f012757d <test_kfreeall+0x844>
f0127566:	83 ec 04             	sub    $0x4,%esp
f0127569:	68 bc b5 13 f0       	push   $0xf013b5bc
f012756e:	68 37 0a 00 00       	push   $0xa37
f0127573:	68 3a b5 13 f0       	push   $0xf013b53a
f0127578:	e8 88 8c fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012757d:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0127584:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127587:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f012758d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127590:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127597:	eb 0e                	jmp    f01275a7 <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f0127599:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012759c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012759f:	01 d0                	add    %edx,%eax
f01275a1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01275a4:	ff 45 f4             	incl   -0xc(%ebp)
f01275a7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01275ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01275b0:	7f e7                	jg     f0127599 <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01275b2:	e8 fa 5b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01275b7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275ba:	e8 f0 c7 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01275bf:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01275c2:	83 ec 0c             	sub    $0xc,%esp
f01275c5:	68 00 fc 5f 00       	push   $0x5ffc00
f01275ca:	e8 95 05 fe ff       	call   f0107b64 <kmalloc>
f01275cf:	83 c4 10             	add    $0x10,%esp
f01275d2:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01275d8:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01275de:	89 c1                	mov    %eax,%ecx
f01275e0:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01275e7:	10 00 00 
f01275ea:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01275f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01275f5:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01275fb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127601:	ba 00 00 00 00       	mov    $0x0,%edx
f0127606:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012760c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127612:	29 d0                	sub    %edx,%eax
f0127614:	89 c3                	mov    %eax,%ebx
f0127616:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012761d:	10 00 00 
f0127620:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127625:	0f b6 d0             	movzbl %al,%edx
f0127628:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012762e:	01 d0                	add    %edx,%eax
f0127630:	48                   	dec    %eax
f0127631:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0127637:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012763d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127642:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0127648:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012764e:	29 d0                	sub    %edx,%eax
f0127650:	01 c3                	add    %eax,%ebx
f0127652:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0127659:	10 00 00 
f012765c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127661:	0f b6 c0             	movzbl %al,%eax
f0127664:	c1 e0 04             	shl    $0x4,%eax
f0127667:	89 c2                	mov    %eax,%edx
f0127669:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012766f:	01 d0                	add    %edx,%eax
f0127671:	48                   	dec    %eax
f0127672:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0127678:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012767e:	ba 00 00 00 00       	mov    $0x0,%edx
f0127683:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0127689:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012768f:	29 d0                	sub    %edx,%eax
f0127691:	01 d8                	add    %ebx,%eax
f0127693:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0127698:	39 c1                	cmp    %eax,%ecx
f012769a:	74 17                	je     f01276b3 <test_kfreeall+0x97a>
f012769c:	83 ec 04             	sub    $0x4,%esp
f012769f:	68 20 b6 13 f0       	push   $0xf013b620
f01276a4:	68 43 0a 00 00       	push   $0xa43
f01276a9:	68 3a b5 13 f0       	push   $0xf013b53a
f01276ae:	e8 52 8b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276b3:	e8 f7 c6 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01276b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01276bb:	74 17                	je     f01276d4 <test_kfreeall+0x99b>
f01276bd:	83 ec 04             	sub    $0x4,%esp
f01276c0:	68 54 b5 13 f0       	push   $0xf013b554
f01276c5:	68 44 0a 00 00       	push   $0xa44
f01276ca:	68 3a b5 13 f0       	push   $0xf013b53a
f01276cf:	e8 31 8b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276d4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01276d7:	e8 d5 5a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01276dc:	29 c3                	sub    %eax,%ebx
f01276de:	89 d8                	mov    %ebx,%eax
f01276e0:	3d 00 06 00 00       	cmp    $0x600,%eax
f01276e5:	74 17                	je     f01276fe <test_kfreeall+0x9c5>
f01276e7:	83 ec 04             	sub    $0x4,%esp
f01276ea:	68 bc b5 13 f0       	push   $0xf013b5bc
f01276ef:	68 45 0a 00 00       	push   $0xa45
f01276f4:	68 3a b5 13 f0       	push   $0xf013b53a
f01276f9:	e8 07 8b fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01276fe:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0127705:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0127708:	e8 a4 5a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012770d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127710:	e8 9a c6 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127715:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0127718:	83 ec 0c             	sub    $0xc,%esp
f012771b:	68 00 38 00 00       	push   $0x3800
f0127720:	e8 3f 04 fe ff       	call   f0107b64 <kmalloc>
f0127725:	83 c4 10             	add    $0x10,%esp
f0127728:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012772e:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127734:	89 c1                	mov    %eax,%ecx
f0127736:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012773d:	10 00 00 
f0127740:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127746:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012774b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0127751:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127757:	ba 00 00 00 00       	mov    $0x0,%edx
f012775c:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0127762:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127768:	29 d0                	sub    %edx,%eax
f012776a:	89 c3                	mov    %eax,%ebx
f012776c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0127773:	10 00 00 
f0127776:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012777b:	0f b6 d0             	movzbl %al,%edx
f012777e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127784:	01 d0                	add    %edx,%eax
f0127786:	48                   	dec    %eax
f0127787:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012778d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127793:	ba 00 00 00 00       	mov    $0x0,%edx
f0127798:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012779e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01277a4:	29 d0                	sub    %edx,%eax
f01277a6:	01 c3                	add    %eax,%ebx
f01277a8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f01277af:	10 00 00 
f01277b2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01277b7:	0f b6 c0             	movzbl %al,%eax
f01277ba:	c1 e0 04             	shl    $0x4,%eax
f01277bd:	89 c2                	mov    %eax,%edx
f01277bf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01277c5:	01 d0                	add    %edx,%eax
f01277c7:	48                   	dec    %eax
f01277c8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f01277ce:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01277d4:	ba 00 00 00 00       	mov    $0x0,%edx
f01277d9:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f01277df:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01277e5:	29 d0                	sub    %edx,%eax
f01277e7:	01 d8                	add    %ebx,%eax
f01277e9:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01277ee:	39 c1                	cmp    %eax,%ecx
f01277f0:	74 17                	je     f0127809 <test_kfreeall+0xad0>
f01277f2:	83 ec 04             	sub    $0x4,%esp
f01277f5:	68 20 b6 13 f0       	push   $0xf013b620
f01277fa:	68 4c 0a 00 00       	push   $0xa4c
f01277ff:	68 3a b5 13 f0       	push   $0xf013b53a
f0127804:	e8 fc 89 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127809:	e8 a1 c5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012780e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127811:	74 17                	je     f012782a <test_kfreeall+0xaf1>
f0127813:	83 ec 04             	sub    $0x4,%esp
f0127816:	68 54 b5 13 f0       	push   $0xf013b554
f012781b:	68 4d 0a 00 00       	push   $0xa4d
f0127820:	68 3a b5 13 f0       	push   $0xf013b53a
f0127825:	e8 db 89 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012782a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012782d:	e8 7f 59 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127832:	29 c3                	sub    %eax,%ebx
f0127834:	89 d8                	mov    %ebx,%eax
f0127836:	83 f8 04             	cmp    $0x4,%eax
f0127839:	74 17                	je     f0127852 <test_kfreeall+0xb19>
f012783b:	83 ec 04             	sub    $0x4,%esp
f012783e:	68 bc b5 13 f0       	push   $0xf013b5bc
f0127843:	68 4e 0a 00 00       	push   $0xa4e
f0127848:	68 3a b5 13 f0       	push   $0xf013b53a
f012784d:	e8 b3 89 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0127852:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0127859:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012785c:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127862:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127865:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012786c:	eb 0e                	jmp    f012787c <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f012786e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127871:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127874:	01 d0                	add    %edx,%eax
f0127876:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127879:	ff 45 f4             	incl   -0xc(%ebp)
f012787c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127882:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127885:	7f e7                	jg     f012786e <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0127887:	e8 25 59 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012788c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0127892:	e8 18 c5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127897:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f012789d:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01278a3:	83 ec 0c             	sub    $0xc,%esp
f01278a6:	50                   	push   %eax
f01278a7:	e8 c0 03 fe ff       	call   f0107c6c <kfree>
f01278ac:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01278af:	e8 fb c4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01278b4:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01278ba:	74 17                	je     f01278d3 <test_kfreeall+0xb9a>
f01278bc:	83 ec 04             	sub    $0x4,%esp
f01278bf:	68 54 b5 13 f0       	push   $0xf013b554
f01278c4:	68 5d 0a 00 00       	push   $0xa5d
f01278c9:	68 3a b5 13 f0       	push   $0xf013b53a
f01278ce:	e8 32 89 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01278d3:	e8 d9 58 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01278d8:	89 c2                	mov    %eax,%edx
f01278da:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01278e0:	29 c2                	sub    %eax,%edx
f01278e2:	89 d0                	mov    %edx,%eax
f01278e4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01278e9:	74 17                	je     f0127902 <test_kfreeall+0xbc9>
f01278eb:	83 ec 04             	sub    $0x4,%esp
f01278ee:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01278f3:	68 5e 0a 00 00       	push   $0xa5e
f01278f8:	68 3a b5 13 f0       	push   $0xf013b53a
f01278fd:	e8 03 89 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127902:	e8 aa 58 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127907:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012790d:	e8 9d c4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127912:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0127918:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012791e:	83 ec 0c             	sub    $0xc,%esp
f0127921:	50                   	push   %eax
f0127922:	e8 45 03 fe ff       	call   f0107c6c <kfree>
f0127927:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012792a:	e8 80 c4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012792f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0127935:	74 17                	je     f012794e <test_kfreeall+0xc15>
f0127937:	83 ec 04             	sub    $0x4,%esp
f012793a:	68 54 b5 13 f0       	push   $0xf013b554
f012793f:	68 64 0a 00 00       	push   $0xa64
f0127944:	68 3a b5 13 f0       	push   $0xf013b53a
f0127949:	e8 b7 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012794e:	e8 5e 58 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127953:	89 c2                	mov    %eax,%edx
f0127955:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012795b:	29 c2                	sub    %eax,%edx
f012795d:	89 d0                	mov    %edx,%eax
f012795f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127964:	74 17                	je     f012797d <test_kfreeall+0xc44>
f0127966:	83 ec 04             	sub    $0x4,%esp
f0127969:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012796e:	68 65 0a 00 00       	push   $0xa65
f0127973:	68 3a b5 13 f0       	push   $0xf013b53a
f0127978:	e8 88 88 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012797d:	e8 2f 58 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127982:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127988:	e8 22 c4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012798d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f0127993:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0127999:	83 ec 0c             	sub    $0xc,%esp
f012799c:	50                   	push   %eax
f012799d:	e8 ca 02 fe ff       	call   f0107c6c <kfree>
f01279a2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01279a5:	e8 05 c4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01279aa:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01279b0:	74 17                	je     f01279c9 <test_kfreeall+0xc90>
f01279b2:	83 ec 04             	sub    $0x4,%esp
f01279b5:	68 54 b5 13 f0       	push   $0xf013b554
f01279ba:	68 6b 0a 00 00       	push   $0xa6b
f01279bf:	68 3a b5 13 f0       	push   $0xf013b53a
f01279c4:	e8 3c 88 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01279c9:	e8 e3 57 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01279ce:	89 c2                	mov    %eax,%edx
f01279d0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01279d6:	29 c2                	sub    %eax,%edx
f01279d8:	89 d0                	mov    %edx,%eax
f01279da:	3d 00 06 00 00       	cmp    $0x600,%eax
f01279df:	74 17                	je     f01279f8 <test_kfreeall+0xcbf>
f01279e1:	83 ec 04             	sub    $0x4,%esp
f01279e4:	68 c4 bc 13 f0       	push   $0xf013bcc4
f01279e9:	68 6c 0a 00 00       	push   $0xa6c
f01279ee:	68 3a b5 13 f0       	push   $0xf013b53a
f01279f3:	e8 0d 88 fd ff       	call   f0100205 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f01279f8:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01279fe:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0127a01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a08:	eb 1e                	jmp    f0127a28 <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f0127a0a:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127a10:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127a13:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a16:	01 c8                	add    %ecx,%eax
f0127a18:	8a 00                	mov    (%eax),%al
f0127a1a:	0f be c0             	movsbl %al,%eax
f0127a1d:	01 d0                	add    %edx,%eax
f0127a1f:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127a25:	ff 45 f4             	incl   -0xc(%ebp)
f0127a28:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127a2e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a31:	7f d7                	jg     f0127a0a <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0127a33:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0127a39:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127a3f:	01 c0                	add    %eax,%eax
f0127a41:	39 c2                	cmp    %eax,%edx
f0127a43:	74 17                	je     f0127a5c <test_kfreeall+0xd23>
f0127a45:	83 ec 04             	sub    $0x4,%esp
f0127a48:	68 20 bd 13 f0       	push   $0xf013bd20
f0127a4d:	68 78 0a 00 00       	push   $0xa78
f0127a52:	68 3a b5 13 f0       	push   $0xf013b53a
f0127a57:	e8 a9 87 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0127a5c:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0127a62:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0127a65:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a6c:	eb 1e                	jmp    f0127a8c <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f0127a6e:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127a74:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127a77:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127a7a:	01 c8                	add    %ecx,%eax
f0127a7c:	8a 00                	mov    (%eax),%al
f0127a7e:	0f be c0             	movsbl %al,%eax
f0127a81:	01 d0                	add    %edx,%eax
f0127a83:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0127a89:	ff 45 f4             	incl   -0xc(%ebp)
f0127a8c:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127a92:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a95:	7f d7                	jg     f0127a6e <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0127a97:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0127a9d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127aa3:	89 c1                	mov    %eax,%ecx
f0127aa5:	01 c9                	add    %ecx,%ecx
f0127aa7:	01 c8                	add    %ecx,%eax
f0127aa9:	39 c2                	cmp    %eax,%edx
f0127aab:	74 17                	je     f0127ac4 <test_kfreeall+0xd8b>
f0127aad:	83 ec 04             	sub    $0x4,%esp
f0127ab0:	68 20 bd 13 f0       	push   $0xf013bd20
f0127ab5:	68 80 0a 00 00       	push   $0xa80
f0127aba:	68 3a b5 13 f0       	push   $0xf013b53a
f0127abf:	e8 41 87 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0127ac4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0127aca:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127acd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ad4:	eb 1e                	jmp    f0127af4 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f0127ad6:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0127adc:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127adf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127ae2:	01 c8                	add    %ecx,%eax
f0127ae4:	8a 00                	mov    (%eax),%al
f0127ae6:	0f be c0             	movsbl %al,%eax
f0127ae9:	01 d0                	add    %edx,%eax
f0127aeb:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127af1:	ff 45 f4             	incl   -0xc(%ebp)
f0127af4:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0127afa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127afd:	7f d7                	jg     f0127ad6 <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0127aff:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0127b05:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0127b0b:	c1 e2 02             	shl    $0x2,%edx
f0127b0e:	39 d0                	cmp    %edx,%eax
f0127b10:	74 17                	je     f0127b29 <test_kfreeall+0xdf0>
f0127b12:	83 ec 04             	sub    $0x4,%esp
f0127b15:	68 20 bd 13 f0       	push   $0xf013bd20
f0127b1a:	68 88 0a 00 00       	push   $0xa88
f0127b1f:	68 3a b5 13 f0       	push   $0xf013b53a
f0127b24:	e8 dc 86 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0127b29:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0127b2f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0127b32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b39:	eb 1e                	jmp    f0127b59 <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0127b3b:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0127b41:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127b44:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127b47:	01 c8                	add    %ecx,%eax
f0127b49:	8a 00                	mov    (%eax),%al
f0127b4b:	0f be c0             	movsbl %al,%eax
f0127b4e:	01 d0                	add    %edx,%eax
f0127b50:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0127b56:	ff 45 f4             	incl   -0xc(%ebp)
f0127b59:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0127b5f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127b62:	7f d7                	jg     f0127b3b <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0127b64:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0127b6a:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0127b70:	89 d0                	mov    %edx,%eax
f0127b72:	c1 e0 02             	shl    $0x2,%eax
f0127b75:	01 d0                	add    %edx,%eax
f0127b77:	39 c1                	cmp    %eax,%ecx
f0127b79:	74 17                	je     f0127b92 <test_kfreeall+0xe59>
f0127b7b:	83 ec 04             	sub    $0x4,%esp
f0127b7e:	68 20 bd 13 f0       	push   $0xf013bd20
f0127b83:	68 90 0a 00 00       	push   $0xa90
f0127b88:	68 3a b5 13 f0       	push   $0xf013b53a
f0127b8d:	e8 73 86 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0127b92:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0127b98:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0127b9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ba2:	eb 1e                	jmp    f0127bc2 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f0127ba4:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0127baa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0127bad:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127bb0:	01 c8                	add    %ecx,%eax
f0127bb2:	8a 00                	mov    (%eax),%al
f0127bb4:	0f be c0             	movsbl %al,%eax
f0127bb7:	01 d0                	add    %edx,%eax
f0127bb9:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0127bbf:	ff 45 f4             	incl   -0xc(%ebp)
f0127bc2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127bc8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127bcb:	7f d7                	jg     f0127ba4 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0127bcd:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0127bd3:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f0127bd9:	89 d0                	mov    %edx,%eax
f0127bdb:	01 c0                	add    %eax,%eax
f0127bdd:	01 d0                	add    %edx,%eax
f0127bdf:	01 c0                	add    %eax,%eax
f0127be1:	01 d0                	add    %edx,%eax
f0127be3:	39 c1                	cmp    %eax,%ecx
f0127be5:	74 17                	je     f0127bfe <test_kfreeall+0xec5>
f0127be7:	83 ec 04             	sub    $0x4,%esp
f0127bea:	68 20 bd 13 f0       	push   $0xf013bd20
f0127bef:	68 98 0a 00 00       	push   $0xa98
f0127bf4:	68 3a b5 13 f0       	push   $0xf013b53a
f0127bf9:	e8 07 86 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0127bfe:	e8 ae 55 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127c03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127c06:	e8 a4 c1 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127c0b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0127c0e:	83 ec 0c             	sub    $0xc,%esp
f0127c11:	68 00 50 00 00       	push   $0x5000
f0127c16:	e8 49 ff fd ff       	call   f0107b64 <kmalloc>
f0127c1b:	83 c4 10             	add    $0x10,%esp
f0127c1e:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127c24:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127c2a:	89 c1                	mov    %eax,%ecx
f0127c2c:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0127c33:	10 00 00 
f0127c36:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0127c3c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127c41:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0127c47:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127c4d:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c52:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0127c58:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0127c5e:	29 d0                	sub    %edx,%eax
f0127c60:	89 c3                	mov    %eax,%ebx
f0127c62:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0127c69:	10 00 00 
f0127c6c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127c71:	0f b6 d0             	movzbl %al,%edx
f0127c74:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0127c7a:	01 d0                	add    %edx,%eax
f0127c7c:	48                   	dec    %eax
f0127c7d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0127c83:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c8e:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0127c94:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0127c9a:	29 d0                	sub    %edx,%eax
f0127c9c:	01 c3                	add    %eax,%ebx
f0127c9e:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0127ca5:	10 00 00 
f0127ca8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127cad:	0f b6 c0             	movzbl %al,%eax
f0127cb0:	c1 e0 04             	shl    $0x4,%eax
f0127cb3:	89 c2                	mov    %eax,%edx
f0127cb5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0127cbb:	01 d0                	add    %edx,%eax
f0127cbd:	48                   	dec    %eax
f0127cbe:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0127cc4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127cca:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ccf:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0127cd5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0127cdb:	29 d0                	sub    %edx,%eax
f0127cdd:	01 d8                	add    %ebx,%eax
f0127cdf:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0127ce4:	39 c1                	cmp    %eax,%ecx
f0127ce6:	74 17                	je     f0127cff <test_kfreeall+0xfc6>
f0127ce8:	83 ec 04             	sub    $0x4,%esp
f0127ceb:	68 20 b6 13 f0       	push   $0xf013b620
f0127cf0:	68 a1 0a 00 00       	push   $0xaa1
f0127cf5:	68 3a b5 13 f0       	push   $0xf013b53a
f0127cfa:	e8 06 85 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127cff:	e8 ab c0 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127d04:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127d07:	74 17                	je     f0127d20 <test_kfreeall+0xfe7>
f0127d09:	83 ec 04             	sub    $0x4,%esp
f0127d0c:	68 54 b5 13 f0       	push   $0xf013b554
f0127d11:	68 a2 0a 00 00       	push   $0xaa2
f0127d16:	68 3a b5 13 f0       	push   $0xf013b53a
f0127d1b:	e8 e5 84 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127d20:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127d23:	e8 89 54 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127d28:	29 c3                	sub    %eax,%ebx
f0127d2a:	89 d8                	mov    %ebx,%eax
f0127d2c:	83 f8 05             	cmp    $0x5,%eax
f0127d2f:	74 17                	je     f0127d48 <test_kfreeall+0x100f>
f0127d31:	83 ec 04             	sub    $0x4,%esp
f0127d34:	68 bc b5 13 f0       	push   $0xf013b5bc
f0127d39:	68 a3 0a 00 00       	push   $0xaa3
f0127d3e:	68 3a b5 13 f0       	push   $0xf013b53a
f0127d43:	e8 bd 84 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0127d48:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f0127d4f:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0127d52:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0127d58:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0127d5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127d62:	eb 0e                	jmp    f0127d72 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f0127d64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127d67:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127d6a:	01 d0                	add    %edx,%eax
f0127d6c:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0127d6f:	ff 45 f4             	incl   -0xc(%ebp)
f0127d72:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127d78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127d7b:	7f e7                	jg     f0127d64 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0127d7d:	e8 2f 54 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127d82:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d85:	e8 25 c0 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127d8a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0127d8d:	83 ec 0c             	sub    $0xc,%esp
f0127d90:	68 00 00 10 00       	push   $0x100000
f0127d95:	e8 ca fd fd ff       	call   f0107b64 <kmalloc>
f0127d9a:	83 c4 10             	add    $0x10,%esp
f0127d9d:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127da3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127da9:	89 c1                	mov    %eax,%ecx
f0127dab:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0127db2:	10 00 00 
f0127db5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0127dbb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127dc0:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0127dc6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127dcc:	ba 00 00 00 00       	mov    $0x0,%edx
f0127dd1:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0127dd7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0127ddd:	29 d0                	sub    %edx,%eax
f0127ddf:	89 c3                	mov    %eax,%ebx
f0127de1:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0127de8:	10 00 00 
f0127deb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127df0:	0f b6 d0             	movzbl %al,%edx
f0127df3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0127df9:	01 d0                	add    %edx,%eax
f0127dfb:	48                   	dec    %eax
f0127dfc:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0127e02:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127e08:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e0d:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0127e13:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0127e19:	29 d0                	sub    %edx,%eax
f0127e1b:	01 c3                	add    %eax,%ebx
f0127e1d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0127e24:	10 00 00 
f0127e27:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127e2c:	0f b6 c0             	movzbl %al,%eax
f0127e2f:	c1 e0 04             	shl    $0x4,%eax
f0127e32:	89 c2                	mov    %eax,%edx
f0127e34:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127e3a:	01 d0                	add    %edx,%eax
f0127e3c:	48                   	dec    %eax
f0127e3d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0127e43:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127e49:	ba 00 00 00 00       	mov    $0x0,%edx
f0127e4e:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0127e54:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0127e5a:	29 d0                	sub    %edx,%eax
f0127e5c:	01 d8                	add    %ebx,%eax
f0127e5e:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0127e63:	39 c1                	cmp    %eax,%ecx
f0127e65:	74 17                	je     f0127e7e <test_kfreeall+0x1145>
f0127e67:	83 ec 04             	sub    $0x4,%esp
f0127e6a:	68 20 b6 13 f0       	push   $0xf013b620
f0127e6f:	68 af 0a 00 00       	push   $0xaaf
f0127e74:	68 3a b5 13 f0       	push   $0xf013b53a
f0127e79:	e8 87 83 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127e7e:	e8 2c bf fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127e83:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127e86:	74 17                	je     f0127e9f <test_kfreeall+0x1166>
f0127e88:	83 ec 04             	sub    $0x4,%esp
f0127e8b:	68 54 b5 13 f0       	push   $0xf013b554
f0127e90:	68 b0 0a 00 00       	push   $0xab0
f0127e95:	68 3a b5 13 f0       	push   $0xf013b53a
f0127e9a:	e8 66 83 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127e9f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0127ea2:	e8 0a 53 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127ea7:	29 c3                	sub    %eax,%ebx
f0127ea9:	89 d8                	mov    %ebx,%eax
f0127eab:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127eb0:	74 17                	je     f0127ec9 <test_kfreeall+0x1190>
f0127eb2:	83 ec 04             	sub    $0x4,%esp
f0127eb5:	68 bc b5 13 f0       	push   $0xf013b5bc
f0127eba:	68 b1 0a 00 00       	push   $0xab1
f0127ebf:	68 3a b5 13 f0       	push   $0xf013b53a
f0127ec4:	e8 3c 83 fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0127ec9:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0127ed0:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0127ed3:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0127ed9:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0127edc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127ee3:	eb 0e                	jmp    f0127ef3 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0127ee5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0127ee8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0127eeb:	01 d0                	add    %edx,%eax
f0127eed:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0127ef0:	ff 45 f4             	incl   -0xc(%ebp)
f0127ef3:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0127ef9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127efc:	7f e7                	jg     f0127ee5 <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0127efe:	e8 ae 52 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127f03:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f06:	e8 a4 be fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127f0b:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0127f0e:	e8 ff fe fd ff       	call   f0107e12 <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f13:	e8 97 be fd ff       	call   f0103daf <pf_calculate_free_frames>
f0127f18:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0127f1b:	74 17                	je     f0127f34 <test_kfreeall+0x11fb>
f0127f1d:	83 ec 04             	sub    $0x4,%esp
f0127f20:	68 54 b5 13 f0       	push   $0xf013b554
f0127f25:	68 c1 0a 00 00       	push   $0xac1
f0127f2a:	68 3a b5 13 f0       	push   $0xf013b53a
f0127f2f:	e8 d1 82 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0127f34:	e8 78 52 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0127f39:	89 c2                	mov    %eax,%edx
f0127f3b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127f3e:	89 d1                	mov    %edx,%ecx
f0127f40:	29 c1                	sub    %eax,%ecx
f0127f42:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0127f49:	10 00 00 
f0127f4c:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0127f52:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127f57:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0127f5d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127f63:	ba 00 00 00 00       	mov    $0x0,%edx
f0127f68:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0127f6e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0127f74:	29 d0                	sub    %edx,%eax
f0127f76:	89 c3                	mov    %eax,%ebx
f0127f78:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0127f7f:	10 00 00 
f0127f82:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127f87:	0f b6 d0             	movzbl %al,%edx
f0127f8a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0127f90:	01 d0                	add    %edx,%eax
f0127f92:	48                   	dec    %eax
f0127f93:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0127f99:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127f9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fa4:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0127faa:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0127fb0:	29 d0                	sub    %edx,%eax
f0127fb2:	01 c3                	add    %eax,%ebx
f0127fb4:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0127fbb:	10 00 00 
f0127fbe:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0127fc3:	0f b6 c0             	movzbl %al,%eax
f0127fc6:	c1 e0 04             	shl    $0x4,%eax
f0127fc9:	89 c2                	mov    %eax,%edx
f0127fcb:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0127fd1:	01 d0                	add    %edx,%eax
f0127fd3:	48                   	dec    %eax
f0127fd4:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0127fda:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127fe0:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fe5:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0127feb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0127ff1:	29 d0                	sub    %edx,%eax
f0127ff3:	01 d8                	add    %ebx,%eax
f0127ff5:	05 00 40 00 00       	add    $0x4000,%eax
f0127ffa:	c1 e8 0c             	shr    $0xc,%eax
f0127ffd:	05 0d 04 00 00       	add    $0x40d,%eax
f0128002:	39 c1                	cmp    %eax,%ecx
f0128004:	74 17                	je     f012801d <test_kfreeall+0x12e4>
f0128006:	83 ec 04             	sub    $0x4,%esp
f0128009:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012800e:	68 c2 0a 00 00       	push   $0xac2
f0128013:	68 3a b5 13 f0       	push   $0xf013b53a
f0128018:	e8 e8 81 fd ff       	call   f0100205 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012801d:	83 ec 0c             	sub    $0xc,%esp
f0128020:	6a 03                	push   $0x3
f0128022:	e8 2a 56 fe ff       	call   f010d651 <sys_bypassPageFault>
f0128027:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f012802a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128031:	e9 82 00 00 00       	jmp    f01280b8 <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0128036:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128039:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0128040:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0128043:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128046:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0128049:	e8 f1 55 fe ff       	call   f010d63f <sys_rcr2>
f012804e:	89 c2                	mov    %eax,%edx
f0128050:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128053:	39 c2                	cmp    %eax,%edx
f0128055:	74 17                	je     f012806e <test_kfreeall+0x1335>
f0128057:	83 ec 04             	sub    $0x4,%esp
f012805a:	68 a0 bd 13 f0       	push   $0xf013bda0
f012805f:	68 d0 0a 00 00       	push   $0xad0
f0128064:	68 3a b5 13 f0       	push   $0xf013b53a
f0128069:	e8 97 81 fd ff       	call   f0100205 <_panic>
			ptr[lastIndices[i]] = 10;
f012806e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128071:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0128078:	89 c2                	mov    %eax,%edx
f012807a:	8b 45 80             	mov    -0x80(%ebp),%eax
f012807d:	01 d0                	add    %edx,%eax
f012807f:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0128082:	e8 b8 55 fe ff       	call   f010d63f <sys_rcr2>
f0128087:	89 c2                	mov    %eax,%edx
f0128089:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012808c:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0128093:	89 c1                	mov    %eax,%ecx
f0128095:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128098:	01 c8                	add    %ecx,%eax
f012809a:	39 c2                	cmp    %eax,%edx
f012809c:	74 17                	je     f01280b5 <test_kfreeall+0x137c>
f012809e:	83 ec 04             	sub    $0x4,%esp
f01280a1:	68 a0 bd 13 f0       	push   $0xf013bda0
f01280a6:	68 d2 0a 00 00       	push   $0xad2
f01280ab:	68 3a b5 13 f0       	push   $0xf013b53a
f01280b0:	e8 50 81 fd ff       	call   f0100205 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f01280b5:	ff 45 f4             	incl   -0xc(%ebp)
f01280b8:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01280bc:	0f 8e 74 ff ff ff    	jle    f0128036 <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01280c2:	83 ec 0c             	sub    $0xc,%esp
f01280c5:	6a 00                	push   $0x0
f01280c7:	e8 85 55 fe ff       	call   f010d651 <sys_bypassPageFault>
f01280cc:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01280cf:	e8 dd 50 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01280d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280d7:	e8 d3 bc fd ff       	call   f0103daf <pf_calculate_free_frames>
f01280dc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f01280df:	83 ec 0c             	sub    $0xc,%esp
f01280e2:	68 00 00 40 00       	push   $0x400000
f01280e7:	e8 78 fa fd ff       	call   f0107b64 <kmalloc>
f01280ec:	83 c4 10             	add    $0x10,%esp
f01280ef:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f01280f5:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f01280fb:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0128100:	74 17                	je     f0128119 <test_kfreeall+0x13e0>
f0128102:	83 ec 04             	sub    $0x4,%esp
f0128105:	68 44 c2 13 f0       	push   $0xf013c244
f012810a:	68 de 0a 00 00       	push   $0xade
f012810f:	68 3a b5 13 f0       	push   $0xf013b53a
f0128114:	e8 ec 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128119:	e8 91 bc fd ff       	call   f0103daf <pf_calculate_free_frames>
f012811e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128121:	74 17                	je     f012813a <test_kfreeall+0x1401>
f0128123:	83 ec 04             	sub    $0x4,%esp
f0128126:	68 54 b5 13 f0       	push   $0xf013b554
f012812b:	68 df 0a 00 00       	push   $0xadf
f0128130:	68 3a b5 13 f0       	push   $0xf013b53a
f0128135:	e8 cb 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f012813a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012813d:	e8 6f 50 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128142:	29 c3                	sub    %eax,%ebx
f0128144:	89 d8                	mov    %ebx,%eax
f0128146:	3d 00 04 00 00       	cmp    $0x400,%eax
f012814b:	74 17                	je     f0128164 <test_kfreeall+0x142b>
f012814d:	83 ec 04             	sub    $0x4,%esp
f0128150:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128155:	68 e0 0a 00 00       	push   $0xae0
f012815a:	68 3a b5 13 f0       	push   $0xf013b53a
f012815f:	e8 a1 80 fd ff       	call   f0100205 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0128164:	e8 48 50 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128169:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012816c:	e8 3e bc fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128171:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0128174:	83 ec 0c             	sub    $0xc,%esp
f0128177:	68 00 30 00 00       	push   $0x3000
f012817c:	e8 e3 f9 fd ff       	call   f0107b64 <kmalloc>
f0128181:	83 c4 10             	add    $0x10,%esp
f0128184:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f012818a:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0128190:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0128195:	74 17                	je     f01281ae <test_kfreeall+0x1475>
f0128197:	83 ec 04             	sub    $0x4,%esp
f012819a:	68 44 c2 13 f0       	push   $0xf013c244
f012819f:	68 e6 0a 00 00       	push   $0xae6
f01281a4:	68 3a b5 13 f0       	push   $0xf013b53a
f01281a9:	e8 57 80 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01281ae:	e8 fc bb fd ff       	call   f0103daf <pf_calculate_free_frames>
f01281b3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01281b6:	74 17                	je     f01281cf <test_kfreeall+0x1496>
f01281b8:	83 ec 04             	sub    $0x4,%esp
f01281bb:	68 54 b5 13 f0       	push   $0xf013b554
f01281c0:	68 e7 0a 00 00       	push   $0xae7
f01281c5:	68 3a b5 13 f0       	push   $0xf013b53a
f01281ca:	e8 36 80 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f01281cf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01281d2:	e8 da 4f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01281d7:	29 c3                	sub    %eax,%ebx
f01281d9:	89 d8                	mov    %ebx,%eax
f01281db:	83 f8 03             	cmp    $0x3,%eax
f01281de:	74 17                	je     f01281f7 <test_kfreeall+0x14be>
f01281e0:	83 ec 04             	sub    $0x4,%esp
f01281e3:	68 bc b5 13 f0       	push   $0xf013b5bc
f01281e8:	68 e8 0a 00 00       	push   $0xae8
f01281ed:	68 3a b5 13 f0       	push   $0xf013b53a
f01281f2:	e8 0e 80 fd ff       	call   f0100205 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f01281f7:	e8 b5 4f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01281fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281ff:	e8 ab bb fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128204:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0128207:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012820d:	83 ec 0c             	sub    $0xc,%esp
f0128210:	50                   	push   %eax
f0128211:	e8 56 fa fd ff       	call   f0107c6c <kfree>
f0128216:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128219:	e8 91 bb fd ff       	call   f0103daf <pf_calculate_free_frames>
f012821e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0128221:	74 17                	je     f012823a <test_kfreeall+0x1501>
f0128223:	83 ec 04             	sub    $0x4,%esp
f0128226:	68 54 b5 13 f0       	push   $0xf013b554
f012822b:	68 f2 0a 00 00       	push   $0xaf2
f0128230:	68 3a b5 13 f0       	push   $0xf013b53a
f0128235:	e8 cb 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012823a:	e8 72 4f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012823f:	89 c2                	mov    %eax,%edx
f0128241:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128244:	29 c2                	sub    %eax,%edx
f0128246:	89 d0                	mov    %edx,%eax
f0128248:	83 f8 03             	cmp    $0x3,%eax
f012824b:	74 17                	je     f0128264 <test_kfreeall+0x152b>
f012824d:	83 ec 04             	sub    $0x4,%esp
f0128250:	68 ec bd 13 f0       	push   $0xf013bdec
f0128255:	68 f3 0a 00 00       	push   $0xaf3
f012825a:	68 3a b5 13 f0       	push   $0xf013b53a
f012825f:	e8 a1 7f fd ff       	call   f0100205 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128264:	e8 48 4f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128269:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012826c:	e8 3e bb fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128271:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0128274:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f012827a:	83 ec 0c             	sub    $0xc,%esp
f012827d:	50                   	push   %eax
f012827e:	e8 e9 f9 fd ff       	call   f0107c6c <kfree>
f0128283:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128286:	e8 24 bb fd ff       	call   f0103daf <pf_calculate_free_frames>
f012828b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012828e:	74 17                	je     f01282a7 <test_kfreeall+0x156e>
f0128290:	83 ec 04             	sub    $0x4,%esp
f0128293:	68 54 b5 13 f0       	push   $0xf013b554
f0128298:	68 fc 0a 00 00       	push   $0xafc
f012829d:	68 3a b5 13 f0       	push   $0xf013b53a
f01282a2:	e8 5e 7f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01282a7:	e8 05 4f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01282ac:	89 c2                	mov    %eax,%edx
f01282ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01282b1:	39 c2                	cmp    %eax,%edx
f01282b3:	74 17                	je     f01282cc <test_kfreeall+0x1593>
f01282b5:	83 ec 04             	sub    $0x4,%esp
f01282b8:	68 ec bd 13 f0       	push   $0xf013bdec
f01282bd:	68 fd 0a 00 00       	push   $0xafd
f01282c2:	68 3a b5 13 f0       	push   $0xf013b53a
f01282c7:	e8 39 7f fd ff       	call   f0100205 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01282cc:	e8 e0 4e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01282d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01282d4:	e8 d6 ba fd ff       	call   f0103daf <pf_calculate_free_frames>
f01282d9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01282dc:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01282e2:	83 ec 0c             	sub    $0xc,%esp
f01282e5:	50                   	push   %eax
f01282e6:	e8 81 f9 fd ff       	call   f0107c6c <kfree>
f01282eb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282ee:	e8 bc ba fd ff       	call   f0103daf <pf_calculate_free_frames>
f01282f3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01282f6:	74 17                	je     f012830f <test_kfreeall+0x15d6>
f01282f8:	83 ec 04             	sub    $0x4,%esp
f01282fb:	68 54 b5 13 f0       	push   $0xf013b554
f0128300:	68 03 0b 00 00       	push   $0xb03
f0128305:	68 3a b5 13 f0       	push   $0xf013b53a
f012830a:	e8 f6 7e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012830f:	e8 9d 4e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128314:	89 c2                	mov    %eax,%edx
f0128316:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128319:	39 c2                	cmp    %eax,%edx
f012831b:	74 17                	je     f0128334 <test_kfreeall+0x15fb>
f012831d:	83 ec 04             	sub    $0x4,%esp
f0128320:	68 ec bd 13 f0       	push   $0xf013bdec
f0128325:	68 04 0b 00 00       	push   $0xb04
f012832a:	68 3a b5 13 f0       	push   $0xf013b53a
f012832f:	e8 d1 7e fd ff       	call   f0100205 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0128334:	e8 78 4e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128339:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012833c:	e8 6e ba fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128341:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0128344:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f012834a:	83 ec 0c             	sub    $0xc,%esp
f012834d:	50                   	push   %eax
f012834e:	e8 19 f9 fd ff       	call   f0107c6c <kfree>
f0128353:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128356:	e8 54 ba fd ff       	call   f0103daf <pf_calculate_free_frames>
f012835b:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012835e:	74 17                	je     f0128377 <test_kfreeall+0x163e>
f0128360:	83 ec 04             	sub    $0x4,%esp
f0128363:	68 54 b5 13 f0       	push   $0xf013b554
f0128368:	68 0a 0b 00 00       	push   $0xb0a
f012836d:	68 3a b5 13 f0       	push   $0xf013b53a
f0128372:	e8 8e 7e fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128377:	e8 35 4e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012837c:	89 c2                	mov    %eax,%edx
f012837e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0128381:	39 c2                	cmp    %eax,%edx
f0128383:	74 17                	je     f012839c <test_kfreeall+0x1663>
f0128385:	83 ec 04             	sub    $0x4,%esp
f0128388:	68 ec bd 13 f0       	push   $0xf013bdec
f012838d:	68 0b 0b 00 00       	push   $0xb0b
f0128392:	68 3a b5 13 f0       	push   $0xf013b53a
f0128397:	e8 69 7e fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012839c:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f01283a3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01283aa:	eb 48                	jmp    f01283f4 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f01283ac:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01283af:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01283b4:	83 ec 04             	sub    $0x4,%esp
f01283b7:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f01283bd:	51                   	push   %ecx
f01283be:	52                   	push   %edx
f01283bf:	50                   	push   %eax
f01283c0:	e8 d3 e6 fd ff       	call   f0106a98 <get_page_table>
f01283c5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01283c8:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f01283ce:	85 c0                	test   %eax,%eax
f01283d0:	75 17                	jne    f01283e9 <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01283d2:	83 ec 04             	sub    $0x4,%esp
f01283d5:	68 3c be 13 f0       	push   $0xf013be3c
f01283da:	68 18 0b 00 00       	push   $0xb18
f01283df:	68 3a b5 13 f0       	push   $0xf013b53a
f01283e4:	e8 1c 7e fd ff       	call   f0100205 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01283e9:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01283f0:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01283f4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01283f8:	78 b2                	js     f01283ac <test_kfreeall+0x1673>
f01283fa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01283fe:	7f 09                	jg     f0128409 <test_kfreeall+0x16d0>
f0128400:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0128407:	76 a3                	jbe    f01283ac <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128409:	83 ec 0c             	sub    $0xc,%esp
f012840c:	68 98 c2 13 f0       	push   $0xf013c298
f0128411:	e8 f8 88 fd ff       	call   f0100d0e <cprintf>
f0128416:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128419:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012841e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128421:	5b                   	pop    %ebx
f0128422:	5f                   	pop    %edi
f0128423:	5d                   	pop    %ebp
f0128424:	c3                   	ret    

f0128425 <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f0128425:	55                   	push   %ebp
f0128426:	89 e5                	mov    %esp,%ebp
f0128428:	57                   	push   %edi
f0128429:	53                   	push   %ebx
f012842a:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0128430:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0128434:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0128438:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f012843e:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0128444:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f012844b:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128452:	e8 5a 4d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128457:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012845a:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0128460:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128465:	b8 00 00 00 00       	mov    $0x0,%eax
f012846a:	89 d7                	mov    %edx,%edi
f012846c:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f012846e:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f0128474:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128479:	b8 00 00 00 00       	mov    $0x0,%eax
f012847e:	89 d7                	mov    %edx,%edi
f0128480:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128482:	e8 2a 4d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128487:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012848a:	e8 20 b9 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012848f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128492:	83 ec 0c             	sub    $0xc,%esp
f0128495:	68 00 fc 1f 00       	push   $0x1ffc00
f012849a:	e8 c5 f6 fd ff       	call   f0107b64 <kmalloc>
f012849f:	83 c4 10             	add    $0x10,%esp
f01284a2:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01284a8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01284ae:	89 c1                	mov    %eax,%ecx
f01284b0:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01284b7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01284ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01284bf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01284c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01284c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01284ca:	f7 75 d4             	divl   -0x2c(%ebp)
f01284cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01284d0:	29 d0                	sub    %edx,%eax
f01284d2:	89 c3                	mov    %eax,%ebx
f01284d4:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01284db:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01284e0:	0f b6 d0             	movzbl %al,%edx
f01284e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01284e6:	01 d0                	add    %edx,%eax
f01284e8:	48                   	dec    %eax
f01284e9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01284ec:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01284ef:	ba 00 00 00 00       	mov    $0x0,%edx
f01284f4:	f7 75 cc             	divl   -0x34(%ebp)
f01284f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01284fa:	29 d0                	sub    %edx,%eax
f01284fc:	01 c3                	add    %eax,%ebx
f01284fe:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128505:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012850a:	0f b6 c0             	movzbl %al,%eax
f012850d:	c1 e0 04             	shl    $0x4,%eax
f0128510:	89 c2                	mov    %eax,%edx
f0128512:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128515:	01 d0                	add    %edx,%eax
f0128517:	48                   	dec    %eax
f0128518:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012851b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012851e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128523:	f7 75 c4             	divl   -0x3c(%ebp)
f0128526:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128529:	29 d0                	sub    %edx,%eax
f012852b:	01 d8                	add    %ebx,%eax
f012852d:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128532:	39 c1                	cmp    %eax,%ecx
f0128534:	74 17                	je     f012854d <test_kexpand+0x128>
f0128536:	83 ec 04             	sub    $0x4,%esp
f0128539:	68 20 b6 13 f0       	push   $0xf013b620
f012853e:	68 43 0b 00 00       	push   $0xb43
f0128543:	68 3a b5 13 f0       	push   $0xf013b53a
f0128548:	e8 b8 7c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012854d:	e8 5d b8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128552:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128555:	74 17                	je     f012856e <test_kexpand+0x149>
f0128557:	83 ec 04             	sub    $0x4,%esp
f012855a:	68 54 b5 13 f0       	push   $0xf013b554
f012855f:	68 44 0b 00 00       	push   $0xb44
f0128564:	68 3a b5 13 f0       	push   $0xf013b53a
f0128569:	e8 97 7c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012856e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128571:	e8 3b 4c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128576:	29 c3                	sub    %eax,%ebx
f0128578:	89 d8                	mov    %ebx,%eax
f012857a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012857f:	74 17                	je     f0128598 <test_kexpand+0x173>
f0128581:	83 ec 04             	sub    $0x4,%esp
f0128584:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128589:	68 45 0b 00 00       	push   $0xb45
f012858e:	68 3a b5 13 f0       	push   $0xf013b53a
f0128593:	e8 6d 7c fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128598:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f012859f:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01285a2:	e8 0a 4c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01285a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01285aa:	e8 00 b8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01285af:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01285b2:	83 ec 0c             	sub    $0xc,%esp
f01285b5:	68 00 fc 1f 00       	push   $0x1ffc00
f01285ba:	e8 a5 f5 fd ff       	call   f0107b64 <kmalloc>
f01285bf:	83 c4 10             	add    $0x10,%esp
f01285c2:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01285c8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01285ce:	89 c1                	mov    %eax,%ecx
f01285d0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01285d7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01285da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01285df:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01285e2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01285e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01285ea:	f7 75 bc             	divl   -0x44(%ebp)
f01285ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01285f0:	29 d0                	sub    %edx,%eax
f01285f2:	89 c3                	mov    %eax,%ebx
f01285f4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01285fb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128600:	0f b6 d0             	movzbl %al,%edx
f0128603:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128606:	01 d0                	add    %edx,%eax
f0128608:	48                   	dec    %eax
f0128609:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012860c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012860f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128614:	f7 75 b4             	divl   -0x4c(%ebp)
f0128617:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012861a:	29 d0                	sub    %edx,%eax
f012861c:	01 c3                	add    %eax,%ebx
f012861e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128625:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012862a:	0f b6 c0             	movzbl %al,%eax
f012862d:	c1 e0 04             	shl    $0x4,%eax
f0128630:	89 c2                	mov    %eax,%edx
f0128632:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128635:	01 d0                	add    %edx,%eax
f0128637:	48                   	dec    %eax
f0128638:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012863b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012863e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128643:	f7 75 ac             	divl   -0x54(%ebp)
f0128646:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128649:	29 d0                	sub    %edx,%eax
f012864b:	01 d8                	add    %ebx,%eax
f012864d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128652:	39 c1                	cmp    %eax,%ecx
f0128654:	74 17                	je     f012866d <test_kexpand+0x248>
f0128656:	83 ec 04             	sub    $0x4,%esp
f0128659:	68 20 b6 13 f0       	push   $0xf013b620
f012865e:	68 4c 0b 00 00       	push   $0xb4c
f0128663:	68 3a b5 13 f0       	push   $0xf013b53a
f0128668:	e8 98 7b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012866d:	e8 3d b7 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128672:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128675:	74 17                	je     f012868e <test_kexpand+0x269>
f0128677:	83 ec 04             	sub    $0x4,%esp
f012867a:	68 54 b5 13 f0       	push   $0xf013b554
f012867f:	68 4d 0b 00 00       	push   $0xb4d
f0128684:	68 3a b5 13 f0       	push   $0xf013b53a
f0128689:	e8 77 7b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012868e:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128691:	e8 1b 4b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128696:	29 c3                	sub    %eax,%ebx
f0128698:	89 d8                	mov    %ebx,%eax
f012869a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012869f:	74 17                	je     f01286b8 <test_kexpand+0x293>
f01286a1:	83 ec 04             	sub    $0x4,%esp
f01286a4:	68 bc b5 13 f0       	push   $0xf013b5bc
f01286a9:	68 4e 0b 00 00       	push   $0xb4e
f01286ae:	68 3a b5 13 f0       	push   $0xf013b53a
f01286b3:	e8 4d 7b fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01286b8:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f01286bf:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01286c2:	e8 ea 4a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01286c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01286ca:	e8 e0 b6 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01286cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01286d2:	83 ec 0c             	sub    $0xc,%esp
f01286d5:	68 00 08 00 00       	push   $0x800
f01286da:	e8 85 f4 fd ff       	call   f0107b64 <kmalloc>
f01286df:	83 c4 10             	add    $0x10,%esp
f01286e2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01286e8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01286ee:	89 c1                	mov    %eax,%ecx
f01286f0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01286f7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01286fa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01286ff:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128702:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128705:	ba 00 00 00 00       	mov    $0x0,%edx
f012870a:	f7 75 a4             	divl   -0x5c(%ebp)
f012870d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128710:	29 d0                	sub    %edx,%eax
f0128712:	89 c3                	mov    %eax,%ebx
f0128714:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012871b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128720:	0f b6 d0             	movzbl %al,%edx
f0128723:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128726:	01 d0                	add    %edx,%eax
f0128728:	48                   	dec    %eax
f0128729:	89 45 98             	mov    %eax,-0x68(%ebp)
f012872c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012872f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128734:	f7 75 9c             	divl   -0x64(%ebp)
f0128737:	8b 45 98             	mov    -0x68(%ebp),%eax
f012873a:	29 d0                	sub    %edx,%eax
f012873c:	01 c3                	add    %eax,%ebx
f012873e:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128745:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012874a:	0f b6 c0             	movzbl %al,%eax
f012874d:	c1 e0 04             	shl    $0x4,%eax
f0128750:	89 c2                	mov    %eax,%edx
f0128752:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128755:	01 d0                	add    %edx,%eax
f0128757:	48                   	dec    %eax
f0128758:	89 45 90             	mov    %eax,-0x70(%ebp)
f012875b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012875e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128763:	f7 75 94             	divl   -0x6c(%ebp)
f0128766:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128769:	29 d0                	sub    %edx,%eax
f012876b:	01 d8                	add    %ebx,%eax
f012876d:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128772:	39 c1                	cmp    %eax,%ecx
f0128774:	74 17                	je     f012878d <test_kexpand+0x368>
f0128776:	83 ec 04             	sub    $0x4,%esp
f0128779:	68 20 b6 13 f0       	push   $0xf013b620
f012877e:	68 55 0b 00 00       	push   $0xb55
f0128783:	68 3a b5 13 f0       	push   $0xf013b53a
f0128788:	e8 78 7a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012878d:	e8 1d b6 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128792:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128795:	74 17                	je     f01287ae <test_kexpand+0x389>
f0128797:	83 ec 04             	sub    $0x4,%esp
f012879a:	68 54 b5 13 f0       	push   $0xf013b554
f012879f:	68 56 0b 00 00       	push   $0xb56
f01287a4:	68 3a b5 13 f0       	push   $0xf013b53a
f01287a9:	e8 57 7a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01287ae:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01287b1:	e8 fb 49 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01287b6:	29 c3                	sub    %eax,%ebx
f01287b8:	89 d8                	mov    %ebx,%eax
f01287ba:	83 f8 01             	cmp    $0x1,%eax
f01287bd:	74 17                	je     f01287d6 <test_kexpand+0x3b1>
f01287bf:	83 ec 04             	sub    $0x4,%esp
f01287c2:	68 bc b5 13 f0       	push   $0xf013b5bc
f01287c7:	68 57 0b 00 00       	push   $0xb57
f01287cc:	68 3a b5 13 f0       	push   $0xf013b53a
f01287d1:	e8 2f 7a fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01287d6:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f01287dd:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01287e0:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01287e6:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01287e9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287f0:	eb 0e                	jmp    f0128800 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f01287f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01287f5:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01287f8:	01 d0                	add    %edx,%eax
f01287fa:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01287fd:	ff 45 f4             	incl   -0xc(%ebp)
f0128800:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0128806:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128809:	7f e7                	jg     f01287f2 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012880b:	e8 a1 49 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128810:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128813:	e8 97 b5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128818:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012881b:	83 ec 0c             	sub    $0xc,%esp
f012881e:	68 00 08 00 00       	push   $0x800
f0128823:	e8 3c f3 fd ff       	call   f0107b64 <kmalloc>
f0128828:	83 c4 10             	add    $0x10,%esp
f012882b:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128831:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0128837:	89 c1                	mov    %eax,%ecx
f0128839:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128840:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128843:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128848:	89 45 84             	mov    %eax,-0x7c(%ebp)
f012884b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012884e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128853:	f7 75 88             	divl   -0x78(%ebp)
f0128856:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128859:	29 d0                	sub    %edx,%eax
f012885b:	89 c3                	mov    %eax,%ebx
f012885d:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0128864:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128869:	0f b6 d0             	movzbl %al,%edx
f012886c:	8b 45 80             	mov    -0x80(%ebp),%eax
f012886f:	01 d0                	add    %edx,%eax
f0128871:	48                   	dec    %eax
f0128872:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0128878:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012887e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128883:	f7 75 80             	divl   -0x80(%ebp)
f0128886:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012888c:	29 d0                	sub    %edx,%eax
f012888e:	01 c3                	add    %eax,%ebx
f0128890:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0128897:	10 00 00 
f012889a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012889f:	0f b6 c0             	movzbl %al,%eax
f01288a2:	c1 e0 04             	shl    $0x4,%eax
f01288a5:	89 c2                	mov    %eax,%edx
f01288a7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01288ad:	01 d0                	add    %edx,%eax
f01288af:	48                   	dec    %eax
f01288b0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01288b6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01288bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01288c1:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01288c7:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01288cd:	29 d0                	sub    %edx,%eax
f01288cf:	01 d8                	add    %ebx,%eax
f01288d1:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01288d6:	39 c1                	cmp    %eax,%ecx
f01288d8:	74 17                	je     f01288f1 <test_kexpand+0x4cc>
f01288da:	83 ec 04             	sub    $0x4,%esp
f01288dd:	68 20 b6 13 f0       	push   $0xf013b620
f01288e2:	68 63 0b 00 00       	push   $0xb63
f01288e7:	68 3a b5 13 f0       	push   $0xf013b53a
f01288ec:	e8 14 79 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01288f1:	e8 b9 b4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01288f6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01288f9:	74 17                	je     f0128912 <test_kexpand+0x4ed>
f01288fb:	83 ec 04             	sub    $0x4,%esp
f01288fe:	68 54 b5 13 f0       	push   $0xf013b554
f0128903:	68 64 0b 00 00       	push   $0xb64
f0128908:	68 3a b5 13 f0       	push   $0xf013b53a
f012890d:	e8 f3 78 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128912:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128915:	e8 97 48 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012891a:	29 c3                	sub    %eax,%ebx
f012891c:	89 d8                	mov    %ebx,%eax
f012891e:	83 f8 01             	cmp    $0x1,%eax
f0128921:	74 17                	je     f012893a <test_kexpand+0x515>
f0128923:	83 ec 04             	sub    $0x4,%esp
f0128926:	68 bc b5 13 f0       	push   $0xf013b5bc
f012892b:	68 65 0b 00 00       	push   $0xb65
f0128930:	68 3a b5 13 f0       	push   $0xf013b53a
f0128935:	e8 cb 78 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012893a:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0128941:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0128944:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012894a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012894d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128954:	eb 0e                	jmp    f0128964 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f0128956:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128959:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012895c:	01 d0                	add    %edx,%eax
f012895e:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128961:	ff 45 f4             	incl   -0xc(%ebp)
f0128964:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012896a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012896d:	7f e7                	jg     f0128956 <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012896f:	e8 3d 48 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128974:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128977:	e8 33 b4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012897c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012897f:	83 ec 0c             	sub    $0xc,%esp
f0128982:	68 00 1c 00 00       	push   $0x1c00
f0128987:	e8 d8 f1 fd ff       	call   f0107b64 <kmalloc>
f012898c:	83 c4 10             	add    $0x10,%esp
f012898f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128995:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012899b:	89 c1                	mov    %eax,%ecx
f012899d:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01289a4:	10 00 00 
f01289a7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01289ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01289b2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01289b8:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01289be:	ba 00 00 00 00       	mov    $0x0,%edx
f01289c3:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01289c9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01289cf:	29 d0                	sub    %edx,%eax
f01289d1:	89 c3                	mov    %eax,%ebx
f01289d3:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01289da:	10 00 00 
f01289dd:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01289e2:	0f b6 d0             	movzbl %al,%edx
f01289e5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01289eb:	01 d0                	add    %edx,%eax
f01289ed:	48                   	dec    %eax
f01289ee:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01289f4:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01289fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01289ff:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0128a05:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0128a0b:	29 d0                	sub    %edx,%eax
f0128a0d:	01 c3                	add    %eax,%ebx
f0128a0f:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0128a16:	10 00 00 
f0128a19:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128a1e:	0f b6 c0             	movzbl %al,%eax
f0128a21:	c1 e0 04             	shl    $0x4,%eax
f0128a24:	89 c2                	mov    %eax,%edx
f0128a26:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128a2c:	01 d0                	add    %edx,%eax
f0128a2e:	48                   	dec    %eax
f0128a2f:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0128a35:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a40:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0128a46:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128a4c:	29 d0                	sub    %edx,%eax
f0128a4e:	01 d8                	add    %ebx,%eax
f0128a50:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0128a55:	39 c1                	cmp    %eax,%ecx
f0128a57:	74 17                	je     f0128a70 <test_kexpand+0x64b>
f0128a59:	83 ec 04             	sub    $0x4,%esp
f0128a5c:	68 20 b6 13 f0       	push   $0xf013b620
f0128a61:	68 71 0b 00 00       	push   $0xb71
f0128a66:	68 3a b5 13 f0       	push   $0xf013b53a
f0128a6b:	e8 95 77 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128a70:	e8 3a b3 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128a75:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128a78:	74 17                	je     f0128a91 <test_kexpand+0x66c>
f0128a7a:	83 ec 04             	sub    $0x4,%esp
f0128a7d:	68 54 b5 13 f0       	push   $0xf013b554
f0128a82:	68 72 0b 00 00       	push   $0xb72
f0128a87:	68 3a b5 13 f0       	push   $0xf013b53a
f0128a8c:	e8 74 77 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128a91:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128a94:	e8 18 47 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128a99:	29 c3                	sub    %eax,%ebx
f0128a9b:	89 d8                	mov    %ebx,%eax
f0128a9d:	83 f8 02             	cmp    $0x2,%eax
f0128aa0:	74 17                	je     f0128ab9 <test_kexpand+0x694>
f0128aa2:	83 ec 04             	sub    $0x4,%esp
f0128aa5:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128aaa:	68 73 0b 00 00       	push   $0xb73
f0128aaf:	68 3a b5 13 f0       	push   $0xf013b53a
f0128ab4:	e8 4c 77 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0128ab9:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0128ac0:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128ac3:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0128ac9:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0128acc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128ad3:	eb 0e                	jmp    f0128ae3 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f0128ad5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128ad8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128adb:	01 d0                	add    %edx,%eax
f0128add:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0128ae0:	ff 45 f4             	incl   -0xc(%ebp)
f0128ae3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0128ae9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128aec:	7f e7                	jg     f0128ad5 <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0128aee:	e8 be 46 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128af3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128af6:	e8 b4 b2 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128afb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0128afe:	83 ec 0c             	sub    $0xc,%esp
f0128b01:	68 00 fc 2f 00       	push   $0x2ffc00
f0128b06:	e8 59 f0 fd ff       	call   f0107b64 <kmalloc>
f0128b0b:	83 c4 10             	add    $0x10,%esp
f0128b0e:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128b14:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128b1a:	89 c1                	mov    %eax,%ecx
f0128b1c:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0128b23:	10 00 00 
f0128b26:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128b2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128b31:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0128b37:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b42:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0128b48:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128b4e:	29 d0                	sub    %edx,%eax
f0128b50:	89 c3                	mov    %eax,%ebx
f0128b52:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0128b59:	10 00 00 
f0128b5c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128b61:	0f b6 d0             	movzbl %al,%edx
f0128b64:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128b6a:	01 d0                	add    %edx,%eax
f0128b6c:	48                   	dec    %eax
f0128b6d:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128b73:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128b79:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b7e:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0128b84:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128b8a:	29 d0                	sub    %edx,%eax
f0128b8c:	01 c3                	add    %eax,%ebx
f0128b8e:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0128b95:	10 00 00 
f0128b98:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128b9d:	0f b6 c0             	movzbl %al,%eax
f0128ba0:	c1 e0 04             	shl    $0x4,%eax
f0128ba3:	89 c2                	mov    %eax,%edx
f0128ba5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128bab:	01 d0                	add    %edx,%eax
f0128bad:	48                   	dec    %eax
f0128bae:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0128bb4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128bba:	ba 00 00 00 00       	mov    $0x0,%edx
f0128bbf:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0128bc5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128bcb:	29 d0                	sub    %edx,%eax
f0128bcd:	01 d8                	add    %ebx,%eax
f0128bcf:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0128bd4:	39 c1                	cmp    %eax,%ecx
f0128bd6:	74 17                	je     f0128bef <test_kexpand+0x7ca>
f0128bd8:	83 ec 04             	sub    $0x4,%esp
f0128bdb:	68 20 b6 13 f0       	push   $0xf013b620
f0128be0:	68 7f 0b 00 00       	push   $0xb7f
f0128be5:	68 3a b5 13 f0       	push   $0xf013b53a
f0128bea:	e8 16 76 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128bef:	e8 bb b1 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128bf4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128bf7:	74 17                	je     f0128c10 <test_kexpand+0x7eb>
f0128bf9:	83 ec 04             	sub    $0x4,%esp
f0128bfc:	68 54 b5 13 f0       	push   $0xf013b554
f0128c01:	68 80 0b 00 00       	push   $0xb80
f0128c06:	68 3a b5 13 f0       	push   $0xf013b53a
f0128c0b:	e8 f5 75 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128c10:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128c13:	e8 99 45 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128c18:	29 c3                	sub    %eax,%ebx
f0128c1a:	89 d8                	mov    %ebx,%eax
f0128c1c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128c21:	74 17                	je     f0128c3a <test_kexpand+0x815>
f0128c23:	83 ec 04             	sub    $0x4,%esp
f0128c26:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128c2b:	68 81 0b 00 00       	push   $0xb81
f0128c30:	68 3a b5 13 f0       	push   $0xf013b53a
f0128c35:	e8 cb 75 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128c3a:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0128c41:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0128c44:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0128c4a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128c4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128c54:	eb 0e                	jmp    f0128c64 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f0128c56:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0128c59:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128c5c:	01 d0                	add    %edx,%eax
f0128c5e:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128c61:	ff 45 f4             	incl   -0xc(%ebp)
f0128c64:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0128c6a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128c6d:	7f e7                	jg     f0128c56 <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128c6f:	e8 3d 45 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128c74:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c77:	e8 33 b1 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128c7c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128c7f:	83 ec 0c             	sub    $0xc,%esp
f0128c82:	68 00 00 60 00       	push   $0x600000
f0128c87:	e8 d8 ee fd ff       	call   f0107b64 <kmalloc>
f0128c8c:	83 c4 10             	add    $0x10,%esp
f0128c8f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128c95:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128c9b:	89 c1                	mov    %eax,%ecx
f0128c9d:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0128ca4:	10 00 00 
f0128ca7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128cad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128cb2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0128cb8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128cbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cc3:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0128cc9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128ccf:	29 d0                	sub    %edx,%eax
f0128cd1:	89 c3                	mov    %eax,%ebx
f0128cd3:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0128cda:	10 00 00 
f0128cdd:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128ce2:	0f b6 d0             	movzbl %al,%edx
f0128ce5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0128ceb:	01 d0                	add    %edx,%eax
f0128ced:	48                   	dec    %eax
f0128cee:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0128cf4:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128cfa:	ba 00 00 00 00       	mov    $0x0,%edx
f0128cff:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0128d05:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0128d0b:	29 d0                	sub    %edx,%eax
f0128d0d:	01 c3                	add    %eax,%ebx
f0128d0f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0128d16:	10 00 00 
f0128d19:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128d1e:	0f b6 c0             	movzbl %al,%eax
f0128d21:	c1 e0 04             	shl    $0x4,%eax
f0128d24:	89 c2                	mov    %eax,%edx
f0128d26:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128d2c:	01 d0                	add    %edx,%eax
f0128d2e:	48                   	dec    %eax
f0128d2f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0128d35:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d3b:	ba 00 00 00 00       	mov    $0x0,%edx
f0128d40:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0128d46:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128d4c:	29 d0                	sub    %edx,%eax
f0128d4e:	01 d8                	add    %ebx,%eax
f0128d50:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0128d55:	39 c1                	cmp    %eax,%ecx
f0128d57:	74 17                	je     f0128d70 <test_kexpand+0x94b>
f0128d59:	83 ec 04             	sub    $0x4,%esp
f0128d5c:	68 20 b6 13 f0       	push   $0xf013b620
f0128d61:	68 8d 0b 00 00       	push   $0xb8d
f0128d66:	68 3a b5 13 f0       	push   $0xf013b53a
f0128d6b:	e8 95 74 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128d70:	e8 3a b0 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128d75:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128d78:	74 17                	je     f0128d91 <test_kexpand+0x96c>
f0128d7a:	83 ec 04             	sub    $0x4,%esp
f0128d7d:	68 54 b5 13 f0       	push   $0xf013b554
f0128d82:	68 8e 0b 00 00       	push   $0xb8e
f0128d87:	68 3a b5 13 f0       	push   $0xf013b53a
f0128d8c:	e8 74 74 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128d91:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128d94:	e8 18 44 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128d99:	29 c3                	sub    %eax,%ebx
f0128d9b:	89 d8                	mov    %ebx,%eax
f0128d9d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128da2:	74 17                	je     f0128dbb <test_kexpand+0x996>
f0128da4:	83 ec 04             	sub    $0x4,%esp
f0128da7:	68 bc b5 13 f0       	push   $0xf013b5bc
f0128dac:	68 8f 0b 00 00       	push   $0xb8f
f0128db1:	68 3a b5 13 f0       	push   $0xf013b53a
f0128db6:	e8 4a 74 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128dbb:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0128dc2:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0128dc5:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0128dcb:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0128dd1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128dd8:	eb 1a                	jmp    f0128df4 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0128dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ddd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128de4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128dea:	01 c2                	add    %eax,%edx
f0128dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128def:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0128df1:	ff 45 f4             	incl   -0xc(%ebp)
f0128df4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128dfa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128dfd:	7d db                	jge    f0128dda <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0128dff:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0128e06:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0128e09:	e8 a3 43 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128e0e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e11:	e8 99 af fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128e16:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0128e19:	83 ec 0c             	sub    $0xc,%esp
f0128e1c:	68 00 00 70 00       	push   $0x700000
f0128e21:	e8 26 f0 fd ff       	call   f0107e4c <kexpand>
f0128e26:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128e29:	e8 81 af fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128e2e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128e31:	74 19                	je     f0128e4c <test_kexpand+0xa27>
f0128e33:	68 d4 c2 13 f0       	push   $0xf013c2d4
f0128e38:	68 05 c3 13 f0       	push   $0xf013c305
f0128e3d:	68 a0 0b 00 00       	push   $0xba0
f0128e42:	68 3a b5 13 f0       	push   $0xf013b53a
f0128e47:	e8 b9 73 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0128e4c:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128e4f:	e8 5d 43 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128e54:	29 c3                	sub    %eax,%ebx
f0128e56:	89 d8                	mov    %ebx,%eax
f0128e58:	3d 00 01 00 00       	cmp    $0x100,%eax
f0128e5d:	74 19                	je     f0128e78 <test_kexpand+0xa53>
f0128e5f:	68 1c c3 13 f0       	push   $0xf013c31c
f0128e64:	68 05 c3 13 f0       	push   $0xf013c305
f0128e69:	68 a1 0b 00 00       	push   $0xba1
f0128e6e:	68 3a b5 13 f0       	push   $0xf013b53a
f0128e73:	e8 8d 73 fd ff       	call   f0100205 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128e78:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0128e7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0128e81:	eb 1a                	jmp    f0128e9d <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0128e83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e86:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128e8d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128e93:	01 c2                	add    %eax,%edx
f0128e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128e98:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0128e9a:	ff 45 f4             	incl   -0xc(%ebp)
f0128e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ea0:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128ea6:	7c db                	jl     f0128e83 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128ea8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128eaf:	eb 37                	jmp    f0128ee8 <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0128eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128eb4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128ebb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128ec1:	01 d0                	add    %edx,%eax
f0128ec3:	8b 10                	mov    (%eax),%edx
f0128ec5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128ec8:	39 c2                	cmp    %eax,%edx
f0128eca:	74 19                	je     f0128ee5 <test_kexpand+0xac0>
f0128ecc:	68 4c c3 13 f0       	push   $0xf013c34c
f0128ed1:	68 05 c3 13 f0       	push   $0xf013c305
f0128ed6:	68 ad 0b 00 00       	push   $0xbad
f0128edb:	68 3a b5 13 f0       	push   $0xf013b53a
f0128ee0:	e8 20 73 fd ff       	call   f0100205 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0128ee5:	ff 45 f4             	incl   -0xc(%ebp)
f0128ee8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128eeb:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128ef1:	7c be                	jl     f0128eb1 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128ef3:	e8 b9 42 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128ef8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128efb:	e8 af ae fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128f00:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0128f03:	83 ec 0c             	sub    $0xc,%esp
f0128f06:	68 00 00 a0 00       	push   $0xa00000
f0128f0b:	e8 3c ef fd ff       	call   f0107e4c <kexpand>
f0128f10:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128f13:	e8 97 ae fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128f18:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128f1b:	74 19                	je     f0128f36 <test_kexpand+0xb11>
f0128f1d:	68 d4 c2 13 f0       	push   $0xf013c2d4
f0128f22:	68 05 c3 13 f0       	push   $0xf013c305
f0128f27:	68 b8 0b 00 00       	push   $0xbb8
f0128f2c:	68 3a b5 13 f0       	push   $0xf013b53a
f0128f31:	e8 cf 72 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0128f36:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128f39:	e8 73 42 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128f3e:	29 c3                	sub    %eax,%ebx
f0128f40:	89 d8                	mov    %ebx,%eax
f0128f42:	3d 00 03 00 00       	cmp    $0x300,%eax
f0128f47:	74 19                	je     f0128f62 <test_kexpand+0xb3d>
f0128f49:	68 58 c3 13 f0       	push   $0xf013c358
f0128f4e:	68 05 c3 13 f0       	push   $0xf013c305
f0128f53:	68 b9 0b 00 00       	push   $0xbb9
f0128f58:	68 3a b5 13 f0       	push   $0xf013b53a
f0128f5d:	e8 a3 72 fd ff       	call   f0100205 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0128f62:	e8 4a 42 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0128f67:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128f6a:	e8 40 ae fd ff       	call   f0103daf <pf_calculate_free_frames>
f0128f6f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0128f72:	83 ec 0c             	sub    $0xc,%esp
f0128f75:	68 00 00 40 00       	push   $0x400000
f0128f7a:	e8 e5 eb fd ff       	call   f0107b64 <kmalloc>
f0128f7f:	83 c4 10             	add    $0x10,%esp
f0128f82:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0128f88:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0128f8e:	89 c1                	mov    %eax,%ecx
f0128f90:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0128f97:	10 00 00 
f0128f9a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128fa0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128fa5:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128fab:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128fb1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fb6:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128fbc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128fc2:	29 d0                	sub    %edx,%eax
f0128fc4:	89 c3                	mov    %eax,%ebx
f0128fc6:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128fcd:	10 00 00 
f0128fd0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0128fd5:	0f b6 d0             	movzbl %al,%edx
f0128fd8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128fde:	01 d0                	add    %edx,%eax
f0128fe0:	48                   	dec    %eax
f0128fe1:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128fe7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128fed:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ff2:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128ff8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128ffe:	29 d0                	sub    %edx,%eax
f0129000:	01 c3                	add    %eax,%ebx
f0129002:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129009:	10 00 00 
f012900c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129011:	0f b6 c0             	movzbl %al,%eax
f0129014:	c1 e0 04             	shl    $0x4,%eax
f0129017:	89 c2                	mov    %eax,%edx
f0129019:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012901f:	01 d0                	add    %edx,%eax
f0129021:	48                   	dec    %eax
f0129022:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129028:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012902e:	ba 00 00 00 00       	mov    $0x0,%edx
f0129033:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129039:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012903f:	29 d0                	sub    %edx,%eax
f0129041:	01 d8                	add    %ebx,%eax
f0129043:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0129048:	39 c1                	cmp    %eax,%ecx
f012904a:	74 17                	je     f0129063 <test_kexpand+0xc3e>
f012904c:	83 ec 04             	sub    $0x4,%esp
f012904f:	68 88 c3 13 f0       	push   $0xf013c388
f0129054:	68 c4 0b 00 00       	push   $0xbc4
f0129059:	68 3a b5 13 f0       	push   $0xf013b53a
f012905e:	e8 a2 71 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129063:	e8 47 ad fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129068:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012906b:	74 17                	je     f0129084 <test_kexpand+0xc5f>
f012906d:	83 ec 04             	sub    $0x4,%esp
f0129070:	68 54 b5 13 f0       	push   $0xf013b554
f0129075:	68 c5 0b 00 00       	push   $0xbc5
f012907a:	68 3a b5 13 f0       	push   $0xf013b53a
f012907f:	e8 81 71 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129084:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129087:	e8 25 41 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012908c:	29 c3                	sub    %eax,%ebx
f012908e:	89 d8                	mov    %ebx,%eax
f0129090:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129095:	74 17                	je     f01290ae <test_kexpand+0xc89>
f0129097:	83 ec 04             	sub    $0x4,%esp
f012909a:	68 bc b5 13 f0       	push   $0xf013b5bc
f012909f:	68 c6 0b 00 00       	push   $0xbc6
f01290a4:	68 3a b5 13 f0       	push   $0xf013b53a
f01290a9:	e8 57 71 fd ff       	call   f0100205 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f01290ae:	e8 fe 40 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01290b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290b6:	e8 f4 ac fd ff       	call   f0103daf <pf_calculate_free_frames>
f01290bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f01290be:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01290c4:	83 ec 0c             	sub    $0xc,%esp
f01290c7:	50                   	push   %eax
f01290c8:	e8 9f eb fd ff       	call   f0107c6c <kfree>
f01290cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01290d0:	e8 da ac fd ff       	call   f0103daf <pf_calculate_free_frames>
f01290d5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01290d8:	74 17                	je     f01290f1 <test_kexpand+0xccc>
f01290da:	83 ec 04             	sub    $0x4,%esp
f01290dd:	68 54 b5 13 f0       	push   $0xf013b554
f01290e2:	68 cf 0b 00 00       	push   $0xbcf
f01290e7:	68 3a b5 13 f0       	push   $0xf013b53a
f01290ec:	e8 14 71 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01290f1:	e8 bb 40 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01290f6:	89 c2                	mov    %eax,%edx
f01290f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01290fb:	29 c2                	sub    %eax,%edx
f01290fd:	89 d0                	mov    %edx,%eax
f01290ff:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0129104:	74 17                	je     f012911d <test_kexpand+0xcf8>
f0129106:	83 ec 04             	sub    $0x4,%esp
f0129109:	68 ec bd 13 f0       	push   $0xf013bdec
f012910e:	68 d0 0b 00 00       	push   $0xbd0
f0129113:	68 3a b5 13 f0       	push   $0xf013b53a
f0129118:	e8 e8 70 fd ff       	call   f0100205 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012911d:	e8 8f 40 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129122:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129125:	e8 85 ac fd ff       	call   f0103daf <pf_calculate_free_frames>
f012912a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f012912d:	83 ec 0c             	sub    $0xc,%esp
f0129130:	68 00 50 40 00       	push   $0x405000
f0129135:	e8 12 ed fd ff       	call   f0107e4c <kexpand>
f012913a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012913d:	e8 6d ac fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129142:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129145:	74 19                	je     f0129160 <test_kexpand+0xd3b>
f0129147:	68 d4 c2 13 f0       	push   $0xf013c2d4
f012914c:	68 05 c3 13 f0       	push   $0xf013c305
f0129151:	68 da 0b 00 00       	push   $0xbda
f0129156:	68 3a b5 13 f0       	push   $0xf013b53a
f012915b:	e8 a5 70 fd ff       	call   f0100205 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0129160:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129163:	e8 49 40 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129168:	29 c3                	sub    %eax,%ebx
f012916a:	89 d8                	mov    %ebx,%eax
f012916c:	83 f8 05             	cmp    $0x5,%eax
f012916f:	74 19                	je     f012918a <test_kexpand+0xd65>
f0129171:	68 b0 c3 13 f0       	push   $0xf013c3b0
f0129176:	68 05 c3 13 f0       	push   $0xf013c305
f012917b:	68 db 0b 00 00       	push   $0xbdb
f0129180:	68 3a b5 13 f0       	push   $0xf013b53a
f0129185:	e8 7b 70 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012918a:	83 ec 0c             	sub    $0xc,%esp
f012918d:	68 98 c2 13 f0       	push   $0xf013c298
f0129192:	e8 77 7b fd ff       	call   f0100d0e <cprintf>
f0129197:	83 c4 10             	add    $0x10,%esp

	return 1;
f012919a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012919f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01291a2:	5b                   	pop    %ebx
f01291a3:	5f                   	pop    %edi
f01291a4:	5d                   	pop    %ebp
f01291a5:	c3                   	ret    

f01291a6 <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f01291a6:	55                   	push   %ebp
f01291a7:	89 e5                	mov    %esp,%ebp
f01291a9:	57                   	push   %edi
f01291aa:	53                   	push   %ebx
f01291ab:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f01291b1:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f01291b5:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f01291b9:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f01291bf:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f01291c5:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01291cc:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01291d3:	e8 d9 3f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01291d8:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01291db:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f01291e1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01291e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01291eb:	89 d7                	mov    %edx,%edi
f01291ed:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01291ef:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f01291f5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01291fa:	b8 00 00 00 00       	mov    $0x0,%eax
f01291ff:	89 d7                	mov    %edx,%edi
f0129201:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129203:	e8 a9 3f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129208:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012920b:	e8 9f ab fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129210:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0129213:	83 ec 0c             	sub    $0xc,%esp
f0129216:	68 00 fc 1f 00       	push   $0x1ffc00
f012921b:	e8 44 e9 fd ff       	call   f0107b64 <kmalloc>
f0129220:	83 c4 10             	add    $0x10,%esp
f0129223:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129229:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012922f:	89 c1                	mov    %eax,%ecx
f0129231:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0129238:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012923b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129240:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0129243:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0129246:	ba 00 00 00 00       	mov    $0x0,%edx
f012924b:	f7 75 d4             	divl   -0x2c(%ebp)
f012924e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0129251:	29 d0                	sub    %edx,%eax
f0129253:	89 c3                	mov    %eax,%ebx
f0129255:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012925c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129261:	0f b6 d0             	movzbl %al,%edx
f0129264:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0129267:	01 d0                	add    %edx,%eax
f0129269:	48                   	dec    %eax
f012926a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012926d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0129270:	ba 00 00 00 00       	mov    $0x0,%edx
f0129275:	f7 75 cc             	divl   -0x34(%ebp)
f0129278:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012927b:	29 d0                	sub    %edx,%eax
f012927d:	01 c3                	add    %eax,%ebx
f012927f:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0129286:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012928b:	0f b6 c0             	movzbl %al,%eax
f012928e:	c1 e0 04             	shl    $0x4,%eax
f0129291:	89 c2                	mov    %eax,%edx
f0129293:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0129296:	01 d0                	add    %edx,%eax
f0129298:	48                   	dec    %eax
f0129299:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012929c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012929f:	ba 00 00 00 00       	mov    $0x0,%edx
f01292a4:	f7 75 c4             	divl   -0x3c(%ebp)
f01292a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01292aa:	29 d0                	sub    %edx,%eax
f01292ac:	01 d8                	add    %ebx,%eax
f01292ae:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01292b3:	39 c1                	cmp    %eax,%ecx
f01292b5:	74 17                	je     f01292ce <test_kshrink+0x128>
f01292b7:	83 ec 04             	sub    $0x4,%esp
f01292ba:	68 20 b6 13 f0       	push   $0xf013b620
f01292bf:	68 01 0c 00 00       	push   $0xc01
f01292c4:	68 3a b5 13 f0       	push   $0xf013b53a
f01292c9:	e8 37 6f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01292ce:	e8 dc aa fd ff       	call   f0103daf <pf_calculate_free_frames>
f01292d3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01292d6:	74 17                	je     f01292ef <test_kshrink+0x149>
f01292d8:	83 ec 04             	sub    $0x4,%esp
f01292db:	68 54 b5 13 f0       	push   $0xf013b554
f01292e0:	68 02 0c 00 00       	push   $0xc02
f01292e5:	68 3a b5 13 f0       	push   $0xf013b53a
f01292ea:	e8 16 6f fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01292ef:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01292f2:	e8 ba 3e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01292f7:	29 c3                	sub    %eax,%ebx
f01292f9:	89 d8                	mov    %ebx,%eax
f01292fb:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129300:	74 17                	je     f0129319 <test_kshrink+0x173>
f0129302:	83 ec 04             	sub    $0x4,%esp
f0129305:	68 bc b5 13 f0       	push   $0xf013b5bc
f012930a:	68 03 0c 00 00       	push   $0xc03
f012930f:	68 3a b5 13 f0       	push   $0xf013b53a
f0129314:	e8 ec 6e fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0129319:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0129320:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0129323:	e8 89 3e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129328:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012932b:	e8 7f aa fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129330:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0129333:	83 ec 0c             	sub    $0xc,%esp
f0129336:	68 00 fc 1f 00       	push   $0x1ffc00
f012933b:	e8 24 e8 fd ff       	call   f0107b64 <kmalloc>
f0129340:	83 c4 10             	add    $0x10,%esp
f0129343:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129349:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012934f:	89 c1                	mov    %eax,%ecx
f0129351:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0129358:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012935b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129360:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0129363:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129366:	ba 00 00 00 00       	mov    $0x0,%edx
f012936b:	f7 75 bc             	divl   -0x44(%ebp)
f012936e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0129371:	29 d0                	sub    %edx,%eax
f0129373:	89 c3                	mov    %eax,%ebx
f0129375:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012937c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129381:	0f b6 d0             	movzbl %al,%edx
f0129384:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0129387:	01 d0                	add    %edx,%eax
f0129389:	48                   	dec    %eax
f012938a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012938d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0129390:	ba 00 00 00 00       	mov    $0x0,%edx
f0129395:	f7 75 b4             	divl   -0x4c(%ebp)
f0129398:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012939b:	29 d0                	sub    %edx,%eax
f012939d:	01 c3                	add    %eax,%ebx
f012939f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01293a6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01293ab:	0f b6 c0             	movzbl %al,%eax
f01293ae:	c1 e0 04             	shl    $0x4,%eax
f01293b1:	89 c2                	mov    %eax,%edx
f01293b3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01293b6:	01 d0                	add    %edx,%eax
f01293b8:	48                   	dec    %eax
f01293b9:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01293bc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01293bf:	ba 00 00 00 00       	mov    $0x0,%edx
f01293c4:	f7 75 ac             	divl   -0x54(%ebp)
f01293c7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01293ca:	29 d0                	sub    %edx,%eax
f01293cc:	01 d8                	add    %ebx,%eax
f01293ce:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01293d3:	39 c1                	cmp    %eax,%ecx
f01293d5:	74 17                	je     f01293ee <test_kshrink+0x248>
f01293d7:	83 ec 04             	sub    $0x4,%esp
f01293da:	68 20 b6 13 f0       	push   $0xf013b620
f01293df:	68 0a 0c 00 00       	push   $0xc0a
f01293e4:	68 3a b5 13 f0       	push   $0xf013b53a
f01293e9:	e8 17 6e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01293ee:	e8 bc a9 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01293f3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01293f6:	74 17                	je     f012940f <test_kshrink+0x269>
f01293f8:	83 ec 04             	sub    $0x4,%esp
f01293fb:	68 54 b5 13 f0       	push   $0xf013b554
f0129400:	68 0b 0c 00 00       	push   $0xc0b
f0129405:	68 3a b5 13 f0       	push   $0xf013b53a
f012940a:	e8 f6 6d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012940f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129412:	e8 9a 3d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129417:	29 c3                	sub    %eax,%ebx
f0129419:	89 d8                	mov    %ebx,%eax
f012941b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129420:	74 17                	je     f0129439 <test_kshrink+0x293>
f0129422:	83 ec 04             	sub    $0x4,%esp
f0129425:	68 bc b5 13 f0       	push   $0xf013b5bc
f012942a:	68 0c 0c 00 00       	push   $0xc0c
f012942f:	68 3a b5 13 f0       	push   $0xf013b53a
f0129434:	e8 cc 6d fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0129439:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0129440:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0129443:	e8 69 3d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129448:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012944b:	e8 5f a9 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129450:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0129453:	83 ec 0c             	sub    $0xc,%esp
f0129456:	68 00 08 00 00       	push   $0x800
f012945b:	e8 04 e7 fd ff       	call   f0107b64 <kmalloc>
f0129460:	83 c4 10             	add    $0x10,%esp
f0129463:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129469:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012946f:	89 c1                	mov    %eax,%ecx
f0129471:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0129478:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012947b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129480:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0129483:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129486:	ba 00 00 00 00       	mov    $0x0,%edx
f012948b:	f7 75 a4             	divl   -0x5c(%ebp)
f012948e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0129491:	29 d0                	sub    %edx,%eax
f0129493:	89 c3                	mov    %eax,%ebx
f0129495:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012949c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01294a1:	0f b6 d0             	movzbl %al,%edx
f01294a4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01294a7:	01 d0                	add    %edx,%eax
f01294a9:	48                   	dec    %eax
f01294aa:	89 45 98             	mov    %eax,-0x68(%ebp)
f01294ad:	8b 45 98             	mov    -0x68(%ebp),%eax
f01294b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01294b5:	f7 75 9c             	divl   -0x64(%ebp)
f01294b8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01294bb:	29 d0                	sub    %edx,%eax
f01294bd:	01 c3                	add    %eax,%ebx
f01294bf:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01294c6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01294cb:	0f b6 c0             	movzbl %al,%eax
f01294ce:	c1 e0 04             	shl    $0x4,%eax
f01294d1:	89 c2                	mov    %eax,%edx
f01294d3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01294d6:	01 d0                	add    %edx,%eax
f01294d8:	48                   	dec    %eax
f01294d9:	89 45 90             	mov    %eax,-0x70(%ebp)
f01294dc:	8b 45 90             	mov    -0x70(%ebp),%eax
f01294df:	ba 00 00 00 00       	mov    $0x0,%edx
f01294e4:	f7 75 94             	divl   -0x6c(%ebp)
f01294e7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01294ea:	29 d0                	sub    %edx,%eax
f01294ec:	01 d8                	add    %ebx,%eax
f01294ee:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01294f3:	39 c1                	cmp    %eax,%ecx
f01294f5:	74 17                	je     f012950e <test_kshrink+0x368>
f01294f7:	83 ec 04             	sub    $0x4,%esp
f01294fa:	68 20 b6 13 f0       	push   $0xf013b620
f01294ff:	68 13 0c 00 00       	push   $0xc13
f0129504:	68 3a b5 13 f0       	push   $0xf013b53a
f0129509:	e8 f7 6c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012950e:	e8 9c a8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129513:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129516:	74 17                	je     f012952f <test_kshrink+0x389>
f0129518:	83 ec 04             	sub    $0x4,%esp
f012951b:	68 54 b5 13 f0       	push   $0xf013b554
f0129520:	68 14 0c 00 00       	push   $0xc14
f0129525:	68 3a b5 13 f0       	push   $0xf013b53a
f012952a:	e8 d6 6c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012952f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129532:	e8 7a 3c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129537:	29 c3                	sub    %eax,%ebx
f0129539:	89 d8                	mov    %ebx,%eax
f012953b:	83 f8 01             	cmp    $0x1,%eax
f012953e:	74 17                	je     f0129557 <test_kshrink+0x3b1>
f0129540:	83 ec 04             	sub    $0x4,%esp
f0129543:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129548:	68 15 0c 00 00       	push   $0xc15
f012954d:	68 3a b5 13 f0       	push   $0xf013b53a
f0129552:	e8 ae 6c fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0129557:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f012955e:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0129561:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0129567:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012956a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129571:	eb 0e                	jmp    f0129581 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f0129573:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129576:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129579:	01 d0                	add    %edx,%eax
f012957b:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012957e:	ff 45 f4             	incl   -0xc(%ebp)
f0129581:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0129587:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012958a:	7f e7                	jg     f0129573 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012958c:	e8 20 3c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129591:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129594:	e8 16 a8 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129599:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012959c:	83 ec 0c             	sub    $0xc,%esp
f012959f:	68 00 08 00 00       	push   $0x800
f01295a4:	e8 bb e5 fd ff       	call   f0107b64 <kmalloc>
f01295a9:	83 c4 10             	add    $0x10,%esp
f01295ac:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01295b2:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01295b8:	89 c1                	mov    %eax,%ecx
f01295ba:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01295c1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01295c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01295c9:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01295cc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01295cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01295d4:	f7 75 88             	divl   -0x78(%ebp)
f01295d7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01295da:	29 d0                	sub    %edx,%eax
f01295dc:	89 c3                	mov    %eax,%ebx
f01295de:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01295e5:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01295ea:	0f b6 d0             	movzbl %al,%edx
f01295ed:	8b 45 80             	mov    -0x80(%ebp),%eax
f01295f0:	01 d0                	add    %edx,%eax
f01295f2:	48                   	dec    %eax
f01295f3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01295f9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01295ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0129604:	f7 75 80             	divl   -0x80(%ebp)
f0129607:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012960d:	29 d0                	sub    %edx,%eax
f012960f:	01 c3                	add    %eax,%ebx
f0129611:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129618:	10 00 00 
f012961b:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129620:	0f b6 c0             	movzbl %al,%eax
f0129623:	c1 e0 04             	shl    $0x4,%eax
f0129626:	89 c2                	mov    %eax,%edx
f0129628:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012962e:	01 d0                	add    %edx,%eax
f0129630:	48                   	dec    %eax
f0129631:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0129637:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012963d:	ba 00 00 00 00       	mov    $0x0,%edx
f0129642:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0129648:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012964e:	29 d0                	sub    %edx,%eax
f0129650:	01 d8                	add    %ebx,%eax
f0129652:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0129657:	39 c1                	cmp    %eax,%ecx
f0129659:	74 17                	je     f0129672 <test_kshrink+0x4cc>
f012965b:	83 ec 04             	sub    $0x4,%esp
f012965e:	68 20 b6 13 f0       	push   $0xf013b620
f0129663:	68 21 0c 00 00       	push   $0xc21
f0129668:	68 3a b5 13 f0       	push   $0xf013b53a
f012966d:	e8 93 6b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129672:	e8 38 a7 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129677:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012967a:	74 17                	je     f0129693 <test_kshrink+0x4ed>
f012967c:	83 ec 04             	sub    $0x4,%esp
f012967f:	68 54 b5 13 f0       	push   $0xf013b554
f0129684:	68 22 0c 00 00       	push   $0xc22
f0129689:	68 3a b5 13 f0       	push   $0xf013b53a
f012968e:	e8 72 6b fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129693:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129696:	e8 16 3b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012969b:	29 c3                	sub    %eax,%ebx
f012969d:	89 d8                	mov    %ebx,%eax
f012969f:	83 f8 01             	cmp    $0x1,%eax
f01296a2:	74 17                	je     f01296bb <test_kshrink+0x515>
f01296a4:	83 ec 04             	sub    $0x4,%esp
f01296a7:	68 bc b5 13 f0       	push   $0xf013b5bc
f01296ac:	68 23 0c 00 00       	push   $0xc23
f01296b1:	68 3a b5 13 f0       	push   $0xf013b53a
f01296b6:	e8 4a 6b fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f01296bb:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f01296c2:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f01296c5:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f01296cb:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01296ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01296d5:	eb 0e                	jmp    f01296e5 <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f01296d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01296da:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01296dd:	01 d0                	add    %edx,%eax
f01296df:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01296e2:	ff 45 f4             	incl   -0xc(%ebp)
f01296e5:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01296eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01296ee:	7f e7                	jg     f01296d7 <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01296f0:	e8 bc 3a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01296f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296f8:	e8 b2 a6 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01296fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129700:	83 ec 0c             	sub    $0xc,%esp
f0129703:	68 00 1c 00 00       	push   $0x1c00
f0129708:	e8 57 e4 fd ff       	call   f0107b64 <kmalloc>
f012970d:	83 c4 10             	add    $0x10,%esp
f0129710:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129716:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012971c:	89 c1                	mov    %eax,%ecx
f012971e:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129725:	10 00 00 
f0129728:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012972e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129733:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0129739:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012973f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129744:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012974a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0129750:	29 d0                	sub    %edx,%eax
f0129752:	89 c3                	mov    %eax,%ebx
f0129754:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012975b:	10 00 00 
f012975e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129763:	0f b6 d0             	movzbl %al,%edx
f0129766:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012976c:	01 d0                	add    %edx,%eax
f012976e:	48                   	dec    %eax
f012976f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0129775:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012977b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129780:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0129786:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012978c:	29 d0                	sub    %edx,%eax
f012978e:	01 c3                	add    %eax,%ebx
f0129790:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0129797:	10 00 00 
f012979a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012979f:	0f b6 c0             	movzbl %al,%eax
f01297a2:	c1 e0 04             	shl    $0x4,%eax
f01297a5:	89 c2                	mov    %eax,%edx
f01297a7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01297ad:	01 d0                	add    %edx,%eax
f01297af:	48                   	dec    %eax
f01297b0:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01297b6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01297bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01297c1:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01297c7:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01297cd:	29 d0                	sub    %edx,%eax
f01297cf:	01 d8                	add    %ebx,%eax
f01297d1:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01297d6:	39 c1                	cmp    %eax,%ecx
f01297d8:	74 17                	je     f01297f1 <test_kshrink+0x64b>
f01297da:	83 ec 04             	sub    $0x4,%esp
f01297dd:	68 20 b6 13 f0       	push   $0xf013b620
f01297e2:	68 2f 0c 00 00       	push   $0xc2f
f01297e7:	68 3a b5 13 f0       	push   $0xf013b53a
f01297ec:	e8 14 6a fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01297f1:	e8 b9 a5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01297f6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01297f9:	74 17                	je     f0129812 <test_kshrink+0x66c>
f01297fb:	83 ec 04             	sub    $0x4,%esp
f01297fe:	68 54 b5 13 f0       	push   $0xf013b554
f0129803:	68 30 0c 00 00       	push   $0xc30
f0129808:	68 3a b5 13 f0       	push   $0xf013b53a
f012980d:	e8 f3 69 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129812:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129815:	e8 97 39 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012981a:	29 c3                	sub    %eax,%ebx
f012981c:	89 d8                	mov    %ebx,%eax
f012981e:	83 f8 02             	cmp    $0x2,%eax
f0129821:	74 17                	je     f012983a <test_kshrink+0x694>
f0129823:	83 ec 04             	sub    $0x4,%esp
f0129826:	68 bc b5 13 f0       	push   $0xf013b5bc
f012982b:	68 31 0c 00 00       	push   $0xc31
f0129830:	68 3a b5 13 f0       	push   $0xf013b53a
f0129835:	e8 cb 69 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012983a:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0129841:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0129844:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012984a:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012984d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129854:	eb 0e                	jmp    f0129864 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f0129856:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129859:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012985c:	01 d0                	add    %edx,%eax
f012985e:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129861:	ff 45 f4             	incl   -0xc(%ebp)
f0129864:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012986a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012986d:	7f e7                	jg     f0129856 <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012986f:	e8 3d 39 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129874:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129877:	e8 33 a5 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012987c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012987f:	83 ec 0c             	sub    $0xc,%esp
f0129882:	68 00 fc 2f 00       	push   $0x2ffc00
f0129887:	e8 d8 e2 fd ff       	call   f0107b64 <kmalloc>
f012988c:	83 c4 10             	add    $0x10,%esp
f012988f:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129895:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012989b:	89 c1                	mov    %eax,%ecx
f012989d:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01298a4:	10 00 00 
f01298a7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01298ad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01298b2:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01298b8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01298be:	ba 00 00 00 00       	mov    $0x0,%edx
f01298c3:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01298c9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01298cf:	29 d0                	sub    %edx,%eax
f01298d1:	89 c3                	mov    %eax,%ebx
f01298d3:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01298da:	10 00 00 
f01298dd:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01298e2:	0f b6 d0             	movzbl %al,%edx
f01298e5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01298eb:	01 d0                	add    %edx,%eax
f01298ed:	48                   	dec    %eax
f01298ee:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01298f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01298fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01298ff:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129905:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012990b:	29 d0                	sub    %edx,%eax
f012990d:	01 c3                	add    %eax,%ebx
f012990f:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129916:	10 00 00 
f0129919:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012991e:	0f b6 c0             	movzbl %al,%eax
f0129921:	c1 e0 04             	shl    $0x4,%eax
f0129924:	89 c2                	mov    %eax,%edx
f0129926:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012992c:	01 d0                	add    %edx,%eax
f012992e:	48                   	dec    %eax
f012992f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0129935:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012993b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129940:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0129946:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012994c:	29 d0                	sub    %edx,%eax
f012994e:	01 d8                	add    %ebx,%eax
f0129950:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0129955:	39 c1                	cmp    %eax,%ecx
f0129957:	74 17                	je     f0129970 <test_kshrink+0x7ca>
f0129959:	83 ec 04             	sub    $0x4,%esp
f012995c:	68 20 b6 13 f0       	push   $0xf013b620
f0129961:	68 3d 0c 00 00       	push   $0xc3d
f0129966:	68 3a b5 13 f0       	push   $0xf013b53a
f012996b:	e8 95 68 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129970:	e8 3a a4 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129975:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129978:	74 17                	je     f0129991 <test_kshrink+0x7eb>
f012997a:	83 ec 04             	sub    $0x4,%esp
f012997d:	68 54 b5 13 f0       	push   $0xf013b554
f0129982:	68 3e 0c 00 00       	push   $0xc3e
f0129987:	68 3a b5 13 f0       	push   $0xf013b53a
f012998c:	e8 74 68 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129991:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129994:	e8 18 38 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129999:	29 c3                	sub    %eax,%ebx
f012999b:	89 d8                	mov    %ebx,%eax
f012999d:	3d 00 03 00 00       	cmp    $0x300,%eax
f01299a2:	74 17                	je     f01299bb <test_kshrink+0x815>
f01299a4:	83 ec 04             	sub    $0x4,%esp
f01299a7:	68 bc b5 13 f0       	push   $0xf013b5bc
f01299ac:	68 3f 0c 00 00       	push   $0xc3f
f01299b1:	68 3a b5 13 f0       	push   $0xf013b53a
f01299b6:	e8 4a 68 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01299bb:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f01299c2:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01299c5:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01299cb:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01299ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01299d5:	eb 0e                	jmp    f01299e5 <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f01299d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01299da:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01299dd:	01 d0                	add    %edx,%eax
f01299df:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01299e2:	ff 45 f4             	incl   -0xc(%ebp)
f01299e5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01299eb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01299ee:	7f e7                	jg     f01299d7 <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01299f0:	e8 bc 37 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f01299f5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01299f8:	e8 b2 a3 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01299fd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0129a00:	83 ec 0c             	sub    $0xc,%esp
f0129a03:	68 00 00 60 00       	push   $0x600000
f0129a08:	e8 57 e1 fd ff       	call   f0107b64 <kmalloc>
f0129a0d:	83 c4 10             	add    $0x10,%esp
f0129a10:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129a16:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129a1c:	89 c1                	mov    %eax,%ecx
f0129a1e:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0129a25:	10 00 00 
f0129a28:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129a2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129a33:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0129a39:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a3f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a44:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0129a4a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0129a50:	29 d0                	sub    %edx,%eax
f0129a52:	89 c3                	mov    %eax,%ebx
f0129a54:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0129a5b:	10 00 00 
f0129a5e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129a63:	0f b6 d0             	movzbl %al,%edx
f0129a66:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129a6c:	01 d0                	add    %edx,%eax
f0129a6e:	48                   	dec    %eax
f0129a6f:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0129a75:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129a7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129a80:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0129a86:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0129a8c:	29 d0                	sub    %edx,%eax
f0129a8e:	01 c3                	add    %eax,%ebx
f0129a90:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0129a97:	10 00 00 
f0129a9a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129a9f:	0f b6 c0             	movzbl %al,%eax
f0129aa2:	c1 e0 04             	shl    $0x4,%eax
f0129aa5:	89 c2                	mov    %eax,%edx
f0129aa7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0129aad:	01 d0                	add    %edx,%eax
f0129aaf:	48                   	dec    %eax
f0129ab0:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0129ab6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129abc:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ac1:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0129ac7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0129acd:	29 d0                	sub    %edx,%eax
f0129acf:	01 d8                	add    %ebx,%eax
f0129ad1:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0129ad6:	39 c1                	cmp    %eax,%ecx
f0129ad8:	74 17                	je     f0129af1 <test_kshrink+0x94b>
f0129ada:	83 ec 04             	sub    $0x4,%esp
f0129add:	68 20 b6 13 f0       	push   $0xf013b620
f0129ae2:	68 4b 0c 00 00       	push   $0xc4b
f0129ae7:	68 3a b5 13 f0       	push   $0xf013b53a
f0129aec:	e8 14 67 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129af1:	e8 b9 a2 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129af6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129af9:	74 17                	je     f0129b12 <test_kshrink+0x96c>
f0129afb:	83 ec 04             	sub    $0x4,%esp
f0129afe:	68 54 b5 13 f0       	push   $0xf013b554
f0129b03:	68 4c 0c 00 00       	push   $0xc4c
f0129b08:	68 3a b5 13 f0       	push   $0xf013b53a
f0129b0d:	e8 f3 66 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129b12:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129b15:	e8 97 36 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129b1a:	29 c3                	sub    %eax,%ebx
f0129b1c:	89 d8                	mov    %ebx,%eax
f0129b1e:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129b23:	74 17                	je     f0129b3c <test_kshrink+0x996>
f0129b25:	83 ec 04             	sub    $0x4,%esp
f0129b28:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129b2d:	68 4d 0c 00 00       	push   $0xc4d
f0129b32:	68 3a b5 13 f0       	push   $0xf013b53a
f0129b37:	e8 c9 66 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0129b3c:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0129b43:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0129b46:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129b4c:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0129b52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b59:	eb 1a                	jmp    f0129b75 <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f0129b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129b5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129b65:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129b6b:	01 c2                	add    %eax,%edx
f0129b6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129b70:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0129b72:	ff 45 f4             	incl   -0xc(%ebp)
f0129b75:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129b7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b7e:	7d db                	jge    f0129b5b <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129b80:	e8 2c 36 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129b85:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129b88:	e8 22 a2 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129b8d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f0129b90:	83 ec 0c             	sub    $0xc,%esp
f0129b93:	68 00 00 50 00       	push   $0x500000
f0129b98:	e8 92 e2 fd ff       	call   f0107e2f <kshrink>
f0129b9d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129ba0:	e8 0a a2 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129ba5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129ba8:	74 19                	je     f0129bc3 <test_kshrink+0xa1d>
f0129baa:	68 d4 c2 13 f0       	push   $0xf013c2d4
f0129baf:	68 05 c3 13 f0       	push   $0xf013c305
f0129bb4:	68 5d 0c 00 00       	push   $0xc5d
f0129bb9:	68 3a b5 13 f0       	push   $0xf013b53a
f0129bbe:	e8 42 66 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0129bc3:	e8 e9 35 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129bc8:	89 c2                	mov    %eax,%edx
f0129bca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129bcd:	29 c2                	sub    %eax,%edx
f0129bcf:	89 d0                	mov    %edx,%eax
f0129bd1:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129bd6:	74 19                	je     f0129bf1 <test_kshrink+0xa4b>
f0129bd8:	68 e0 c3 13 f0       	push   $0xf013c3e0
f0129bdd:	68 05 c3 13 f0       	push   $0xf013c305
f0129be2:	68 5e 0c 00 00       	push   $0xc5e
f0129be7:	68 3a b5 13 f0       	push   $0xf013b53a
f0129bec:	e8 14 66 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0129bf1:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f0129bf8:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129bfb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129c02:	eb 37                	jmp    f0129c3b <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0129c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c07:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0129c0e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129c14:	01 d0                	add    %edx,%eax
f0129c16:	8b 10                	mov    (%eax),%edx
f0129c18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c1b:	39 c2                	cmp    %eax,%edx
f0129c1d:	74 19                	je     f0129c38 <test_kshrink+0xa92>
f0129c1f:	68 10 c4 13 f0       	push   $0xf013c410
f0129c24:	68 05 c3 13 f0       	push   $0xf013c305
f0129c29:	68 66 0c 00 00       	push   $0xc66
f0129c2e:	68 3a b5 13 f0       	push   $0xf013b53a
f0129c33:	e8 cd 65 fd ff       	call   f0100205 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0129c38:	ff 45 f4             	incl   -0xc(%ebp)
f0129c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0129c3e:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0129c44:	7e be                	jle    f0129c04 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0129c46:	83 ec 0c             	sub    $0xc,%esp
f0129c49:	6a 03                	push   $0x3
f0129c4b:	e8 01 3a fe ff       	call   f010d651 <sys_bypassPageFault>
f0129c50:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f0129c53:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129c59:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f0129c5c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129c5f:	05 00 00 50 00       	add    $0x500000,%eax
f0129c64:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f0129c67:	e8 d3 39 fe ff       	call   f010d63f <sys_rcr2>
f0129c6c:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129c6f:	81 c2 00 00 50 00    	add    $0x500000,%edx
f0129c75:	39 d0                	cmp    %edx,%eax
f0129c77:	74 19                	je     f0129c92 <test_kshrink+0xaec>
f0129c79:	68 1c c4 13 f0       	push   $0xf013c41c
f0129c7e:	68 05 c3 13 f0       	push   $0xf013c305
f0129c83:	68 6f 0c 00 00       	push   $0xc6f
f0129c88:	68 3a b5 13 f0       	push   $0xf013b53a
f0129c8d:	e8 73 65 fd ff       	call   f0100205 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f0129c92:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129c95:	05 00 10 50 00       	add    $0x501000,%eax
f0129c9a:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f0129c9d:	e8 9d 39 fe ff       	call   f010d63f <sys_rcr2>
f0129ca2:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129ca5:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0129cab:	39 d0                	cmp    %edx,%eax
f0129cad:	74 19                	je     f0129cc8 <test_kshrink+0xb22>
f0129caf:	68 44 c4 13 f0       	push   $0xf013c444
f0129cb4:	68 05 c3 13 f0       	push   $0xf013c305
f0129cb9:	68 72 0c 00 00       	push   $0xc72
f0129cbe:	68 3a b5 13 f0       	push   $0xf013b53a
f0129cc3:	e8 3d 65 fd ff       	call   f0100205 <_panic>

		ptr[6*Mega - kilo] = 10;
f0129cc8:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0129ccb:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0129cd0:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0129cd3:	e8 67 39 fe ff       	call   f010d63f <sys_rcr2>
f0129cd8:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0129cdb:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0129ce1:	39 d0                	cmp    %edx,%eax
f0129ce3:	74 19                	je     f0129cfe <test_kshrink+0xb58>
f0129ce5:	68 70 c4 13 f0       	push   $0xf013c470
f0129cea:	68 05 c3 13 f0       	push   $0xf013c305
f0129cef:	68 75 0c 00 00       	push   $0xc75
f0129cf4:	68 3a b5 13 f0       	push   $0xf013b53a
f0129cf9:	e8 07 65 fd ff       	call   f0100205 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0129cfe:	83 ec 0c             	sub    $0xc,%esp
f0129d01:	6a 00                	push   $0x0
f0129d03:	e8 49 39 fe ff       	call   f010d651 <sys_bypassPageFault>
f0129d08:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0129d0b:	e8 a1 34 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129d10:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d13:	e8 97 a0 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129d18:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0129d1b:	83 ec 0c             	sub    $0xc,%esp
f0129d1e:	68 00 00 20 00       	push   $0x200000
f0129d23:	e8 07 e1 fd ff       	call   f0107e2f <kshrink>
f0129d28:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0129d2b:	e8 7f a0 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129d30:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129d33:	74 19                	je     f0129d4e <test_kshrink+0xba8>
f0129d35:	68 d4 c2 13 f0       	push   $0xf013c2d4
f0129d3a:	68 05 c3 13 f0       	push   $0xf013c305
f0129d3f:	68 82 0c 00 00       	push   $0xc82
f0129d44:	68 3a b5 13 f0       	push   $0xf013b53a
f0129d49:	e8 b7 64 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f0129d4e:	e8 5e 34 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129d53:	89 c2                	mov    %eax,%edx
f0129d55:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129d58:	29 c2                	sub    %eax,%edx
f0129d5a:	89 d0                	mov    %edx,%eax
f0129d5c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0129d61:	74 19                	je     f0129d7c <test_kshrink+0xbd6>
f0129d63:	68 9c c4 13 f0       	push   $0xf013c49c
f0129d68:	68 05 c3 13 f0       	push   $0xf013c305
f0129d6d:	68 83 0c 00 00       	push   $0xc83
f0129d72:	68 3a b5 13 f0       	push   $0xf013b53a
f0129d77:	e8 89 64 fd ff       	call   f0100205 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0129d7c:	e8 30 34 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129d81:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d84:	e8 26 a0 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129d89:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0129d8c:	83 ec 0c             	sub    $0xc,%esp
f0129d8f:	68 00 00 40 00       	push   $0x400000
f0129d94:	e8 cb dd fd ff       	call   f0107b64 <kmalloc>
f0129d99:	83 c4 10             	add    $0x10,%esp
f0129d9c:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f0129da2:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0129da9:	10 00 00 
f0129dac:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0129db2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129db7:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0129dbd:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129dc3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129dc8:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129dce:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0129dd4:	29 d0                	sub    %edx,%eax
f0129dd6:	89 c1                	mov    %eax,%ecx
f0129dd8:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129ddf:	10 00 00 
f0129de2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129de7:	0f b6 d0             	movzbl %al,%edx
f0129dea:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0129df0:	01 d0                	add    %edx,%eax
f0129df2:	48                   	dec    %eax
f0129df3:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129df9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129dff:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e04:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129e0a:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129e10:	29 d0                	sub    %edx,%eax
f0129e12:	01 c1                	add    %eax,%ecx
f0129e14:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129e1b:	10 00 00 
f0129e1e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129e23:	0f b6 c0             	movzbl %al,%eax
f0129e26:	c1 e0 04             	shl    $0x4,%eax
f0129e29:	89 c2                	mov    %eax,%edx
f0129e2b:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0129e31:	01 d0                	add    %edx,%eax
f0129e33:	48                   	dec    %eax
f0129e34:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129e3a:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129e40:	ba 00 00 00 00       	mov    $0x0,%edx
f0129e45:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129e4b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0129e51:	29 d0                	sub    %edx,%eax
f0129e53:	01 c8                	add    %ecx,%eax
f0129e55:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0129e5b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129e61:	83 ec 04             	sub    $0x4,%esp
f0129e64:	52                   	push   %edx
f0129e65:	50                   	push   %eax
f0129e66:	68 cc c4 13 f0       	push   $0xf013c4cc
f0129e6b:	e8 9e 6e fd ff       	call   f0100d0e <cprintf>
f0129e70:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0129e73:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0129e79:	89 c1                	mov    %eax,%ecx
f0129e7b:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0129e82:	10 00 00 
f0129e85:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129e8b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129e90:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0129e96:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129e9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0129ea1:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0129ea7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0129ead:	29 d0                	sub    %edx,%eax
f0129eaf:	89 c3                	mov    %eax,%ebx
f0129eb1:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129eb8:	10 00 00 
f0129ebb:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129ec0:	0f b6 d0             	movzbl %al,%edx
f0129ec3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129ec9:	01 d0                	add    %edx,%eax
f0129ecb:	48                   	dec    %eax
f0129ecc:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129ed2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129ed8:	ba 00 00 00 00       	mov    $0x0,%edx
f0129edd:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129ee3:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129ee9:	29 d0                	sub    %edx,%eax
f0129eeb:	01 c3                	add    %eax,%ebx
f0129eed:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129ef4:	10 00 00 
f0129ef7:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0129efc:	0f b6 c0             	movzbl %al,%eax
f0129eff:	c1 e0 04             	shl    $0x4,%eax
f0129f02:	89 c2                	mov    %eax,%edx
f0129f04:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129f0a:	01 d0                	add    %edx,%eax
f0129f0c:	48                   	dec    %eax
f0129f0d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129f13:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129f19:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f1e:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129f24:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129f2a:	29 d0                	sub    %edx,%eax
f0129f2c:	01 d8                	add    %ebx,%eax
f0129f2e:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0129f33:	39 c1                	cmp    %eax,%ecx
f0129f35:	74 17                	je     f0129f4e <test_kshrink+0xda8>
f0129f37:	83 ec 04             	sub    $0x4,%esp
f0129f3a:	68 e8 c4 13 f0       	push   $0xf013c4e8
f0129f3f:	68 8e 0c 00 00       	push   $0xc8e
f0129f44:	68 3a b5 13 f0       	push   $0xf013b53a
f0129f49:	e8 b7 62 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129f4e:	e8 5c 9e fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129f53:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129f56:	74 17                	je     f0129f6f <test_kshrink+0xdc9>
f0129f58:	83 ec 04             	sub    $0x4,%esp
f0129f5b:	68 54 b5 13 f0       	push   $0xf013b554
f0129f60:	68 8f 0c 00 00       	push   $0xc8f
f0129f65:	68 3a b5 13 f0       	push   $0xf013b53a
f0129f6a:	e8 96 62 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129f6f:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0129f72:	e8 3a 32 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129f77:	29 c3                	sub    %eax,%ebx
f0129f79:	89 d8                	mov    %ebx,%eax
f0129f7b:	3d 00 04 00 00       	cmp    $0x400,%eax
f0129f80:	74 17                	je     f0129f99 <test_kshrink+0xdf3>
f0129f82:	83 ec 04             	sub    $0x4,%esp
f0129f85:	68 bc b5 13 f0       	push   $0xf013b5bc
f0129f8a:	68 90 0c 00 00       	push   $0xc90
f0129f8f:	68 3a b5 13 f0       	push   $0xf013b53a
f0129f94:	e8 6c 62 fd ff       	call   f0100205 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0129f99:	e8 13 32 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129f9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129fa1:	e8 09 9e fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129fa6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0129fa9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0129faf:	83 ec 0c             	sub    $0xc,%esp
f0129fb2:	50                   	push   %eax
f0129fb3:	e8 b4 dc fd ff       	call   f0107c6c <kfree>
f0129fb8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129fbb:	e8 ef 9d fd ff       	call   f0103daf <pf_calculate_free_frames>
f0129fc0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0129fc3:	74 17                	je     f0129fdc <test_kshrink+0xe36>
f0129fc5:	83 ec 04             	sub    $0x4,%esp
f0129fc8:	68 54 b5 13 f0       	push   $0xf013b554
f0129fcd:	68 9a 0c 00 00       	push   $0xc9a
f0129fd2:	68 3a b5 13 f0       	push   $0xf013b53a
f0129fd7:	e8 29 62 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0129fdc:	e8 d0 31 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f0129fe1:	89 c2                	mov    %eax,%edx
f0129fe3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0129fe6:	29 c2                	sub    %eax,%edx
f0129fe8:	89 d0                	mov    %edx,%eax
f0129fea:	3d 00 02 00 00       	cmp    $0x200,%eax
f0129fef:	74 17                	je     f012a008 <test_kshrink+0xe62>
f0129ff1:	83 ec 04             	sub    $0x4,%esp
f0129ff4:	68 ec bd 13 f0       	push   $0xf013bdec
f0129ff9:	68 9b 0c 00 00       	push   $0xc9b
f0129ffe:	68 3a b5 13 f0       	push   $0xf013b53a
f012a003:	e8 fd 61 fd ff       	call   f0100205 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f012a008:	e8 a4 31 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a00d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a010:	e8 9a 9d fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a015:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f012a018:	83 ec 0c             	sub    $0xc,%esp
f012a01b:	68 00 b0 3f 00       	push   $0x3fb000
f012a020:	e8 0a de fd ff       	call   f0107e2f <kshrink>
f012a025:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f012a028:	e8 82 9d fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a02d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012a030:	74 19                	je     f012a04b <test_kshrink+0xea5>
f012a032:	68 d4 c2 13 f0       	push   $0xf013c2d4
f012a037:	68 05 c3 13 f0       	push   $0xf013c305
f012a03c:	68 a5 0c 00 00       	push   $0xca5
f012a041:	68 3a b5 13 f0       	push   $0xf013b53a
f012a046:	e8 ba 61 fd ff       	call   f0100205 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f012a04b:	e8 61 31 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a050:	89 c2                	mov    %eax,%edx
f012a052:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012a055:	29 c2                	sub    %eax,%edx
f012a057:	89 d0                	mov    %edx,%eax
f012a059:	83 f8 05             	cmp    $0x5,%eax
f012a05c:	74 19                	je     f012a077 <test_kshrink+0xed1>
f012a05e:	68 3c c5 13 f0       	push   $0xf013c53c
f012a063:	68 05 c3 13 f0       	push   $0xf013c305
f012a068:	68 a6 0c 00 00       	push   $0xca6
f012a06d:	68 3a b5 13 f0       	push   $0xf013b53a
f012a072:	e8 8e 61 fd ff       	call   f0100205 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012a077:	83 ec 0c             	sub    $0xc,%esp
f012a07a:	68 98 c2 13 f0       	push   $0xf013c298
f012a07f:	e8 8a 6c fd ff       	call   f0100d0e <cprintf>
f012a084:	83 c4 10             	add    $0x10,%esp

	return 1;
f012a087:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012a08c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012a08f:	5b                   	pop    %ebx
f012a090:	5f                   	pop    %edi
f012a091:	5d                   	pop    %ebp
f012a092:	c3                   	ret    

f012a093 <test_kfreelast>:


int test_kfreelast()
{
f012a093:	55                   	push   %ebp
f012a094:	89 e5                	mov    %esp,%ebp
f012a096:	57                   	push   %edi
f012a097:	53                   	push   %ebx
f012a098:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f012a09e:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f012a0a2:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f012a0a6:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f012a0ac:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f012a0b2:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f012a0b9:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f012a0c0:	e8 ec 30 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a0c5:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f012a0c8:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f012a0ce:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0d3:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0d8:	89 d7                	mov    %edx,%edi
f012a0da:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f012a0dc:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f012a0e2:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0e7:	b8 00 00 00 00       	mov    $0x0,%eax
f012a0ec:	89 d7                	mov    %edx,%edi
f012a0ee:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f012a0f0:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f012a0f6:	b9 14 00 00 00       	mov    $0x14,%ecx
f012a0fb:	b8 00 00 00 00       	mov    $0x0,%eax
f012a100:	89 d7                	mov    %edx,%edi
f012a102:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a104:	e8 a8 30 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a109:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a10c:	e8 9e 9c fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a111:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012a114:	83 ec 0c             	sub    $0xc,%esp
f012a117:	68 00 fc 1f 00       	push   $0x1ffc00
f012a11c:	e8 43 da fd ff       	call   f0107b64 <kmalloc>
f012a121:	83 c4 10             	add    $0x10,%esp
f012a124:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a12a:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012a130:	89 c1                	mov    %eax,%ecx
f012a132:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f012a139:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012a13c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a141:	89 45 c8             	mov    %eax,-0x38(%ebp)
f012a144:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a147:	ba 00 00 00 00       	mov    $0x0,%edx
f012a14c:	f7 75 cc             	divl   -0x34(%ebp)
f012a14f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012a152:	29 d0                	sub    %edx,%eax
f012a154:	89 c3                	mov    %eax,%ebx
f012a156:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012a15d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a162:	0f b6 d0             	movzbl %al,%edx
f012a165:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012a168:	01 d0                	add    %edx,%eax
f012a16a:	48                   	dec    %eax
f012a16b:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012a16e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a171:	ba 00 00 00 00       	mov    $0x0,%edx
f012a176:	f7 75 c4             	divl   -0x3c(%ebp)
f012a179:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012a17c:	29 d0                	sub    %edx,%eax
f012a17e:	01 c3                	add    %eax,%ebx
f012a180:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012a187:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a18c:	0f b6 c0             	movzbl %al,%eax
f012a18f:	c1 e0 04             	shl    $0x4,%eax
f012a192:	89 c2                	mov    %eax,%edx
f012a194:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012a197:	01 d0                	add    %edx,%eax
f012a199:	48                   	dec    %eax
f012a19a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012a19d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a1a0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a1a5:	f7 75 bc             	divl   -0x44(%ebp)
f012a1a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012a1ab:	29 d0                	sub    %edx,%eax
f012a1ad:	01 d8                	add    %ebx,%eax
f012a1af:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012a1b4:	39 c1                	cmp    %eax,%ecx
f012a1b6:	74 17                	je     f012a1cf <test_kfreelast+0x13c>
f012a1b8:	83 ec 04             	sub    $0x4,%esp
f012a1bb:	68 20 b6 13 f0       	push   $0xf013b620
f012a1c0:	68 ca 0c 00 00       	push   $0xcca
f012a1c5:	68 3a b5 13 f0       	push   $0xf013b53a
f012a1ca:	e8 36 60 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a1cf:	e8 db 9b fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a1d4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a1d7:	74 17                	je     f012a1f0 <test_kfreelast+0x15d>
f012a1d9:	83 ec 04             	sub    $0x4,%esp
f012a1dc:	68 54 b5 13 f0       	push   $0xf013b554
f012a1e1:	68 cb 0c 00 00       	push   $0xccb
f012a1e6:	68 3a b5 13 f0       	push   $0xf013b53a
f012a1eb:	e8 15 60 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a1f0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a1f3:	e8 b9 2f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a1f8:	29 c3                	sub    %eax,%ebx
f012a1fa:	89 d8                	mov    %ebx,%eax
f012a1fc:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a201:	74 17                	je     f012a21a <test_kfreelast+0x187>
f012a203:	83 ec 04             	sub    $0x4,%esp
f012a206:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a20b:	68 cc 0c 00 00       	push   $0xccc
f012a210:	68 3a b5 13 f0       	push   $0xf013b53a
f012a215:	e8 eb 5f fd ff       	call   f0100205 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f012a21a:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f012a221:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012a224:	e8 88 2f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a229:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a22c:	e8 7e 9b fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a231:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012a234:	83 ec 0c             	sub    $0xc,%esp
f012a237:	68 00 fc 1f 00       	push   $0x1ffc00
f012a23c:	e8 23 d9 fd ff       	call   f0107b64 <kmalloc>
f012a241:	83 c4 10             	add    $0x10,%esp
f012a244:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a24a:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012a250:	89 c1                	mov    %eax,%ecx
f012a252:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012a259:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012a25c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a261:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012a264:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a267:	ba 00 00 00 00       	mov    $0x0,%edx
f012a26c:	f7 75 b4             	divl   -0x4c(%ebp)
f012a26f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012a272:	29 d0                	sub    %edx,%eax
f012a274:	89 c3                	mov    %eax,%ebx
f012a276:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012a27d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a282:	0f b6 d0             	movzbl %al,%edx
f012a285:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012a288:	01 d0                	add    %edx,%eax
f012a28a:	48                   	dec    %eax
f012a28b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012a28e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a291:	ba 00 00 00 00       	mov    $0x0,%edx
f012a296:	f7 75 ac             	divl   -0x54(%ebp)
f012a299:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012a29c:	29 d0                	sub    %edx,%eax
f012a29e:	01 c3                	add    %eax,%ebx
f012a2a0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012a2a7:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a2ac:	0f b6 c0             	movzbl %al,%eax
f012a2af:	c1 e0 04             	shl    $0x4,%eax
f012a2b2:	89 c2                	mov    %eax,%edx
f012a2b4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012a2b7:	01 d0                	add    %edx,%eax
f012a2b9:	48                   	dec    %eax
f012a2ba:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012a2bd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a2c0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a2c5:	f7 75 a4             	divl   -0x5c(%ebp)
f012a2c8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012a2cb:	29 d0                	sub    %edx,%eax
f012a2cd:	01 d8                	add    %ebx,%eax
f012a2cf:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012a2d4:	39 c1                	cmp    %eax,%ecx
f012a2d6:	74 17                	je     f012a2ef <test_kfreelast+0x25c>
f012a2d8:	83 ec 04             	sub    $0x4,%esp
f012a2db:	68 20 b6 13 f0       	push   $0xf013b620
f012a2e0:	68 d3 0c 00 00       	push   $0xcd3
f012a2e5:	68 3a b5 13 f0       	push   $0xf013b53a
f012a2ea:	e8 16 5f fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a2ef:	e8 bb 9a fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a2f4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2f7:	74 17                	je     f012a310 <test_kfreelast+0x27d>
f012a2f9:	83 ec 04             	sub    $0x4,%esp
f012a2fc:	68 54 b5 13 f0       	push   $0xf013b554
f012a301:	68 d4 0c 00 00       	push   $0xcd4
f012a306:	68 3a b5 13 f0       	push   $0xf013b53a
f012a30b:	e8 f5 5e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a310:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a313:	e8 99 2e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a318:	29 c3                	sub    %eax,%ebx
f012a31a:	89 d8                	mov    %ebx,%eax
f012a31c:	3d 00 02 00 00       	cmp    $0x200,%eax
f012a321:	74 17                	je     f012a33a <test_kfreelast+0x2a7>
f012a323:	83 ec 04             	sub    $0x4,%esp
f012a326:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a32b:	68 d5 0c 00 00       	push   $0xcd5
f012a330:	68 3a b5 13 f0       	push   $0xf013b53a
f012a335:	e8 cb 5e fd ff       	call   f0100205 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012a33a:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f012a341:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a344:	e8 68 2e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a349:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a34c:	e8 5e 9a fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a351:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012a354:	83 ec 0c             	sub    $0xc,%esp
f012a357:	68 00 08 00 00       	push   $0x800
f012a35c:	e8 03 d8 fd ff       	call   f0107b64 <kmalloc>
f012a361:	83 c4 10             	add    $0x10,%esp
f012a364:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a36a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a370:	89 c1                	mov    %eax,%ecx
f012a372:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012a379:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012a37c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a381:	89 45 98             	mov    %eax,-0x68(%ebp)
f012a384:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a387:	ba 00 00 00 00       	mov    $0x0,%edx
f012a38c:	f7 75 9c             	divl   -0x64(%ebp)
f012a38f:	8b 45 98             	mov    -0x68(%ebp),%eax
f012a392:	29 d0                	sub    %edx,%eax
f012a394:	89 c3                	mov    %eax,%ebx
f012a396:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012a39d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a3a2:	0f b6 d0             	movzbl %al,%edx
f012a3a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012a3a8:	01 d0                	add    %edx,%eax
f012a3aa:	48                   	dec    %eax
f012a3ab:	89 45 90             	mov    %eax,-0x70(%ebp)
f012a3ae:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a3b1:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3b6:	f7 75 94             	divl   -0x6c(%ebp)
f012a3b9:	8b 45 90             	mov    -0x70(%ebp),%eax
f012a3bc:	29 d0                	sub    %edx,%eax
f012a3be:	01 c3                	add    %eax,%ebx
f012a3c0:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012a3c7:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a3cc:	0f b6 c0             	movzbl %al,%eax
f012a3cf:	c1 e0 04             	shl    $0x4,%eax
f012a3d2:	89 c2                	mov    %eax,%edx
f012a3d4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012a3d7:	01 d0                	add    %edx,%eax
f012a3d9:	48                   	dec    %eax
f012a3da:	89 45 88             	mov    %eax,-0x78(%ebp)
f012a3dd:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a3e0:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3e5:	f7 75 8c             	divl   -0x74(%ebp)
f012a3e8:	8b 45 88             	mov    -0x78(%ebp),%eax
f012a3eb:	29 d0                	sub    %edx,%eax
f012a3ed:	01 d8                	add    %ebx,%eax
f012a3ef:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012a3f4:	39 c1                	cmp    %eax,%ecx
f012a3f6:	74 17                	je     f012a40f <test_kfreelast+0x37c>
f012a3f8:	83 ec 04             	sub    $0x4,%esp
f012a3fb:	68 20 b6 13 f0       	push   $0xf013b620
f012a400:	68 dc 0c 00 00       	push   $0xcdc
f012a405:	68 3a b5 13 f0       	push   $0xf013b53a
f012a40a:	e8 f6 5d fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a40f:	e8 9b 99 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a414:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a417:	74 17                	je     f012a430 <test_kfreelast+0x39d>
f012a419:	83 ec 04             	sub    $0x4,%esp
f012a41c:	68 54 b5 13 f0       	push   $0xf013b554
f012a421:	68 dd 0c 00 00       	push   $0xcdd
f012a426:	68 3a b5 13 f0       	push   $0xf013b53a
f012a42b:	e8 d5 5d fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a430:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a433:	e8 79 2d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a438:	29 c3                	sub    %eax,%ebx
f012a43a:	89 d8                	mov    %ebx,%eax
f012a43c:	83 f8 01             	cmp    $0x1,%eax
f012a43f:	74 17                	je     f012a458 <test_kfreelast+0x3c5>
f012a441:	83 ec 04             	sub    $0x4,%esp
f012a444:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a449:	68 de 0c 00 00       	push   $0xcde
f012a44e:	68 3a b5 13 f0       	push   $0xf013b53a
f012a453:	e8 ad 5d fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012a458:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f012a45f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f012a462:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012a468:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012a46b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a472:	eb 0e                	jmp    f012a482 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f012a474:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a477:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a47a:	01 d0                	add    %edx,%eax
f012a47c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012a47f:	ff 45 f4             	incl   -0xc(%ebp)
f012a482:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012a488:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a48b:	7f e7                	jg     f012a474 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012a48d:	e8 1f 2d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a492:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a495:	e8 15 99 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a49a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f012a49d:	83 ec 0c             	sub    $0xc,%esp
f012a4a0:	68 00 08 00 00       	push   $0x800
f012a4a5:	e8 ba d6 fd ff       	call   f0107b64 <kmalloc>
f012a4aa:	83 c4 10             	add    $0x10,%esp
f012a4ad:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a4b3:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a4b9:	89 c1                	mov    %eax,%ecx
f012a4bb:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012a4c2:	8b 45 80             	mov    -0x80(%ebp),%eax
f012a4c5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a4ca:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012a4d0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a4d6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a4db:	f7 75 80             	divl   -0x80(%ebp)
f012a4de:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012a4e4:	29 d0                	sub    %edx,%eax
f012a4e6:	89 c3                	mov    %eax,%ebx
f012a4e8:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012a4ef:	10 00 00 
f012a4f2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a4f7:	0f b6 d0             	movzbl %al,%edx
f012a4fa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012a500:	01 d0                	add    %edx,%eax
f012a502:	48                   	dec    %eax
f012a503:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012a509:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a50f:	ba 00 00 00 00       	mov    $0x0,%edx
f012a514:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012a51a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012a520:	29 d0                	sub    %edx,%eax
f012a522:	01 c3                	add    %eax,%ebx
f012a524:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012a52b:	10 00 00 
f012a52e:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a533:	0f b6 c0             	movzbl %al,%eax
f012a536:	c1 e0 04             	shl    $0x4,%eax
f012a539:	89 c2                	mov    %eax,%edx
f012a53b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012a541:	01 d0                	add    %edx,%eax
f012a543:	48                   	dec    %eax
f012a544:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012a54a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a550:	ba 00 00 00 00       	mov    $0x0,%edx
f012a555:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012a55b:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012a561:	29 d0                	sub    %edx,%eax
f012a563:	01 d8                	add    %ebx,%eax
f012a565:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012a56a:	39 c1                	cmp    %eax,%ecx
f012a56c:	74 17                	je     f012a585 <test_kfreelast+0x4f2>
f012a56e:	83 ec 04             	sub    $0x4,%esp
f012a571:	68 20 b6 13 f0       	push   $0xf013b620
f012a576:	68 ea 0c 00 00       	push   $0xcea
f012a57b:	68 3a b5 13 f0       	push   $0xf013b53a
f012a580:	e8 80 5c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a585:	e8 25 98 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a58a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a58d:	74 17                	je     f012a5a6 <test_kfreelast+0x513>
f012a58f:	83 ec 04             	sub    $0x4,%esp
f012a592:	68 54 b5 13 f0       	push   $0xf013b554
f012a597:	68 eb 0c 00 00       	push   $0xceb
f012a59c:	68 3a b5 13 f0       	push   $0xf013b53a
f012a5a1:	e8 5f 5c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a5a6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a5a9:	e8 03 2c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a5ae:	29 c3                	sub    %eax,%ebx
f012a5b0:	89 d8                	mov    %ebx,%eax
f012a5b2:	83 f8 01             	cmp    $0x1,%eax
f012a5b5:	74 17                	je     f012a5ce <test_kfreelast+0x53b>
f012a5b7:	83 ec 04             	sub    $0x4,%esp
f012a5ba:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a5bf:	68 ec 0c 00 00       	push   $0xcec
f012a5c4:	68 3a b5 13 f0       	push   $0xf013b53a
f012a5c9:	e8 37 5c fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012a5ce:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012a5d5:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012a5d8:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012a5de:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012a5e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a5e8:	eb 0e                	jmp    f012a5f8 <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012a5ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a5ed:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a5f0:	01 d0                	add    %edx,%eax
f012a5f2:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012a5f5:	ff 45 f4             	incl   -0xc(%ebp)
f012a5f8:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012a5fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a601:	7f e7                	jg     f012a5ea <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f012a603:	e8 a9 2b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a608:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a60b:	e8 9f 97 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a610:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f012a613:	83 ec 0c             	sub    $0xc,%esp
f012a616:	68 00 1c 00 00       	push   $0x1c00
f012a61b:	e8 44 d5 fd ff       	call   f0107b64 <kmalloc>
f012a620:	83 c4 10             	add    $0x10,%esp
f012a623:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a629:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a62f:	89 c1                	mov    %eax,%ecx
f012a631:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012a638:	10 00 00 
f012a63b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012a641:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a646:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f012a64c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a652:	ba 00 00 00 00       	mov    $0x0,%edx
f012a657:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012a65d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012a663:	29 d0                	sub    %edx,%eax
f012a665:	89 c3                	mov    %eax,%ebx
f012a667:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012a66e:	10 00 00 
f012a671:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a676:	0f b6 d0             	movzbl %al,%edx
f012a679:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012a67f:	01 d0                	add    %edx,%eax
f012a681:	48                   	dec    %eax
f012a682:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012a688:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a68e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a693:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012a699:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012a69f:	29 d0                	sub    %edx,%eax
f012a6a1:	01 c3                	add    %eax,%ebx
f012a6a3:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012a6aa:	10 00 00 
f012a6ad:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a6b2:	0f b6 c0             	movzbl %al,%eax
f012a6b5:	c1 e0 04             	shl    $0x4,%eax
f012a6b8:	89 c2                	mov    %eax,%edx
f012a6ba:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012a6c0:	01 d0                	add    %edx,%eax
f012a6c2:	48                   	dec    %eax
f012a6c3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012a6c9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a6cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012a6d4:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012a6da:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012a6e0:	29 d0                	sub    %edx,%eax
f012a6e2:	01 d8                	add    %ebx,%eax
f012a6e4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012a6e9:	39 c1                	cmp    %eax,%ecx
f012a6eb:	74 17                	je     f012a704 <test_kfreelast+0x671>
f012a6ed:	83 ec 04             	sub    $0x4,%esp
f012a6f0:	68 20 b6 13 f0       	push   $0xf013b620
f012a6f5:	68 f8 0c 00 00       	push   $0xcf8
f012a6fa:	68 3a b5 13 f0       	push   $0xf013b53a
f012a6ff:	e8 01 5b fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a704:	e8 a6 96 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a709:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a70c:	74 17                	je     f012a725 <test_kfreelast+0x692>
f012a70e:	83 ec 04             	sub    $0x4,%esp
f012a711:	68 54 b5 13 f0       	push   $0xf013b554
f012a716:	68 f9 0c 00 00       	push   $0xcf9
f012a71b:	68 3a b5 13 f0       	push   $0xf013b53a
f012a720:	e8 e0 5a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a725:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a728:	e8 84 2a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a72d:	29 c3                	sub    %eax,%ebx
f012a72f:	89 d8                	mov    %ebx,%eax
f012a731:	83 f8 02             	cmp    $0x2,%eax
f012a734:	74 17                	je     f012a74d <test_kfreelast+0x6ba>
f012a736:	83 ec 04             	sub    $0x4,%esp
f012a739:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a73e:	68 fa 0c 00 00       	push   $0xcfa
f012a743:	68 3a b5 13 f0       	push   $0xf013b53a
f012a748:	e8 b8 5a fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012a74d:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f012a754:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012a757:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012a75d:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012a760:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a767:	eb 0e                	jmp    f012a777 <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f012a769:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a76c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a76f:	01 d0                	add    %edx,%eax
f012a771:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012a774:	ff 45 f4             	incl   -0xc(%ebp)
f012a777:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012a77d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a780:	7f e7                	jg     f012a769 <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a782:	e8 2a 2a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a787:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a78a:	e8 20 96 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a78f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012a792:	83 ec 0c             	sub    $0xc,%esp
f012a795:	68 00 fc 2f 00       	push   $0x2ffc00
f012a79a:	e8 c5 d3 fd ff       	call   f0107b64 <kmalloc>
f012a79f:	83 c4 10             	add    $0x10,%esp
f012a7a2:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a7a8:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a7ae:	89 c1                	mov    %eax,%ecx
f012a7b0:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012a7b7:	10 00 00 
f012a7ba:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012a7c0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a7c5:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012a7cb:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a7d1:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7d6:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012a7dc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012a7e2:	29 d0                	sub    %edx,%eax
f012a7e4:	89 c3                	mov    %eax,%ebx
f012a7e6:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012a7ed:	10 00 00 
f012a7f0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a7f5:	0f b6 d0             	movzbl %al,%edx
f012a7f8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012a7fe:	01 d0                	add    %edx,%eax
f012a800:	48                   	dec    %eax
f012a801:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012a807:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a80d:	ba 00 00 00 00       	mov    $0x0,%edx
f012a812:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012a818:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012a81e:	29 d0                	sub    %edx,%eax
f012a820:	01 c3                	add    %eax,%ebx
f012a822:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012a829:	10 00 00 
f012a82c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a831:	0f b6 c0             	movzbl %al,%eax
f012a834:	c1 e0 04             	shl    $0x4,%eax
f012a837:	89 c2                	mov    %eax,%edx
f012a839:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012a83f:	01 d0                	add    %edx,%eax
f012a841:	48                   	dec    %eax
f012a842:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012a848:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a84e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a853:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012a859:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012a85f:	29 d0                	sub    %edx,%eax
f012a861:	01 d8                	add    %ebx,%eax
f012a863:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012a868:	39 c1                	cmp    %eax,%ecx
f012a86a:	74 17                	je     f012a883 <test_kfreelast+0x7f0>
f012a86c:	83 ec 04             	sub    $0x4,%esp
f012a86f:	68 20 b6 13 f0       	push   $0xf013b620
f012a874:	68 06 0d 00 00       	push   $0xd06
f012a879:	68 3a b5 13 f0       	push   $0xf013b53a
f012a87e:	e8 82 59 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a883:	e8 27 95 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a888:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a88b:	74 17                	je     f012a8a4 <test_kfreelast+0x811>
f012a88d:	83 ec 04             	sub    $0x4,%esp
f012a890:	68 54 b5 13 f0       	push   $0xf013b554
f012a895:	68 07 0d 00 00       	push   $0xd07
f012a89a:	68 3a b5 13 f0       	push   $0xf013b53a
f012a89f:	e8 61 59 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a8a4:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a8a7:	e8 05 29 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a8ac:	29 c3                	sub    %eax,%ebx
f012a8ae:	89 d8                	mov    %ebx,%eax
f012a8b0:	3d 00 03 00 00       	cmp    $0x300,%eax
f012a8b5:	74 17                	je     f012a8ce <test_kfreelast+0x83b>
f012a8b7:	83 ec 04             	sub    $0x4,%esp
f012a8ba:	68 bc b5 13 f0       	push   $0xf013b5bc
f012a8bf:	68 08 0d 00 00       	push   $0xd08
f012a8c4:	68 3a b5 13 f0       	push   $0xf013b53a
f012a8c9:	e8 37 59 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012a8ce:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012a8d5:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012a8d8:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012a8de:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012a8e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8e8:	eb 0e                	jmp    f012a8f8 <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012a8ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a8ed:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8f0:	01 d0                	add    %edx,%eax
f012a8f2:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012a8f5:	ff 45 f4             	incl   -0xc(%ebp)
f012a8f8:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012a8fe:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a901:	7f e7                	jg     f012a8ea <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f012a903:	e8 a9 28 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012a908:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a90b:	e8 9f 94 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012a910:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f012a913:	83 ec 0c             	sub    $0xc,%esp
f012a916:	68 00 fc 5f 00       	push   $0x5ffc00
f012a91b:	e8 44 d2 fd ff       	call   f0107b64 <kmalloc>
f012a920:	83 c4 10             	add    $0x10,%esp
f012a923:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a929:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012a92f:	89 c1                	mov    %eax,%ecx
f012a931:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012a938:	10 00 00 
f012a93b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012a941:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a946:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f012a94c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a952:	ba 00 00 00 00       	mov    $0x0,%edx
f012a957:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012a95d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012a963:	29 d0                	sub    %edx,%eax
f012a965:	89 c3                	mov    %eax,%ebx
f012a967:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012a96e:	10 00 00 
f012a971:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a976:	0f b6 d0             	movzbl %al,%edx
f012a979:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012a97f:	01 d0                	add    %edx,%eax
f012a981:	48                   	dec    %eax
f012a982:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012a988:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a98e:	ba 00 00 00 00       	mov    $0x0,%edx
f012a993:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012a999:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012a99f:	29 d0                	sub    %edx,%eax
f012a9a1:	01 c3                	add    %eax,%ebx
f012a9a3:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f012a9aa:	10 00 00 
f012a9ad:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012a9b2:	0f b6 c0             	movzbl %al,%eax
f012a9b5:	c1 e0 04             	shl    $0x4,%eax
f012a9b8:	89 c2                	mov    %eax,%edx
f012a9ba:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012a9c0:	01 d0                	add    %edx,%eax
f012a9c2:	48                   	dec    %eax
f012a9c3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012a9c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a9cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9d4:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012a9da:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012a9e0:	29 d0                	sub    %edx,%eax
f012a9e2:	01 d8                	add    %ebx,%eax
f012a9e4:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a9e9:	39 c1                	cmp    %eax,%ecx
f012a9eb:	74 17                	je     f012aa04 <test_kfreelast+0x971>
f012a9ed:	83 ec 04             	sub    $0x4,%esp
f012a9f0:	68 20 b6 13 f0       	push   $0xf013b620
f012a9f5:	68 14 0d 00 00       	push   $0xd14
f012a9fa:	68 3a b5 13 f0       	push   $0xf013b53a
f012a9ff:	e8 01 58 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012aa04:	e8 a6 93 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012aa09:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aa0c:	74 17                	je     f012aa25 <test_kfreelast+0x992>
f012aa0e:	83 ec 04             	sub    $0x4,%esp
f012aa11:	68 54 b5 13 f0       	push   $0xf013b554
f012aa16:	68 15 0d 00 00       	push   $0xd15
f012aa1b:	68 3a b5 13 f0       	push   $0xf013b53a
f012aa20:	e8 e0 57 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012aa25:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aa28:	e8 84 27 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012aa2d:	29 c3                	sub    %eax,%ebx
f012aa2f:	89 d8                	mov    %ebx,%eax
f012aa31:	3d 00 06 00 00       	cmp    $0x600,%eax
f012aa36:	74 17                	je     f012aa4f <test_kfreelast+0x9bc>
f012aa38:	83 ec 04             	sub    $0x4,%esp
f012aa3b:	68 bc b5 13 f0       	push   $0xf013b5bc
f012aa40:	68 16 0d 00 00       	push   $0xd16
f012aa45:	68 3a b5 13 f0       	push   $0xf013b53a
f012aa4a:	e8 b6 57 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f012aa4f:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f012aa56:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa59:	e8 53 27 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012aa5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aa61:	e8 49 93 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012aa66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012aa69:	83 ec 0c             	sub    $0xc,%esp
f012aa6c:	68 00 38 00 00       	push   $0x3800
f012aa71:	e8 ee d0 fd ff       	call   f0107b64 <kmalloc>
f012aa76:	83 c4 10             	add    $0x10,%esp
f012aa79:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012aa7f:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aa85:	89 c1                	mov    %eax,%ecx
f012aa87:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f012aa8e:	10 00 00 
f012aa91:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012aa97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012aa9c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f012aaa2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012aaa8:	ba 00 00 00 00       	mov    $0x0,%edx
f012aaad:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f012aab3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012aab9:	29 d0                	sub    %edx,%eax
f012aabb:	89 c3                	mov    %eax,%ebx
f012aabd:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f012aac4:	10 00 00 
f012aac7:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012aacc:	0f b6 d0             	movzbl %al,%edx
f012aacf:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012aad5:	01 d0                	add    %edx,%eax
f012aad7:	48                   	dec    %eax
f012aad8:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f012aade:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012aae4:	ba 00 00 00 00       	mov    $0x0,%edx
f012aae9:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f012aaef:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012aaf5:	29 d0                	sub    %edx,%eax
f012aaf7:	01 c3                	add    %eax,%ebx
f012aaf9:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f012ab00:	10 00 00 
f012ab03:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012ab08:	0f b6 c0             	movzbl %al,%eax
f012ab0b:	c1 e0 04             	shl    $0x4,%eax
f012ab0e:	89 c2                	mov    %eax,%edx
f012ab10:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ab16:	01 d0                	add    %edx,%eax
f012ab18:	48                   	dec    %eax
f012ab19:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f012ab1f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ab25:	ba 00 00 00 00       	mov    $0x0,%edx
f012ab2a:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f012ab30:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ab36:	29 d0                	sub    %edx,%eax
f012ab38:	01 d8                	add    %ebx,%eax
f012ab3a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f012ab3f:	39 c1                	cmp    %eax,%ecx
f012ab41:	74 17                	je     f012ab5a <test_kfreelast+0xac7>
f012ab43:	83 ec 04             	sub    $0x4,%esp
f012ab46:	68 20 b6 13 f0       	push   $0xf013b620
f012ab4b:	68 1d 0d 00 00       	push   $0xd1d
f012ab50:	68 3a b5 13 f0       	push   $0xf013b53a
f012ab55:	e8 ab 56 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ab5a:	e8 50 92 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012ab5f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ab62:	74 17                	je     f012ab7b <test_kfreelast+0xae8>
f012ab64:	83 ec 04             	sub    $0x4,%esp
f012ab67:	68 54 b5 13 f0       	push   $0xf013b554
f012ab6c:	68 1e 0d 00 00       	push   $0xd1e
f012ab71:	68 3a b5 13 f0       	push   $0xf013b53a
f012ab76:	e8 8a 56 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012ab7b:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012ab7e:	e8 2e 26 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ab83:	29 c3                	sub    %eax,%ebx
f012ab85:	89 d8                	mov    %ebx,%eax
f012ab87:	83 f8 04             	cmp    $0x4,%eax
f012ab8a:	74 17                	je     f012aba3 <test_kfreelast+0xb10>
f012ab8c:	83 ec 04             	sub    $0x4,%esp
f012ab8f:	68 bc b5 13 f0       	push   $0xf013b5bc
f012ab94:	68 1f 0d 00 00       	push   $0xd1f
f012ab99:	68 3a b5 13 f0       	push   $0xf013b53a
f012ab9e:	e8 62 56 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f012aba3:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f012abaa:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f012abad:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012abb3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012abb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012abbd:	eb 0e                	jmp    f012abcd <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f012abbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012abc2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012abc5:	01 d0                	add    %edx,%eax
f012abc7:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012abca:	ff 45 f4             	incl   -0xc(%ebp)
f012abcd:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012abd3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012abd6:	7f e7                	jg     f012abbf <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012abd8:	e8 d4 25 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012abdd:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012abe3:	e8 c7 91 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012abe8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f012abee:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012abf4:	83 ec 0c             	sub    $0xc,%esp
f012abf7:	50                   	push   %eax
f012abf8:	e8 6f d0 fd ff       	call   f0107c6c <kfree>
f012abfd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac00:	e8 aa 91 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012ac05:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ac0b:	74 17                	je     f012ac24 <test_kfreelast+0xb91>
f012ac0d:	83 ec 04             	sub    $0x4,%esp
f012ac10:	68 54 b5 13 f0       	push   $0xf013b554
f012ac15:	68 2e 0d 00 00       	push   $0xd2e
f012ac1a:	68 3a b5 13 f0       	push   $0xf013b53a
f012ac1f:	e8 e1 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f012ac24:	e8 88 25 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ac29:	89 c2                	mov    %eax,%edx
f012ac2b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ac31:	29 c2                	sub    %eax,%edx
f012ac33:	89 d0                	mov    %edx,%eax
f012ac35:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ac3a:	74 17                	je     f012ac53 <test_kfreelast+0xbc0>
f012ac3c:	83 ec 04             	sub    $0x4,%esp
f012ac3f:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012ac44:	68 2f 0d 00 00       	push   $0xd2f
f012ac49:	68 3a b5 13 f0       	push   $0xf013b53a
f012ac4e:	e8 b2 55 fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac53:	e8 59 25 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ac58:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac5e:	e8 4c 91 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012ac63:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f012ac69:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012ac6f:	83 ec 0c             	sub    $0xc,%esp
f012ac72:	50                   	push   %eax
f012ac73:	e8 f4 cf fd ff       	call   f0107c6c <kfree>
f012ac78:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012ac7b:	e8 2f 91 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012ac80:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ac86:	74 17                	je     f012ac9f <test_kfreelast+0xc0c>
f012ac88:	83 ec 04             	sub    $0x4,%esp
f012ac8b:	68 54 b5 13 f0       	push   $0xf013b554
f012ac90:	68 35 0d 00 00       	push   $0xd35
f012ac95:	68 3a b5 13 f0       	push   $0xf013b53a
f012ac9a:	e8 66 55 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f012ac9f:	e8 0d 25 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012aca4:	89 c2                	mov    %eax,%edx
f012aca6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012acac:	29 c2                	sub    %eax,%edx
f012acae:	89 d0                	mov    %edx,%eax
f012acb0:	3d 00 02 00 00       	cmp    $0x200,%eax
f012acb5:	74 17                	je     f012acce <test_kfreelast+0xc3b>
f012acb7:	83 ec 04             	sub    $0x4,%esp
f012acba:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012acbf:	68 36 0d 00 00       	push   $0xd36
f012acc4:	68 3a b5 13 f0       	push   $0xf013b53a
f012acc9:	e8 37 55 fd ff       	call   f0100205 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f012acce:	e8 de 24 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012acd3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012acd9:	e8 d1 90 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012acde:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f012ace4:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012acea:	83 ec 0c             	sub    $0xc,%esp
f012aced:	50                   	push   %eax
f012acee:	e8 79 cf fd ff       	call   f0107c6c <kfree>
f012acf3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012acf6:	e8 b4 90 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012acfb:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f012ad01:	74 17                	je     f012ad1a <test_kfreelast+0xc87>
f012ad03:	83 ec 04             	sub    $0x4,%esp
f012ad06:	68 54 b5 13 f0       	push   $0xf013b554
f012ad0b:	68 3c 0d 00 00       	push   $0xd3c
f012ad10:	68 3a b5 13 f0       	push   $0xf013b53a
f012ad15:	e8 eb 54 fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012ad1a:	e8 92 24 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ad1f:	89 c2                	mov    %eax,%edx
f012ad21:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ad27:	29 c2                	sub    %eax,%edx
f012ad29:	89 d0                	mov    %edx,%eax
f012ad2b:	3d 00 06 00 00       	cmp    $0x600,%eax
f012ad30:	74 17                	je     f012ad49 <test_kfreelast+0xcb6>
f012ad32:	83 ec 04             	sub    $0x4,%esp
f012ad35:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012ad3a:	68 3d 0d 00 00       	push   $0xd3d
f012ad3f:	68 3a b5 13 f0       	push   $0xf013b53a
f012ad44:	e8 bc 54 fd ff       	call   f0100205 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012ad49:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012ad4f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012ad52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ad59:	eb 1e                	jmp    f012ad79 <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f012ad5b:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ad61:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ad64:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ad67:	01 c8                	add    %ecx,%eax
f012ad69:	8a 00                	mov    (%eax),%al
f012ad6b:	0f be c0             	movsbl %al,%eax
f012ad6e:	01 d0                	add    %edx,%eax
f012ad70:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012ad76:	ff 45 f4             	incl   -0xc(%ebp)
f012ad79:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ad7f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ad82:	7f d7                	jg     f012ad5b <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f012ad84:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012ad8a:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012ad90:	01 c0                	add    %eax,%eax
f012ad92:	39 c2                	cmp    %eax,%edx
f012ad94:	74 17                	je     f012adad <test_kfreelast+0xd1a>
f012ad96:	83 ec 04             	sub    $0x4,%esp
f012ad99:	68 20 bd 13 f0       	push   $0xf013bd20
f012ad9e:	68 48 0d 00 00       	push   $0xd48
f012ada3:	68 3a b5 13 f0       	push   $0xf013b53a
f012ada8:	e8 58 54 fd ff       	call   f0100205 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f012adad:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012adb3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012adb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012adbd:	eb 1e                	jmp    f012addd <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f012adbf:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012adc5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012adc8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012adcb:	01 c8                	add    %ecx,%eax
f012adcd:	8a 00                	mov    (%eax),%al
f012adcf:	0f be c0             	movsbl %al,%eax
f012add2:	01 d0                	add    %edx,%eax
f012add4:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012adda:	ff 45 f4             	incl   -0xc(%ebp)
f012addd:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012ade3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ade6:	7f d7                	jg     f012adbf <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012ade8:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012adee:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012adf4:	89 c1                	mov    %eax,%ecx
f012adf6:	01 c9                	add    %ecx,%ecx
f012adf8:	01 c8                	add    %ecx,%eax
f012adfa:	39 c2                	cmp    %eax,%edx
f012adfc:	74 17                	je     f012ae15 <test_kfreelast+0xd82>
f012adfe:	83 ec 04             	sub    $0x4,%esp
f012ae01:	68 20 bd 13 f0       	push   $0xf013bd20
f012ae06:	68 50 0d 00 00       	push   $0xd50
f012ae0b:	68 3a b5 13 f0       	push   $0xf013b53a
f012ae10:	e8 f0 53 fd ff       	call   f0100205 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012ae15:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012ae1b:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f012ae1e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae25:	eb 1e                	jmp    f012ae45 <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f012ae27:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012ae2d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae30:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae33:	01 c8                	add    %ecx,%eax
f012ae35:	8a 00                	mov    (%eax),%al
f012ae37:	0f be c0             	movsbl %al,%eax
f012ae3a:	01 d0                	add    %edx,%eax
f012ae3c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f012ae42:	ff 45 f4             	incl   -0xc(%ebp)
f012ae45:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012ae4b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012ae4e:	7f d7                	jg     f012ae27 <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f012ae50:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f012ae56:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f012ae5c:	c1 e2 02             	shl    $0x2,%edx
f012ae5f:	39 d0                	cmp    %edx,%eax
f012ae61:	74 17                	je     f012ae7a <test_kfreelast+0xde7>
f012ae63:	83 ec 04             	sub    $0x4,%esp
f012ae66:	68 20 bd 13 f0       	push   $0xf013bd20
f012ae6b:	68 58 0d 00 00       	push   $0xd58
f012ae70:	68 3a b5 13 f0       	push   $0xf013b53a
f012ae75:	e8 8b 53 fd ff       	call   f0100205 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012ae7a:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012ae80:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f012ae83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ae8a:	eb 1e                	jmp    f012aeaa <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f012ae8c:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f012ae92:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ae95:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ae98:	01 c8                	add    %ecx,%eax
f012ae9a:	8a 00                	mov    (%eax),%al
f012ae9c:	0f be c0             	movsbl %al,%eax
f012ae9f:	01 d0                	add    %edx,%eax
f012aea1:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012aea7:	ff 45 f4             	incl   -0xc(%ebp)
f012aeaa:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012aeb0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aeb3:	7f d7                	jg     f012ae8c <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012aeb5:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f012aebb:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012aec1:	89 d0                	mov    %edx,%eax
f012aec3:	c1 e0 02             	shl    $0x2,%eax
f012aec6:	01 d0                	add    %edx,%eax
f012aec8:	39 c1                	cmp    %eax,%ecx
f012aeca:	74 17                	je     f012aee3 <test_kfreelast+0xe50>
f012aecc:	83 ec 04             	sub    $0x4,%esp
f012aecf:	68 20 bd 13 f0       	push   $0xf013bd20
f012aed4:	68 60 0d 00 00       	push   $0xd60
f012aed9:	68 3a b5 13 f0       	push   $0xf013b53a
f012aede:	e8 22 53 fd ff       	call   f0100205 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f012aee3:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012aee9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012aeec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aef3:	eb 1e                	jmp    f012af13 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f012aef5:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f012aefb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aefe:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af01:	01 c8                	add    %ecx,%eax
f012af03:	8a 00                	mov    (%eax),%al
f012af05:	0f be c0             	movsbl %al,%eax
f012af08:	01 d0                	add    %edx,%eax
f012af0a:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012af10:	ff 45 f4             	incl   -0xc(%ebp)
f012af13:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012af19:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012af1c:	7f d7                	jg     f012aef5 <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f012af1e:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f012af24:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f012af2a:	89 d0                	mov    %edx,%eax
f012af2c:	01 c0                	add    %eax,%eax
f012af2e:	01 d0                	add    %edx,%eax
f012af30:	01 c0                	add    %eax,%eax
f012af32:	01 d0                	add    %edx,%eax
f012af34:	39 c1                	cmp    %eax,%ecx
f012af36:	74 17                	je     f012af4f <test_kfreelast+0xebc>
f012af38:	83 ec 04             	sub    $0x4,%esp
f012af3b:	68 20 bd 13 f0       	push   $0xf013bd20
f012af40:	68 68 0d 00 00       	push   $0xd68
f012af45:	68 3a b5 13 f0       	push   $0xf013b53a
f012af4a:	e8 b6 52 fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f012af4f:	e8 5d 22 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012af54:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af57:	e8 53 8e fd ff       	call   f0103daf <pf_calculate_free_frames>
f012af5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f012af5f:	83 ec 0c             	sub    $0xc,%esp
f012af62:	68 00 50 00 00       	push   $0x5000
f012af67:	e8 f8 cb fd ff       	call   f0107b64 <kmalloc>
f012af6c:	83 c4 10             	add    $0x10,%esp
f012af6f:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012af75:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012af7b:	89 c1                	mov    %eax,%ecx
f012af7d:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f012af84:	10 00 00 
f012af87:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012af8d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012af92:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f012af98:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012af9e:	ba 00 00 00 00       	mov    $0x0,%edx
f012afa3:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f012afa9:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012afaf:	29 d0                	sub    %edx,%eax
f012afb1:	89 c3                	mov    %eax,%ebx
f012afb3:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012afba:	10 00 00 
f012afbd:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012afc2:	0f b6 d0             	movzbl %al,%edx
f012afc5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012afcb:	01 d0                	add    %edx,%eax
f012afcd:	48                   	dec    %eax
f012afce:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012afd4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012afda:	ba 00 00 00 00       	mov    $0x0,%edx
f012afdf:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f012afe5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f012afeb:	29 d0                	sub    %edx,%eax
f012afed:	01 c3                	add    %eax,%ebx
f012afef:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f012aff6:	10 00 00 
f012aff9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012affe:	0f b6 c0             	movzbl %al,%eax
f012b001:	c1 e0 04             	shl    $0x4,%eax
f012b004:	89 c2                	mov    %eax,%edx
f012b006:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012b00c:	01 d0                	add    %edx,%eax
f012b00e:	48                   	dec    %eax
f012b00f:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012b015:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012b01b:	ba 00 00 00 00       	mov    $0x0,%edx
f012b020:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012b026:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012b02c:	29 d0                	sub    %edx,%eax
f012b02e:	01 d8                	add    %ebx,%eax
f012b030:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012b035:	39 c1                	cmp    %eax,%ecx
f012b037:	74 17                	je     f012b050 <test_kfreelast+0xfbd>
f012b039:	83 ec 04             	sub    $0x4,%esp
f012b03c:	68 20 b6 13 f0       	push   $0xf013b620
f012b041:	68 71 0d 00 00       	push   $0xd71
f012b046:	68 3a b5 13 f0       	push   $0xf013b53a
f012b04b:	e8 b5 51 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b050:	e8 5a 8d fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b055:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b058:	74 17                	je     f012b071 <test_kfreelast+0xfde>
f012b05a:	83 ec 04             	sub    $0x4,%esp
f012b05d:	68 54 b5 13 f0       	push   $0xf013b554
f012b062:	68 72 0d 00 00       	push   $0xd72
f012b067:	68 3a b5 13 f0       	push   $0xf013b53a
f012b06c:	e8 94 51 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b071:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b074:	e8 38 21 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b079:	29 c3                	sub    %eax,%ebx
f012b07b:	89 d8                	mov    %ebx,%eax
f012b07d:	83 f8 05             	cmp    $0x5,%eax
f012b080:	74 17                	je     f012b099 <test_kfreelast+0x1006>
f012b082:	83 ec 04             	sub    $0x4,%esp
f012b085:	68 bc b5 13 f0       	push   $0xf013b5bc
f012b08a:	68 73 0d 00 00       	push   $0xd73
f012b08f:	68 3a b5 13 f0       	push   $0xf013b53a
f012b094:	e8 6c 51 fd ff       	call   f0100205 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012b099:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f012b0a0:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f012b0a3:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b0a9:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f012b0ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b0b3:	eb 0e                	jmp    f012b0c3 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f012b0b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b0b8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b0bb:	01 d0                	add    %edx,%eax
f012b0bd:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f012b0c0:	ff 45 f4             	incl   -0xc(%ebp)
f012b0c3:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f012b0c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b0cc:	7f e7                	jg     f012b0b5 <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b0ce:	e8 de 20 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b0d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0d6:	e8 d4 8c fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b0db:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f012b0de:	83 ec 0c             	sub    $0xc,%esp
f012b0e1:	68 00 00 10 00       	push   $0x100000
f012b0e6:	e8 79 ca fd ff       	call   f0107b64 <kmalloc>
f012b0eb:	83 c4 10             	add    $0x10,%esp
f012b0ee:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b0f4:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b0fa:	89 c1                	mov    %eax,%ecx
f012b0fc:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f012b103:	10 00 00 
f012b106:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012b10c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b111:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f012b117:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b11d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b122:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f012b128:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012b12e:	29 d0                	sub    %edx,%eax
f012b130:	89 c3                	mov    %eax,%ebx
f012b132:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012b139:	10 00 00 
f012b13c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012b141:	0f b6 d0             	movzbl %al,%edx
f012b144:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012b14a:	01 d0                	add    %edx,%eax
f012b14c:	48                   	dec    %eax
f012b14d:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012b153:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b159:	ba 00 00 00 00       	mov    $0x0,%edx
f012b15e:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f012b164:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012b16a:	29 d0                	sub    %edx,%eax
f012b16c:	01 c3                	add    %eax,%ebx
f012b16e:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f012b175:	10 00 00 
f012b178:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012b17d:	0f b6 c0             	movzbl %al,%eax
f012b180:	c1 e0 04             	shl    $0x4,%eax
f012b183:	89 c2                	mov    %eax,%edx
f012b185:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012b18b:	01 d0                	add    %edx,%eax
f012b18d:	48                   	dec    %eax
f012b18e:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f012b194:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b19a:	ba 00 00 00 00       	mov    $0x0,%edx
f012b19f:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f012b1a5:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012b1ab:	29 d0                	sub    %edx,%eax
f012b1ad:	01 d8                	add    %ebx,%eax
f012b1af:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b1b4:	39 c1                	cmp    %eax,%ecx
f012b1b6:	74 17                	je     f012b1cf <test_kfreelast+0x113c>
f012b1b8:	83 ec 04             	sub    $0x4,%esp
f012b1bb:	68 20 b6 13 f0       	push   $0xf013b620
f012b1c0:	68 7f 0d 00 00       	push   $0xd7f
f012b1c5:	68 3a b5 13 f0       	push   $0xf013b53a
f012b1ca:	e8 36 50 fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b1cf:	e8 db 8b fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b1d4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b1d7:	74 17                	je     f012b1f0 <test_kfreelast+0x115d>
f012b1d9:	83 ec 04             	sub    $0x4,%esp
f012b1dc:	68 54 b5 13 f0       	push   $0xf013b554
f012b1e1:	68 80 0d 00 00       	push   $0xd80
f012b1e6:	68 3a b5 13 f0       	push   $0xf013b53a
f012b1eb:	e8 15 50 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b1f0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b1f3:	e8 b9 1f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b1f8:	29 c3                	sub    %eax,%ebx
f012b1fa:	89 d8                	mov    %ebx,%eax
f012b1fc:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b201:	74 17                	je     f012b21a <test_kfreelast+0x1187>
f012b203:	83 ec 04             	sub    $0x4,%esp
f012b206:	68 bc b5 13 f0       	push   $0xf013b5bc
f012b20b:	68 81 0d 00 00       	push   $0xd81
f012b210:	68 3a b5 13 f0       	push   $0xf013b53a
f012b215:	e8 eb 4f fd ff       	call   f0100205 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012b21a:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f012b221:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f012b224:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b22a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f012b22d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b234:	eb 0e                	jmp    f012b244 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f012b236:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b239:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b23c:	01 d0                	add    %edx,%eax
f012b23e:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f012b241:	ff 45 f4             	incl   -0xc(%ebp)
f012b244:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f012b24a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b24d:	7f e7                	jg     f012b236 <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f012b24f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b256:	e8 56 1f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b25b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b25e:	e8 4c 8b fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b263:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b266:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b26c:	83 ec 0c             	sub    $0xc,%esp
f012b26f:	50                   	push   %eax
f012b270:	e8 f7 c9 fd ff       	call   f0107c6c <kfree>
f012b275:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b278:	e8 32 8b fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b27d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b280:	74 17                	je     f012b299 <test_kfreelast+0x1206>
f012b282:	83 ec 04             	sub    $0x4,%esp
f012b285:	68 54 b5 13 f0       	push   $0xf013b554
f012b28a:	68 91 0d 00 00       	push   $0xd91
f012b28f:	68 3a b5 13 f0       	push   $0xf013b53a
f012b294:	e8 6c 4f fd ff       	call   f0100205 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f012b299:	e8 13 1f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b29e:	89 c2                	mov    %eax,%edx
f012b2a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b2a3:	29 c2                	sub    %eax,%edx
f012b2a5:	89 d0                	mov    %edx,%eax
f012b2a7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b2ac:	74 17                	je     f012b2c5 <test_kfreelast+0x1232>
f012b2ae:	83 ec 04             	sub    $0x4,%esp
f012b2b1:	68 c4 bc 13 f0       	push   $0xf013bcc4
f012b2b6:	68 92 0d 00 00       	push   $0xd92
f012b2bb:	68 3a b5 13 f0       	push   $0xf013b53a
f012b2c0:	e8 40 4f fd ff       	call   f0100205 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b2c5:	e8 e7 1e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b2ca:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b2cd:	e8 dd 8a fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b2d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f012b2d5:	83 ec 0c             	sub    $0xc,%esp
f012b2d8:	68 00 78 00 00       	push   $0x7800
f012b2dd:	e8 82 c8 fd ff       	call   f0107b64 <kmalloc>
f012b2e2:	83 c4 10             	add    $0x10,%esp
f012b2e5:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b2eb:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b2f1:	89 c1                	mov    %eax,%ecx
f012b2f3:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f012b2fa:	10 00 00 
f012b2fd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012b303:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b308:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f012b30e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b314:	ba 00 00 00 00       	mov    $0x0,%edx
f012b319:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f012b31f:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012b325:	29 d0                	sub    %edx,%eax
f012b327:	89 c3                	mov    %eax,%ebx
f012b329:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f012b330:	10 00 00 
f012b333:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012b338:	0f b6 d0             	movzbl %al,%edx
f012b33b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012b341:	01 d0                	add    %edx,%eax
f012b343:	48                   	dec    %eax
f012b344:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f012b34a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b350:	ba 00 00 00 00       	mov    $0x0,%edx
f012b355:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f012b35b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012b361:	29 d0                	sub    %edx,%eax
f012b363:	01 c3                	add    %eax,%ebx
f012b365:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f012b36c:	10 00 00 
f012b36f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012b374:	0f b6 c0             	movzbl %al,%eax
f012b377:	c1 e0 04             	shl    $0x4,%eax
f012b37a:	89 c2                	mov    %eax,%edx
f012b37c:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012b382:	01 d0                	add    %edx,%eax
f012b384:	48                   	dec    %eax
f012b385:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f012b38b:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b391:	ba 00 00 00 00       	mov    $0x0,%edx
f012b396:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f012b39c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012b3a2:	29 d0                	sub    %edx,%eax
f012b3a4:	01 d8                	add    %ebx,%eax
f012b3a6:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b3ab:	39 c1                	cmp    %eax,%ecx
f012b3ad:	74 17                	je     f012b3c6 <test_kfreelast+0x1333>
f012b3af:	83 ec 04             	sub    $0x4,%esp
f012b3b2:	68 20 b6 13 f0       	push   $0xf013b620
f012b3b7:	68 9b 0d 00 00       	push   $0xd9b
f012b3bc:	68 3a b5 13 f0       	push   $0xf013b53a
f012b3c1:	e8 3f 4e fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b3c6:	e8 e4 89 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b3cb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b3ce:	74 17                	je     f012b3e7 <test_kfreelast+0x1354>
f012b3d0:	83 ec 04             	sub    $0x4,%esp
f012b3d3:	68 54 b5 13 f0       	push   $0xf013b554
f012b3d8:	68 9c 0d 00 00       	push   $0xd9c
f012b3dd:	68 3a b5 13 f0       	push   $0xf013b53a
f012b3e2:	e8 1e 4e fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b3e7:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b3ea:	e8 c2 1d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b3ef:	29 c3                	sub    %eax,%ebx
f012b3f1:	89 d8                	mov    %ebx,%eax
f012b3f3:	83 f8 08             	cmp    $0x8,%eax
f012b3f6:	74 17                	je     f012b40f <test_kfreelast+0x137c>
f012b3f8:	83 ec 04             	sub    $0x4,%esp
f012b3fb:	68 bc b5 13 f0       	push   $0xf013b5bc
f012b400:	68 9d 0d 00 00       	push   $0xd9d
f012b405:	68 3a b5 13 f0       	push   $0xf013b53a
f012b40a:	e8 f6 4d fd ff       	call   f0100205 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012b40f:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012b416:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012b419:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b41f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012b422:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b429:	eb 0e                	jmp    f012b439 <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012b42b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b42e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b431:	01 d0                	add    %edx,%eax
f012b433:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012b436:	ff 45 f4             	incl   -0xc(%ebp)
f012b439:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012b43f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b442:	7f e7                	jg     f012b42b <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b444:	e8 68 1d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b449:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b44c:	e8 5e 89 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b451:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012b454:	83 ec 0c             	sub    $0xc,%esp
f012b457:	68 00 00 10 00       	push   $0x100000
f012b45c:	e8 03 c7 fd ff       	call   f0107b64 <kmalloc>
f012b461:	83 c4 10             	add    $0x10,%esp
f012b464:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012b46a:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b470:	89 c1                	mov    %eax,%ecx
f012b472:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012b479:	10 00 00 
f012b47c:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012b482:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b487:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012b48d:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b493:	ba 00 00 00 00       	mov    $0x0,%edx
f012b498:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012b49e:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012b4a4:	29 d0                	sub    %edx,%eax
f012b4a6:	89 c3                	mov    %eax,%ebx
f012b4a8:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012b4af:	10 00 00 
f012b4b2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012b4b7:	0f b6 d0             	movzbl %al,%edx
f012b4ba:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012b4c0:	01 d0                	add    %edx,%eax
f012b4c2:	48                   	dec    %eax
f012b4c3:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012b4c9:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4cf:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4d4:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012b4da:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012b4e0:	29 d0                	sub    %edx,%eax
f012b4e2:	01 c3                	add    %eax,%ebx
f012b4e4:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012b4eb:	10 00 00 
f012b4ee:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012b4f3:	0f b6 c0             	movzbl %al,%eax
f012b4f6:	c1 e0 04             	shl    $0x4,%eax
f012b4f9:	89 c2                	mov    %eax,%edx
f012b4fb:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012b501:	01 d0                	add    %edx,%eax
f012b503:	48                   	dec    %eax
f012b504:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012b50a:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b510:	ba 00 00 00 00       	mov    $0x0,%edx
f012b515:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012b51b:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012b521:	29 d0                	sub    %edx,%eax
f012b523:	01 d8                	add    %ebx,%eax
f012b525:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012b52a:	39 c1                	cmp    %eax,%ecx
f012b52c:	74 17                	je     f012b545 <test_kfreelast+0x14b2>
f012b52e:	83 ec 04             	sub    $0x4,%esp
f012b531:	68 20 b6 13 f0       	push   $0xf013b620
f012b536:	68 a9 0d 00 00       	push   $0xda9
f012b53b:	68 3a b5 13 f0       	push   $0xf013b53a
f012b540:	e8 c0 4c fd ff       	call   f0100205 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012b545:	e8 65 88 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b54a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b54d:	74 17                	je     f012b566 <test_kfreelast+0x14d3>
f012b54f:	83 ec 04             	sub    $0x4,%esp
f012b552:	68 54 b5 13 f0       	push   $0xf013b554
f012b557:	68 aa 0d 00 00       	push   $0xdaa
f012b55c:	68 3a b5 13 f0       	push   $0xf013b53a
f012b561:	e8 9f 4c fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012b566:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b569:	e8 43 1c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b56e:	29 c3                	sub    %eax,%ebx
f012b570:	89 d8                	mov    %ebx,%eax
f012b572:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b577:	74 17                	je     f012b590 <test_kfreelast+0x14fd>
f012b579:	83 ec 04             	sub    $0x4,%esp
f012b57c:	68 bc b5 13 f0       	push   $0xf013b5bc
f012b581:	68 ab 0d 00 00       	push   $0xdab
f012b586:	68 3a b5 13 f0       	push   $0xf013b53a
f012b58b:	e8 75 4c fd ff       	call   f0100205 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012b590:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012b597:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012b59a:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b5a0:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012b5a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b5aa:	eb 0e                	jmp    f012b5ba <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012b5ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b5af:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b5b2:	01 d0                	add    %edx,%eax
f012b5b4:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012b5b7:	ff 45 f4             	incl   -0xc(%ebp)
f012b5ba:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012b5c0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b5c3:	7f e7                	jg     f012b5ac <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012b5c5:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012b5c9:	83 ec 08             	sub    $0x8,%esp
f012b5cc:	ff 75 f0             	pushl  -0x10(%ebp)
f012b5cf:	68 6c c5 13 f0       	push   $0xf013c56c
f012b5d4:	e8 35 57 fd ff       	call   f0100d0e <cprintf>
f012b5d9:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012b5dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b5e3:	e8 c9 1b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b5e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b5eb:	e8 bf 87 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b5f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012b5f3:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012b5f9:	83 ec 0c             	sub    $0xc,%esp
f012b5fc:	50                   	push   %eax
f012b5fd:	e8 6a c6 fd ff       	call   f0107c6c <kfree>
f012b602:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b605:	e8 a5 87 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b60a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b60d:	74 1d                	je     f012b62c <test_kfreelast+0x1599>
f012b60f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b613:	75 17                	jne    f012b62c <test_kfreelast+0x1599>
f012b615:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b61c:	83 ec 0c             	sub    $0xc,%esp
f012b61f:	68 94 c5 13 f0       	push   $0xf013c594
f012b624:	e8 e5 56 fd ff       	call   f0100d0e <cprintf>
f012b629:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b62c:	e8 80 1b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b631:	89 c2                	mov    %eax,%edx
f012b633:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b636:	29 c2                	sub    %eax,%edx
f012b638:	89 d0                	mov    %edx,%eax
f012b63a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b63f:	74 1d                	je     f012b65e <test_kfreelast+0x15cb>
f012b641:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b645:	75 17                	jne    f012b65e <test_kfreelast+0x15cb>
f012b647:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b64e:	83 ec 0c             	sub    $0xc,%esp
f012b651:	68 00 c6 13 f0       	push   $0xf013c600
f012b656:	e8 b3 56 fd ff       	call   f0100d0e <cprintf>
f012b65b:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012b65e:	e8 4e 1b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b663:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b666:	e8 44 87 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b66b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012b66e:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012b674:	83 ec 0c             	sub    $0xc,%esp
f012b677:	50                   	push   %eax
f012b678:	e8 ef c5 fd ff       	call   f0107c6c <kfree>
f012b67d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b680:	e8 2a 87 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b685:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b688:	74 1d                	je     f012b6a7 <test_kfreelast+0x1614>
f012b68a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b68e:	75 17                	jne    f012b6a7 <test_kfreelast+0x1614>
f012b690:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b697:	83 ec 0c             	sub    $0xc,%esp
f012b69a:	68 94 c5 13 f0       	push   $0xf013c594
f012b69f:	e8 6a 56 fd ff       	call   f0100d0e <cprintf>
f012b6a4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b6a7:	e8 05 1b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b6ac:	89 c2                	mov    %eax,%edx
f012b6ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b6b1:	29 c2                	sub    %eax,%edx
f012b6b3:	89 d0                	mov    %edx,%eax
f012b6b5:	83 f8 08             	cmp    $0x8,%eax
f012b6b8:	74 1d                	je     f012b6d7 <test_kfreelast+0x1644>
f012b6ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b6be:	75 17                	jne    f012b6d7 <test_kfreelast+0x1644>
f012b6c0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b6c7:	83 ec 0c             	sub    $0xc,%esp
f012b6ca:	68 00 c6 13 f0       	push   $0xf013c600
f012b6cf:	e8 3a 56 fd ff       	call   f0100d0e <cprintf>
f012b6d4:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b6d7:	e8 d5 1a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b6dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b6df:	e8 cb 86 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b6e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012b6e7:	83 ec 0c             	sub    $0xc,%esp
f012b6ea:	68 00 28 00 00       	push   $0x2800
f012b6ef:	e8 70 c4 fd ff       	call   f0107b64 <kmalloc>
f012b6f4:	83 c4 10             	add    $0x10,%esp
f012b6f7:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012b6fd:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b703:	89 c1                	mov    %eax,%ecx
f012b705:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012b70c:	10 00 00 
f012b70f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012b715:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b71a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012b720:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b726:	ba 00 00 00 00       	mov    $0x0,%edx
f012b72b:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012b731:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012b737:	29 d0                	sub    %edx,%eax
f012b739:	89 c3                	mov    %eax,%ebx
f012b73b:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012b742:	10 00 00 
f012b745:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012b74a:	0f b6 d0             	movzbl %al,%edx
f012b74d:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012b753:	01 d0                	add    %edx,%eax
f012b755:	48                   	dec    %eax
f012b756:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012b75c:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b762:	ba 00 00 00 00       	mov    $0x0,%edx
f012b767:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012b76d:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012b773:	29 d0                	sub    %edx,%eax
f012b775:	01 c3                	add    %eax,%ebx
f012b777:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012b77e:	10 00 00 
f012b781:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012b786:	0f b6 c0             	movzbl %al,%eax
f012b789:	c1 e0 04             	shl    $0x4,%eax
f012b78c:	89 c2                	mov    %eax,%edx
f012b78e:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012b794:	01 d0                	add    %edx,%eax
f012b796:	48                   	dec    %eax
f012b797:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012b79d:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b7a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7a8:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012b7ae:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012b7b4:	29 d0                	sub    %edx,%eax
f012b7b6:	01 d8                	add    %ebx,%eax
f012b7b8:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012b7bd:	39 c1                	cmp    %eax,%ecx
f012b7bf:	74 1d                	je     f012b7de <test_kfreelast+0x174b>
f012b7c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7c5:	75 17                	jne    f012b7de <test_kfreelast+0x174b>
f012b7c7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7ce:	83 ec 0c             	sub    $0xc,%esp
f012b7d1:	68 38 c6 13 f0       	push   $0xf013c638
f012b7d6:	e8 33 55 fd ff       	call   f0100d0e <cprintf>
f012b7db:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b7de:	e8 cc 85 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b7e3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b7e6:	74 1d                	je     f012b805 <test_kfreelast+0x1772>
f012b7e8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b7ec:	75 17                	jne    f012b805 <test_kfreelast+0x1772>
f012b7ee:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b7f5:	83 ec 0c             	sub    $0xc,%esp
f012b7f8:	68 94 c5 13 f0       	push   $0xf013c594
f012b7fd:	e8 0c 55 fd ff       	call   f0100d0e <cprintf>
f012b802:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012b805:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012b808:	e8 a4 19 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b80d:	29 c3                	sub    %eax,%ebx
f012b80f:	89 d8                	mov    %ebx,%eax
f012b811:	83 f8 03             	cmp    $0x3,%eax
f012b814:	74 1d                	je     f012b833 <test_kfreelast+0x17a0>
f012b816:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b81a:	75 17                	jne    f012b833 <test_kfreelast+0x17a0>
f012b81c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b823:	83 ec 0c             	sub    $0xc,%esp
f012b826:	68 a0 c6 13 f0       	push   $0xf013c6a0
f012b82b:	e8 de 54 fd ff       	call   f0100d0e <cprintf>
f012b830:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012b833:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012b83a:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012b83d:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b843:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b846:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b84d:	eb 0e                	jmp    f012b85d <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012b84f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b852:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b855:	01 d0                	add    %edx,%eax
f012b857:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b85a:	ff 45 f4             	incl   -0xc(%ebp)
f012b85d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b863:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b866:	7f e7                	jg     f012b84f <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b868:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b86c:	75 17                	jne    f012b885 <test_kfreelast+0x17f2>
f012b86e:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b872:	83 ec 08             	sub    $0x8,%esp
f012b875:	ff 75 f0             	pushl  -0x10(%ebp)
f012b878:	68 6c c5 13 f0       	push   $0xf013c56c
f012b87d:	e8 8c 54 fd ff       	call   f0100d0e <cprintf>
f012b882:	83 c4 10             	add    $0x10,%esp
f012b885:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012b88c:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b892:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012b895:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b89c:	eb 1e                	jmp    f012b8bc <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012b89e:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012b8a4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b8a7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b8aa:	01 c8                	add    %ecx,%eax
f012b8ac:	8a 00                	mov    (%eax),%al
f012b8ae:	0f be c0             	movsbl %al,%eax
f012b8b1:	01 d0                	add    %edx,%eax
f012b8b3:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012b8b9:	ff 45 f4             	incl   -0xc(%ebp)
f012b8bc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012b8c2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012b8c5:	7f d7                	jg     f012b89e <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012b8c7:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012b8cd:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012b8d3:	89 d0                	mov    %edx,%eax
f012b8d5:	01 c0                	add    %eax,%eax
f012b8d7:	01 d0                	add    %edx,%eax
f012b8d9:	c1 e0 02             	shl    $0x2,%eax
f012b8dc:	39 c1                	cmp    %eax,%ecx
f012b8de:	74 1d                	je     f012b8fd <test_kfreelast+0x186a>
f012b8e0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b8e4:	75 17                	jne    f012b8fd <test_kfreelast+0x186a>
f012b8e6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b8ed:	83 ec 0c             	sub    $0xc,%esp
f012b8f0:	68 e4 c6 13 f0       	push   $0xf013c6e4
f012b8f5:	e8 14 54 fd ff       	call   f0100d0e <cprintf>
f012b8fa:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012b8fd:	83 ec 0c             	sub    $0xc,%esp
f012b900:	6a 03                	push   $0x3
f012b902:	e8 4a 1d fe ff       	call   f010d651 <sys_bypassPageFault>
f012b907:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012b90a:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b910:	05 00 30 00 00       	add    $0x3000,%eax
f012b915:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012b918:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012b91f:	eb 3c                	jmp    f012b95d <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012b921:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012b924:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b927:	01 d0                	add    %edx,%eax
f012b929:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012b92c:	e8 0e 1d fe ff       	call   f010d63f <sys_rcr2>
f012b931:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012b934:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012b937:	01 ca                	add    %ecx,%edx
f012b939:	39 d0                	cmp    %edx,%eax
f012b93b:	74 1d                	je     f012b95a <test_kfreelast+0x18c7>
f012b93d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b941:	75 17                	jne    f012b95a <test_kfreelast+0x18c7>
f012b943:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b94a:	83 ec 0c             	sub    $0xc,%esp
f012b94d:	68 18 c7 13 f0       	push   $0xf013c718
f012b952:	e8 b7 53 fd ff       	call   f0100d0e <cprintf>
f012b957:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012b95a:	ff 45 f4             	incl   -0xc(%ebp)
f012b95d:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012b964:	7e bb                	jle    f012b921 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012b966:	83 ec 0c             	sub    $0xc,%esp
f012b969:	6a 00                	push   $0x0
f012b96b:	e8 e1 1c fe ff       	call   f010d651 <sys_bypassPageFault>
f012b970:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b973:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b977:	75 17                	jne    f012b990 <test_kfreelast+0x18fd>
f012b979:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012b97d:	83 ec 08             	sub    $0x8,%esp
f012b980:	ff 75 f0             	pushl  -0x10(%ebp)
f012b983:	68 6c c5 13 f0       	push   $0xf013c56c
f012b988:	e8 81 53 fd ff       	call   f0100d0e <cprintf>
f012b98d:	83 c4 10             	add    $0x10,%esp
f012b990:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012b997:	e8 15 18 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b99c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b99f:	e8 0b 84 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b9a4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012b9a7:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012b9ad:	83 ec 0c             	sub    $0xc,%esp
f012b9b0:	50                   	push   %eax
f012b9b1:	e8 b6 c2 fd ff       	call   f0107c6c <kfree>
f012b9b6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b9b9:	e8 f1 83 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012b9be:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b9c1:	74 1d                	je     f012b9e0 <test_kfreelast+0x194d>
f012b9c3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9c7:	75 17                	jne    f012b9e0 <test_kfreelast+0x194d>
f012b9c9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b9d0:	83 ec 0c             	sub    $0xc,%esp
f012b9d3:	68 94 c5 13 f0       	push   $0xf013c594
f012b9d8:	e8 31 53 fd ff       	call   f0100d0e <cprintf>
f012b9dd:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012b9e0:	e8 cc 17 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012b9e5:	89 c2                	mov    %eax,%edx
f012b9e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b9ea:	29 c2                	sub    %eax,%edx
f012b9ec:	89 d0                	mov    %edx,%eax
f012b9ee:	83 f8 03             	cmp    $0x3,%eax
f012b9f1:	74 1d                	je     f012ba10 <test_kfreelast+0x197d>
f012b9f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b9f7:	75 17                	jne    f012ba10 <test_kfreelast+0x197d>
f012b9f9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba00:	83 ec 0c             	sub    $0xc,%esp
f012ba03:	68 00 c6 13 f0       	push   $0xf013c600
f012ba08:	e8 01 53 fd ff       	call   f0100d0e <cprintf>
f012ba0d:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba10:	e8 9c 17 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ba15:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba18:	e8 92 83 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012ba1d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012ba20:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012ba26:	83 ec 0c             	sub    $0xc,%esp
f012ba29:	50                   	push   %eax
f012ba2a:	e8 3d c2 fd ff       	call   f0107c6c <kfree>
f012ba2f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ba32:	e8 78 83 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012ba37:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ba3a:	74 1d                	je     f012ba59 <test_kfreelast+0x19c6>
f012ba3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba40:	75 17                	jne    f012ba59 <test_kfreelast+0x19c6>
f012ba42:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba49:	83 ec 0c             	sub    $0xc,%esp
f012ba4c:	68 94 c5 13 f0       	push   $0xf013c594
f012ba51:	e8 b8 52 fd ff       	call   f0100d0e <cprintf>
f012ba56:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ba59:	e8 53 17 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ba5e:	89 c2                	mov    %eax,%edx
f012ba60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ba63:	29 c2                	sub    %eax,%edx
f012ba65:	89 d0                	mov    %edx,%eax
f012ba67:	83 f8 04             	cmp    $0x4,%eax
f012ba6a:	74 1d                	je     f012ba89 <test_kfreelast+0x19f6>
f012ba6c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ba70:	75 17                	jne    f012ba89 <test_kfreelast+0x19f6>
f012ba72:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ba79:	83 ec 0c             	sub    $0xc,%esp
f012ba7c:	68 00 c6 13 f0       	push   $0xf013c600
f012ba81:	e8 88 52 fd ff       	call   f0100d0e <cprintf>
f012ba86:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012ba89:	e8 23 17 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ba8e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ba91:	e8 19 83 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012ba96:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012ba99:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012ba9f:	83 ec 0c             	sub    $0xc,%esp
f012baa2:	50                   	push   %eax
f012baa3:	e8 c4 c1 fd ff       	call   f0107c6c <kfree>
f012baa8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012baab:	e8 ff 82 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012bab0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bab3:	74 1d                	je     f012bad2 <test_kfreelast+0x1a3f>
f012bab5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bab9:	75 17                	jne    f012bad2 <test_kfreelast+0x1a3f>
f012babb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bac2:	83 ec 0c             	sub    $0xc,%esp
f012bac5:	68 94 c5 13 f0       	push   $0xf013c594
f012baca:	e8 3f 52 fd ff       	call   f0100d0e <cprintf>
f012bacf:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012bad2:	e8 da 16 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012bad7:	89 c2                	mov    %eax,%edx
f012bad9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012badc:	29 c2                	sub    %eax,%edx
f012bade:	89 d0                	mov    %edx,%eax
f012bae0:	83 f8 05             	cmp    $0x5,%eax
f012bae3:	74 1d                	je     f012bb02 <test_kfreelast+0x1a6f>
f012bae5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bae9:	75 17                	jne    f012bb02 <test_kfreelast+0x1a6f>
f012baeb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012baf2:	83 ec 0c             	sub    $0xc,%esp
f012baf5:	68 00 c6 13 f0       	push   $0xf013c600
f012bafa:	e8 0f 52 fd ff       	call   f0100d0e <cprintf>
f012baff:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012bb02:	e8 aa 16 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012bb07:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bb0a:	e8 a0 82 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012bb0f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012bb12:	83 ec 0c             	sub    $0xc,%esp
f012bb15:	68 00 c8 00 00       	push   $0xc800
f012bb1a:	e8 45 c0 fd ff       	call   f0107b64 <kmalloc>
f012bb1f:	83 c4 10             	add    $0x10,%esp
f012bb22:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012bb28:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bb2e:	89 c1                	mov    %eax,%ecx
f012bb30:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012bb37:	10 00 00 
f012bb3a:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012bb40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb45:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012bb4b:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012bb51:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb56:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012bb5c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012bb62:	29 d0                	sub    %edx,%eax
f012bb64:	89 c3                	mov    %eax,%ebx
f012bb66:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012bb6d:	10 00 00 
f012bb70:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012bb75:	0f b6 d0             	movzbl %al,%edx
f012bb78:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012bb7e:	01 d0                	add    %edx,%eax
f012bb80:	48                   	dec    %eax
f012bb81:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012bb87:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012bb8d:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb92:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012bb98:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012bb9e:	29 d0                	sub    %edx,%eax
f012bba0:	01 c3                	add    %eax,%ebx
f012bba2:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012bba9:	10 00 00 
f012bbac:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012bbb1:	0f b6 c0             	movzbl %al,%eax
f012bbb4:	c1 e0 04             	shl    $0x4,%eax
f012bbb7:	89 c2                	mov    %eax,%edx
f012bbb9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012bbbf:	01 d0                	add    %edx,%eax
f012bbc1:	48                   	dec    %eax
f012bbc2:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012bbc8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bbce:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbd3:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012bbd9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bbdf:	29 d0                	sub    %edx,%eax
f012bbe1:	01 d8                	add    %ebx,%eax
f012bbe3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012bbe8:	39 c1                	cmp    %eax,%ecx
f012bbea:	74 1d                	je     f012bc09 <test_kfreelast+0x1b76>
f012bbec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bbf0:	75 17                	jne    f012bc09 <test_kfreelast+0x1b76>
f012bbf2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bbf9:	83 ec 0c             	sub    $0xc,%esp
f012bbfc:	68 38 c6 13 f0       	push   $0xf013c638
f012bc01:	e8 08 51 fd ff       	call   f0100d0e <cprintf>
f012bc06:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bc09:	e8 a1 81 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012bc0e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bc11:	74 1d                	je     f012bc30 <test_kfreelast+0x1b9d>
f012bc13:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc17:	75 17                	jne    f012bc30 <test_kfreelast+0x1b9d>
f012bc19:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc20:	83 ec 0c             	sub    $0xc,%esp
f012bc23:	68 94 c5 13 f0       	push   $0xf013c594
f012bc28:	e8 e1 50 fd ff       	call   f0100d0e <cprintf>
f012bc2d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bc30:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bc33:	e8 79 15 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012bc38:	29 c3                	sub    %eax,%ebx
f012bc3a:	89 d8                	mov    %ebx,%eax
f012bc3c:	83 f8 0d             	cmp    $0xd,%eax
f012bc3f:	74 1d                	je     f012bc5e <test_kfreelast+0x1bcb>
f012bc41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bc45:	75 17                	jne    f012bc5e <test_kfreelast+0x1bcb>
f012bc47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bc4e:	83 ec 0c             	sub    $0xc,%esp
f012bc51:	68 a0 c6 13 f0       	push   $0xf013c6a0
f012bc56:	e8 b3 50 fd ff       	call   f0100d0e <cprintf>
f012bc5b:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012bc5e:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012bc65:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012bc68:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bc6e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012bc71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bc78:	eb 0e                	jmp    f012bc88 <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012bc7a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bc7d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bc80:	01 d0                	add    %edx,%eax
f012bc82:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012bc85:	ff 45 f4             	incl   -0xc(%ebp)
f012bc88:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012bc8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bc91:	7f e7                	jg     f012bc7a <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012bc93:	e8 19 15 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012bc98:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bc9b:	e8 0f 81 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012bca0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012bca3:	83 ec 0c             	sub    $0xc,%esp
f012bca6:	68 00 fc 2f 00       	push   $0x2ffc00
f012bcab:	e8 b4 be fd ff       	call   f0107b64 <kmalloc>
f012bcb0:	83 c4 10             	add    $0x10,%esp
f012bcb3:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012bcb9:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bcbf:	89 c1                	mov    %eax,%ecx
f012bcc1:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012bcc8:	10 00 00 
f012bccb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bcd1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bcd6:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012bcdc:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bce2:	ba 00 00 00 00       	mov    $0x0,%edx
f012bce7:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012bced:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bcf3:	29 d0                	sub    %edx,%eax
f012bcf5:	89 c3                	mov    %eax,%ebx
f012bcf7:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012bcfe:	10 00 00 
f012bd01:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012bd06:	0f b6 d0             	movzbl %al,%edx
f012bd09:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bd0f:	01 d0                	add    %edx,%eax
f012bd11:	48                   	dec    %eax
f012bd12:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012bd18:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bd1e:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd23:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012bd29:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bd2f:	29 d0                	sub    %edx,%eax
f012bd31:	01 c3                	add    %eax,%ebx
f012bd33:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012bd3a:	10 00 00 
f012bd3d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012bd42:	0f b6 c0             	movzbl %al,%eax
f012bd45:	c1 e0 04             	shl    $0x4,%eax
f012bd48:	89 c2                	mov    %eax,%edx
f012bd4a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bd50:	01 d0                	add    %edx,%eax
f012bd52:	48                   	dec    %eax
f012bd53:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012bd59:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bd5f:	ba 00 00 00 00       	mov    $0x0,%edx
f012bd64:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012bd6a:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bd70:	29 d0                	sub    %edx,%eax
f012bd72:	01 d8                	add    %ebx,%eax
f012bd74:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012bd79:	39 c1                	cmp    %eax,%ecx
f012bd7b:	74 1d                	je     f012bd9a <test_kfreelast+0x1d07>
f012bd7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bd81:	75 17                	jne    f012bd9a <test_kfreelast+0x1d07>
f012bd83:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bd8a:	83 ec 0c             	sub    $0xc,%esp
f012bd8d:	68 38 c6 13 f0       	push   $0xf013c638
f012bd92:	e8 77 4f fd ff       	call   f0100d0e <cprintf>
f012bd97:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bd9a:	e8 10 80 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012bd9f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bda2:	74 1d                	je     f012bdc1 <test_kfreelast+0x1d2e>
f012bda4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bda8:	75 17                	jne    f012bdc1 <test_kfreelast+0x1d2e>
f012bdaa:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bdb1:	83 ec 0c             	sub    $0xc,%esp
f012bdb4:	68 94 c5 13 f0       	push   $0xf013c594
f012bdb9:	e8 50 4f fd ff       	call   f0100d0e <cprintf>
f012bdbe:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012bdc1:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012bdc4:	e8 e8 13 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012bdc9:	29 c3                	sub    %eax,%ebx
f012bdcb:	89 d8                	mov    %ebx,%eax
f012bdcd:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bdd2:	74 1d                	je     f012bdf1 <test_kfreelast+0x1d5e>
f012bdd4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bdd8:	75 17                	jne    f012bdf1 <test_kfreelast+0x1d5e>
f012bdda:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bde1:	83 ec 0c             	sub    $0xc,%esp
f012bde4:	68 a0 c6 13 f0       	push   $0xf013c6a0
f012bde9:	e8 20 4f fd ff       	call   f0100d0e <cprintf>
f012bdee:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012bdf1:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012bdf8:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012bdfb:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012be01:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012be04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012be0b:	eb 0e                	jmp    f012be1b <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012be0d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012be10:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012be13:	01 d0                	add    %edx,%eax
f012be15:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012be18:	ff 45 f4             	incl   -0xc(%ebp)
f012be1b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012be21:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012be24:	7f e7                	jg     f012be0d <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012be26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be2a:	75 17                	jne    f012be43 <test_kfreelast+0x1db0>
f012be2c:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012be30:	83 ec 08             	sub    $0x8,%esp
f012be33:	ff 75 f0             	pushl  -0x10(%ebp)
f012be36:	68 6c c5 13 f0       	push   $0xf013c56c
f012be3b:	e8 ce 4e fd ff       	call   f0100d0e <cprintf>
f012be40:	83 c4 10             	add    $0x10,%esp
f012be43:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012be4a:	e8 62 13 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012be4f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012be52:	e8 58 7f fd ff       	call   f0103daf <pf_calculate_free_frames>
f012be57:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012be5a:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012be60:	83 ec 0c             	sub    $0xc,%esp
f012be63:	50                   	push   %eax
f012be64:	e8 03 be fd ff       	call   f0107c6c <kfree>
f012be69:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012be6c:	e8 3e 7f fd ff       	call   f0103daf <pf_calculate_free_frames>
f012be71:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012be74:	74 1d                	je     f012be93 <test_kfreelast+0x1e00>
f012be76:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012be7a:	75 17                	jne    f012be93 <test_kfreelast+0x1e00>
f012be7c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012be83:	83 ec 0c             	sub    $0xc,%esp
f012be86:	68 94 c5 13 f0       	push   $0xf013c594
f012be8b:	e8 7e 4e fd ff       	call   f0100d0e <cprintf>
f012be90:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012be93:	e8 19 13 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012be98:	89 c2                	mov    %eax,%edx
f012be9a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012be9d:	29 c2                	sub    %eax,%edx
f012be9f:	89 d0                	mov    %edx,%eax
f012bea1:	83 f8 0d             	cmp    $0xd,%eax
f012bea4:	74 1d                	je     f012bec3 <test_kfreelast+0x1e30>
f012bea6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012beaa:	75 17                	jne    f012bec3 <test_kfreelast+0x1e30>
f012beac:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012beb3:	83 ec 0c             	sub    $0xc,%esp
f012beb6:	68 00 c6 13 f0       	push   $0xf013c600
f012bebb:	e8 4e 4e fd ff       	call   f0100d0e <cprintf>
f012bec0:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012bec3:	83 ec 0c             	sub    $0xc,%esp
f012bec6:	6a 03                	push   $0x3
f012bec8:	e8 84 17 fe ff       	call   f010d651 <sys_bypassPageFault>
f012becd:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012bed0:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012bed6:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012bed9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bee0:	eb 3c                	jmp    f012bf1e <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012bee2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bee5:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bee8:	01 d0                	add    %edx,%eax
f012beea:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012beed:	e8 4d 17 fe ff       	call   f010d63f <sys_rcr2>
f012bef2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bef5:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012bef8:	01 ca                	add    %ecx,%edx
f012befa:	39 d0                	cmp    %edx,%eax
f012befc:	74 1d                	je     f012bf1b <test_kfreelast+0x1e88>
f012befe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf02:	75 17                	jne    f012bf1b <test_kfreelast+0x1e88>
f012bf04:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf0b:	83 ec 0c             	sub    $0xc,%esp
f012bf0e:	68 18 c7 13 f0       	push   $0xf013c718
f012bf13:	e8 f6 4d fd ff       	call   f0100d0e <cprintf>
f012bf18:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012bf1b:	ff 45 f4             	incl   -0xc(%ebp)
f012bf1e:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012bf25:	7e bb                	jle    f012bee2 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012bf27:	83 ec 0c             	sub    $0xc,%esp
f012bf2a:	6a 00                	push   $0x0
f012bf2c:	e8 20 17 fe ff       	call   f010d651 <sys_bypassPageFault>
f012bf31:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012bf34:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012bf3a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012bf3d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bf44:	eb 1e                	jmp    f012bf64 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012bf46:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012bf4c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012bf4f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012bf52:	01 c8                	add    %ecx,%eax
f012bf54:	8a 00                	mov    (%eax),%al
f012bf56:	0f be c0             	movsbl %al,%eax
f012bf59:	01 d0                	add    %edx,%eax
f012bf5b:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012bf61:	ff 45 f4             	incl   -0xc(%ebp)
f012bf64:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012bf6a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bf6d:	7f d7                	jg     f012bf46 <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012bf6f:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012bf75:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012bf7b:	89 d0                	mov    %edx,%eax
f012bf7d:	01 c0                	add    %eax,%eax
f012bf7f:	01 d0                	add    %edx,%eax
f012bf81:	01 c0                	add    %eax,%eax
f012bf83:	01 d0                	add    %edx,%eax
f012bf85:	01 c0                	add    %eax,%eax
f012bf87:	39 c1                	cmp    %eax,%ecx
f012bf89:	74 1d                	je     f012bfa8 <test_kfreelast+0x1f15>
f012bf8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bf8f:	75 17                	jne    f012bfa8 <test_kfreelast+0x1f15>
f012bf91:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012bf98:	83 ec 0c             	sub    $0xc,%esp
f012bf9b:	68 e4 c6 13 f0       	push   $0xf013c6e4
f012bfa0:	e8 69 4d fd ff       	call   f0100d0e <cprintf>
f012bfa5:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012bfa8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bfac:	75 17                	jne    f012bfc5 <test_kfreelast+0x1f32>
f012bfae:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012bfb2:	83 ec 08             	sub    $0x8,%esp
f012bfb5:	ff 75 f0             	pushl  -0x10(%ebp)
f012bfb8:	68 6c c5 13 f0       	push   $0xf013c56c
f012bfbd:	e8 4c 4d fd ff       	call   f0100d0e <cprintf>
f012bfc2:	83 c4 10             	add    $0x10,%esp
f012bfc5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012bfcc:	e8 e0 11 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012bfd1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012bfd4:	e8 d6 7d fd ff       	call   f0103daf <pf_calculate_free_frames>
f012bfd9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012bfdc:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012bfe2:	83 ec 0c             	sub    $0xc,%esp
f012bfe5:	50                   	push   %eax
f012bfe6:	e8 81 bc fd ff       	call   f0107c6c <kfree>
f012bfeb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012bfee:	e8 bc 7d fd ff       	call   f0103daf <pf_calculate_free_frames>
f012bff3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012bff6:	74 1d                	je     f012c015 <test_kfreelast+0x1f82>
f012bff8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012bffc:	75 17                	jne    f012c015 <test_kfreelast+0x1f82>
f012bffe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c005:	83 ec 0c             	sub    $0xc,%esp
f012c008:	68 94 c5 13 f0       	push   $0xf013c594
f012c00d:	e8 fc 4c fd ff       	call   f0100d0e <cprintf>
f012c012:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c015:	e8 97 11 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c01a:	89 c2                	mov    %eax,%edx
f012c01c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c01f:	29 c2                	sub    %eax,%edx
f012c021:	89 d0                	mov    %edx,%eax
f012c023:	83 f8 02             	cmp    $0x2,%eax
f012c026:	74 1d                	je     f012c045 <test_kfreelast+0x1fb2>
f012c028:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c02c:	75 17                	jne    f012c045 <test_kfreelast+0x1fb2>
f012c02e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c035:	83 ec 0c             	sub    $0xc,%esp
f012c038:	68 00 c6 13 f0       	push   $0xf013c600
f012c03d:	e8 cc 4c fd ff       	call   f0100d0e <cprintf>
f012c042:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012c045:	e8 67 11 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c04a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c04d:	e8 5d 7d fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c052:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012c055:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012c05b:	83 ec 0c             	sub    $0xc,%esp
f012c05e:	50                   	push   %eax
f012c05f:	e8 08 bc fd ff       	call   f0107c6c <kfree>
f012c064:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c067:	e8 43 7d fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c06c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c06f:	74 1d                	je     f012c08e <test_kfreelast+0x1ffb>
f012c071:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c075:	75 17                	jne    f012c08e <test_kfreelast+0x1ffb>
f012c077:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c07e:	83 ec 0c             	sub    $0xc,%esp
f012c081:	68 94 c5 13 f0       	push   $0xf013c594
f012c086:	e8 83 4c fd ff       	call   f0100d0e <cprintf>
f012c08b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c08e:	e8 1e 11 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c093:	89 c2                	mov    %eax,%edx
f012c095:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c098:	29 c2                	sub    %eax,%edx
f012c09a:	89 d0                	mov    %edx,%eax
f012c09c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c0a1:	74 1d                	je     f012c0c0 <test_kfreelast+0x202d>
f012c0a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0a7:	75 17                	jne    f012c0c0 <test_kfreelast+0x202d>
f012c0a9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0b0:	83 ec 0c             	sub    $0xc,%esp
f012c0b3:	68 00 c6 13 f0       	push   $0xf013c600
f012c0b8:	e8 51 4c fd ff       	call   f0100d0e <cprintf>
f012c0bd:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012c0c0:	e8 ec 10 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c0c5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c0c8:	e8 e2 7c fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c0cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012c0d0:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012c0d6:	83 ec 0c             	sub    $0xc,%esp
f012c0d9:	50                   	push   %eax
f012c0da:	e8 8d bb fd ff       	call   f0107c6c <kfree>
f012c0df:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c0e2:	e8 c8 7c fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c0e7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c0ea:	74 1d                	je     f012c109 <test_kfreelast+0x2076>
f012c0ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c0f0:	75 17                	jne    f012c109 <test_kfreelast+0x2076>
f012c0f2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c0f9:	83 ec 0c             	sub    $0xc,%esp
f012c0fc:	68 94 c5 13 f0       	push   $0xf013c594
f012c101:	e8 08 4c fd ff       	call   f0100d0e <cprintf>
f012c106:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c109:	e8 a3 10 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c10e:	89 c2                	mov    %eax,%edx
f012c110:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c113:	29 c2                	sub    %eax,%edx
f012c115:	89 d0                	mov    %edx,%eax
f012c117:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c11c:	74 1d                	je     f012c13b <test_kfreelast+0x20a8>
f012c11e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c122:	75 17                	jne    f012c13b <test_kfreelast+0x20a8>
f012c124:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c12b:	83 ec 0c             	sub    $0xc,%esp
f012c12e:	68 00 c6 13 f0       	push   $0xf013c600
f012c133:	e8 d6 4b fd ff       	call   f0100d0e <cprintf>
f012c138:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c13b:	e8 71 10 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c140:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c143:	e8 67 7c fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c148:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c14b:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c151:	83 ec 0c             	sub    $0xc,%esp
f012c154:	50                   	push   %eax
f012c155:	e8 12 bb fd ff       	call   f0107c6c <kfree>
f012c15a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c15d:	e8 4d 7c fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c162:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c165:	74 1d                	je     f012c184 <test_kfreelast+0x20f1>
f012c167:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c16b:	75 17                	jne    f012c184 <test_kfreelast+0x20f1>
f012c16d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c174:	83 ec 0c             	sub    $0xc,%esp
f012c177:	68 94 c5 13 f0       	push   $0xf013c594
f012c17c:	e8 8d 4b fd ff       	call   f0100d0e <cprintf>
f012c181:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c184:	e8 28 10 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c189:	89 c2                	mov    %eax,%edx
f012c18b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c18e:	29 c2                	sub    %eax,%edx
f012c190:	89 d0                	mov    %edx,%eax
f012c192:	83 f8 01             	cmp    $0x1,%eax
f012c195:	74 1d                	je     f012c1b4 <test_kfreelast+0x2121>
f012c197:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c19b:	75 17                	jne    f012c1b4 <test_kfreelast+0x2121>
f012c19d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c1a4:	83 ec 0c             	sub    $0xc,%esp
f012c1a7:	68 00 c6 13 f0       	push   $0xf013c600
f012c1ac:	e8 5d 4b fd ff       	call   f0100d0e <cprintf>
f012c1b1:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c1b4:	e8 f8 0f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c1b9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c1bc:	e8 ee 7b fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c1c1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012c1c4:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012c1ca:	83 ec 0c             	sub    $0xc,%esp
f012c1cd:	50                   	push   %eax
f012c1ce:	e8 99 ba fd ff       	call   f0107c6c <kfree>
f012c1d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c1d6:	e8 d4 7b fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c1db:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c1de:	74 1d                	je     f012c1fd <test_kfreelast+0x216a>
f012c1e0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c1e4:	75 17                	jne    f012c1fd <test_kfreelast+0x216a>
f012c1e6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c1ed:	83 ec 0c             	sub    $0xc,%esp
f012c1f0:	68 94 c5 13 f0       	push   $0xf013c594
f012c1f5:	e8 14 4b fd ff       	call   f0100d0e <cprintf>
f012c1fa:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012c1fd:	e8 af 0f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c202:	89 c2                	mov    %eax,%edx
f012c204:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c207:	29 c2                	sub    %eax,%edx
f012c209:	89 d0                	mov    %edx,%eax
f012c20b:	83 f8 01             	cmp    $0x1,%eax
f012c20e:	74 1d                	je     f012c22d <test_kfreelast+0x219a>
f012c210:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c214:	75 17                	jne    f012c22d <test_kfreelast+0x219a>
f012c216:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c21d:	83 ec 0c             	sub    $0xc,%esp
f012c220:	68 00 c6 13 f0       	push   $0xf013c600
f012c225:	e8 e4 4a fd ff       	call   f0100d0e <cprintf>
f012c22a:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012c22d:	e8 7f 0f fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c232:	89 c2                	mov    %eax,%edx
f012c234:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012c237:	39 c2                	cmp    %eax,%edx
f012c239:	74 1d                	je     f012c258 <test_kfreelast+0x21c5>
f012c23b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c23f:	75 17                	jne    f012c258 <test_kfreelast+0x21c5>
f012c241:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c248:	83 ec 0c             	sub    $0xc,%esp
f012c24b:	68 60 c7 13 f0       	push   $0xf013c760
f012c250:	e8 b9 4a fd ff       	call   f0100d0e <cprintf>
f012c255:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012c258:	83 ec 0c             	sub    $0xc,%esp
f012c25b:	6a 03                	push   $0x3
f012c25d:	e8 ef 13 fe ff       	call   f010d651 <sys_bypassPageFault>
f012c262:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012c265:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012c26c:	e9 8e 00 00 00       	jmp    f012c2ff <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012c271:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c274:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012c27b:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012c27e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c281:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c284:	e8 b6 13 fe ff       	call   f010d63f <sys_rcr2>
f012c289:	89 c2                	mov    %eax,%edx
f012c28b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c28e:	39 c2                	cmp    %eax,%edx
f012c290:	74 1d                	je     f012c2af <test_kfreelast+0x221c>
f012c292:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c296:	75 17                	jne    f012c2af <test_kfreelast+0x221c>
f012c298:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c29f:	83 ec 0c             	sub    $0xc,%esp
f012c2a2:	68 18 c7 13 f0       	push   $0xf013c718
f012c2a7:	e8 62 4a fd ff       	call   f0100d0e <cprintf>
f012c2ac:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012c2af:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c2b2:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c2b9:	89 c2                	mov    %eax,%edx
f012c2bb:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c2be:	01 d0                	add    %edx,%eax
f012c2c0:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012c2c3:	e8 77 13 fe ff       	call   f010d63f <sys_rcr2>
f012c2c8:	89 c2                	mov    %eax,%edx
f012c2ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012c2cd:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012c2d4:	89 c1                	mov    %eax,%ecx
f012c2d6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c2d9:	01 c8                	add    %ecx,%eax
f012c2db:	39 c2                	cmp    %eax,%edx
f012c2dd:	74 1d                	je     f012c2fc <test_kfreelast+0x2269>
f012c2df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c2e3:	75 17                	jne    f012c2fc <test_kfreelast+0x2269>
f012c2e5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c2ec:	83 ec 0c             	sub    $0xc,%esp
f012c2ef:	68 18 c7 13 f0       	push   $0xf013c718
f012c2f4:	e8 15 4a fd ff       	call   f0100d0e <cprintf>
f012c2f9:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012c2fc:	ff 45 f4             	incl   -0xc(%ebp)
f012c2ff:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012c303:	0f 8e 68 ff ff ff    	jle    f012c271 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012c309:	83 ec 0c             	sub    $0xc,%esp
f012c30c:	6a 00                	push   $0x0
f012c30e:	e8 3e 13 fe ff       	call   f010d651 <sys_bypassPageFault>
f012c313:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012c316:	e8 96 0e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c31b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c31e:	e8 8c 7a fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c323:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012c326:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012c32c:	83 ec 0c             	sub    $0xc,%esp
f012c32f:	50                   	push   %eax
f012c330:	e8 37 b9 fd ff       	call   f0107c6c <kfree>
f012c335:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c338:	e8 72 7a fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c33d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c340:	74 1d                	je     f012c35f <test_kfreelast+0x22cc>
f012c342:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c346:	75 17                	jne    f012c35f <test_kfreelast+0x22cc>
f012c348:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c34f:	83 ec 0c             	sub    $0xc,%esp
f012c352:	68 94 c5 13 f0       	push   $0xf013c594
f012c357:	e8 b2 49 fd ff       	call   f0100d0e <cprintf>
f012c35c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c35f:	e8 4d 0e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c364:	89 c2                	mov    %eax,%edx
f012c366:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c369:	39 c2                	cmp    %eax,%edx
f012c36b:	74 1d                	je     f012c38a <test_kfreelast+0x22f7>
f012c36d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c371:	75 17                	jne    f012c38a <test_kfreelast+0x22f7>
f012c373:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c37a:	83 ec 0c             	sub    $0xc,%esp
f012c37d:	68 98 c7 13 f0       	push   $0xf013c798
f012c382:	e8 87 49 fd ff       	call   f0100d0e <cprintf>
f012c387:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012c38a:	e8 22 0e fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c38f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c392:	e8 18 7a fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c397:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012c39a:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012c3a0:	83 ec 0c             	sub    $0xc,%esp
f012c3a3:	50                   	push   %eax
f012c3a4:	e8 c3 b8 fd ff       	call   f0107c6c <kfree>
f012c3a9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c3ac:	e8 fe 79 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c3b1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c3b4:	74 1d                	je     f012c3d3 <test_kfreelast+0x2340>
f012c3b6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3ba:	75 17                	jne    f012c3d3 <test_kfreelast+0x2340>
f012c3bc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c3c3:	83 ec 0c             	sub    $0xc,%esp
f012c3c6:	68 94 c5 13 f0       	push   $0xf013c594
f012c3cb:	e8 3e 49 fd ff       	call   f0100d0e <cprintf>
f012c3d0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c3d3:	e8 d9 0d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c3d8:	89 c2                	mov    %eax,%edx
f012c3da:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c3dd:	39 c2                	cmp    %eax,%edx
f012c3df:	74 1d                	je     f012c3fe <test_kfreelast+0x236b>
f012c3e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c3e5:	75 17                	jne    f012c3fe <test_kfreelast+0x236b>
f012c3e7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c3ee:	83 ec 0c             	sub    $0xc,%esp
f012c3f1:	68 98 c7 13 f0       	push   $0xf013c798
f012c3f6:	e8 13 49 fd ff       	call   f0100d0e <cprintf>
f012c3fb:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012c3fe:	e8 ae 0d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c403:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c406:	e8 a4 79 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c40b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012c40e:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012c414:	83 ec 0c             	sub    $0xc,%esp
f012c417:	50                   	push   %eax
f012c418:	e8 4f b8 fd ff       	call   f0107c6c <kfree>
f012c41d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c420:	e8 8a 79 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c425:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c428:	74 1d                	je     f012c447 <test_kfreelast+0x23b4>
f012c42a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c42e:	75 17                	jne    f012c447 <test_kfreelast+0x23b4>
f012c430:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c437:	83 ec 0c             	sub    $0xc,%esp
f012c43a:	68 94 c5 13 f0       	push   $0xf013c594
f012c43f:	e8 ca 48 fd ff       	call   f0100d0e <cprintf>
f012c444:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c447:	e8 65 0d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c44c:	89 c2                	mov    %eax,%edx
f012c44e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c451:	39 c2                	cmp    %eax,%edx
f012c453:	74 1d                	je     f012c472 <test_kfreelast+0x23df>
f012c455:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c459:	75 17                	jne    f012c472 <test_kfreelast+0x23df>
f012c45b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c462:	83 ec 0c             	sub    $0xc,%esp
f012c465:	68 98 c7 13 f0       	push   $0xf013c798
f012c46a:	e8 9f 48 fd ff       	call   f0100d0e <cprintf>
f012c46f:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012c472:	e8 3a 0d fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c477:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012c47a:	e8 30 79 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c47f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012c482:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012c488:	83 ec 0c             	sub    $0xc,%esp
f012c48b:	50                   	push   %eax
f012c48c:	e8 db b7 fd ff       	call   f0107c6c <kfree>
f012c491:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012c494:	e8 16 79 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012c499:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012c49c:	74 1d                	je     f012c4bb <test_kfreelast+0x2428>
f012c49e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c4a2:	75 17                	jne    f012c4bb <test_kfreelast+0x2428>
f012c4a4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c4ab:	83 ec 0c             	sub    $0xc,%esp
f012c4ae:	68 94 c5 13 f0       	push   $0xf013c594
f012c4b3:	e8 56 48 fd ff       	call   f0100d0e <cprintf>
f012c4b8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012c4bb:	e8 f1 0c fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c4c0:	89 c2                	mov    %eax,%edx
f012c4c2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012c4c5:	39 c2                	cmp    %eax,%edx
f012c4c7:	74 1d                	je     f012c4e6 <test_kfreelast+0x2453>
f012c4c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c4cd:	75 17                	jne    f012c4e6 <test_kfreelast+0x2453>
f012c4cf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012c4d6:	83 ec 0c             	sub    $0xc,%esp
f012c4d9:	68 98 c7 13 f0       	push   $0xf013c798
f012c4de:	e8 2b 48 fd ff       	call   f0100d0e <cprintf>
f012c4e3:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012c4e6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012c4ea:	75 17                	jne    f012c503 <test_kfreelast+0x2470>
f012c4ec:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012c4f0:	83 ec 08             	sub    $0x8,%esp
f012c4f3:	ff 75 f0             	pushl  -0x10(%ebp)
f012c4f6:	68 6c c5 13 f0       	push   $0xf013c56c
f012c4fb:	e8 0e 48 fd ff       	call   f0100d0e <cprintf>
f012c500:	83 c4 10             	add    $0x10,%esp
f012c503:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012c50a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012c50f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012c512:	5b                   	pop    %ebx
f012c513:	5f                   	pop    %edi
f012c514:	5d                   	pop    %ebp
f012c515:	c3                   	ret    

f012c516 <test_krealloc>:

int test_krealloc() {
f012c516:	55                   	push   %ebp
f012c517:	89 e5                	mov    %esp,%ebp
f012c519:	57                   	push   %edi
f012c51a:	53                   	push   %ebx
f012c51b:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012c521:	83 ec 0c             	sub    $0xc,%esp
f012c524:	68 7c b4 13 f0       	push   $0xf013b47c
f012c529:	e8 e0 47 fd ff       	call   f0100d0e <cprintf>
f012c52e:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012c531:	83 ec 0c             	sub    $0xc,%esp
f012c534:	68 ac b4 13 f0       	push   $0xf013b4ac
f012c539:	e8 d0 47 fd ff       	call   f0100d0e <cprintf>
f012c53e:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012c541:	83 ec 0c             	sub    $0xc,%esp
f012c544:	68 7c b4 13 f0       	push   $0xf013b47c
f012c549:	e8 c0 47 fd ff       	call   f0100d0e <cprintf>
f012c54e:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012c551:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012c555:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012c559:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012c55f:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012c565:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012c56c:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012c573:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012c579:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c57e:	b8 00 00 00 00       	mov    $0x0,%eax
f012c583:	89 d7                	mov    %edx,%edi
f012c585:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012c587:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012c58e:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012c594:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c599:	b8 00 00 00 00       	mov    $0x0,%eax
f012c59e:	89 d7                	mov    %edx,%edi
f012c5a0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012c5a2:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012c5a8:	b9 14 00 00 00       	mov    $0x14,%ecx
f012c5ad:	b8 00 00 00 00       	mov    $0x0,%eax
f012c5b2:	89 d7                	mov    %edx,%edi
f012c5b4:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c5b6:	e8 f6 0b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c5bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012c5be:	83 ec 08             	sub    $0x8,%esp
f012c5c1:	68 00 fc 0f 00       	push   $0xffc00
f012c5c6:	6a 00                	push   $0x0
f012c5c8:	e8 9c b8 fd ff       	call   f0107e69 <krealloc>
f012c5cd:	83 c4 10             	add    $0x10,%esp
f012c5d0:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012c5d6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c5dc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c5e1:	77 17                	ja     f012c5fa <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c5e3:	83 ec 04             	sub    $0x4,%esp
f012c5e6:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c5eb:	68 e2 0e 00 00       	push   $0xee2
f012c5f0:	68 3a b5 13 f0       	push   $0xf013b53a
f012c5f5:	e8 0b 3c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012c5fa:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c600:	89 c1                	mov    %eax,%ecx
f012c602:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012c609:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012c60c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c611:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012c614:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c617:	ba 00 00 00 00       	mov    $0x0,%edx
f012c61c:	f7 75 b4             	divl   -0x4c(%ebp)
f012c61f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012c622:	29 d0                	sub    %edx,%eax
f012c624:	89 c3                	mov    %eax,%ebx
f012c626:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012c62d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012c632:	0f b6 d0             	movzbl %al,%edx
f012c635:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012c638:	01 d0                	add    %edx,%eax
f012c63a:	48                   	dec    %eax
f012c63b:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012c63e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c641:	ba 00 00 00 00       	mov    $0x0,%edx
f012c646:	f7 75 ac             	divl   -0x54(%ebp)
f012c649:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012c64c:	29 d0                	sub    %edx,%eax
f012c64e:	01 c3                	add    %eax,%ebx
f012c650:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012c657:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012c65c:	0f b6 c0             	movzbl %al,%eax
f012c65f:	c1 e0 04             	shl    $0x4,%eax
f012c662:	89 c2                	mov    %eax,%edx
f012c664:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012c667:	01 d0                	add    %edx,%eax
f012c669:	48                   	dec    %eax
f012c66a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012c66d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c670:	ba 00 00 00 00       	mov    $0x0,%edx
f012c675:	f7 75 a4             	divl   -0x5c(%ebp)
f012c678:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012c67b:	29 d0                	sub    %edx,%eax
f012c67d:	01 d8                	add    %ebx,%eax
f012c67f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012c684:	39 c1                	cmp    %eax,%ecx
f012c686:	74 17                	je     f012c69f <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012c688:	83 ec 04             	sub    $0x4,%esp
f012c68b:	68 1c c8 13 f0       	push   $0xf013c81c
f012c690:	68 e4 0e 00 00       	push   $0xee4
f012c695:	68 3a b5 13 f0       	push   $0xf013b53a
f012c69a:	e8 66 3b fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c69f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c6a2:	e8 0a 0b fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c6a7:	29 c3                	sub    %eax,%ebx
f012c6a9:	89 d8                	mov    %ebx,%eax
f012c6ab:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c6b0:	74 17                	je     f012c6c9 <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012c6b2:	83 ec 04             	sub    $0x4,%esp
f012c6b5:	68 4e c8 13 f0       	push   $0xf013c84e
f012c6ba:	68 e7 0e 00 00       	push   $0xee7
f012c6bf:	68 3a b5 13 f0       	push   $0xf013b53a
f012c6c4:	e8 3c 3b fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c6c9:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012c6d0:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c6d3:	e8 d9 0a fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c6d8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012c6db:	83 ec 08             	sub    $0x8,%esp
f012c6de:	68 00 fc 0f 00       	push   $0xffc00
f012c6e3:	6a 00                	push   $0x0
f012c6e5:	e8 7f b7 fd ff       	call   f0107e69 <krealloc>
f012c6ea:	83 c4 10             	add    $0x10,%esp
f012c6ed:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012c6f3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c6f9:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012c6fe:	77 17                	ja     f012c717 <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c700:	83 ec 04             	sub    $0x4,%esp
f012c703:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c708:	68 ef 0e 00 00       	push   $0xeef
f012c70d:	68 3a b5 13 f0       	push   $0xf013b53a
f012c712:	e8 ee 3a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012c717:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c71d:	89 c1                	mov    %eax,%ecx
f012c71f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012c726:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012c729:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c72e:	89 45 98             	mov    %eax,-0x68(%ebp)
f012c731:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c734:	ba 00 00 00 00       	mov    $0x0,%edx
f012c739:	f7 75 9c             	divl   -0x64(%ebp)
f012c73c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012c73f:	29 d0                	sub    %edx,%eax
f012c741:	89 c3                	mov    %eax,%ebx
f012c743:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012c74a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012c74f:	0f b6 d0             	movzbl %al,%edx
f012c752:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012c755:	01 d0                	add    %edx,%eax
f012c757:	48                   	dec    %eax
f012c758:	89 45 90             	mov    %eax,-0x70(%ebp)
f012c75b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c75e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c763:	f7 75 94             	divl   -0x6c(%ebp)
f012c766:	8b 45 90             	mov    -0x70(%ebp),%eax
f012c769:	29 d0                	sub    %edx,%eax
f012c76b:	01 c3                	add    %eax,%ebx
f012c76d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012c774:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012c779:	0f b6 c0             	movzbl %al,%eax
f012c77c:	c1 e0 04             	shl    $0x4,%eax
f012c77f:	89 c2                	mov    %eax,%edx
f012c781:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012c784:	01 d0                	add    %edx,%eax
f012c786:	48                   	dec    %eax
f012c787:	89 45 88             	mov    %eax,-0x78(%ebp)
f012c78a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c78d:	ba 00 00 00 00       	mov    $0x0,%edx
f012c792:	f7 75 8c             	divl   -0x74(%ebp)
f012c795:	8b 45 88             	mov    -0x78(%ebp),%eax
f012c798:	29 d0                	sub    %edx,%eax
f012c79a:	01 d8                	add    %ebx,%eax
f012c79c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012c7a1:	39 c1                	cmp    %eax,%ecx
f012c7a3:	74 17                	je     f012c7bc <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012c7a5:	83 ec 04             	sub    $0x4,%esp
f012c7a8:	68 1c c8 13 f0       	push   $0xf013c81c
f012c7ad:	68 f1 0e 00 00       	push   $0xef1
f012c7b2:	68 3a b5 13 f0       	push   $0xf013b53a
f012c7b7:	e8 49 3a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c7bc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c7bf:	e8 ed 09 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c7c4:	29 c3                	sub    %eax,%ebx
f012c7c6:	89 d8                	mov    %ebx,%eax
f012c7c8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c7cd:	74 17                	je     f012c7e6 <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012c7cf:	83 ec 04             	sub    $0x4,%esp
f012c7d2:	68 4e c8 13 f0       	push   $0xf013c84e
f012c7d7:	68 f3 0e 00 00       	push   $0xef3
f012c7dc:	68 3a b5 13 f0       	push   $0xf013b53a
f012c7e1:	e8 1f 3a fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012c7e6:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012c7ed:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c7f0:	e8 bc 09 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c7f5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012c7f8:	83 ec 08             	sub    $0x8,%esp
f012c7fb:	68 00 fc 0f 00       	push   $0xffc00
f012c800:	6a 00                	push   $0x0
f012c802:	e8 62 b6 fd ff       	call   f0107e69 <krealloc>
f012c807:	83 c4 10             	add    $0x10,%esp
f012c80a:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012c810:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c816:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012c81b:	77 17                	ja     f012c834 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c81d:	83 ec 04             	sub    $0x4,%esp
f012c820:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c825:	68 fb 0e 00 00       	push   $0xefb
f012c82a:	68 3a b5 13 f0       	push   $0xf013b53a
f012c82f:	e8 d1 39 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012c834:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c83a:	89 c1                	mov    %eax,%ecx
f012c83c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012c843:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012c846:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c84b:	89 45 80             	mov    %eax,-0x80(%ebp)
f012c84e:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c851:	ba 00 00 00 00       	mov    $0x0,%edx
f012c856:	f7 75 84             	divl   -0x7c(%ebp)
f012c859:	8b 45 80             	mov    -0x80(%ebp),%eax
f012c85c:	29 d0                	sub    %edx,%eax
f012c85e:	89 c3                	mov    %eax,%ebx
f012c860:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012c867:	10 00 00 
f012c86a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012c86f:	0f b6 d0             	movzbl %al,%edx
f012c872:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012c878:	01 d0                	add    %edx,%eax
f012c87a:	48                   	dec    %eax
f012c87b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012c881:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c887:	ba 00 00 00 00       	mov    $0x0,%edx
f012c88c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012c892:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012c898:	29 d0                	sub    %edx,%eax
f012c89a:	01 c3                	add    %eax,%ebx
f012c89c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012c8a3:	10 00 00 
f012c8a6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012c8ab:	0f b6 c0             	movzbl %al,%eax
f012c8ae:	c1 e0 04             	shl    $0x4,%eax
f012c8b1:	89 c2                	mov    %eax,%edx
f012c8b3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012c8b9:	01 d0                	add    %edx,%eax
f012c8bb:	48                   	dec    %eax
f012c8bc:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012c8c2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c8c8:	ba 00 00 00 00       	mov    $0x0,%edx
f012c8cd:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012c8d3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012c8d9:	29 d0                	sub    %edx,%eax
f012c8db:	01 d8                	add    %ebx,%eax
f012c8dd:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012c8e2:	39 c1                	cmp    %eax,%ecx
f012c8e4:	74 17                	je     f012c8fd <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012c8e6:	83 ec 04             	sub    $0x4,%esp
f012c8e9:	68 1c c8 13 f0       	push   $0xf013c81c
f012c8ee:	68 fd 0e 00 00       	push   $0xefd
f012c8f3:	68 3a b5 13 f0       	push   $0xf013b53a
f012c8f8:	e8 08 39 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012c8fd:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c900:	e8 ac 08 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c905:	29 c3                	sub    %eax,%ebx
f012c907:	89 d8                	mov    %ebx,%eax
f012c909:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c90e:	74 17                	je     f012c927 <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012c910:	83 ec 04             	sub    $0x4,%esp
f012c913:	68 4e c8 13 f0       	push   $0xf013c84e
f012c918:	68 ff 0e 00 00       	push   $0xeff
f012c91d:	68 3a b5 13 f0       	push   $0xf013b53a
f012c922:	e8 de 38 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012c927:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012c92e:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012c931:	e8 7b 08 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012c936:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012c939:	83 ec 08             	sub    $0x8,%esp
f012c93c:	68 00 fc 0f 00       	push   $0xffc00
f012c941:	6a 00                	push   $0x0
f012c943:	e8 21 b5 fd ff       	call   f0107e69 <krealloc>
f012c948:	83 c4 10             	add    $0x10,%esp
f012c94b:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012c951:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c957:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012c95c:	77 17                	ja     f012c975 <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c95e:	83 ec 04             	sub    $0x4,%esp
f012c961:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012c966:	68 06 0f 00 00       	push   $0xf06
f012c96b:	68 3a b5 13 f0       	push   $0xf013b53a
f012c970:	e8 90 38 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012c975:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c97b:	89 c1                	mov    %eax,%ecx
f012c97d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012c984:	10 00 00 
f012c987:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012c98d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012c992:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012c998:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c99e:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9a3:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012c9a9:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012c9af:	29 d0                	sub    %edx,%eax
f012c9b1:	89 c3                	mov    %eax,%ebx
f012c9b3:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012c9ba:	10 00 00 
f012c9bd:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012c9c2:	0f b6 d0             	movzbl %al,%edx
f012c9c5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012c9cb:	01 d0                	add    %edx,%eax
f012c9cd:	48                   	dec    %eax
f012c9ce:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012c9d4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c9da:	ba 00 00 00 00       	mov    $0x0,%edx
f012c9df:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012c9e5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012c9eb:	29 d0                	sub    %edx,%eax
f012c9ed:	01 c3                	add    %eax,%ebx
f012c9ef:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012c9f6:	10 00 00 
f012c9f9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012c9fe:	0f b6 c0             	movzbl %al,%eax
f012ca01:	c1 e0 04             	shl    $0x4,%eax
f012ca04:	89 c2                	mov    %eax,%edx
f012ca06:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012ca0c:	01 d0                	add    %edx,%eax
f012ca0e:	48                   	dec    %eax
f012ca0f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012ca15:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ca1b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca20:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012ca26:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012ca2c:	29 d0                	sub    %edx,%eax
f012ca2e:	01 d8                	add    %ebx,%eax
f012ca30:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012ca35:	39 c1                	cmp    %eax,%ecx
f012ca37:	74 17                	je     f012ca50 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012ca39:	83 ec 04             	sub    $0x4,%esp
f012ca3c:	68 1c c8 13 f0       	push   $0xf013c81c
f012ca41:	68 08 0f 00 00       	push   $0xf08
f012ca46:	68 3a b5 13 f0       	push   $0xf013b53a
f012ca4b:	e8 b5 37 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012ca50:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ca53:	e8 59 07 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ca58:	29 c3                	sub    %eax,%ebx
f012ca5a:	89 d8                	mov    %ebx,%eax
f012ca5c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ca61:	74 17                	je     f012ca7a <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012ca63:	83 ec 04             	sub    $0x4,%esp
f012ca66:	68 4e c8 13 f0       	push   $0xf013c84e
f012ca6b:	68 0a 0f 00 00       	push   $0xf0a
f012ca70:	68 3a b5 13 f0       	push   $0xf013b53a
f012ca75:	e8 8b 37 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012ca7a:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012ca81:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ca84:	e8 28 07 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ca89:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012ca8c:	83 ec 08             	sub    $0x8,%esp
f012ca8f:	68 00 fc 1f 00       	push   $0x1ffc00
f012ca94:	6a 00                	push   $0x0
f012ca96:	e8 ce b3 fd ff       	call   f0107e69 <krealloc>
f012ca9b:	83 c4 10             	add    $0x10,%esp
f012ca9e:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012caa4:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012caaa:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012caaf:	77 17                	ja     f012cac8 <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cab1:	83 ec 04             	sub    $0x4,%esp
f012cab4:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012cab9:	68 11 0f 00 00       	push   $0xf11
f012cabe:	68 3a b5 13 f0       	push   $0xf013b53a
f012cac3:	e8 3d 37 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012cac8:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cace:	89 c1                	mov    %eax,%ecx
f012cad0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012cad7:	10 00 00 
f012cada:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012cae0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cae5:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012caeb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012caf1:	ba 00 00 00 00       	mov    $0x0,%edx
f012caf6:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012cafc:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012cb02:	29 d0                	sub    %edx,%eax
f012cb04:	89 c3                	mov    %eax,%ebx
f012cb06:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012cb0d:	10 00 00 
f012cb10:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012cb15:	0f b6 d0             	movzbl %al,%edx
f012cb18:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012cb1e:	01 d0                	add    %edx,%eax
f012cb20:	48                   	dec    %eax
f012cb21:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012cb27:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012cb2d:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb32:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012cb38:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012cb3e:	29 d0                	sub    %edx,%eax
f012cb40:	01 c3                	add    %eax,%ebx
f012cb42:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012cb49:	10 00 00 
f012cb4c:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012cb51:	0f b6 c0             	movzbl %al,%eax
f012cb54:	c1 e0 04             	shl    $0x4,%eax
f012cb57:	89 c2                	mov    %eax,%edx
f012cb59:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012cb5f:	01 d0                	add    %edx,%eax
f012cb61:	48                   	dec    %eax
f012cb62:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012cb68:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cb6e:	ba 00 00 00 00       	mov    $0x0,%edx
f012cb73:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012cb79:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012cb7f:	29 d0                	sub    %edx,%eax
f012cb81:	01 d8                	add    %ebx,%eax
f012cb83:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012cb88:	39 c1                	cmp    %eax,%ecx
f012cb8a:	74 17                	je     f012cba3 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012cb8c:	83 ec 04             	sub    $0x4,%esp
f012cb8f:	68 1c c8 13 f0       	push   $0xf013c81c
f012cb94:	68 13 0f 00 00       	push   $0xf13
f012cb99:	68 3a b5 13 f0       	push   $0xf013b53a
f012cb9e:	e8 62 36 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012cba3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cba6:	e8 06 06 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012cbab:	29 c3                	sub    %eax,%ebx
f012cbad:	89 d8                	mov    %ebx,%eax
f012cbaf:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cbb4:	74 17                	je     f012cbcd <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012cbb6:	83 ec 04             	sub    $0x4,%esp
f012cbb9:	68 4e c8 13 f0       	push   $0xf013c84e
f012cbbe:	68 15 0f 00 00       	push   $0xf15
f012cbc3:	68 3a b5 13 f0       	push   $0xf013b53a
f012cbc8:	e8 38 36 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012cbcd:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012cbd4:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012cbd7:	e8 d5 05 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012cbdc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012cbdf:	83 ec 08             	sub    $0x8,%esp
f012cbe2:	68 00 fc 1f 00       	push   $0x1ffc00
f012cbe7:	6a 00                	push   $0x0
f012cbe9:	e8 7b b2 fd ff       	call   f0107e69 <krealloc>
f012cbee:	83 c4 10             	add    $0x10,%esp
f012cbf1:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012cbf7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cbfd:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012cc02:	77 17                	ja     f012cc1b <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc04:	83 ec 04             	sub    $0x4,%esp
f012cc07:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012cc0c:	68 1c 0f 00 00       	push   $0xf1c
f012cc11:	68 3a b5 13 f0       	push   $0xf013b53a
f012cc16:	e8 ea 35 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012cc1b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012cc21:	89 c1                	mov    %eax,%ecx
f012cc23:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012cc2a:	10 00 00 
f012cc2d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012cc33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cc38:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012cc3e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cc44:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc49:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012cc4f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012cc55:	29 d0                	sub    %edx,%eax
f012cc57:	89 c3                	mov    %eax,%ebx
f012cc59:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012cc60:	10 00 00 
f012cc63:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012cc68:	0f b6 d0             	movzbl %al,%edx
f012cc6b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012cc71:	01 d0                	add    %edx,%eax
f012cc73:	48                   	dec    %eax
f012cc74:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012cc7a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cc80:	ba 00 00 00 00       	mov    $0x0,%edx
f012cc85:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012cc8b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012cc91:	29 d0                	sub    %edx,%eax
f012cc93:	01 c3                	add    %eax,%ebx
f012cc95:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012cc9c:	10 00 00 
f012cc9f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012cca4:	0f b6 c0             	movzbl %al,%eax
f012cca7:	c1 e0 04             	shl    $0x4,%eax
f012ccaa:	89 c2                	mov    %eax,%edx
f012ccac:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ccb2:	01 d0                	add    %edx,%eax
f012ccb4:	48                   	dec    %eax
f012ccb5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012ccbb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ccc1:	ba 00 00 00 00       	mov    $0x0,%edx
f012ccc6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012cccc:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ccd2:	29 d0                	sub    %edx,%eax
f012ccd4:	01 d8                	add    %ebx,%eax
f012ccd6:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012ccdb:	39 c1                	cmp    %eax,%ecx
f012ccdd:	74 17                	je     f012ccf6 <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012ccdf:	83 ec 04             	sub    $0x4,%esp
f012cce2:	68 1c c8 13 f0       	push   $0xf013c81c
f012cce7:	68 1e 0f 00 00       	push   $0xf1e
f012ccec:	68 3a b5 13 f0       	push   $0xf013b53a
f012ccf1:	e8 0f 35 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012ccf6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ccf9:	e8 b3 04 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ccfe:	29 c3                	sub    %eax,%ebx
f012cd00:	89 d8                	mov    %ebx,%eax
f012cd02:	3d 00 02 00 00       	cmp    $0x200,%eax
f012cd07:	74 17                	je     f012cd20 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012cd09:	83 ec 04             	sub    $0x4,%esp
f012cd0c:	68 4e c8 13 f0       	push   $0xf013c84e
f012cd11:	68 20 0f 00 00       	push   $0xf20
f012cd16:	68 3a b5 13 f0       	push   $0xf013b53a
f012cd1b:	e8 e5 34 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012cd20:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012cd27:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012cd2a:	e8 82 04 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012cd2f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012cd32:	83 ec 08             	sub    $0x8,%esp
f012cd35:	68 00 fc 2f 00       	push   $0x2ffc00
f012cd3a:	6a 00                	push   $0x0
f012cd3c:	e8 28 b1 fd ff       	call   f0107e69 <krealloc>
f012cd41:	83 c4 10             	add    $0x10,%esp
f012cd44:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012cd4a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cd50:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012cd55:	77 17                	ja     f012cd6e <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cd57:	83 ec 04             	sub    $0x4,%esp
f012cd5a:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012cd5f:	68 27 0f 00 00       	push   $0xf27
f012cd64:	68 3a b5 13 f0       	push   $0xf013b53a
f012cd69:	e8 97 34 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012cd6e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cd74:	89 c1                	mov    %eax,%ecx
f012cd76:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012cd7d:	10 00 00 
f012cd80:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012cd86:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cd8b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012cd91:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cd97:	ba 00 00 00 00       	mov    $0x0,%edx
f012cd9c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012cda2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012cda8:	29 d0                	sub    %edx,%eax
f012cdaa:	89 c3                	mov    %eax,%ebx
f012cdac:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012cdb3:	10 00 00 
f012cdb6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012cdbb:	0f b6 d0             	movzbl %al,%edx
f012cdbe:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012cdc4:	01 d0                	add    %edx,%eax
f012cdc6:	48                   	dec    %eax
f012cdc7:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012cdcd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cdd3:	ba 00 00 00 00       	mov    $0x0,%edx
f012cdd8:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012cdde:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012cde4:	29 d0                	sub    %edx,%eax
f012cde6:	01 c3                	add    %eax,%ebx
f012cde8:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012cdef:	10 00 00 
f012cdf2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012cdf7:	0f b6 c0             	movzbl %al,%eax
f012cdfa:	c1 e0 04             	shl    $0x4,%eax
f012cdfd:	89 c2                	mov    %eax,%edx
f012cdff:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ce05:	01 d0                	add    %edx,%eax
f012ce07:	48                   	dec    %eax
f012ce08:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ce0e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ce14:	ba 00 00 00 00       	mov    $0x0,%edx
f012ce19:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ce1f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ce25:	29 d0                	sub    %edx,%eax
f012ce27:	01 d8                	add    %ebx,%eax
f012ce29:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ce2e:	39 c1                	cmp    %eax,%ecx
f012ce30:	74 17                	je     f012ce49 <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ce32:	83 ec 04             	sub    $0x4,%esp
f012ce35:	68 1c c8 13 f0       	push   $0xf013c81c
f012ce3a:	68 29 0f 00 00       	push   $0xf29
f012ce3f:	68 3a b5 13 f0       	push   $0xf013b53a
f012ce44:	e8 bc 33 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ce49:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ce4c:	e8 60 03 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ce51:	29 c3                	sub    %eax,%ebx
f012ce53:	89 d8                	mov    %ebx,%eax
f012ce55:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ce5a:	74 17                	je     f012ce73 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012ce5c:	83 ec 04             	sub    $0x4,%esp
f012ce5f:	68 84 b9 13 f0       	push   $0xf013b984
f012ce64:	68 2b 0f 00 00       	push   $0xf2b
f012ce69:	68 3a b5 13 f0       	push   $0xf013b53a
f012ce6e:	e8 92 33 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ce73:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012ce7a:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ce7d:	e8 2f 03 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ce82:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ce85:	83 ec 08             	sub    $0x8,%esp
f012ce88:	68 00 fc 2f 00       	push   $0x2ffc00
f012ce8d:	6a 00                	push   $0x0
f012ce8f:	e8 d5 af fd ff       	call   f0107e69 <krealloc>
f012ce94:	83 c4 10             	add    $0x10,%esp
f012ce97:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ce9d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cea3:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012cea8:	77 17                	ja     f012cec1 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ceaa:	83 ec 04             	sub    $0x4,%esp
f012cead:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012ceb2:	68 32 0f 00 00       	push   $0xf32
f012ceb7:	68 3a b5 13 f0       	push   $0xf013b53a
f012cebc:	e8 44 33 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012cec1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012cec7:	89 c1                	mov    %eax,%ecx
f012cec9:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ced0:	10 00 00 
f012ced3:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ced9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cede:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012cee4:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ceea:	ba 00 00 00 00       	mov    $0x0,%edx
f012ceef:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012cef5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012cefb:	29 d0                	sub    %edx,%eax
f012cefd:	89 c3                	mov    %eax,%ebx
f012ceff:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012cf06:	10 00 00 
f012cf09:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012cf0e:	0f b6 d0             	movzbl %al,%edx
f012cf11:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012cf17:	01 d0                	add    %edx,%eax
f012cf19:	48                   	dec    %eax
f012cf1a:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012cf20:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cf26:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf2b:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012cf31:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012cf37:	29 d0                	sub    %edx,%eax
f012cf39:	01 c3                	add    %eax,%ebx
f012cf3b:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012cf42:	10 00 00 
f012cf45:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012cf4a:	0f b6 c0             	movzbl %al,%eax
f012cf4d:	c1 e0 04             	shl    $0x4,%eax
f012cf50:	89 c2                	mov    %eax,%edx
f012cf52:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012cf58:	01 d0                	add    %edx,%eax
f012cf5a:	48                   	dec    %eax
f012cf5b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012cf61:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cf67:	ba 00 00 00 00       	mov    $0x0,%edx
f012cf6c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012cf72:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012cf78:	29 d0                	sub    %edx,%eax
f012cf7a:	01 d8                	add    %ebx,%eax
f012cf7c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012cf81:	39 c1                	cmp    %eax,%ecx
f012cf83:	74 17                	je     f012cf9c <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012cf85:	83 ec 04             	sub    $0x4,%esp
f012cf88:	68 1c c8 13 f0       	push   $0xf013c81c
f012cf8d:	68 34 0f 00 00       	push   $0xf34
f012cf92:	68 3a b5 13 f0       	push   $0xf013b53a
f012cf97:	e8 69 32 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012cf9c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cf9f:	e8 0d 02 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012cfa4:	29 c3                	sub    %eax,%ebx
f012cfa6:	89 d8                	mov    %ebx,%eax
f012cfa8:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cfad:	74 17                	je     f012cfc6 <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012cfaf:	83 ec 04             	sub    $0x4,%esp
f012cfb2:	68 4e c8 13 f0       	push   $0xf013c84e
f012cfb7:	68 36 0f 00 00       	push   $0xf36
f012cfbc:	68 3a b5 13 f0       	push   $0xf013b53a
f012cfc1:	e8 3f 32 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012cfc6:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012cfcd:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012cfd0:	e8 dc 01 fe ff       	call   f010d1b1 <sys_calculate_free_frames>
f012cfd5:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012cfd8:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012cfdf:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012cfe2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012cfe8:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012cfee:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012cff4:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012cff7:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012cff9:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012cfff:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d005:	01 c2                	add    %eax,%edx
f012d007:	8a 45 ce             	mov    -0x32(%ebp),%al
f012d00a:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012d00c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d012:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d018:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012d01f:	eb 11                	jmp    f012d032 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012d021:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012d024:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d02a:	01 d0                	add    %edx,%eax
f012d02c:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012d02f:	ff 45 f4             	incl   -0xc(%ebp)
f012d032:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d038:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012d03b:	7d e4                	jge    f012d021 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012d03d:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d043:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012d049:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d04f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012d055:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d05b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d062:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d068:	01 d0                	add    %edx,%eax
f012d06a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012d070:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d076:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d07c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012d083:	eb 1b                	jmp    f012d0a0 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012d085:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012d088:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d08f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d095:	01 d0                	add    %edx,%eax
f012d097:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012d09d:	ff 45 f0             	incl   -0x10(%ebp)
f012d0a0:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d0a6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012d0a9:	7d da                	jge    f012d085 <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012d0ab:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d0b1:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d0b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012d0be:	eb 17                	jmp    f012d0d7 <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012d0c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012d0c3:	01 c0                	add    %eax,%eax
f012d0c5:	89 c2                	mov    %eax,%edx
f012d0c7:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d0cd:	01 d0                	add    %edx,%eax
f012d0cf:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012d0d4:	ff 45 ec             	incl   -0x14(%ebp)
f012d0d7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d0dd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012d0e0:	7d de                	jge    f012d0c0 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012d0e2:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d0e8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012d0ee:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d0f4:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012d0f9:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d0ff:	01 c0                	add    %eax,%eax
f012d101:	89 c2                	mov    %eax,%edx
f012d103:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d109:	01 d0                	add    %edx,%eax
f012d10b:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012d110:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d116:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d11c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012d123:	eb 49                	jmp    f012d16e <test_krealloc+0xc58>
			structArr[i].a = 7;
f012d125:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d128:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d12f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d135:	01 d0                	add    %edx,%eax
f012d137:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012d13a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d13d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d144:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d14a:	01 d0                	add    %edx,%eax
f012d14c:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012d152:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012d155:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d15c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d162:	01 d0                	add    %edx,%eax
f012d164:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012d16b:	ff 45 e8             	incl   -0x18(%ebp)
f012d16e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d174:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012d177:	7d ac                	jge    f012d125 <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012d179:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d17f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012d185:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d18b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012d18e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d194:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012d19a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1a0:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012d1a7:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d1ad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1b4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1ba:	01 d0                	add    %edx,%eax
f012d1bc:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012d1bf:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d1c5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1cc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1d2:	01 d0                	add    %edx,%eax
f012d1d4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012d1da:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d1e0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d1e7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d1ed:	01 d0                	add    %edx,%eax
f012d1ef:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012d1f6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d1fc:	8a 00                	mov    (%eax),%al
f012d1fe:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012d201:	75 17                	jne    f012d21a <test_krealloc+0xd04>
f012d203:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012d209:	89 c2                	mov    %eax,%edx
f012d20b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012d211:	01 d0                	add    %edx,%eax
f012d213:	8a 00                	mov    (%eax),%al
f012d215:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012d218:	74 17                	je     f012d231 <test_krealloc+0xd1b>
			panic(
f012d21a:	83 ec 04             	sub    $0x4,%esp
f012d21d:	68 6c c8 13 f0       	push   $0xf013c86c
f012d222:	68 79 0f 00 00       	push   $0xf79
f012d227:	68 3a b5 13 f0       	push   $0xf013b53a
f012d22c:	e8 d4 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012d231:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d237:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012d23d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d243:	8a 00                	mov    (%eax),%al
f012d245:	3c 02                	cmp    $0x2,%al
f012d247:	75 16                	jne    f012d25f <test_krealloc+0xd49>
f012d249:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d24f:	89 c2                	mov    %eax,%edx
f012d251:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d257:	01 d0                	add    %edx,%eax
f012d259:	8a 00                	mov    (%eax),%al
f012d25b:	3c 02                	cmp    $0x2,%al
f012d25d:	74 20                	je     f012d27f <test_krealloc+0xd69>
			panic(
f012d25f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d265:	8a 00                	mov    (%eax),%al
f012d267:	0f be c0             	movsbl %al,%eax
f012d26a:	50                   	push   %eax
f012d26b:	68 ac c8 13 f0       	push   $0xf013c8ac
f012d270:	68 7f 0f 00 00       	push   $0xf7f
f012d275:	68 3a b5 13 f0       	push   $0xf013b53a
f012d27a:	e8 86 2f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012d27f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d285:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012d28b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d291:	8b 00                	mov    (%eax),%eax
f012d293:	83 f8 03             	cmp    $0x3,%eax
f012d296:	75 1c                	jne    f012d2b4 <test_krealloc+0xd9e>
f012d298:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012d29e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d2a5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2ab:	01 d0                	add    %edx,%eax
f012d2ad:	8b 00                	mov    (%eax),%eax
f012d2af:	83 f8 03             	cmp    $0x3,%eax
f012d2b2:	74 17                	je     f012d2cb <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012d2b4:	83 ec 04             	sub    $0x4,%esp
f012d2b7:	68 f8 c8 13 f0       	push   $0xf013c8f8
f012d2bc:	68 83 0f 00 00       	push   $0xf83
f012d2c1:	68 3a b5 13 f0       	push   $0xf013b53a
f012d2c6:	e8 3a 2f fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012d2cb:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d2d1:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012d2d7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2dd:	8b 00                	mov    (%eax),%eax
f012d2df:	83 f8 04             	cmp    $0x4,%eax
f012d2e2:	75 1c                	jne    f012d300 <test_krealloc+0xdea>
f012d2e4:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d2ea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012d2f1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d2f7:	01 d0                	add    %edx,%eax
f012d2f9:	8b 00                	mov    (%eax),%eax
f012d2fb:	83 f8 04             	cmp    $0x4,%eax
f012d2fe:	74 17                	je     f012d317 <test_krealloc+0xe01>
			panic(
f012d300:	83 ec 04             	sub    $0x4,%esp
f012d303:	68 6c c8 13 f0       	push   $0xf013c86c
f012d308:	68 88 0f 00 00       	push   $0xf88
f012d30d:	68 3a b5 13 f0       	push   $0xf013b53a
f012d312:	e8 ee 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012d317:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d31d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012d323:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d329:	66 8b 00             	mov    (%eax),%ax
f012d32c:	66 83 f8 05          	cmp    $0x5,%ax
f012d330:	75 1b                	jne    f012d34d <test_krealloc+0xe37>
f012d332:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d338:	01 c0                	add    %eax,%eax
f012d33a:	89 c2                	mov    %eax,%edx
f012d33c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d342:	01 d0                	add    %edx,%eax
f012d344:	66 8b 00             	mov    (%eax),%ax
f012d347:	66 83 f8 05          	cmp    $0x5,%ax
f012d34b:	74 17                	je     f012d364 <test_krealloc+0xe4e>
			panic(
f012d34d:	83 ec 04             	sub    $0x4,%esp
f012d350:	68 6c c8 13 f0       	push   $0xf013c86c
f012d355:	68 8d 0f 00 00       	push   $0xf8d
f012d35a:	68 3a b5 13 f0       	push   $0xf013b53a
f012d35f:	e8 a1 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012d364:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d36a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012d370:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d376:	66 8b 00             	mov    (%eax),%ax
f012d379:	66 83 f8 06          	cmp    $0x6,%ax
f012d37d:	75 1b                	jne    f012d39a <test_krealloc+0xe84>
f012d37f:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012d385:	01 c0                	add    %eax,%eax
f012d387:	89 c2                	mov    %eax,%edx
f012d389:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d38f:	01 d0                	add    %edx,%eax
f012d391:	66 8b 00             	mov    (%eax),%ax
f012d394:	66 83 f8 06          	cmp    $0x6,%ax
f012d398:	74 17                	je     f012d3b1 <test_krealloc+0xe9b>
			panic(
f012d39a:	83 ec 04             	sub    $0x4,%esp
f012d39d:	68 6c c8 13 f0       	push   $0xf013c86c
f012d3a2:	68 92 0f 00 00       	push   $0xf92
f012d3a7:	68 3a b5 13 f0       	push   $0xf013b53a
f012d3ac:	e8 54 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012d3b1:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d3b7:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012d3bd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3c3:	8a 00                	mov    (%eax),%al
f012d3c5:	3c 07                	cmp    $0x7,%al
f012d3c7:	75 1b                	jne    f012d3e4 <test_krealloc+0xece>
f012d3c9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d3cf:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d3d6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d3dc:	01 d0                	add    %edx,%eax
f012d3de:	8a 00                	mov    (%eax),%al
f012d3e0:	3c 07                	cmp    $0x7,%al
f012d3e2:	74 17                	je     f012d3fb <test_krealloc+0xee5>
			panic(
f012d3e4:	83 ec 04             	sub    $0x4,%esp
f012d3e7:	68 6c c8 13 f0       	push   $0xf013c86c
f012d3ec:	68 97 0f 00 00       	push   $0xf97
f012d3f1:	68 3a b5 13 f0       	push   $0xf013b53a
f012d3f6:	e8 0a 2e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012d3fb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d401:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d405:	66 83 f8 07          	cmp    $0x7,%ax
f012d409:	75 1f                	jne    f012d42a <test_krealloc+0xf14>
f012d40b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d411:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d418:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d41e:	01 d0                	add    %edx,%eax
f012d420:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d424:	66 83 f8 07          	cmp    $0x7,%ax
f012d428:	74 17                	je     f012d441 <test_krealloc+0xf2b>
			panic(
f012d42a:	83 ec 04             	sub    $0x4,%esp
f012d42d:	68 6c c8 13 f0       	push   $0xf013c86c
f012d432:	68 9a 0f 00 00       	push   $0xf9a
f012d437:	68 3a b5 13 f0       	push   $0xf013b53a
f012d43c:	e8 c4 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012d441:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d447:	8b 40 04             	mov    0x4(%eax),%eax
f012d44a:	83 f8 07             	cmp    $0x7,%eax
f012d44d:	75 1d                	jne    f012d46c <test_krealloc+0xf56>
f012d44f:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d455:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d45c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d462:	01 d0                	add    %edx,%eax
f012d464:	8b 40 04             	mov    0x4(%eax),%eax
f012d467:	83 f8 07             	cmp    $0x7,%eax
f012d46a:	74 17                	je     f012d483 <test_krealloc+0xf6d>
			panic(
f012d46c:	83 ec 04             	sub    $0x4,%esp
f012d46f:	68 6c c8 13 f0       	push   $0xf013c86c
f012d474:	68 9d 0f 00 00       	push   $0xf9d
f012d479:	68 3a b5 13 f0       	push   $0xf013b53a
f012d47e:	e8 82 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012d483:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d489:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012d48f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d495:	8a 00                	mov    (%eax),%al
f012d497:	3c 08                	cmp    $0x8,%al
f012d499:	75 1b                	jne    f012d4b6 <test_krealloc+0xfa0>
f012d49b:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d4a1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d4a8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4ae:	01 d0                	add    %edx,%eax
f012d4b0:	8a 00                	mov    (%eax),%al
f012d4b2:	3c 08                	cmp    $0x8,%al
f012d4b4:	74 17                	je     f012d4cd <test_krealloc+0xfb7>
			panic(
f012d4b6:	83 ec 04             	sub    $0x4,%esp
f012d4b9:	68 6c c8 13 f0       	push   $0xf013c86c
f012d4be:	68 a2 0f 00 00       	push   $0xfa2
f012d4c3:	68 3a b5 13 f0       	push   $0xf013b53a
f012d4c8:	e8 38 2d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012d4cd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4d3:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d4d7:	66 83 f8 08          	cmp    $0x8,%ax
f012d4db:	75 1f                	jne    f012d4fc <test_krealloc+0xfe6>
f012d4dd:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d4e3:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d4ea:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d4f0:	01 d0                	add    %edx,%eax
f012d4f2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d4f6:	66 83 f8 08          	cmp    $0x8,%ax
f012d4fa:	74 17                	je     f012d513 <test_krealloc+0xffd>
			panic(
f012d4fc:	83 ec 04             	sub    $0x4,%esp
f012d4ff:	68 6c c8 13 f0       	push   $0xf013c86c
f012d504:	68 a5 0f 00 00       	push   $0xfa5
f012d509:	68 3a b5 13 f0       	push   $0xf013b53a
f012d50e:	e8 f2 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012d513:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d519:	8b 40 04             	mov    0x4(%eax),%eax
f012d51c:	83 f8 08             	cmp    $0x8,%eax
f012d51f:	75 1d                	jne    f012d53e <test_krealloc+0x1028>
f012d521:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012d527:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012d52e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d534:	01 d0                	add    %edx,%eax
f012d536:	8b 40 04             	mov    0x4(%eax),%eax
f012d539:	83 f8 08             	cmp    $0x8,%eax
f012d53c:	74 17                	je     f012d555 <test_krealloc+0x103f>
			panic(
f012d53e:	83 ec 04             	sub    $0x4,%esp
f012d541:	68 6c c8 13 f0       	push   $0xf013c86c
f012d546:	68 a8 0f 00 00       	push   $0xfa8
f012d54b:	68 3a b5 13 f0       	push   $0xf013b53a
f012d550:	e8 b0 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012d555:	e8 57 fc fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d55a:	89 c2                	mov    %eax,%edx
f012d55c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d55f:	39 c2                	cmp    %eax,%edx
f012d561:	74 17                	je     f012d57a <test_krealloc+0x1064>
			panic(
f012d563:	83 ec 04             	sub    $0x4,%esp
f012d566:	68 2c c9 13 f0       	push   $0xf013c92c
f012d56b:	68 ac 0f 00 00       	push   $0xfac
f012d570:	68 3a b5 13 f0       	push   $0xf013b53a
f012d575:	e8 8b 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012d57a:	83 ec 0c             	sub    $0xc,%esp
f012d57d:	68 78 c9 13 f0       	push   $0xf013c978
f012d582:	e8 87 37 fd ff       	call   f0100d0e <cprintf>
f012d587:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012d58a:	e8 22 fc fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d58f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d592:	e8 18 68 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012d597:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012d59d:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d5a3:	83 ec 08             	sub    $0x8,%esp
f012d5a6:	6a 00                	push   $0x0
f012d5a8:	50                   	push   %eax
f012d5a9:	e8 bb a8 fd ff       	call   f0107e69 <krealloc>
f012d5ae:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d5b1:	e8 f9 67 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012d5b6:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d5bc:	74 17                	je     f012d5d5 <test_krealloc+0x10bf>
			panic(
f012d5be:	83 ec 04             	sub    $0x4,%esp
f012d5c1:	68 9c c9 13 f0       	push   $0xf013c99c
f012d5c6:	68 b9 0f 00 00       	push   $0xfb9
f012d5cb:	68 3a b5 13 f0       	push   $0xf013b53a
f012d5d0:	e8 30 2c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d5d5:	e8 d7 fb fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d5da:	89 c2                	mov    %eax,%edx
f012d5dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d5df:	29 c2                	sub    %eax,%edx
f012d5e1:	89 d0                	mov    %edx,%eax
f012d5e3:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d5e8:	74 17                	je     f012d601 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012d5ea:	83 ec 04             	sub    $0x4,%esp
f012d5ed:	68 10 ca 13 f0       	push   $0xf013ca10
f012d5f2:	68 bb 0f 00 00       	push   $0xfbb
f012d5f7:	68 3a b5 13 f0       	push   $0xf013b53a
f012d5fc:	e8 04 2c fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012d601:	e8 ab fb fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d606:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d609:	e8 a1 67 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012d60e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012d614:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012d61a:	83 ec 08             	sub    $0x8,%esp
f012d61d:	6a 00                	push   $0x0
f012d61f:	50                   	push   %eax
f012d620:	e8 44 a8 fd ff       	call   f0107e69 <krealloc>
f012d625:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d628:	e8 82 67 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012d62d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d633:	74 17                	je     f012d64c <test_krealloc+0x1136>
			panic(
f012d635:	83 ec 04             	sub    $0x4,%esp
f012d638:	68 9c c9 13 f0       	push   $0xf013c99c
f012d63d:	68 c4 0f 00 00       	push   $0xfc4
f012d642:	68 3a b5 13 f0       	push   $0xf013b53a
f012d647:	e8 b9 2b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012d64c:	e8 60 fb fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d651:	89 c2                	mov    %eax,%edx
f012d653:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d656:	29 c2                	sub    %eax,%edx
f012d658:	89 d0                	mov    %edx,%eax
f012d65a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d65f:	74 17                	je     f012d678 <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012d661:	83 ec 04             	sub    $0x4,%esp
f012d664:	68 10 ca 13 f0       	push   $0xf013ca10
f012d669:	68 c6 0f 00 00       	push   $0xfc6
f012d66e:	68 3a b5 13 f0       	push   $0xf013b53a
f012d673:	e8 8d 2b fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012d678:	e8 34 fb fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d67d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d680:	e8 2a 67 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012d685:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012d68b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012d691:	83 ec 08             	sub    $0x8,%esp
f012d694:	6a 00                	push   $0x0
f012d696:	50                   	push   %eax
f012d697:	e8 cd a7 fd ff       	call   f0107e69 <krealloc>
f012d69c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d69f:	e8 0b 67 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012d6a4:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d6aa:	74 17                	je     f012d6c3 <test_krealloc+0x11ad>
			panic(
f012d6ac:	83 ec 04             	sub    $0x4,%esp
f012d6af:	68 54 b5 13 f0       	push   $0xf013b554
f012d6b4:	68 ce 0f 00 00       	push   $0xfce
f012d6b9:	68 3a b5 13 f0       	push   $0xf013b53a
f012d6be:	e8 42 2b fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012d6c3:	e8 e9 fa fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d6c8:	89 c2                	mov    %eax,%edx
f012d6ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d6cd:	29 c2                	sub    %eax,%edx
f012d6cf:	89 d0                	mov    %edx,%eax
f012d6d1:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d6d6:	74 17                	je     f012d6ef <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012d6d8:	83 ec 04             	sub    $0x4,%esp
f012d6db:	68 10 ca 13 f0       	push   $0xf013ca10
f012d6e0:	68 d0 0f 00 00       	push   $0xfd0
f012d6e5:	68 3a b5 13 f0       	push   $0xf013b53a
f012d6ea:	e8 16 2b fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012d6ef:	e8 bd fa fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d6f4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d6f7:	e8 b3 66 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012d6fc:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012d702:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012d708:	83 ec 08             	sub    $0x8,%esp
f012d70b:	6a 00                	push   $0x0
f012d70d:	50                   	push   %eax
f012d70e:	e8 56 a7 fd ff       	call   f0107e69 <krealloc>
f012d713:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d716:	e8 94 66 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012d71b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d721:	74 17                	je     f012d73a <test_krealloc+0x1224>
			panic(
f012d723:	83 ec 04             	sub    $0x4,%esp
f012d726:	68 9c c9 13 f0       	push   $0xf013c99c
f012d72b:	68 d8 0f 00 00       	push   $0xfd8
f012d730:	68 3a b5 13 f0       	push   $0xf013b53a
f012d735:	e8 cb 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012d73a:	e8 72 fa fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012d73f:	89 c2                	mov    %eax,%edx
f012d741:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d744:	29 c2                	sub    %eax,%edx
f012d746:	89 d0                	mov    %edx,%eax
f012d748:	3d 00 03 00 00       	cmp    $0x300,%eax
f012d74d:	74 17                	je     f012d766 <test_krealloc+0x1250>
			panic(
f012d74f:	83 ec 04             	sub    $0x4,%esp
f012d752:	68 44 ca 13 f0       	push   $0xf013ca44
f012d757:	68 db 0f 00 00       	push   $0xfdb
f012d75c:	68 3a b5 13 f0       	push   $0xf013b53a
f012d761:	e8 9f 2a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d766:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012d76d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012d774:	eb 48                	jmp    f012d7be <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d776:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012d779:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f012d77e:	83 ec 04             	sub    $0x4,%esp
f012d781:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012d787:	51                   	push   %ecx
f012d788:	52                   	push   %edx
f012d789:	50                   	push   %eax
f012d78a:	e8 09 93 fd ff       	call   f0106a98 <get_page_table>
f012d78f:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d792:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012d798:	85 c0                	test   %eax,%eax
f012d79a:	75 17                	jne    f012d7b3 <test_krealloc+0x129d>
					panic(
f012d79c:	83 ec 04             	sub    $0x4,%esp
f012d79f:	68 3c be 13 f0       	push   $0xf013be3c
f012d7a4:	68 e7 0f 00 00       	push   $0xfe7
f012d7a9:	68 3a b5 13 f0       	push   $0xf013b53a
f012d7ae:	e8 52 2a fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d7b3:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012d7ba:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012d7be:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d7c2:	78 b2                	js     f012d776 <test_krealloc+0x1260>
f012d7c4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012d7c8:	7f 09                	jg     f012d7d3 <test_krealloc+0x12bd>
f012d7ca:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012d7d1:	76 a3                	jbe    f012d776 <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012d7d3:	83 ec 0c             	sub    $0xc,%esp
f012d7d6:	68 83 ca 13 f0       	push   $0xf013ca83
f012d7db:	e8 2e 35 fd ff       	call   f0100d0e <cprintf>
f012d7e0:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012d7e3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012d7e9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d7ef:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d7f6:	eb 21                	jmp    f012d819 <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012d7f8:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012d7fe:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012d801:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012d807:	01 c8                	add    %ecx,%eax
f012d809:	8a 00                	mov    (%eax),%al
f012d80b:	0f be c0             	movsbl %al,%eax
f012d80e:	01 d0                	add    %edx,%eax
f012d810:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012d816:	ff 45 dc             	incl   -0x24(%ebp)
f012d819:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012d81f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d822:	7d d4                	jge    f012d7f8 <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012d824:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012d82a:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012d830:	42                   	inc    %edx
f012d831:	01 d2                	add    %edx,%edx
f012d833:	39 d0                	cmp    %edx,%eax
f012d835:	74 17                	je     f012d84e <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012d837:	83 ec 04             	sub    $0x4,%esp
f012d83a:	68 8c ca 13 f0       	push   $0xf013ca8c
f012d83f:	68 f9 0f 00 00       	push   $0xff9
f012d844:	68 3a b5 13 f0       	push   $0xf013b53a
f012d849:	e8 b7 29 fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012d84e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012d854:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d85a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d861:	eb 25                	jmp    f012d888 <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012d863:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012d869:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d86c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012d873:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012d879:	01 c8                	add    %ecx,%eax
f012d87b:	8b 00                	mov    (%eax),%eax
f012d87d:	01 d0                	add    %edx,%eax
f012d87f:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012d885:	ff 45 dc             	incl   -0x24(%ebp)
f012d888:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012d88e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d891:	7d d0                	jge    f012d863 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012d893:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012d899:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012d89f:	42                   	inc    %edx
f012d8a0:	c1 e2 02             	shl    $0x2,%edx
f012d8a3:	39 d0                	cmp    %edx,%eax
f012d8a5:	74 17                	je     f012d8be <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012d8a7:	83 ec 04             	sub    $0x4,%esp
f012d8aa:	68 8c ca 13 f0       	push   $0xf013ca8c
f012d8af:	68 03 10 00 00       	push   $0x1003
f012d8b4:	68 3a b5 13 f0       	push   $0xf013b53a
f012d8b9:	e8 47 29 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012d8be:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d8c4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d8ca:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d8d1:	eb 24                	jmp    f012d8f7 <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012d8d3:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d8d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d8dc:	01 c0                	add    %eax,%eax
f012d8de:	89 c1                	mov    %eax,%ecx
f012d8e0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012d8e6:	01 c8                	add    %ecx,%eax
f012d8e8:	66 8b 00             	mov    (%eax),%ax
f012d8eb:	98                   	cwtl   
f012d8ec:	01 d0                	add    %edx,%eax
f012d8ee:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012d8f4:	ff 45 dc             	incl   -0x24(%ebp)
f012d8f7:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d8fd:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d900:	7d d1                	jge    f012d8d3 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012d902:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012d908:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012d90e:	8d 48 01             	lea    0x1(%eax),%ecx
f012d911:	89 c8                	mov    %ecx,%eax
f012d913:	c1 e0 02             	shl    $0x2,%eax
f012d916:	01 c8                	add    %ecx,%eax
f012d918:	39 c2                	cmp    %eax,%edx
f012d91a:	74 17                	je     f012d933 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012d91c:	83 ec 04             	sub    $0x4,%esp
f012d91f:	68 8c ca 13 f0       	push   $0xf013ca8c
f012d924:	68 0d 10 00 00       	push   $0x100d
f012d929:	68 3a b5 13 f0       	push   $0xf013b53a
f012d92e:	e8 d2 28 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012d933:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012d939:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d93f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012d946:	eb 70                	jmp    f012d9b8 <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012d948:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012d94e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d951:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d958:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d95e:	01 c8                	add    %ecx,%eax
f012d960:	8a 00                	mov    (%eax),%al
f012d962:	0f be c0             	movsbl %al,%eax
f012d965:	01 d0                	add    %edx,%eax
f012d967:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012d96d:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012d973:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d976:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d97d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d983:	01 c8                	add    %ecx,%eax
f012d985:	66 8b 40 02          	mov    0x2(%eax),%ax
f012d989:	98                   	cwtl   
f012d98a:	01 d0                	add    %edx,%eax
f012d98c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012d992:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012d998:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012d99b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012d9a2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012d9a8:	01 c8                	add    %ecx,%eax
f012d9aa:	8b 40 04             	mov    0x4(%eax),%eax
f012d9ad:	01 d0                	add    %edx,%eax
f012d9af:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012d9b5:	ff 45 dc             	incl   -0x24(%ebp)
f012d9b8:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9be:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012d9c1:	7d 85                	jge    f012d948 <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012d9c3:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012d9c9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9cf:	8d 50 01             	lea    0x1(%eax),%edx
f012d9d2:	89 d0                	mov    %edx,%eax
f012d9d4:	01 c0                	add    %eax,%eax
f012d9d6:	01 d0                	add    %edx,%eax
f012d9d8:	01 c0                	add    %eax,%eax
f012d9da:	01 d0                	add    %edx,%eax
f012d9dc:	39 c1                	cmp    %eax,%ecx
f012d9de:	75 3a                	jne    f012da1a <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012d9e0:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012d9e6:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012d9ec:	8d 50 01             	lea    0x1(%eax),%edx
f012d9ef:	89 d0                	mov    %edx,%eax
f012d9f1:	01 c0                	add    %eax,%eax
f012d9f3:	01 d0                	add    %edx,%eax
f012d9f5:	01 c0                	add    %eax,%eax
f012d9f7:	01 d0                	add    %edx,%eax
f012d9f9:	39 c1                	cmp    %eax,%ecx
f012d9fb:	75 1d                	jne    f012da1a <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012d9fd:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012da03:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012da09:	8d 50 01             	lea    0x1(%eax),%edx
f012da0c:	89 d0                	mov    %edx,%eax
f012da0e:	01 c0                	add    %eax,%eax
f012da10:	01 d0                	add    %edx,%eax
f012da12:	01 c0                	add    %eax,%eax
f012da14:	01 d0                	add    %edx,%eax
f012da16:	39 c1                	cmp    %eax,%ecx
f012da18:	74 17                	je     f012da31 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012da1a:	83 ec 04             	sub    $0x4,%esp
f012da1d:	68 8c ca 13 f0       	push   $0xf013ca8c
f012da22:	68 1b 10 00 00       	push   $0x101b
f012da27:	68 3a b5 13 f0       	push   $0xf013b53a
f012da2c:	e8 d4 27 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012da31:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012da38:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012da3b:	e8 71 f7 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012da40:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012da43:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da49:	83 ec 08             	sub    $0x8,%esp
f012da4c:	68 00 3c 00 00       	push   $0x3c00
f012da51:	50                   	push   %eax
f012da52:	e8 12 a4 fd ff       	call   f0107e69 <krealloc>
f012da57:	83 c4 10             	add    $0x10,%esp
f012da5a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012da60:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012da66:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012da6b:	77 17                	ja     f012da84 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012da6d:	83 ec 04             	sub    $0x4,%esp
f012da70:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012da75:	68 27 10 00 00       	push   $0x1027
f012da7a:	68 3a b5 13 f0       	push   $0xf013b53a
f012da7f:	e8 81 27 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012da84:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012da8a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012da90:	74 17                	je     f012daa9 <test_krealloc+0x1593>
			panic(
f012da92:	83 ec 04             	sub    $0x4,%esp
f012da95:	68 c4 ca 13 f0       	push   $0xf013cac4
f012da9a:	68 2a 10 00 00       	push   $0x102a
f012da9f:	68 3a b5 13 f0       	push   $0xf013b53a
f012daa4:	e8 5c 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012daa9:	e8 03 f7 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012daae:	89 c2                	mov    %eax,%edx
f012dab0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dab3:	39 c2                	cmp    %eax,%edx
f012dab5:	74 17                	je     f012dace <test_krealloc+0x15b8>
			panic(
f012dab7:	83 ec 04             	sub    $0x4,%esp
f012daba:	68 30 cb 13 f0       	push   $0xf013cb30
f012dabf:	68 2d 10 00 00       	push   $0x102d
f012dac4:	68 3a b5 13 f0       	push   $0xf013b53a
f012dac9:	e8 37 27 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012dace:	e8 de f6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dad3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012dad6:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dadc:	83 ec 08             	sub    $0x8,%esp
f012dadf:	68 00 fc 0f 00       	push   $0xffc00
f012dae4:	50                   	push   %eax
f012dae5:	e8 7f a3 fd ff       	call   f0107e69 <krealloc>
f012daea:	83 c4 10             	add    $0x10,%esp
f012daed:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012daf3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012daf9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dafe:	77 17                	ja     f012db17 <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db00:	83 ec 04             	sub    $0x4,%esp
f012db03:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012db08:	68 33 10 00 00       	push   $0x1033
f012db0d:	68 3a b5 13 f0       	push   $0xf013b53a
f012db12:	e8 ee 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012db17:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012db1d:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012db23:	74 17                	je     f012db3c <test_krealloc+0x1626>
			panic(
f012db25:	83 ec 04             	sub    $0x4,%esp
f012db28:	68 c4 ca 13 f0       	push   $0xf013cac4
f012db2d:	68 36 10 00 00       	push   $0x1036
f012db32:	68 3a b5 13 f0       	push   $0xf013b53a
f012db37:	e8 c9 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012db3c:	e8 70 f6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012db41:	89 c2                	mov    %eax,%edx
f012db43:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012db46:	39 c2                	cmp    %eax,%edx
f012db48:	74 17                	je     f012db61 <test_krealloc+0x164b>
			panic(
f012db4a:	83 ec 04             	sub    $0x4,%esp
f012db4d:	68 30 cb 13 f0       	push   $0xf013cb30
f012db52:	68 39 10 00 00       	push   $0x1039
f012db57:	68 3a b5 13 f0       	push   $0xf013b53a
f012db5c:	e8 a4 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012db61:	e8 4b f6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012db66:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012db69:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012db6f:	83 ec 08             	sub    $0x8,%esp
f012db72:	68 00 fc 0f 00       	push   $0xffc00
f012db77:	50                   	push   %eax
f012db78:	e8 ec a2 fd ff       	call   f0107e69 <krealloc>
f012db7d:	83 c4 10             	add    $0x10,%esp
f012db80:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012db86:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012db8c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012db91:	77 17                	ja     f012dbaa <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012db93:	83 ec 04             	sub    $0x4,%esp
f012db96:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012db9b:	68 3f 10 00 00       	push   $0x103f
f012dba0:	68 3a b5 13 f0       	push   $0xf013b53a
f012dba5:	e8 5b 26 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012dbaa:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dbb0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012dbb6:	74 17                	je     f012dbcf <test_krealloc+0x16b9>
			panic(
f012dbb8:	83 ec 04             	sub    $0x4,%esp
f012dbbb:	68 c4 ca 13 f0       	push   $0xf013cac4
f012dbc0:	68 42 10 00 00       	push   $0x1042
f012dbc5:	68 3a b5 13 f0       	push   $0xf013b53a
f012dbca:	e8 36 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012dbcf:	e8 dd f5 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dbd4:	89 c2                	mov    %eax,%edx
f012dbd6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dbd9:	39 c2                	cmp    %eax,%edx
f012dbdb:	74 17                	je     f012dbf4 <test_krealloc+0x16de>
			panic(
f012dbdd:	83 ec 04             	sub    $0x4,%esp
f012dbe0:	68 30 cb 13 f0       	push   $0xf013cb30
f012dbe5:	68 45 10 00 00       	push   $0x1045
f012dbea:	68 3a b5 13 f0       	push   $0xf013b53a
f012dbef:	e8 11 26 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012dbf4:	e8 b8 f5 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dbf9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012dbfc:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dc02:	83 ec 08             	sub    $0x8,%esp
f012dc05:	68 00 fc 0f 00       	push   $0xffc00
f012dc0a:	50                   	push   %eax
f012dc0b:	e8 59 a2 fd ff       	call   f0107e69 <krealloc>
f012dc10:	83 c4 10             	add    $0x10,%esp
f012dc13:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dc19:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012dc1f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dc24:	77 17                	ja     f012dc3d <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dc26:	83 ec 04             	sub    $0x4,%esp
f012dc29:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012dc2e:	68 4d 10 00 00       	push   $0x104d
f012dc33:	68 3a b5 13 f0       	push   $0xf013b53a
f012dc38:	e8 c8 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012dc3d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012dc43:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012dc49:	74 17                	je     f012dc62 <test_krealloc+0x174c>
			panic(
f012dc4b:	83 ec 04             	sub    $0x4,%esp
f012dc4e:	68 74 cb 13 f0       	push   $0xf013cb74
f012dc53:	68 50 10 00 00       	push   $0x1050
f012dc58:	68 3a b5 13 f0       	push   $0xf013b53a
f012dc5d:	e8 a3 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012dc62:	e8 4a f5 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dc67:	89 c2                	mov    %eax,%edx
f012dc69:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012dc6c:	39 c2                	cmp    %eax,%edx
f012dc6e:	74 17                	je     f012dc87 <test_krealloc+0x1771>
			panic(
f012dc70:	83 ec 04             	sub    $0x4,%esp
f012dc73:	68 30 cb 13 f0       	push   $0xf013cb30
f012dc78:	68 53 10 00 00       	push   $0x1053
f012dc7d:	68 3a b5 13 f0       	push   $0xf013b53a
f012dc82:	e8 7e 25 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012dc87:	83 ec 0c             	sub    $0xc,%esp
f012dc8a:	68 53 bd 13 f0       	push   $0xf013bd53
f012dc8f:	e8 7a 30 fd ff       	call   f0100d0e <cprintf>
f012dc94:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012dc97:	e8 15 f5 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dc9c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012dc9f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dca5:	83 ec 08             	sub    $0x8,%esp
f012dca8:	68 00 18 10 00       	push   $0x101800
f012dcad:	50                   	push   %eax
f012dcae:	e8 b6 a1 fd ff       	call   f0107e69 <krealloc>
f012dcb3:	83 c4 10             	add    $0x10,%esp
f012dcb6:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dcb9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dcbc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dcc1:	77 17                	ja     f012dcda <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dcc3:	83 ec 04             	sub    $0x4,%esp
f012dcc6:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012dccb:	68 5c 10 00 00       	push   $0x105c
f012dcd0:	68 3a b5 13 f0       	push   $0xf013b53a
f012dcd5:	e8 2b 25 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012dcda:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dce0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dce3:	74 17                	je     f012dcfc <test_krealloc+0x17e6>
			panic(
f012dce5:	83 ec 04             	sub    $0x4,%esp
f012dce8:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012dced:	68 5f 10 00 00       	push   $0x105f
f012dcf2:	68 3a b5 13 f0       	push   $0xf013b53a
f012dcf7:	e8 09 25 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012dcfc:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dcff:	e8 ad f4 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dd04:	29 c3                	sub    %eax,%ebx
f012dd06:	89 d8                	mov    %ebx,%eax
f012dd08:	83 f8 02             	cmp    $0x2,%eax
f012dd0b:	74 17                	je     f012dd24 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012dd0d:	83 ec 04             	sub    $0x4,%esp
f012dd10:	68 50 cc 13 f0       	push   $0xf013cc50
f012dd15:	68 61 10 00 00       	push   $0x1061
f012dd1a:	68 3a b5 13 f0       	push   $0xf013b53a
f012dd1f:	e8 e1 24 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012dd24:	e8 88 f4 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dd29:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012dd2c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dd32:	83 ec 08             	sub    $0x8,%esp
f012dd35:	68 00 fc 3f 00       	push   $0x3ffc00
f012dd3a:	50                   	push   %eax
f012dd3b:	e8 29 a1 fd ff       	call   f0107e69 <krealloc>
f012dd40:	83 c4 10             	add    $0x10,%esp
f012dd43:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dd46:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dd49:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dd4e:	77 17                	ja     f012dd67 <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dd50:	83 ec 04             	sub    $0x4,%esp
f012dd53:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012dd58:	68 67 10 00 00       	push   $0x1067
f012dd5d:	68 3a b5 13 f0       	push   $0xf013b53a
f012dd62:	e8 9e 24 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012dd67:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dd6d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dd70:	74 17                	je     f012dd89 <test_krealloc+0x1873>
			panic(
f012dd72:	83 ec 04             	sub    $0x4,%esp
f012dd75:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012dd7a:	68 6a 10 00 00       	push   $0x106a
f012dd7f:	68 3a b5 13 f0       	push   $0xf013b53a
f012dd84:	e8 7c 24 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012dd89:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dd8c:	e8 20 f4 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dd91:	29 c3                	sub    %eax,%ebx
f012dd93:	89 d8                	mov    %ebx,%eax
f012dd95:	3d 00 02 00 00       	cmp    $0x200,%eax
f012dd9a:	74 17                	je     f012ddb3 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012dd9c:	83 ec 04             	sub    $0x4,%esp
f012dd9f:	68 50 cc 13 f0       	push   $0xf013cc50
f012dda4:	68 6d 10 00 00       	push   $0x106d
f012dda9:	68 3a b5 13 f0       	push   $0xf013b53a
f012ddae:	e8 52 24 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012ddb3:	83 ec 0c             	sub    $0xc,%esp
f012ddb6:	68 98 bd 13 f0       	push   $0xf013bd98
f012ddbb:	e8 4e 2f fd ff       	call   f0100d0e <cprintf>
f012ddc0:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ddc3:	e8 e9 f3 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ddc8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ddcb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ddd1:	83 ec 08             	sub    $0x8,%esp
f012ddd4:	68 00 fc 9f 00       	push   $0x9ffc00
f012ddd9:	50                   	push   %eax
f012ddda:	e8 8a a0 fd ff       	call   f0107e69 <krealloc>
f012dddf:	83 c4 10             	add    $0x10,%esp
f012dde2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dde5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dde8:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dded:	77 17                	ja     f012de06 <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ddef:	83 ec 04             	sub    $0x4,%esp
f012ddf2:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012ddf7:	68 78 10 00 00       	push   $0x1078
f012ddfc:	68 3a b5 13 f0       	push   $0xf013b53a
f012de01:	e8 ff 23 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012de06:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012de0d:	10 00 00 
f012de10:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012de16:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012de1b:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012de21:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012de27:	ba 00 00 00 00       	mov    $0x0,%edx
f012de2c:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012de32:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012de38:	29 d0                	sub    %edx,%eax
f012de3a:	89 c1                	mov    %eax,%ecx
f012de3c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012de43:	10 00 00 
f012de46:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012de4b:	0f b6 d0             	movzbl %al,%edx
f012de4e:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012de54:	01 d0                	add    %edx,%eax
f012de56:	48                   	dec    %eax
f012de57:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012de5d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012de63:	ba 00 00 00 00       	mov    $0x0,%edx
f012de68:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012de6e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012de74:	29 d0                	sub    %edx,%eax
f012de76:	01 c1                	add    %eax,%ecx
f012de78:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012de7f:	10 00 00 
f012de82:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012de87:	0f b6 c0             	movzbl %al,%eax
f012de8a:	c1 e0 04             	shl    $0x4,%eax
f012de8d:	89 c2                	mov    %eax,%edx
f012de8f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012de95:	01 d0                	add    %edx,%eax
f012de97:	48                   	dec    %eax
f012de98:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012de9e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012dea4:	ba 00 00 00 00       	mov    $0x0,%edx
f012dea9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012deaf:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012deb5:	29 d0                	sub    %edx,%eax
f012deb7:	01 c8                	add    %ecx,%eax
f012deb9:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012debf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dec2:	39 c2                	cmp    %eax,%edx
f012dec4:	74 18                	je     f012dede <test_krealloc+0x19c8>
			panic(
f012dec6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dec9:	50                   	push   %eax
f012deca:	68 84 cc 13 f0       	push   $0xf013cc84
f012decf:	68 7c 10 00 00       	push   $0x107c
f012ded4:	68 3a b5 13 f0       	push   $0xf013b53a
f012ded9:	e8 27 23 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012dede:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012dee4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012dee7:	75 17                	jne    f012df00 <test_krealloc+0x19ea>
			panic(
f012dee9:	83 ec 04             	sub    $0x4,%esp
f012deec:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012def1:	68 7f 10 00 00       	push   $0x107f
f012def6:	68 3a b5 13 f0       	push   $0xf013b53a
f012defb:	e8 05 23 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012df00:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012df03:	e8 a9 f2 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012df08:	29 c3                	sub    %eax,%ebx
f012df0a:	89 d8                	mov    %ebx,%eax
f012df0c:	3d 00 06 00 00       	cmp    $0x600,%eax
f012df11:	74 17                	je     f012df2a <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012df13:	83 ec 04             	sub    $0x4,%esp
f012df16:	68 50 cc 13 f0       	push   $0xf013cc50
f012df1b:	68 82 10 00 00       	push   $0x1082
f012df20:	68 3a b5 13 f0       	push   $0xf013b53a
f012df25:	e8 db 22 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012df2a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012df2d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012df33:	e8 79 f2 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012df38:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012df3b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012df41:	83 ec 08             	sub    $0x8,%esp
f012df44:	68 00 fc 5f 00       	push   $0x5ffc00
f012df49:	50                   	push   %eax
f012df4a:	e8 1a 9f fd ff       	call   f0107e69 <krealloc>
f012df4f:	83 c4 10             	add    $0x10,%esp
f012df52:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012df55:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012df58:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012df5d:	77 17                	ja     f012df76 <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012df5f:	83 ec 04             	sub    $0x4,%esp
f012df62:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012df67:	68 8b 10 00 00       	push   $0x108b
f012df6c:	68 3a b5 13 f0       	push   $0xf013b53a
f012df71:	e8 8f 22 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[6])
f012df76:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012df7c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012df7f:	74 17                	je     f012df98 <test_krealloc+0x1a82>
			panic(
f012df81:	83 ec 04             	sub    $0x4,%esp
f012df84:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012df89:	68 8e 10 00 00       	push   $0x108e
f012df8e:	68 3a b5 13 f0       	push   $0xf013b53a
f012df93:	e8 6d 22 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012df98:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012df9b:	e8 11 f2 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dfa0:	29 c3                	sub    %eax,%ebx
f012dfa2:	89 d8                	mov    %ebx,%eax
f012dfa4:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dfa9:	74 17                	je     f012dfc2 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012dfab:	83 ec 04             	sub    $0x4,%esp
f012dfae:	68 50 cc 13 f0       	push   $0xf013cc50
f012dfb3:	68 91 10 00 00       	push   $0x1091
f012dfb8:	68 3a b5 13 f0       	push   $0xf013b53a
f012dfbd:	e8 43 22 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012dfc2:	e8 ea f1 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012dfc7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012dfca:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012dfd0:	83 ec 08             	sub    $0x8,%esp
f012dfd3:	68 00 fc 3f 01       	push   $0x13ffc00
f012dfd8:	50                   	push   %eax
f012dfd9:	e8 8b 9e fd ff       	call   f0107e69 <krealloc>
f012dfde:	83 c4 10             	add    $0x10,%esp
f012dfe1:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012dfe4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012dfe7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012dfec:	77 17                	ja     f012e005 <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012dfee:	83 ec 04             	sub    $0x4,%esp
f012dff1:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012dff6:	68 98 10 00 00       	push   $0x1098
f012dffb:	68 3a b5 13 f0       	push   $0xf013b53a
f012e000:	e8 00 22 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012e005:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e00b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e00e:	75 17                	jne    f012e027 <test_krealloc+0x1b11>
			panic(
f012e010:	83 ec 04             	sub    $0x4,%esp
f012e013:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012e018:	68 9b 10 00 00       	push   $0x109b
f012e01d:	68 3a b5 13 f0       	push   $0xf013b53a
f012e022:	e8 de 21 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012e027:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012e02e:	10 00 00 
f012e031:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012e037:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e03c:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012e042:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e048:	ba 00 00 00 00       	mov    $0x0,%edx
f012e04d:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012e053:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012e059:	29 d0                	sub    %edx,%eax
f012e05b:	89 c1                	mov    %eax,%ecx
f012e05d:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012e064:	10 00 00 
f012e067:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e06c:	0f b6 d0             	movzbl %al,%edx
f012e06f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012e075:	01 d0                	add    %edx,%eax
f012e077:	48                   	dec    %eax
f012e078:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012e07e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e084:	ba 00 00 00 00       	mov    $0x0,%edx
f012e089:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012e08f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012e095:	29 d0                	sub    %edx,%eax
f012e097:	01 c1                	add    %eax,%ecx
f012e099:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012e0a0:	10 00 00 
f012e0a3:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e0a8:	0f b6 c0             	movzbl %al,%eax
f012e0ab:	c1 e0 04             	shl    $0x4,%eax
f012e0ae:	89 c2                	mov    %eax,%edx
f012e0b0:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012e0b6:	01 d0                	add    %edx,%eax
f012e0b8:	48                   	dec    %eax
f012e0b9:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012e0bf:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e0c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012e0ca:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012e0d0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012e0d6:	29 d0                	sub    %edx,%eax
f012e0d8:	01 c8                	add    %ecx,%eax
f012e0da:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012e0e0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e0e3:	39 c2                	cmp    %eax,%edx
f012e0e5:	74 17                	je     f012e0fe <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012e0e7:	83 ec 04             	sub    $0x4,%esp
f012e0ea:	68 4c cd 13 f0       	push   $0xf013cd4c
f012e0ef:	68 9d 10 00 00       	push   $0x109d
f012e0f4:	68 3a b5 13 f0       	push   $0xf013b53a
f012e0f9:	e8 07 21 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012e0fe:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e101:	e8 ab f0 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e106:	29 c3                	sub    %eax,%ebx
f012e108:	89 d8                	mov    %ebx,%eax
f012e10a:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012e10f:	74 17                	je     f012e128 <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012e111:	83 ec 04             	sub    $0x4,%esp
f012e114:	68 50 cc 13 f0       	push   $0xf013cc50
f012e119:	68 a0 10 00 00       	push   $0x10a0
f012e11e:	68 3a b5 13 f0       	push   $0xf013b53a
f012e123:	e8 dd 20 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f012e128:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e12b:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012e131:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e137:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012e13d:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e144:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e147:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e14e:	eb 21                	jmp    f012e171 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012e150:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e156:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012e159:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e15f:	01 c8                	add    %ecx,%eax
f012e161:	8a 00                	mov    (%eax),%al
f012e163:	0f be c0             	movsbl %al,%eax
f012e166:	01 d0                	add    %edx,%eax
f012e168:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e16e:	ff 45 d8             	incl   -0x28(%ebp)
f012e171:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e177:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e17a:	7d d4                	jge    f012e150 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e17c:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012e182:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012e188:	42                   	inc    %edx
f012e189:	01 d2                	add    %edx,%edx
f012e18b:	39 d0                	cmp    %edx,%eax
f012e18d:	74 17                	je     f012e1a6 <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012e18f:	83 ec 04             	sub    $0x4,%esp
f012e192:	68 80 cd 13 f0       	push   $0xf013cd80
f012e197:	68 ae 10 00 00       	push   $0x10ae
f012e19c:	68 3a b5 13 f0       	push   $0xf013b53a
f012e1a1:	e8 5f 20 fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e1a6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e1ac:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012e1b2:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e1b9:	00 00 00 
		sums[1] = 0;
f012e1bc:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012e1c3:	00 00 00 
		sums[2] = 0;
f012e1c6:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012e1cd:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e1d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e1d7:	eb 70                	jmp    f012e249 <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012e1d9:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e1df:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e1e2:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e1e9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e1ef:	01 c8                	add    %ecx,%eax
f012e1f1:	8a 00                	mov    (%eax),%al
f012e1f3:	0f be c0             	movsbl %al,%eax
f012e1f6:	01 d0                	add    %edx,%eax
f012e1f8:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012e1fe:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012e204:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e207:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e20e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e214:	01 c8                	add    %ecx,%eax
f012e216:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e21a:	98                   	cwtl   
f012e21b:	01 d0                	add    %edx,%eax
f012e21d:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012e223:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012e229:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e22c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e233:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e239:	01 c8                	add    %ecx,%eax
f012e23b:	8b 40 04             	mov    0x4(%eax),%eax
f012e23e:	01 d0                	add    %edx,%eax
f012e240:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012e246:	ff 45 d8             	incl   -0x28(%ebp)
f012e249:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e24f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e252:	7d 85                	jge    f012e1d9 <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012e254:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012e25a:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e260:	8d 50 01             	lea    0x1(%eax),%edx
f012e263:	89 d0                	mov    %edx,%eax
f012e265:	01 c0                	add    %eax,%eax
f012e267:	01 d0                	add    %edx,%eax
f012e269:	01 c0                	add    %eax,%eax
f012e26b:	01 d0                	add    %edx,%eax
f012e26d:	39 c1                	cmp    %eax,%ecx
f012e26f:	75 3a                	jne    f012e2ab <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012e271:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012e277:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e27d:	8d 50 01             	lea    0x1(%eax),%edx
f012e280:	89 d0                	mov    %edx,%eax
f012e282:	01 c0                	add    %eax,%eax
f012e284:	01 d0                	add    %edx,%eax
f012e286:	01 c0                	add    %eax,%eax
f012e288:	01 d0                	add    %edx,%eax
f012e28a:	39 c1                	cmp    %eax,%ecx
f012e28c:	75 1d                	jne    f012e2ab <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012e28e:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012e294:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012e29a:	8d 50 01             	lea    0x1(%eax),%edx
f012e29d:	89 d0                	mov    %edx,%eax
f012e29f:	01 c0                	add    %eax,%eax
f012e2a1:	01 d0                	add    %edx,%eax
f012e2a3:	01 c0                	add    %eax,%eax
f012e2a5:	01 d0                	add    %edx,%eax
f012e2a7:	39 c1                	cmp    %eax,%ecx
f012e2a9:	74 17                	je     f012e2c2 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012e2ab:	83 ec 04             	sub    $0x4,%esp
f012e2ae:	68 80 cd 13 f0       	push   $0xf013cd80
f012e2b3:	68 c0 10 00 00       	push   $0x10c0
f012e2b8:	68 3a b5 13 f0       	push   $0xf013b53a
f012e2bd:	e8 43 1f fd ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012e2c2:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e2c8:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012e2ce:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012e2d5:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e2d8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012e2df:	eb 24                	jmp    f012e305 <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012e2e1:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e2e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012e2ea:	01 c0                	add    %eax,%eax
f012e2ec:	89 c1                	mov    %eax,%ecx
f012e2ee:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e2f4:	01 c8                	add    %ecx,%eax
f012e2f6:	66 8b 00             	mov    (%eax),%ax
f012e2f9:	98                   	cwtl   
f012e2fa:	01 d0                	add    %edx,%eax
f012e2fc:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012e302:	ff 45 d8             	incl   -0x28(%ebp)
f012e305:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e30b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012e30e:	7d d1                	jge    f012e2e1 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012e310:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012e316:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012e31c:	8d 48 01             	lea    0x1(%eax),%ecx
f012e31f:	89 c8                	mov    %ecx,%eax
f012e321:	c1 e0 02             	shl    $0x2,%eax
f012e324:	01 c8                	add    %ecx,%eax
f012e326:	39 c2                	cmp    %eax,%edx
f012e328:	74 17                	je     f012e341 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012e32a:	83 ec 04             	sub    $0x4,%esp
f012e32d:	68 80 cd 13 f0       	push   $0xf013cd80
f012e332:	68 ca 10 00 00       	push   $0x10ca
f012e337:	68 3a b5 13 f0       	push   $0xf013b53a
f012e33c:	e8 c4 1e fd ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012e341:	e8 6b ee fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e346:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e349:	e8 61 5a fd ff       	call   f0103daf <pf_calculate_free_frames>
f012e34e:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012e354:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012e35a:	83 ec 08             	sub    $0x8,%esp
f012e35d:	6a 00                	push   $0x0
f012e35f:	50                   	push   %eax
f012e360:	e8 04 9b fd ff       	call   f0107e69 <krealloc>
f012e365:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e368:	e8 42 5a fd ff       	call   f0103daf <pf_calculate_free_frames>
f012e36d:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e373:	74 17                	je     f012e38c <test_krealloc+0x1e76>
			panic(
f012e375:	83 ec 04             	sub    $0x4,%esp
f012e378:	68 54 b5 13 f0       	push   $0xf013b554
f012e37d:	68 d2 10 00 00       	push   $0x10d2
f012e382:	68 3a b5 13 f0       	push   $0xf013b53a
f012e387:	e8 79 1e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012e38c:	e8 20 ee fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e391:	89 c2                	mov    %eax,%edx
f012e393:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e396:	29 c2                	sub    %eax,%edx
f012e398:	89 d0                	mov    %edx,%eax
f012e39a:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012e39f:	74 17                	je     f012e3b8 <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012e3a1:	83 ec 04             	sub    $0x4,%esp
f012e3a4:	68 10 ca 13 f0       	push   $0xf013ca10
f012e3a9:	68 d4 10 00 00       	push   $0x10d4
f012e3ae:	68 3a b5 13 f0       	push   $0xf013b53a
f012e3b3:	e8 4d 1e fd ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012e3b8:	e8 f4 ed fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e3bd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e3c0:	e8 ea 59 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012e3c5:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012e3cb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012e3d1:	83 ec 0c             	sub    $0xc,%esp
f012e3d4:	50                   	push   %eax
f012e3d5:	e8 92 98 fd ff       	call   f0107c6c <kfree>
f012e3da:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e3dd:	e8 cd 59 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012e3e2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e3e8:	74 17                	je     f012e401 <test_krealloc+0x1eeb>
			panic(
f012e3ea:	83 ec 04             	sub    $0x4,%esp
f012e3ed:	68 54 b5 13 f0       	push   $0xf013b554
f012e3f2:	68 dc 10 00 00       	push   $0x10dc
f012e3f7:	68 3a b5 13 f0       	push   $0xf013b53a
f012e3fc:	e8 04 1e fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012e401:	e8 ab ed fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e406:	89 c2                	mov    %eax,%edx
f012e408:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e40b:	29 c2                	sub    %eax,%edx
f012e40d:	89 d0                	mov    %edx,%eax
f012e40f:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012e414:	74 17                	je     f012e42d <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012e416:	83 ec 04             	sub    $0x4,%esp
f012e419:	68 10 ca 13 f0       	push   $0xf013ca10
f012e41e:	68 de 10 00 00       	push   $0x10de
f012e423:	68 3a b5 13 f0       	push   $0xf013b53a
f012e428:	e8 d8 1d fd ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e42d:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012e434:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012e43b:	eb 48                	jmp    f012e485 <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e43d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012e440:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f012e445:	83 ec 04             	sub    $0x4,%esp
f012e448:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012e44e:	51                   	push   %ecx
f012e44f:	52                   	push   %edx
f012e450:	50                   	push   %eax
f012e451:	e8 42 86 fd ff       	call   f0106a98 <get_page_table>
f012e456:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e459:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012e45f:	85 c0                	test   %eax,%eax
f012e461:	75 17                	jne    f012e47a <test_krealloc+0x1f64>
					panic(
f012e463:	83 ec 04             	sub    $0x4,%esp
f012e466:	68 3c be 13 f0       	push   $0xf013be3c
f012e46b:	68 eb 10 00 00       	push   $0x10eb
f012e470:	68 3a b5 13 f0       	push   $0xf013b53a
f012e475:	e8 8b 1d fd ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e47a:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012e481:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012e485:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e489:	78 b2                	js     f012e43d <test_krealloc+0x1f27>
f012e48b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012e48f:	7f 09                	jg     f012e49a <test_krealloc+0x1f84>
f012e491:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012e498:	76 a3                	jbe    f012e43d <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012e49a:	83 ec 0c             	sub    $0xc,%esp
f012e49d:	68 1e b7 13 f0       	push   $0xf013b71e
f012e4a2:	e8 67 28 fd ff       	call   f0100d0e <cprintf>
f012e4a7:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012e4aa:	83 ec 0c             	sub    $0xc,%esp
f012e4ad:	68 ac cd 13 f0       	push   $0xf013cdac
f012e4b2:	e8 57 28 fd ff       	call   f0100d0e <cprintf>
f012e4b7:	83 c4 10             	add    $0x10,%esp
	return 0;
f012e4ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012e4bf:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012e4c2:	5b                   	pop    %ebx
f012e4c3:	5f                   	pop    %edi
f012e4c4:	5d                   	pop    %ebp
f012e4c5:	c3                   	ret    

f012e4c6 <test_krealloc_BF>:


int test_krealloc_BF() {
f012e4c6:	55                   	push   %ebp
f012e4c7:	89 e5                	mov    %esp,%ebp
f012e4c9:	57                   	push   %edi
f012e4ca:	53                   	push   %ebx
f012e4cb:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012e4d1:	83 ec 0c             	sub    $0xc,%esp
f012e4d4:	68 7c b4 13 f0       	push   $0xf013b47c
f012e4d9:	e8 30 28 fd ff       	call   f0100d0e <cprintf>
f012e4de:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012e4e1:	83 ec 0c             	sub    $0xc,%esp
f012e4e4:	68 ac b4 13 f0       	push   $0xf013b4ac
f012e4e9:	e8 20 28 fd ff       	call   f0100d0e <cprintf>
f012e4ee:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012e4f1:	83 ec 0c             	sub    $0xc,%esp
f012e4f4:	68 7c b4 13 f0       	push   $0xf013b47c
f012e4f9:	e8 10 28 fd ff       	call   f0100d0e <cprintf>
f012e4fe:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012e501:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012e505:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012e509:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012e50f:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012e515:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012e51c:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012e523:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012e529:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e52e:	b8 00 00 00 00       	mov    $0x0,%eax
f012e533:	89 d7                	mov    %edx,%edi
f012e535:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012e537:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012e53e:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012e544:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e549:	b8 00 00 00 00       	mov    $0x0,%eax
f012e54e:	89 d7                	mov    %edx,%edi
f012e550:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012e552:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012e558:	b9 14 00 00 00       	mov    $0x14,%ecx
f012e55d:	b8 00 00 00 00       	mov    $0x0,%eax
f012e562:	89 d7                	mov    %edx,%edi
f012e564:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e566:	e8 46 ec fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e56b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012e56e:	83 ec 08             	sub    $0x8,%esp
f012e571:	68 00 fc 0f 00       	push   $0xffc00
f012e576:	6a 00                	push   $0x0
f012e578:	e8 ec 98 fd ff       	call   f0107e69 <krealloc>
f012e57d:	83 c4 10             	add    $0x10,%esp
f012e580:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012e586:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e58c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e591:	77 17                	ja     f012e5aa <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e593:	83 ec 04             	sub    $0x4,%esp
f012e596:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e59b:	68 1a 11 00 00       	push   $0x111a
f012e5a0:	68 3a b5 13 f0       	push   $0xf013b53a
f012e5a5:	e8 5b 1c fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012e5aa:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e5b0:	89 c1                	mov    %eax,%ecx
f012e5b2:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012e5b9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012e5bc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e5c1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012e5c4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e5c7:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5cc:	f7 75 b4             	divl   -0x4c(%ebp)
f012e5cf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012e5d2:	29 d0                	sub    %edx,%eax
f012e5d4:	89 c3                	mov    %eax,%ebx
f012e5d6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012e5dd:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e5e2:	0f b6 d0             	movzbl %al,%edx
f012e5e5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012e5e8:	01 d0                	add    %edx,%eax
f012e5ea:	48                   	dec    %eax
f012e5eb:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012e5ee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e5f1:	ba 00 00 00 00       	mov    $0x0,%edx
f012e5f6:	f7 75 ac             	divl   -0x54(%ebp)
f012e5f9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012e5fc:	29 d0                	sub    %edx,%eax
f012e5fe:	01 c3                	add    %eax,%ebx
f012e600:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012e607:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e60c:	0f b6 c0             	movzbl %al,%eax
f012e60f:	c1 e0 04             	shl    $0x4,%eax
f012e612:	89 c2                	mov    %eax,%edx
f012e614:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012e617:	01 d0                	add    %edx,%eax
f012e619:	48                   	dec    %eax
f012e61a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012e61d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e620:	ba 00 00 00 00       	mov    $0x0,%edx
f012e625:	f7 75 a4             	divl   -0x5c(%ebp)
f012e628:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012e62b:	29 d0                	sub    %edx,%eax
f012e62d:	01 d8                	add    %ebx,%eax
f012e62f:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012e634:	39 c1                	cmp    %eax,%ecx
f012e636:	74 17                	je     f012e64f <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012e638:	83 ec 04             	sub    $0x4,%esp
f012e63b:	68 1c c8 13 f0       	push   $0xf013c81c
f012e640:	68 1c 11 00 00       	push   $0x111c
f012e645:	68 3a b5 13 f0       	push   $0xf013b53a
f012e64a:	e8 b6 1b fd ff       	call   f0100205 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e64f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e652:	e8 5a eb fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e657:	29 c3                	sub    %eax,%ebx
f012e659:	89 d8                	mov    %ebx,%eax
f012e65b:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e660:	74 17                	je     f012e679 <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012e662:	83 ec 04             	sub    $0x4,%esp
f012e665:	68 4e c8 13 f0       	push   $0xf013c84e
f012e66a:	68 1f 11 00 00       	push   $0x111f
f012e66f:	68 3a b5 13 f0       	push   $0xf013b53a
f012e674:	e8 8c 1b fd ff       	call   f0100205 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e679:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012e680:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e683:	e8 29 eb fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e688:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012e68b:	83 ec 08             	sub    $0x8,%esp
f012e68e:	68 00 fc 0f 00       	push   $0xffc00
f012e693:	6a 00                	push   $0x0
f012e695:	e8 cf 97 fd ff       	call   f0107e69 <krealloc>
f012e69a:	83 c4 10             	add    $0x10,%esp
f012e69d:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012e6a3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e6a9:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012e6ae:	77 17                	ja     f012e6c7 <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e6b0:	83 ec 04             	sub    $0x4,%esp
f012e6b3:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e6b8:	68 27 11 00 00       	push   $0x1127
f012e6bd:	68 3a b5 13 f0       	push   $0xf013b53a
f012e6c2:	e8 3e 1b fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012e6c7:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e6cd:	89 c1                	mov    %eax,%ecx
f012e6cf:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012e6d6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012e6d9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e6de:	89 45 98             	mov    %eax,-0x68(%ebp)
f012e6e1:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e6e4:	ba 00 00 00 00       	mov    $0x0,%edx
f012e6e9:	f7 75 9c             	divl   -0x64(%ebp)
f012e6ec:	8b 45 98             	mov    -0x68(%ebp),%eax
f012e6ef:	29 d0                	sub    %edx,%eax
f012e6f1:	89 c3                	mov    %eax,%ebx
f012e6f3:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012e6fa:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e6ff:	0f b6 d0             	movzbl %al,%edx
f012e702:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012e705:	01 d0                	add    %edx,%eax
f012e707:	48                   	dec    %eax
f012e708:	89 45 90             	mov    %eax,-0x70(%ebp)
f012e70b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e70e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e713:	f7 75 94             	divl   -0x6c(%ebp)
f012e716:	8b 45 90             	mov    -0x70(%ebp),%eax
f012e719:	29 d0                	sub    %edx,%eax
f012e71b:	01 c3                	add    %eax,%ebx
f012e71d:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012e724:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e729:	0f b6 c0             	movzbl %al,%eax
f012e72c:	c1 e0 04             	shl    $0x4,%eax
f012e72f:	89 c2                	mov    %eax,%edx
f012e731:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012e734:	01 d0                	add    %edx,%eax
f012e736:	48                   	dec    %eax
f012e737:	89 45 88             	mov    %eax,-0x78(%ebp)
f012e73a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e73d:	ba 00 00 00 00       	mov    $0x0,%edx
f012e742:	f7 75 8c             	divl   -0x74(%ebp)
f012e745:	8b 45 88             	mov    -0x78(%ebp),%eax
f012e748:	29 d0                	sub    %edx,%eax
f012e74a:	01 d8                	add    %ebx,%eax
f012e74c:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012e751:	39 c1                	cmp    %eax,%ecx
f012e753:	74 17                	je     f012e76c <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012e755:	83 ec 04             	sub    $0x4,%esp
f012e758:	68 1c c8 13 f0       	push   $0xf013c81c
f012e75d:	68 29 11 00 00       	push   $0x1129
f012e762:	68 3a b5 13 f0       	push   $0xf013b53a
f012e767:	e8 99 1a fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e76c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e76f:	e8 3d ea fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e774:	29 c3                	sub    %eax,%ebx
f012e776:	89 d8                	mov    %ebx,%eax
f012e778:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e77d:	74 17                	je     f012e796 <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012e77f:	83 ec 04             	sub    $0x4,%esp
f012e782:	68 4e c8 13 f0       	push   $0xf013c84e
f012e787:	68 2b 11 00 00       	push   $0x112b
f012e78c:	68 3a b5 13 f0       	push   $0xf013b53a
f012e791:	e8 6f 1a fd ff       	call   f0100205 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012e796:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012e79d:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e7a0:	e8 0c ea fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e7a5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012e7a8:	83 ec 08             	sub    $0x8,%esp
f012e7ab:	68 00 fc 0f 00       	push   $0xffc00
f012e7b0:	6a 00                	push   $0x0
f012e7b2:	e8 b2 96 fd ff       	call   f0107e69 <krealloc>
f012e7b7:	83 c4 10             	add    $0x10,%esp
f012e7ba:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012e7c0:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e7c6:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012e7cb:	77 17                	ja     f012e7e4 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e7cd:	83 ec 04             	sub    $0x4,%esp
f012e7d0:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e7d5:	68 33 11 00 00       	push   $0x1133
f012e7da:	68 3a b5 13 f0       	push   $0xf013b53a
f012e7df:	e8 21 1a fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012e7e4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e7ea:	89 c1                	mov    %eax,%ecx
f012e7ec:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012e7f3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012e7f6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e7fb:	89 45 80             	mov    %eax,-0x80(%ebp)
f012e7fe:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e801:	ba 00 00 00 00       	mov    $0x0,%edx
f012e806:	f7 75 84             	divl   -0x7c(%ebp)
f012e809:	8b 45 80             	mov    -0x80(%ebp),%eax
f012e80c:	29 d0                	sub    %edx,%eax
f012e80e:	89 c3                	mov    %eax,%ebx
f012e810:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012e817:	10 00 00 
f012e81a:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e81f:	0f b6 d0             	movzbl %al,%edx
f012e822:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012e828:	01 d0                	add    %edx,%eax
f012e82a:	48                   	dec    %eax
f012e82b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012e831:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e837:	ba 00 00 00 00       	mov    $0x0,%edx
f012e83c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012e842:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012e848:	29 d0                	sub    %edx,%eax
f012e84a:	01 c3                	add    %eax,%ebx
f012e84c:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012e853:	10 00 00 
f012e856:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e85b:	0f b6 c0             	movzbl %al,%eax
f012e85e:	c1 e0 04             	shl    $0x4,%eax
f012e861:	89 c2                	mov    %eax,%edx
f012e863:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012e869:	01 d0                	add    %edx,%eax
f012e86b:	48                   	dec    %eax
f012e86c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012e872:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e878:	ba 00 00 00 00       	mov    $0x0,%edx
f012e87d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012e883:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012e889:	29 d0                	sub    %edx,%eax
f012e88b:	01 d8                	add    %ebx,%eax
f012e88d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012e892:	39 c1                	cmp    %eax,%ecx
f012e894:	74 17                	je     f012e8ad <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012e896:	83 ec 04             	sub    $0x4,%esp
f012e899:	68 1c c8 13 f0       	push   $0xf013c81c
f012e89e:	68 35 11 00 00       	push   $0x1135
f012e8a3:	68 3a b5 13 f0       	push   $0xf013b53a
f012e8a8:	e8 58 19 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012e8ad:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e8b0:	e8 fc e8 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e8b5:	29 c3                	sub    %eax,%ebx
f012e8b7:	89 d8                	mov    %ebx,%eax
f012e8b9:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e8be:	74 17                	je     f012e8d7 <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012e8c0:	83 ec 04             	sub    $0x4,%esp
f012e8c3:	68 4e c8 13 f0       	push   $0xf013c84e
f012e8c8:	68 37 11 00 00       	push   $0x1137
f012e8cd:	68 3a b5 13 f0       	push   $0xf013b53a
f012e8d2:	e8 2e 19 fd ff       	call   f0100205 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012e8d7:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012e8de:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012e8e1:	e8 cb e8 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012e8e6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012e8e9:	83 ec 08             	sub    $0x8,%esp
f012e8ec:	68 00 fc 0f 00       	push   $0xffc00
f012e8f1:	6a 00                	push   $0x0
f012e8f3:	e8 71 95 fd ff       	call   f0107e69 <krealloc>
f012e8f8:	83 c4 10             	add    $0x10,%esp
f012e8fb:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012e901:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e907:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012e90c:	77 17                	ja     f012e925 <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e90e:	83 ec 04             	sub    $0x4,%esp
f012e911:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012e916:	68 3e 11 00 00       	push   $0x113e
f012e91b:	68 3a b5 13 f0       	push   $0xf013b53a
f012e920:	e8 e0 18 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012e925:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e92b:	89 c1                	mov    %eax,%ecx
f012e92d:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012e934:	10 00 00 
f012e937:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012e93d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012e942:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012e948:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e94e:	ba 00 00 00 00       	mov    $0x0,%edx
f012e953:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012e959:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012e95f:	29 d0                	sub    %edx,%eax
f012e961:	89 c3                	mov    %eax,%ebx
f012e963:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012e96a:	10 00 00 
f012e96d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e972:	0f b6 d0             	movzbl %al,%edx
f012e975:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012e97b:	01 d0                	add    %edx,%eax
f012e97d:	48                   	dec    %eax
f012e97e:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012e984:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e98a:	ba 00 00 00 00       	mov    $0x0,%edx
f012e98f:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012e995:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012e99b:	29 d0                	sub    %edx,%eax
f012e99d:	01 c3                	add    %eax,%ebx
f012e99f:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012e9a6:	10 00 00 
f012e9a9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012e9ae:	0f b6 c0             	movzbl %al,%eax
f012e9b1:	c1 e0 04             	shl    $0x4,%eax
f012e9b4:	89 c2                	mov    %eax,%edx
f012e9b6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012e9bc:	01 d0                	add    %edx,%eax
f012e9be:	48                   	dec    %eax
f012e9bf:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012e9c5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e9cb:	ba 00 00 00 00       	mov    $0x0,%edx
f012e9d0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012e9d6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012e9dc:	29 d0                	sub    %edx,%eax
f012e9de:	01 d8                	add    %ebx,%eax
f012e9e0:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012e9e5:	39 c1                	cmp    %eax,%ecx
f012e9e7:	74 17                	je     f012ea00 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012e9e9:	83 ec 04             	sub    $0x4,%esp
f012e9ec:	68 1c c8 13 f0       	push   $0xf013c81c
f012e9f1:	68 40 11 00 00       	push   $0x1140
f012e9f6:	68 3a b5 13 f0       	push   $0xf013b53a
f012e9fb:	e8 05 18 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012ea00:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ea03:	e8 a9 e7 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ea08:	29 c3                	sub    %eax,%ebx
f012ea0a:	89 d8                	mov    %ebx,%eax
f012ea0c:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ea11:	74 17                	je     f012ea2a <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012ea13:	83 ec 04             	sub    $0x4,%esp
f012ea16:	68 4e c8 13 f0       	push   $0xf013c84e
f012ea1b:	68 42 11 00 00       	push   $0x1142
f012ea20:	68 3a b5 13 f0       	push   $0xf013b53a
f012ea25:	e8 db 17 fd ff       	call   f0100205 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012ea2a:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012ea31:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012ea34:	e8 78 e7 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ea39:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012ea3c:	83 ec 08             	sub    $0x8,%esp
f012ea3f:	68 00 fc 1f 00       	push   $0x1ffc00
f012ea44:	6a 00                	push   $0x0
f012ea46:	e8 1e 94 fd ff       	call   f0107e69 <krealloc>
f012ea4b:	83 c4 10             	add    $0x10,%esp
f012ea4e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012ea54:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea5a:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012ea5f:	77 17                	ja     f012ea78 <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ea61:	83 ec 04             	sub    $0x4,%esp
f012ea64:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012ea69:	68 49 11 00 00       	push   $0x1149
f012ea6e:	68 3a b5 13 f0       	push   $0xf013b53a
f012ea73:	e8 8d 17 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012ea78:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012ea7e:	89 c1                	mov    %eax,%ecx
f012ea80:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012ea87:	10 00 00 
f012ea8a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012ea90:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ea95:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012ea9b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012eaa1:	ba 00 00 00 00       	mov    $0x0,%edx
f012eaa6:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012eaac:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012eab2:	29 d0                	sub    %edx,%eax
f012eab4:	89 c3                	mov    %eax,%ebx
f012eab6:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012eabd:	10 00 00 
f012eac0:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012eac5:	0f b6 d0             	movzbl %al,%edx
f012eac8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012eace:	01 d0                	add    %edx,%eax
f012ead0:	48                   	dec    %eax
f012ead1:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012ead7:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012eadd:	ba 00 00 00 00       	mov    $0x0,%edx
f012eae2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012eae8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012eaee:	29 d0                	sub    %edx,%eax
f012eaf0:	01 c3                	add    %eax,%ebx
f012eaf2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012eaf9:	10 00 00 
f012eafc:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012eb01:	0f b6 c0             	movzbl %al,%eax
f012eb04:	c1 e0 04             	shl    $0x4,%eax
f012eb07:	89 c2                	mov    %eax,%edx
f012eb09:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012eb0f:	01 d0                	add    %edx,%eax
f012eb11:	48                   	dec    %eax
f012eb12:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012eb18:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012eb1e:	ba 00 00 00 00       	mov    $0x0,%edx
f012eb23:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012eb29:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012eb2f:	29 d0                	sub    %edx,%eax
f012eb31:	01 d8                	add    %ebx,%eax
f012eb33:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012eb38:	39 c1                	cmp    %eax,%ecx
f012eb3a:	74 17                	je     f012eb53 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012eb3c:	83 ec 04             	sub    $0x4,%esp
f012eb3f:	68 1c c8 13 f0       	push   $0xf013c81c
f012eb44:	68 4b 11 00 00       	push   $0x114b
f012eb49:	68 3a b5 13 f0       	push   $0xf013b53a
f012eb4e:	e8 b2 16 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012eb53:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eb56:	e8 56 e6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012eb5b:	29 c3                	sub    %eax,%ebx
f012eb5d:	89 d8                	mov    %ebx,%eax
f012eb5f:	3d 00 02 00 00       	cmp    $0x200,%eax
f012eb64:	74 17                	je     f012eb7d <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012eb66:	83 ec 04             	sub    $0x4,%esp
f012eb69:	68 4e c8 13 f0       	push   $0xf013c84e
f012eb6e:	68 4d 11 00 00       	push   $0x114d
f012eb73:	68 3a b5 13 f0       	push   $0xf013b53a
f012eb78:	e8 88 16 fd ff       	call   f0100205 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012eb7d:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012eb84:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012eb87:	e8 25 e6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012eb8c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012eb8f:	83 ec 08             	sub    $0x8,%esp
f012eb92:	68 00 fc 1f 00       	push   $0x1ffc00
f012eb97:	6a 00                	push   $0x0
f012eb99:	e8 cb 92 fd ff       	call   f0107e69 <krealloc>
f012eb9e:	83 c4 10             	add    $0x10,%esp
f012eba1:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012eba7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ebad:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012ebb2:	77 17                	ja     f012ebcb <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ebb4:	83 ec 04             	sub    $0x4,%esp
f012ebb7:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012ebbc:	68 54 11 00 00       	push   $0x1154
f012ebc1:	68 3a b5 13 f0       	push   $0xf013b53a
f012ebc6:	e8 3a 16 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012ebcb:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012ebd1:	89 c1                	mov    %eax,%ecx
f012ebd3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012ebda:	10 00 00 
f012ebdd:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012ebe3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ebe8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012ebee:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ebf4:	ba 00 00 00 00       	mov    $0x0,%edx
f012ebf9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012ebff:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012ec05:	29 d0                	sub    %edx,%eax
f012ec07:	89 c3                	mov    %eax,%ebx
f012ec09:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012ec10:	10 00 00 
f012ec13:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012ec18:	0f b6 d0             	movzbl %al,%edx
f012ec1b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012ec21:	01 d0                	add    %edx,%eax
f012ec23:	48                   	dec    %eax
f012ec24:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012ec2a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ec30:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec35:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012ec3b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012ec41:	29 d0                	sub    %edx,%eax
f012ec43:	01 c3                	add    %eax,%ebx
f012ec45:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012ec4c:	10 00 00 
f012ec4f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012ec54:	0f b6 c0             	movzbl %al,%eax
f012ec57:	c1 e0 04             	shl    $0x4,%eax
f012ec5a:	89 c2                	mov    %eax,%edx
f012ec5c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012ec62:	01 d0                	add    %edx,%eax
f012ec64:	48                   	dec    %eax
f012ec65:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012ec6b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ec71:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec76:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012ec7c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012ec82:	29 d0                	sub    %edx,%eax
f012ec84:	01 d8                	add    %ebx,%eax
f012ec86:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012ec8b:	39 c1                	cmp    %eax,%ecx
f012ec8d:	74 17                	je     f012eca6 <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012ec8f:	83 ec 04             	sub    $0x4,%esp
f012ec92:	68 1c c8 13 f0       	push   $0xf013c81c
f012ec97:	68 56 11 00 00       	push   $0x1156
f012ec9c:	68 3a b5 13 f0       	push   $0xf013b53a
f012eca1:	e8 5f 15 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012eca6:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eca9:	e8 03 e5 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ecae:	29 c3                	sub    %eax,%ebx
f012ecb0:	89 d8                	mov    %ebx,%eax
f012ecb2:	3d 00 02 00 00       	cmp    $0x200,%eax
f012ecb7:	74 17                	je     f012ecd0 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012ecb9:	83 ec 04             	sub    $0x4,%esp
f012ecbc:	68 4e c8 13 f0       	push   $0xf013c84e
f012ecc1:	68 58 11 00 00       	push   $0x1158
f012ecc6:	68 3a b5 13 f0       	push   $0xf013b53a
f012eccb:	e8 35 15 fd ff       	call   f0100205 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012ecd0:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012ecd7:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ecda:	e8 d2 e4 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ecdf:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012ece2:	83 ec 08             	sub    $0x8,%esp
f012ece5:	68 00 fc 2f 00       	push   $0x2ffc00
f012ecea:	6a 00                	push   $0x0
f012ecec:	e8 78 91 fd ff       	call   f0107e69 <krealloc>
f012ecf1:	83 c4 10             	add    $0x10,%esp
f012ecf4:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012ecfa:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ed00:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012ed05:	77 17                	ja     f012ed1e <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ed07:	83 ec 04             	sub    $0x4,%esp
f012ed0a:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012ed0f:	68 5f 11 00 00       	push   $0x115f
f012ed14:	68 3a b5 13 f0       	push   $0xf013b53a
f012ed19:	e8 e7 14 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012ed1e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ed24:	89 c1                	mov    %eax,%ecx
f012ed26:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012ed2d:	10 00 00 
f012ed30:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012ed36:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ed3b:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012ed41:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ed47:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed4c:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012ed52:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012ed58:	29 d0                	sub    %edx,%eax
f012ed5a:	89 c3                	mov    %eax,%ebx
f012ed5c:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ed63:	10 00 00 
f012ed66:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012ed6b:	0f b6 d0             	movzbl %al,%edx
f012ed6e:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ed74:	01 d0                	add    %edx,%eax
f012ed76:	48                   	dec    %eax
f012ed77:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ed7d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ed83:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed88:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ed8e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ed94:	29 d0                	sub    %edx,%eax
f012ed96:	01 c3                	add    %eax,%ebx
f012ed98:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ed9f:	10 00 00 
f012eda2:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012eda7:	0f b6 c0             	movzbl %al,%eax
f012edaa:	c1 e0 04             	shl    $0x4,%eax
f012edad:	89 c2                	mov    %eax,%edx
f012edaf:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012edb5:	01 d0                	add    %edx,%eax
f012edb7:	48                   	dec    %eax
f012edb8:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012edbe:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012edc4:	ba 00 00 00 00       	mov    $0x0,%edx
f012edc9:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012edcf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012edd5:	29 d0                	sub    %edx,%eax
f012edd7:	01 d8                	add    %ebx,%eax
f012edd9:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012edde:	39 c1                	cmp    %eax,%ecx
f012ede0:	74 17                	je     f012edf9 <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ede2:	83 ec 04             	sub    $0x4,%esp
f012ede5:	68 1c c8 13 f0       	push   $0xf013c81c
f012edea:	68 61 11 00 00       	push   $0x1161
f012edef:	68 3a b5 13 f0       	push   $0xf013b53a
f012edf4:	e8 0c 14 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012edf9:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012edfc:	e8 b0 e3 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ee01:	29 c3                	sub    %eax,%ebx
f012ee03:	89 d8                	mov    %ebx,%eax
f012ee05:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ee0a:	74 17                	je     f012ee23 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012ee0c:	83 ec 04             	sub    $0x4,%esp
f012ee0f:	68 84 b9 13 f0       	push   $0xf013b984
f012ee14:	68 63 11 00 00       	push   $0x1163
f012ee19:	68 3a b5 13 f0       	push   $0xf013b53a
f012ee1e:	e8 e2 13 fd ff       	call   f0100205 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ee23:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012ee2a:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012ee2d:	e8 7f e3 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ee32:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012ee35:	83 ec 08             	sub    $0x8,%esp
f012ee38:	68 00 fc 2f 00       	push   $0x2ffc00
f012ee3d:	6a 00                	push   $0x0
f012ee3f:	e8 25 90 fd ff       	call   f0107e69 <krealloc>
f012ee44:	83 c4 10             	add    $0x10,%esp
f012ee47:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012ee4d:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ee53:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012ee58:	77 17                	ja     f012ee71 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ee5a:	83 ec 04             	sub    $0x4,%esp
f012ee5d:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012ee62:	68 6a 11 00 00       	push   $0x116a
f012ee67:	68 3a b5 13 f0       	push   $0xf013b53a
f012ee6c:	e8 94 13 fd ff       	call   f0100205 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012ee71:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012ee77:	89 c1                	mov    %eax,%ecx
f012ee79:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012ee80:	10 00 00 
f012ee83:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012ee89:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ee8e:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012ee94:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012ee9a:	ba 00 00 00 00       	mov    $0x0,%edx
f012ee9f:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012eea5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012eeab:	29 d0                	sub    %edx,%eax
f012eead:	89 c3                	mov    %eax,%ebx
f012eeaf:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012eeb6:	10 00 00 
f012eeb9:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012eebe:	0f b6 d0             	movzbl %al,%edx
f012eec1:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012eec7:	01 d0                	add    %edx,%eax
f012eec9:	48                   	dec    %eax
f012eeca:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012eed0:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eed6:	ba 00 00 00 00       	mov    $0x0,%edx
f012eedb:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012eee1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012eee7:	29 d0                	sub    %edx,%eax
f012eee9:	01 c3                	add    %eax,%ebx
f012eeeb:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012eef2:	10 00 00 
f012eef5:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012eefa:	0f b6 c0             	movzbl %al,%eax
f012eefd:	c1 e0 04             	shl    $0x4,%eax
f012ef00:	89 c2                	mov    %eax,%edx
f012ef02:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012ef08:	01 d0                	add    %edx,%eax
f012ef0a:	48                   	dec    %eax
f012ef0b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012ef11:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ef17:	ba 00 00 00 00       	mov    $0x0,%edx
f012ef1c:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012ef22:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012ef28:	29 d0                	sub    %edx,%eax
f012ef2a:	01 d8                	add    %ebx,%eax
f012ef2c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012ef31:	39 c1                	cmp    %eax,%ecx
f012ef33:	74 17                	je     f012ef4c <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012ef35:	83 ec 04             	sub    $0x4,%esp
f012ef38:	68 1c c8 13 f0       	push   $0xf013c81c
f012ef3d:	68 6c 11 00 00       	push   $0x116c
f012ef42:	68 3a b5 13 f0       	push   $0xf013b53a
f012ef47:	e8 b9 12 fd ff       	call   f0100205 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ef4c:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ef4f:	e8 5d e2 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ef54:	29 c3                	sub    %eax,%ebx
f012ef56:	89 d8                	mov    %ebx,%eax
f012ef58:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ef5d:	74 17                	je     f012ef76 <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012ef5f:	83 ec 04             	sub    $0x4,%esp
f012ef62:	68 4e c8 13 f0       	push   $0xf013c84e
f012ef67:	68 6e 11 00 00       	push   $0x116e
f012ef6c:	68 3a b5 13 f0       	push   $0xf013b53a
f012ef71:	e8 8f 12 fd ff       	call   f0100205 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012ef76:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012ef7d:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012ef80:	e8 2c e2 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012ef85:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012ef88:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012ef8f:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012ef92:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012ef98:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012ef9e:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012efa4:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012efa7:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012efa9:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012efaf:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012efb5:	01 c2                	add    %eax,%edx
f012efb7:	8a 45 ce             	mov    -0x32(%ebp),%al
f012efba:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012efbc:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012efc2:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012efc8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012efcf:	eb 11                	jmp    f012efe2 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012efd1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012efd4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012efda:	01 d0                	add    %edx,%eax
f012efdc:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012efdf:	ff 45 f4             	incl   -0xc(%ebp)
f012efe2:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012efe8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012efeb:	7d e4                	jge    f012efd1 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012efed:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012eff3:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012eff9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012efff:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012f005:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012f00b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f012:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f018:	01 d0                	add    %edx,%eax
f012f01a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012f020:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f026:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012f02c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012f033:	eb 1b                	jmp    f012f050 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012f035:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f038:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f03f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f045:	01 d0                	add    %edx,%eax
f012f047:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012f04d:	ff 45 f0             	incl   -0x10(%ebp)
f012f050:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f056:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f059:	7d da                	jge    f012f035 <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012f05b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f061:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012f067:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012f06e:	eb 17                	jmp    f012f087 <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012f070:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012f073:	01 c0                	add    %eax,%eax
f012f075:	89 c2                	mov    %eax,%edx
f012f077:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f07d:	01 d0                	add    %edx,%eax
f012f07f:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012f084:	ff 45 ec             	incl   -0x14(%ebp)
f012f087:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f08d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012f090:	7d de                	jge    f012f070 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012f092:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f098:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012f09e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f0a4:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012f0a9:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f0af:	01 c0                	add    %eax,%eax
f012f0b1:	89 c2                	mov    %eax,%edx
f012f0b3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f0b9:	01 d0                	add    %edx,%eax
f012f0bb:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012f0c0:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f0c6:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012f0cc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012f0d3:	eb 49                	jmp    f012f11e <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012f0d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0df:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0e5:	01 d0                	add    %edx,%eax
f012f0e7:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012f0ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f0ed:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f0f4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f0fa:	01 d0                	add    %edx,%eax
f012f0fc:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012f102:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f105:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f10c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f112:	01 d0                	add    %edx,%eax
f012f114:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012f11b:	ff 45 e8             	incl   -0x18(%ebp)
f012f11e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f124:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f127:	7d ac                	jge    f012f0d5 <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012f129:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f12f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012f135:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f13b:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012f13e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f144:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012f14a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f150:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012f157:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f15d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f164:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f16a:	01 d0                	add    %edx,%eax
f012f16c:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012f16f:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f175:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f17c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f182:	01 d0                	add    %edx,%eax
f012f184:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012f18a:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f190:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f197:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f19d:	01 d0                	add    %edx,%eax
f012f19f:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012f1a6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f1ac:	8a 00                	mov    (%eax),%al
f012f1ae:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012f1b1:	75 17                	jne    f012f1ca <test_krealloc_BF+0xd04>
f012f1b3:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012f1b9:	89 c2                	mov    %eax,%edx
f012f1bb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012f1c1:	01 d0                	add    %edx,%eax
f012f1c3:	8a 00                	mov    (%eax),%al
f012f1c5:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012f1c8:	74 17                	je     f012f1e1 <test_krealloc_BF+0xd1b>
			panic(
f012f1ca:	83 ec 04             	sub    $0x4,%esp
f012f1cd:	68 6c c8 13 f0       	push   $0xf013c86c
f012f1d2:	68 b1 11 00 00       	push   $0x11b1
f012f1d7:	68 3a b5 13 f0       	push   $0xf013b53a
f012f1dc:	e8 24 10 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012f1e1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f1e7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012f1ed:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f1f3:	8a 00                	mov    (%eax),%al
f012f1f5:	3c 02                	cmp    $0x2,%al
f012f1f7:	75 16                	jne    f012f20f <test_krealloc_BF+0xd49>
f012f1f9:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f1ff:	89 c2                	mov    %eax,%edx
f012f201:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f207:	01 d0                	add    %edx,%eax
f012f209:	8a 00                	mov    (%eax),%al
f012f20b:	3c 02                	cmp    $0x2,%al
f012f20d:	74 20                	je     f012f22f <test_krealloc_BF+0xd69>
			panic(
f012f20f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f215:	8a 00                	mov    (%eax),%al
f012f217:	0f be c0             	movsbl %al,%eax
f012f21a:	50                   	push   %eax
f012f21b:	68 ac c8 13 f0       	push   $0xf013c8ac
f012f220:	68 b7 11 00 00       	push   $0x11b7
f012f225:	68 3a b5 13 f0       	push   $0xf013b53a
f012f22a:	e8 d6 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012f22f:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f235:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012f23b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f241:	8b 00                	mov    (%eax),%eax
f012f243:	83 f8 03             	cmp    $0x3,%eax
f012f246:	75 1c                	jne    f012f264 <test_krealloc_BF+0xd9e>
f012f248:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012f24e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f255:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f25b:	01 d0                	add    %edx,%eax
f012f25d:	8b 00                	mov    (%eax),%eax
f012f25f:	83 f8 03             	cmp    $0x3,%eax
f012f262:	74 17                	je     f012f27b <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012f264:	83 ec 04             	sub    $0x4,%esp
f012f267:	68 f8 c8 13 f0       	push   $0xf013c8f8
f012f26c:	68 bb 11 00 00       	push   $0x11bb
f012f271:	68 3a b5 13 f0       	push   $0xf013b53a
f012f276:	e8 8a 0f fd ff       	call   f0100205 <_panic>

		intArr = (int*) ptr_allocations[3];
f012f27b:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f281:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012f287:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f28d:	8b 00                	mov    (%eax),%eax
f012f28f:	83 f8 04             	cmp    $0x4,%eax
f012f292:	75 1c                	jne    f012f2b0 <test_krealloc_BF+0xdea>
f012f294:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f29a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f2a1:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f2a7:	01 d0                	add    %edx,%eax
f012f2a9:	8b 00                	mov    (%eax),%eax
f012f2ab:	83 f8 04             	cmp    $0x4,%eax
f012f2ae:	74 17                	je     f012f2c7 <test_krealloc_BF+0xe01>
			panic(
f012f2b0:	83 ec 04             	sub    $0x4,%esp
f012f2b3:	68 6c c8 13 f0       	push   $0xf013c86c
f012f2b8:	68 c0 11 00 00       	push   $0x11c0
f012f2bd:	68 3a b5 13 f0       	push   $0xf013b53a
f012f2c2:	e8 3e 0f fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012f2c7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f2cd:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012f2d3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f2d9:	66 8b 00             	mov    (%eax),%ax
f012f2dc:	66 83 f8 05          	cmp    $0x5,%ax
f012f2e0:	75 1b                	jne    f012f2fd <test_krealloc_BF+0xe37>
f012f2e2:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f2e8:	01 c0                	add    %eax,%eax
f012f2ea:	89 c2                	mov    %eax,%edx
f012f2ec:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f2f2:	01 d0                	add    %edx,%eax
f012f2f4:	66 8b 00             	mov    (%eax),%ax
f012f2f7:	66 83 f8 05          	cmp    $0x5,%ax
f012f2fb:	74 17                	je     f012f314 <test_krealloc_BF+0xe4e>
			panic(
f012f2fd:	83 ec 04             	sub    $0x4,%esp
f012f300:	68 6c c8 13 f0       	push   $0xf013c86c
f012f305:	68 c5 11 00 00       	push   $0x11c5
f012f30a:	68 3a b5 13 f0       	push   $0xf013b53a
f012f30f:	e8 f1 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012f314:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f31a:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012f320:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f326:	66 8b 00             	mov    (%eax),%ax
f012f329:	66 83 f8 06          	cmp    $0x6,%ax
f012f32d:	75 1b                	jne    f012f34a <test_krealloc_BF+0xe84>
f012f32f:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012f335:	01 c0                	add    %eax,%eax
f012f337:	89 c2                	mov    %eax,%edx
f012f339:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f33f:	01 d0                	add    %edx,%eax
f012f341:	66 8b 00             	mov    (%eax),%ax
f012f344:	66 83 f8 06          	cmp    $0x6,%ax
f012f348:	74 17                	je     f012f361 <test_krealloc_BF+0xe9b>
			panic(
f012f34a:	83 ec 04             	sub    $0x4,%esp
f012f34d:	68 6c c8 13 f0       	push   $0xf013c86c
f012f352:	68 ca 11 00 00       	push   $0x11ca
f012f357:	68 3a b5 13 f0       	push   $0xf013b53a
f012f35c:	e8 a4 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012f361:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f367:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012f36d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f373:	8a 00                	mov    (%eax),%al
f012f375:	3c 07                	cmp    $0x7,%al
f012f377:	75 1b                	jne    f012f394 <test_krealloc_BF+0xece>
f012f379:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f37f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f386:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f38c:	01 d0                	add    %edx,%eax
f012f38e:	8a 00                	mov    (%eax),%al
f012f390:	3c 07                	cmp    $0x7,%al
f012f392:	74 17                	je     f012f3ab <test_krealloc_BF+0xee5>
			panic(
f012f394:	83 ec 04             	sub    $0x4,%esp
f012f397:	68 6c c8 13 f0       	push   $0xf013c86c
f012f39c:	68 cf 11 00 00       	push   $0x11cf
f012f3a1:	68 3a b5 13 f0       	push   $0xf013b53a
f012f3a6:	e8 5a 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012f3ab:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3b1:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f3b5:	66 83 f8 07          	cmp    $0x7,%ax
f012f3b9:	75 1f                	jne    f012f3da <test_krealloc_BF+0xf14>
f012f3bb:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f3c1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f3c8:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3ce:	01 d0                	add    %edx,%eax
f012f3d0:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f3d4:	66 83 f8 07          	cmp    $0x7,%ax
f012f3d8:	74 17                	je     f012f3f1 <test_krealloc_BF+0xf2b>
			panic(
f012f3da:	83 ec 04             	sub    $0x4,%esp
f012f3dd:	68 6c c8 13 f0       	push   $0xf013c86c
f012f3e2:	68 d2 11 00 00       	push   $0x11d2
f012f3e7:	68 3a b5 13 f0       	push   $0xf013b53a
f012f3ec:	e8 14 0e fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012f3f1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f3f7:	8b 40 04             	mov    0x4(%eax),%eax
f012f3fa:	83 f8 07             	cmp    $0x7,%eax
f012f3fd:	75 1d                	jne    f012f41c <test_krealloc_BF+0xf56>
f012f3ff:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f405:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f40c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f412:	01 d0                	add    %edx,%eax
f012f414:	8b 40 04             	mov    0x4(%eax),%eax
f012f417:	83 f8 07             	cmp    $0x7,%eax
f012f41a:	74 17                	je     f012f433 <test_krealloc_BF+0xf6d>
			panic(
f012f41c:	83 ec 04             	sub    $0x4,%esp
f012f41f:	68 6c c8 13 f0       	push   $0xf013c86c
f012f424:	68 d5 11 00 00       	push   $0x11d5
f012f429:	68 3a b5 13 f0       	push   $0xf013b53a
f012f42e:	e8 d2 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012f433:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f439:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012f43f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f445:	8a 00                	mov    (%eax),%al
f012f447:	3c 08                	cmp    $0x8,%al
f012f449:	75 1b                	jne    f012f466 <test_krealloc_BF+0xfa0>
f012f44b:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f451:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f458:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f45e:	01 d0                	add    %edx,%eax
f012f460:	8a 00                	mov    (%eax),%al
f012f462:	3c 08                	cmp    $0x8,%al
f012f464:	74 17                	je     f012f47d <test_krealloc_BF+0xfb7>
			panic(
f012f466:	83 ec 04             	sub    $0x4,%esp
f012f469:	68 6c c8 13 f0       	push   $0xf013c86c
f012f46e:	68 da 11 00 00       	push   $0x11da
f012f473:	68 3a b5 13 f0       	push   $0xf013b53a
f012f478:	e8 88 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012f47d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f483:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f487:	66 83 f8 08          	cmp    $0x8,%ax
f012f48b:	75 1f                	jne    f012f4ac <test_krealloc_BF+0xfe6>
f012f48d:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f493:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f49a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4a0:	01 d0                	add    %edx,%eax
f012f4a2:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f4a6:	66 83 f8 08          	cmp    $0x8,%ax
f012f4aa:	74 17                	je     f012f4c3 <test_krealloc_BF+0xffd>
			panic(
f012f4ac:	83 ec 04             	sub    $0x4,%esp
f012f4af:	68 6c c8 13 f0       	push   $0xf013c86c
f012f4b4:	68 dd 11 00 00       	push   $0x11dd
f012f4b9:	68 3a b5 13 f0       	push   $0xf013b53a
f012f4be:	e8 42 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012f4c3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4c9:	8b 40 04             	mov    0x4(%eax),%eax
f012f4cc:	83 f8 08             	cmp    $0x8,%eax
f012f4cf:	75 1d                	jne    f012f4ee <test_krealloc_BF+0x1028>
f012f4d1:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012f4d7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012f4de:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f4e4:	01 d0                	add    %edx,%eax
f012f4e6:	8b 40 04             	mov    0x4(%eax),%eax
f012f4e9:	83 f8 08             	cmp    $0x8,%eax
f012f4ec:	74 17                	je     f012f505 <test_krealloc_BF+0x103f>
			panic(
f012f4ee:	83 ec 04             	sub    $0x4,%esp
f012f4f1:	68 6c c8 13 f0       	push   $0xf013c86c
f012f4f6:	68 e0 11 00 00       	push   $0x11e0
f012f4fb:	68 3a b5 13 f0       	push   $0xf013b53a
f012f500:	e8 00 0d fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012f505:	e8 a7 dc fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f50a:	89 c2                	mov    %eax,%edx
f012f50c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f50f:	39 c2                	cmp    %eax,%edx
f012f511:	74 17                	je     f012f52a <test_krealloc_BF+0x1064>
			panic(
f012f513:	83 ec 04             	sub    $0x4,%esp
f012f516:	68 2c c9 13 f0       	push   $0xf013c92c
f012f51b:	68 e4 11 00 00       	push   $0x11e4
f012f520:	68 3a b5 13 f0       	push   $0xf013b53a
f012f525:	e8 db 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012f52a:	83 ec 0c             	sub    $0xc,%esp
f012f52d:	68 78 c9 13 f0       	push   $0xf013c978
f012f532:	e8 d7 17 fd ff       	call   f0100d0e <cprintf>
f012f537:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012f53a:	e8 72 dc fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f53f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f542:	e8 68 48 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012f547:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012f54d:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012f553:	83 ec 08             	sub    $0x8,%esp
f012f556:	6a 00                	push   $0x0
f012f558:	50                   	push   %eax
f012f559:	e8 0b 89 fd ff       	call   f0107e69 <krealloc>
f012f55e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f561:	e8 49 48 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012f566:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f56c:	74 17                	je     f012f585 <test_krealloc_BF+0x10bf>
			panic(
f012f56e:	83 ec 04             	sub    $0x4,%esp
f012f571:	68 9c c9 13 f0       	push   $0xf013c99c
f012f576:	68 f1 11 00 00       	push   $0x11f1
f012f57b:	68 3a b5 13 f0       	push   $0xf013b53a
f012f580:	e8 80 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f585:	e8 27 dc fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f58a:	89 c2                	mov    %eax,%edx
f012f58c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f58f:	29 c2                	sub    %eax,%edx
f012f591:	89 d0                	mov    %edx,%eax
f012f593:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f598:	74 17                	je     f012f5b1 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012f59a:	83 ec 04             	sub    $0x4,%esp
f012f59d:	68 10 ca 13 f0       	push   $0xf013ca10
f012f5a2:	68 f3 11 00 00       	push   $0x11f3
f012f5a7:	68 3a b5 13 f0       	push   $0xf013b53a
f012f5ac:	e8 54 0c fd ff       	call   f0100205 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012f5b1:	e8 fb db fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f5b6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f5b9:	e8 f1 47 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012f5be:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012f5c4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012f5ca:	83 ec 08             	sub    $0x8,%esp
f012f5cd:	6a 00                	push   $0x0
f012f5cf:	50                   	push   %eax
f012f5d0:	e8 94 88 fd ff       	call   f0107e69 <krealloc>
f012f5d5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f5d8:	e8 d2 47 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012f5dd:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f5e3:	74 17                	je     f012f5fc <test_krealloc_BF+0x1136>
			panic(
f012f5e5:	83 ec 04             	sub    $0x4,%esp
f012f5e8:	68 9c c9 13 f0       	push   $0xf013c99c
f012f5ed:	68 fc 11 00 00       	push   $0x11fc
f012f5f2:	68 3a b5 13 f0       	push   $0xf013b53a
f012f5f7:	e8 09 0c fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012f5fc:	e8 b0 db fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f601:	89 c2                	mov    %eax,%edx
f012f603:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f606:	29 c2                	sub    %eax,%edx
f012f608:	89 d0                	mov    %edx,%eax
f012f60a:	3d 00 01 00 00       	cmp    $0x100,%eax
f012f60f:	74 17                	je     f012f628 <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012f611:	83 ec 04             	sub    $0x4,%esp
f012f614:	68 10 ca 13 f0       	push   $0xf013ca10
f012f619:	68 fe 11 00 00       	push   $0x11fe
f012f61e:	68 3a b5 13 f0       	push   $0xf013b53a
f012f623:	e8 dd 0b fd ff       	call   f0100205 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012f628:	e8 84 db fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f62d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f630:	e8 7a 47 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012f635:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012f63b:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012f641:	83 ec 08             	sub    $0x8,%esp
f012f644:	6a 00                	push   $0x0
f012f646:	50                   	push   %eax
f012f647:	e8 1d 88 fd ff       	call   f0107e69 <krealloc>
f012f64c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f64f:	e8 5b 47 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012f654:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f65a:	74 17                	je     f012f673 <test_krealloc_BF+0x11ad>
			panic(
f012f65c:	83 ec 04             	sub    $0x4,%esp
f012f65f:	68 54 b5 13 f0       	push   $0xf013b554
f012f664:	68 06 12 00 00       	push   $0x1206
f012f669:	68 3a b5 13 f0       	push   $0xf013b53a
f012f66e:	e8 92 0b fd ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012f673:	e8 39 db fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f678:	89 c2                	mov    %eax,%edx
f012f67a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f67d:	29 c2                	sub    %eax,%edx
f012f67f:	89 d0                	mov    %edx,%eax
f012f681:	3d 00 02 00 00       	cmp    $0x200,%eax
f012f686:	74 17                	je     f012f69f <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012f688:	83 ec 04             	sub    $0x4,%esp
f012f68b:	68 10 ca 13 f0       	push   $0xf013ca10
f012f690:	68 08 12 00 00       	push   $0x1208
f012f695:	68 3a b5 13 f0       	push   $0xf013b53a
f012f69a:	e8 66 0b fd ff       	call   f0100205 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012f69f:	e8 0d db fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f6a4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f6a7:	e8 03 47 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012f6ac:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012f6b2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012f6b8:	83 ec 08             	sub    $0x8,%esp
f012f6bb:	6a 00                	push   $0x0
f012f6bd:	50                   	push   %eax
f012f6be:	e8 a6 87 fd ff       	call   f0107e69 <krealloc>
f012f6c3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f6c6:	e8 e4 46 fd ff       	call   f0103daf <pf_calculate_free_frames>
f012f6cb:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f6d1:	74 17                	je     f012f6ea <test_krealloc_BF+0x1224>
			panic(
f012f6d3:	83 ec 04             	sub    $0x4,%esp
f012f6d6:	68 9c c9 13 f0       	push   $0xf013c99c
f012f6db:	68 10 12 00 00       	push   $0x1210
f012f6e0:	68 3a b5 13 f0       	push   $0xf013b53a
f012f6e5:	e8 1b 0b fd ff       	call   f0100205 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012f6ea:	e8 c2 da fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f6ef:	89 c2                	mov    %eax,%edx
f012f6f1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f6f4:	29 c2                	sub    %eax,%edx
f012f6f6:	89 d0                	mov    %edx,%eax
f012f6f8:	3d 00 03 00 00       	cmp    $0x300,%eax
f012f6fd:	74 17                	je     f012f716 <test_krealloc_BF+0x1250>
			panic(
f012f6ff:	83 ec 04             	sub    $0x4,%esp
f012f702:	68 44 ca 13 f0       	push   $0xf013ca44
f012f707:	68 13 12 00 00       	push   $0x1213
f012f70c:	68 3a b5 13 f0       	push   $0xf013b53a
f012f711:	e8 ef 0a fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f716:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012f71d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012f724:	eb 48                	jmp    f012f76e <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f726:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012f729:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f012f72e:	83 ec 04             	sub    $0x4,%esp
f012f731:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012f737:	51                   	push   %ecx
f012f738:	52                   	push   %edx
f012f739:	50                   	push   %eax
f012f73a:	e8 59 73 fd ff       	call   f0106a98 <get_page_table>
f012f73f:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f742:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012f748:	85 c0                	test   %eax,%eax
f012f74a:	75 17                	jne    f012f763 <test_krealloc_BF+0x129d>
					panic(
f012f74c:	83 ec 04             	sub    $0x4,%esp
f012f74f:	68 3c be 13 f0       	push   $0xf013be3c
f012f754:	68 1f 12 00 00       	push   $0x121f
f012f759:	68 3a b5 13 f0       	push   $0xf013b53a
f012f75e:	e8 a2 0a fd ff       	call   f0100205 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f763:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012f76a:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012f76e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f772:	78 b2                	js     f012f726 <test_krealloc_BF+0x1260>
f012f774:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f778:	7f 09                	jg     f012f783 <test_krealloc_BF+0x12bd>
f012f77a:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012f781:	76 a3                	jbe    f012f726 <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012f783:	83 ec 0c             	sub    $0xc,%esp
f012f786:	68 83 ca 13 f0       	push   $0xf013ca83
f012f78b:	e8 7e 15 fd ff       	call   f0100d0e <cprintf>
f012f790:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012f793:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f799:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f79f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f7a6:	eb 21                	jmp    f012f7c9 <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012f7a8:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012f7ae:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012f7b1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012f7b7:	01 c8                	add    %ecx,%eax
f012f7b9:	8a 00                	mov    (%eax),%al
f012f7bb:	0f be c0             	movsbl %al,%eax
f012f7be:	01 d0                	add    %edx,%eax
f012f7c0:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012f7c6:	ff 45 dc             	incl   -0x24(%ebp)
f012f7c9:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012f7cf:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f7d2:	7d d4                	jge    f012f7a8 <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012f7d4:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012f7da:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012f7e0:	42                   	inc    %edx
f012f7e1:	01 d2                	add    %edx,%edx
f012f7e3:	39 d0                	cmp    %edx,%eax
f012f7e5:	74 17                	je     f012f7fe <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012f7e7:	83 ec 04             	sub    $0x4,%esp
f012f7ea:	68 8c ca 13 f0       	push   $0xf013ca8c
f012f7ef:	68 31 12 00 00       	push   $0x1231
f012f7f4:	68 3a b5 13 f0       	push   $0xf013b53a
f012f7f9:	e8 07 0a fd ff       	call   f0100205 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012f7fe:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012f804:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f80a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f811:	eb 25                	jmp    f012f838 <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012f813:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012f819:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f81c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012f823:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012f829:	01 c8                	add    %ecx,%eax
f012f82b:	8b 00                	mov    (%eax),%eax
f012f82d:	01 d0                	add    %edx,%eax
f012f82f:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012f835:	ff 45 dc             	incl   -0x24(%ebp)
f012f838:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012f83e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f841:	7d d0                	jge    f012f813 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012f843:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012f849:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012f84f:	42                   	inc    %edx
f012f850:	c1 e2 02             	shl    $0x2,%edx
f012f853:	39 d0                	cmp    %edx,%eax
f012f855:	74 17                	je     f012f86e <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012f857:	83 ec 04             	sub    $0x4,%esp
f012f85a:	68 8c ca 13 f0       	push   $0xf013ca8c
f012f85f:	68 3b 12 00 00       	push   $0x123b
f012f864:	68 3a b5 13 f0       	push   $0xf013b53a
f012f869:	e8 97 09 fd ff       	call   f0100205 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012f86e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f874:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f87a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f881:	eb 24                	jmp    f012f8a7 <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012f883:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f889:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f88c:	01 c0                	add    %eax,%eax
f012f88e:	89 c1                	mov    %eax,%ecx
f012f890:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012f896:	01 c8                	add    %ecx,%eax
f012f898:	66 8b 00             	mov    (%eax),%ax
f012f89b:	98                   	cwtl   
f012f89c:	01 d0                	add    %edx,%eax
f012f89e:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012f8a4:	ff 45 dc             	incl   -0x24(%ebp)
f012f8a7:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f8ad:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f8b0:	7d d1                	jge    f012f883 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012f8b2:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012f8b8:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f8be:	8d 48 01             	lea    0x1(%eax),%ecx
f012f8c1:	89 c8                	mov    %ecx,%eax
f012f8c3:	c1 e0 02             	shl    $0x2,%eax
f012f8c6:	01 c8                	add    %ecx,%eax
f012f8c8:	39 c2                	cmp    %eax,%edx
f012f8ca:	74 17                	je     f012f8e3 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012f8cc:	83 ec 04             	sub    $0x4,%esp
f012f8cf:	68 8c ca 13 f0       	push   $0xf013ca8c
f012f8d4:	68 45 12 00 00       	push   $0x1245
f012f8d9:	68 3a b5 13 f0       	push   $0xf013b53a
f012f8de:	e8 22 09 fd ff       	call   f0100205 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012f8e3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f8e9:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f8ef:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012f8f6:	eb 70                	jmp    f012f968 <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012f8f8:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012f8fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f901:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f908:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f90e:	01 c8                	add    %ecx,%eax
f012f910:	8a 00                	mov    (%eax),%al
f012f912:	0f be c0             	movsbl %al,%eax
f012f915:	01 d0                	add    %edx,%eax
f012f917:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012f91d:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012f923:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f926:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f92d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f933:	01 c8                	add    %ecx,%eax
f012f935:	66 8b 40 02          	mov    0x2(%eax),%ax
f012f939:	98                   	cwtl   
f012f93a:	01 d0                	add    %edx,%eax
f012f93c:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012f942:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012f948:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f94b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012f952:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012f958:	01 c8                	add    %ecx,%eax
f012f95a:	8b 40 04             	mov    0x4(%eax),%eax
f012f95d:	01 d0                	add    %edx,%eax
f012f95f:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012f965:	ff 45 dc             	incl   -0x24(%ebp)
f012f968:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f96e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012f971:	7d 85                	jge    f012f8f8 <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012f973:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012f979:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f97f:	8d 50 01             	lea    0x1(%eax),%edx
f012f982:	89 d0                	mov    %edx,%eax
f012f984:	01 c0                	add    %eax,%eax
f012f986:	01 d0                	add    %edx,%eax
f012f988:	01 c0                	add    %eax,%eax
f012f98a:	01 d0                	add    %edx,%eax
f012f98c:	39 c1                	cmp    %eax,%ecx
f012f98e:	75 3a                	jne    f012f9ca <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012f990:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012f996:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f99c:	8d 50 01             	lea    0x1(%eax),%edx
f012f99f:	89 d0                	mov    %edx,%eax
f012f9a1:	01 c0                	add    %eax,%eax
f012f9a3:	01 d0                	add    %edx,%eax
f012f9a5:	01 c0                	add    %eax,%eax
f012f9a7:	01 d0                	add    %edx,%eax
f012f9a9:	39 c1                	cmp    %eax,%ecx
f012f9ab:	75 1d                	jne    f012f9ca <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012f9ad:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012f9b3:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012f9b9:	8d 50 01             	lea    0x1(%eax),%edx
f012f9bc:	89 d0                	mov    %edx,%eax
f012f9be:	01 c0                	add    %eax,%eax
f012f9c0:	01 d0                	add    %edx,%eax
f012f9c2:	01 c0                	add    %eax,%eax
f012f9c4:	01 d0                	add    %edx,%eax
f012f9c6:	39 c1                	cmp    %eax,%ecx
f012f9c8:	74 17                	je     f012f9e1 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012f9ca:	83 ec 04             	sub    $0x4,%esp
f012f9cd:	68 8c ca 13 f0       	push   $0xf013ca8c
f012f9d2:	68 53 12 00 00       	push   $0x1253
f012f9d7:	68 3a b5 13 f0       	push   $0xf013b53a
f012f9dc:	e8 24 08 fd ff       	call   f0100205 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012f9e1:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012f9e8:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012f9eb:	e8 c1 d7 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012f9f0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012f9f3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012f9f9:	83 ec 08             	sub    $0x8,%esp
f012f9fc:	68 00 3c 00 00       	push   $0x3c00
f012fa01:	50                   	push   %eax
f012fa02:	e8 62 84 fd ff       	call   f0107e69 <krealloc>
f012fa07:	83 c4 10             	add    $0x10,%esp
f012fa0a:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fa10:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fa16:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fa1b:	77 17                	ja     f012fa34 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fa1d:	83 ec 04             	sub    $0x4,%esp
f012fa20:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012fa25:	68 5f 12 00 00       	push   $0x125f
f012fa2a:	68 3a b5 13 f0       	push   $0xf013b53a
f012fa2f:	e8 d1 07 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fa34:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fa3a:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fa40:	74 17                	je     f012fa59 <test_krealloc_BF+0x1593>
			panic(
f012fa42:	83 ec 04             	sub    $0x4,%esp
f012fa45:	68 c4 ca 13 f0       	push   $0xf013cac4
f012fa4a:	68 62 12 00 00       	push   $0x1262
f012fa4f:	68 3a b5 13 f0       	push   $0xf013b53a
f012fa54:	e8 ac 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fa59:	e8 53 d7 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fa5e:	89 c2                	mov    %eax,%edx
f012fa60:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fa63:	39 c2                	cmp    %eax,%edx
f012fa65:	74 17                	je     f012fa7e <test_krealloc_BF+0x15b8>
			panic(
f012fa67:	83 ec 04             	sub    $0x4,%esp
f012fa6a:	68 30 cb 13 f0       	push   $0xf013cb30
f012fa6f:	68 65 12 00 00       	push   $0x1265
f012fa74:	68 3a b5 13 f0       	push   $0xf013b53a
f012fa79:	e8 87 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012fa7e:	e8 2e d7 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fa83:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012fa86:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fa8c:	83 ec 08             	sub    $0x8,%esp
f012fa8f:	68 00 fc 0f 00       	push   $0xffc00
f012fa94:	50                   	push   %eax
f012fa95:	e8 cf 83 fd ff       	call   f0107e69 <krealloc>
f012fa9a:	83 c4 10             	add    $0x10,%esp
f012fa9d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012faa3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012faa9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012faae:	77 17                	ja     f012fac7 <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fab0:	83 ec 04             	sub    $0x4,%esp
f012fab3:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012fab8:	68 6b 12 00 00       	push   $0x126b
f012fabd:	68 3a b5 13 f0       	push   $0xf013b53a
f012fac2:	e8 3e 07 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fac7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012facd:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fad3:	74 17                	je     f012faec <test_krealloc_BF+0x1626>
			panic(
f012fad5:	83 ec 04             	sub    $0x4,%esp
f012fad8:	68 c4 ca 13 f0       	push   $0xf013cac4
f012fadd:	68 6e 12 00 00       	push   $0x126e
f012fae2:	68 3a b5 13 f0       	push   $0xf013b53a
f012fae7:	e8 19 07 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012faec:	e8 c0 d6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012faf1:	89 c2                	mov    %eax,%edx
f012faf3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012faf6:	39 c2                	cmp    %eax,%edx
f012faf8:	74 17                	je     f012fb11 <test_krealloc_BF+0x164b>
			panic(
f012fafa:	83 ec 04             	sub    $0x4,%esp
f012fafd:	68 30 cb 13 f0       	push   $0xf013cb30
f012fb02:	68 71 12 00 00       	push   $0x1271
f012fb07:	68 3a b5 13 f0       	push   $0xf013b53a
f012fb0c:	e8 f4 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fb11:	e8 9b d6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fb16:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012fb19:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fb1f:	83 ec 08             	sub    $0x8,%esp
f012fb22:	68 00 fc 0f 00       	push   $0xffc00
f012fb27:	50                   	push   %eax
f012fb28:	e8 3c 83 fd ff       	call   f0107e69 <krealloc>
f012fb2d:	83 c4 10             	add    $0x10,%esp
f012fb30:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fb36:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fb3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fb41:	77 17                	ja     f012fb5a <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fb43:	83 ec 04             	sub    $0x4,%esp
f012fb46:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012fb4b:	68 77 12 00 00       	push   $0x1277
f012fb50:	68 3a b5 13 f0       	push   $0xf013b53a
f012fb55:	e8 ab 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fb5a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fb60:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fb66:	74 17                	je     f012fb7f <test_krealloc_BF+0x16b9>
			panic(
f012fb68:	83 ec 04             	sub    $0x4,%esp
f012fb6b:	68 c4 ca 13 f0       	push   $0xf013cac4
f012fb70:	68 7a 12 00 00       	push   $0x127a
f012fb75:	68 3a b5 13 f0       	push   $0xf013b53a
f012fb7a:	e8 86 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fb7f:	e8 2d d6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fb84:	89 c2                	mov    %eax,%edx
f012fb86:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fb89:	39 c2                	cmp    %eax,%edx
f012fb8b:	74 17                	je     f012fba4 <test_krealloc_BF+0x16de>
			panic(
f012fb8d:	83 ec 04             	sub    $0x4,%esp
f012fb90:	68 30 cb 13 f0       	push   $0xf013cb30
f012fb95:	68 7d 12 00 00       	push   $0x127d
f012fb9a:	68 3a b5 13 f0       	push   $0xf013b53a
f012fb9f:	e8 61 06 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012fba4:	e8 08 d6 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fba9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012fbac:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fbb2:	83 ec 08             	sub    $0x8,%esp
f012fbb5:	68 00 fc 0f 00       	push   $0xffc00
f012fbba:	50                   	push   %eax
f012fbbb:	e8 a9 82 fd ff       	call   f0107e69 <krealloc>
f012fbc0:	83 c4 10             	add    $0x10,%esp
f012fbc3:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fbc9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012fbcf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fbd4:	77 17                	ja     f012fbed <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fbd6:	83 ec 04             	sub    $0x4,%esp
f012fbd9:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012fbde:	68 85 12 00 00       	push   $0x1285
f012fbe3:	68 3a b5 13 f0       	push   $0xf013b53a
f012fbe8:	e8 18 06 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[3])
f012fbed:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012fbf3:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012fbf9:	74 17                	je     f012fc12 <test_krealloc_BF+0x174c>
			panic(
f012fbfb:	83 ec 04             	sub    $0x4,%esp
f012fbfe:	68 74 cb 13 f0       	push   $0xf013cb74
f012fc03:	68 88 12 00 00       	push   $0x1288
f012fc08:	68 3a b5 13 f0       	push   $0xf013b53a
f012fc0d:	e8 f3 05 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012fc12:	e8 9a d5 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fc17:	89 c2                	mov    %eax,%edx
f012fc19:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012fc1c:	39 c2                	cmp    %eax,%edx
f012fc1e:	74 17                	je     f012fc37 <test_krealloc_BF+0x1771>
			panic(
f012fc20:	83 ec 04             	sub    $0x4,%esp
f012fc23:	68 30 cb 13 f0       	push   $0xf013cb30
f012fc28:	68 8b 12 00 00       	push   $0x128b
f012fc2d:	68 3a b5 13 f0       	push   $0xf013b53a
f012fc32:	e8 ce 05 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012fc37:	83 ec 0c             	sub    $0xc,%esp
f012fc3a:	68 53 bd 13 f0       	push   $0xf013bd53
f012fc3f:	e8 ca 10 fd ff       	call   f0100d0e <cprintf>
f012fc44:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012fc47:	e8 65 d5 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fc4c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012fc4f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fc55:	83 ec 08             	sub    $0x8,%esp
f012fc58:	68 00 18 10 00       	push   $0x101800
f012fc5d:	50                   	push   %eax
f012fc5e:	e8 06 82 fd ff       	call   f0107e69 <krealloc>
f012fc63:	83 c4 10             	add    $0x10,%esp
f012fc66:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fc69:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fc6c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fc71:	77 17                	ja     f012fc8a <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fc73:	83 ec 04             	sub    $0x4,%esp
f012fc76:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012fc7b:	68 93 12 00 00       	push   $0x1293
f012fc80:	68 3a b5 13 f0       	push   $0xf013b53a
f012fc85:	e8 7b 05 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[1])
f012fc8a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012fc90:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fc93:	74 17                	je     f012fcac <test_krealloc_BF+0x17e6>
			panic(
f012fc95:	83 ec 04             	sub    $0x4,%esp
f012fc98:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012fc9d:	68 96 12 00 00       	push   $0x1296
f012fca2:	68 3a b5 13 f0       	push   $0xf013b53a
f012fca7:	e8 59 05 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012fcac:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fcaf:	e8 fd d4 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fcb4:	29 c3                	sub    %eax,%ebx
f012fcb6:	89 d8                	mov    %ebx,%eax
f012fcb8:	83 f8 02             	cmp    $0x2,%eax
f012fcbb:	74 17                	je     f012fcd4 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012fcbd:	83 ec 04             	sub    $0x4,%esp
f012fcc0:	68 50 cc 13 f0       	push   $0xf013cc50
f012fcc5:	68 98 12 00 00       	push   $0x1298
f012fcca:	68 3a b5 13 f0       	push   $0xf013b53a
f012fccf:	e8 31 05 fd ff       	call   f0100205 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012fcd4:	e8 d8 d4 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fcd9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012fcdc:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fce2:	83 ec 08             	sub    $0x8,%esp
f012fce5:	68 00 fc 3f 00       	push   $0x3ffc00
f012fcea:	50                   	push   %eax
f012fceb:	e8 79 81 fd ff       	call   f0107e69 <krealloc>
f012fcf0:	83 c4 10             	add    $0x10,%esp
f012fcf3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fcf6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fcf9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fcfe:	77 17                	ja     f012fd17 <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fd00:	83 ec 04             	sub    $0x4,%esp
f012fd03:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012fd08:	68 9e 12 00 00       	push   $0x129e
f012fd0d:	68 3a b5 13 f0       	push   $0xf013b53a
f012fd12:	e8 ee 04 fd ff       	call   f0100205 <_panic>
		if (newAddress != ptr_allocations[4])
f012fd17:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fd1d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fd20:	74 17                	je     f012fd39 <test_krealloc_BF+0x1873>
			panic(
f012fd22:	83 ec 04             	sub    $0x4,%esp
f012fd25:	68 d4 cb 13 f0       	push   $0xf013cbd4
f012fd2a:	68 a1 12 00 00       	push   $0x12a1
f012fd2f:	68 3a b5 13 f0       	push   $0xf013b53a
f012fd34:	e8 cc 04 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012fd39:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012fd3c:	e8 70 d4 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fd41:	29 c3                	sub    %eax,%ebx
f012fd43:	89 d8                	mov    %ebx,%eax
f012fd45:	3d 00 02 00 00       	cmp    $0x200,%eax
f012fd4a:	74 17                	je     f012fd63 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012fd4c:	83 ec 04             	sub    $0x4,%esp
f012fd4f:	68 50 cc 13 f0       	push   $0xf013cc50
f012fd54:	68 a4 12 00 00       	push   $0x12a4
f012fd59:	68 3a b5 13 f0       	push   $0xf013b53a
f012fd5e:	e8 a2 04 fd ff       	call   f0100205 <_panic>


	}
	cprintf("\b\b\b60%");
f012fd63:	83 ec 0c             	sub    $0xc,%esp
f012fd66:	68 98 bd 13 f0       	push   $0xf013bd98
f012fd6b:	e8 9e 0f fd ff       	call   f0100d0e <cprintf>
f012fd70:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012fd73:	e8 39 d4 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fd78:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012fd7b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fd81:	83 ec 08             	sub    $0x8,%esp
f012fd84:	68 00 fc 9f 00       	push   $0x9ffc00
f012fd89:	50                   	push   %eax
f012fd8a:	e8 da 80 fd ff       	call   f0107e69 <krealloc>
f012fd8f:	83 c4 10             	add    $0x10,%esp
f012fd92:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012fd95:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fd98:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012fd9d:	77 17                	ja     f012fdb6 <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012fd9f:	83 ec 04             	sub    $0x4,%esp
f012fda2:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012fda7:	68 af 12 00 00       	push   $0x12af
f012fdac:	68 3a b5 13 f0       	push   $0xf013b53a
f012fdb1:	e8 4f 04 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012fdb6:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012fdbd:	10 00 00 
f012fdc0:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012fdc6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012fdcb:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012fdd1:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fdd7:	ba 00 00 00 00       	mov    $0x0,%edx
f012fddc:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012fde2:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012fde8:	29 d0                	sub    %edx,%eax
f012fdea:	89 c1                	mov    %eax,%ecx
f012fdec:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012fdf3:	10 00 00 
f012fdf6:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012fdfb:	0f b6 d0             	movzbl %al,%edx
f012fdfe:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012fe04:	01 d0                	add    %edx,%eax
f012fe06:	48                   	dec    %eax
f012fe07:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012fe0d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fe13:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe18:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012fe1e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012fe24:	29 d0                	sub    %edx,%eax
f012fe26:	01 c1                	add    %eax,%ecx
f012fe28:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012fe2f:	10 00 00 
f012fe32:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012fe37:	0f b6 c0             	movzbl %al,%eax
f012fe3a:	c1 e0 04             	shl    $0x4,%eax
f012fe3d:	89 c2                	mov    %eax,%edx
f012fe3f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012fe45:	01 d0                	add    %edx,%eax
f012fe47:	48                   	dec    %eax
f012fe48:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012fe4e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fe54:	ba 00 00 00 00       	mov    $0x0,%edx
f012fe59:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012fe5f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012fe65:	29 d0                	sub    %edx,%eax
f012fe67:	01 c8                	add    %ecx,%eax
f012fe69:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012fe6f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fe72:	39 c2                	cmp    %eax,%edx
f012fe74:	74 18                	je     f012fe8e <test_krealloc_BF+0x19c8>
			panic(
f012fe76:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fe79:	50                   	push   %eax
f012fe7a:	68 84 cc 13 f0       	push   $0xf013cc84
f012fe7f:	68 b3 12 00 00       	push   $0x12b3
f012fe84:	68 3a b5 13 f0       	push   $0xf013b53a
f012fe89:	e8 77 03 fd ff       	call   f0100205 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012fe8e:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012fe94:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012fe97:	75 17                	jne    f012feb0 <test_krealloc_BF+0x19ea>
			panic(
f012fe99:	83 ec 04             	sub    $0x4,%esp
f012fe9c:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012fea1:	68 b6 12 00 00       	push   $0x12b6
f012fea6:	68 3a b5 13 f0       	push   $0xf013b53a
f012feab:	e8 55 03 fd ff       	call   f0100205 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012feb0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012feb3:	e8 f9 d2 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012feb8:	29 c3                	sub    %eax,%ebx
f012feba:	89 d8                	mov    %ebx,%eax
f012febc:	3d 00 06 00 00       	cmp    $0x600,%eax
f012fec1:	74 17                	je     f012feda <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012fec3:	83 ec 04             	sub    $0x4,%esp
f012fec6:	68 50 cc 13 f0       	push   $0xf013cc50
f012fecb:	68 b9 12 00 00       	push   $0x12b9
f012fed0:	68 3a b5 13 f0       	push   $0xf013b53a
f012fed5:	e8 2b 03 fd ff       	call   f0100205 <_panic>

		ptr_allocations[4] = newAddress;
f012feda:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012fedd:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012fee3:	e8 c9 d2 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f012fee8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012feeb:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012fef1:	83 ec 08             	sub    $0x8,%esp
f012fef4:	68 00 fc 3f 00       	push   $0x3ffc00
f012fef9:	50                   	push   %eax
f012fefa:	e8 6a 7f fd ff       	call   f0107e69 <krealloc>
f012feff:	83 c4 10             	add    $0x10,%esp
f012ff02:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ff05:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ff08:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ff0d:	77 17                	ja     f012ff26 <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ff0f:	83 ec 04             	sub    $0x4,%esp
f012ff12:	68 e0 c7 13 f0       	push   $0xf013c7e0
f012ff17:	68 c2 12 00 00       	push   $0x12c2
f012ff1c:	68 3a b5 13 f0       	push   $0xf013b53a
f012ff21:	e8 df 02 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f012ff26:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ff2c:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ff2f:	75 17                	jne    f012ff48 <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ff31:	83 ec 04             	sub    $0x4,%esp
f012ff34:	68 c8 cc 13 f0       	push   $0xf013ccc8
f012ff39:	68 c4 12 00 00       	push   $0x12c4
f012ff3e:	68 3a b5 13 f0       	push   $0xf013b53a
f012ff43:	e8 bd 02 fd ff       	call   f0100205 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012ff48:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012ff4f:	10 00 00 
f012ff52:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ff58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ff5d:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012ff63:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ff69:	ba 00 00 00 00       	mov    $0x0,%edx
f012ff6e:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012ff74:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ff7a:	29 d0                	sub    %edx,%eax
f012ff7c:	89 c1                	mov    %eax,%ecx
f012ff7e:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012ff85:	10 00 00 
f012ff88:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012ff8d:	0f b6 d0             	movzbl %al,%edx
f012ff90:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ff96:	01 d0                	add    %edx,%eax
f012ff98:	48                   	dec    %eax
f012ff99:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012ff9f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ffa5:	ba 00 00 00 00       	mov    $0x0,%edx
f012ffaa:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012ffb0:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ffb6:	29 d0                	sub    %edx,%eax
f012ffb8:	01 c1                	add    %eax,%ecx
f012ffba:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012ffc1:	10 00 00 
f012ffc4:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f012ffc9:	0f b6 c0             	movzbl %al,%eax
f012ffcc:	c1 e0 04             	shl    $0x4,%eax
f012ffcf:	89 c2                	mov    %eax,%edx
f012ffd1:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ffd7:	01 d0                	add    %edx,%eax
f012ffd9:	48                   	dec    %eax
f012ffda:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012ffe0:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ffe6:	ba 00 00 00 00       	mov    $0x0,%edx
f012ffeb:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012fff1:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012fff7:	29 d0                	sub    %edx,%eax
f012fff9:	01 c8                	add    %ecx,%eax
f012fffb:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0130001:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130004:	39 c2                	cmp    %eax,%edx
f0130006:	74 17                	je     f013001f <test_krealloc_BF+0x1b59>
f0130008:	83 ec 04             	sub    $0x4,%esp
f013000b:	68 1c c8 13 f0       	push   $0xf013c81c
f0130010:	68 c5 12 00 00       	push   $0x12c5
f0130015:	68 3a b5 13 f0       	push   $0xf013b53a
f013001a:	e8 e6 01 fd ff       	call   f0100205 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f013001f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0130022:	e8 8a d1 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f0130027:	29 c3                	sub    %eax,%ebx
f0130029:	89 d8                	mov    %ebx,%eax
f013002b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0130030:	74 17                	je     f0130049 <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f0130032:	83 ec 04             	sub    $0x4,%esp
f0130035:	68 50 cc 13 f0       	push   $0xf013cc50
f013003a:	68 c9 12 00 00       	push   $0x12c9
f013003f:	68 3a b5 13 f0       	push   $0xf013b53a
f0130044:	e8 bc 01 fd ff       	call   f0100205 <_panic>
		ptr_allocations[6] = newAddress;
f0130049:	8b 45 bc             	mov    -0x44(%ebp),%eax
f013004c:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f0130052:	e8 5a d1 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f0130057:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f013005a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0130060:	83 ec 08             	sub    $0x8,%esp
f0130063:	68 00 fc 3f 01       	push   $0x13ffc00
f0130068:	50                   	push   %eax
f0130069:	e8 fb 7d fd ff       	call   f0107e69 <krealloc>
f013006e:	83 c4 10             	add    $0x10,%esp
f0130071:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f0130074:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130077:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f013007c:	77 17                	ja     f0130095 <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f013007e:	83 ec 04             	sub    $0x4,%esp
f0130081:	68 e0 c7 13 f0       	push   $0xf013c7e0
f0130086:	68 cf 12 00 00       	push   $0x12cf
f013008b:	68 3a b5 13 f0       	push   $0xf013b53a
f0130090:	e8 70 01 fd ff       	call   f0100205 <_panic>
		if (newAddress == ptr_allocations[6])
f0130095:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f013009b:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f013009e:	75 17                	jne    f01300b7 <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f01300a0:	83 ec 04             	sub    $0x4,%esp
f01300a3:	68 c8 cc 13 f0       	push   $0xf013ccc8
f01300a8:	68 d1 12 00 00       	push   $0x12d1
f01300ad:	68 3a b5 13 f0       	push   $0xf013b53a
f01300b2:	e8 4e 01 fd ff       	call   f0100205 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f01300b7:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f01300be:	10 00 00 
f01300c1:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01300c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01300cc:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f01300d2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01300d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01300dd:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f01300e3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f01300e9:	29 d0                	sub    %edx,%eax
f01300eb:	89 c1                	mov    %eax,%ecx
f01300ed:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f01300f4:	10 00 00 
f01300f7:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f01300fc:	0f b6 d0             	movzbl %al,%edx
f01300ff:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0130105:	01 d0                	add    %edx,%eax
f0130107:	48                   	dec    %eax
f0130108:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f013010e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0130114:	ba 00 00 00 00       	mov    $0x0,%edx
f0130119:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f013011f:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0130125:	29 d0                	sub    %edx,%eax
f0130127:	01 c1                	add    %eax,%ecx
f0130129:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0130130:	10 00 00 
f0130133:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0130138:	0f b6 c0             	movzbl %al,%eax
f013013b:	c1 e0 04             	shl    $0x4,%eax
f013013e:	89 c2                	mov    %eax,%edx
f0130140:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0130146:	01 d0                	add    %edx,%eax
f0130148:	48                   	dec    %eax
f0130149:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f013014f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0130155:	ba 00 00 00 00       	mov    $0x0,%edx
f013015a:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0130160:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0130166:	29 d0                	sub    %edx,%eax
f0130168:	01 c8                	add    %ecx,%eax
f013016a:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f0130170:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0130173:	39 c2                	cmp    %eax,%edx
f0130175:	74 17                	je     f013018e <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f0130177:	83 ec 04             	sub    $0x4,%esp
f013017a:	68 e8 cd 13 f0       	push   $0xf013cde8
f013017f:	68 d3 12 00 00       	push   $0x12d3
f0130184:	68 3a b5 13 f0       	push   $0xf013b53a
f0130189:	e8 77 00 fd ff       	call   f0100205 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f013018e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0130191:	e8 1b d0 fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f0130196:	29 c3                	sub    %eax,%ebx
f0130198:	89 d8                	mov    %ebx,%eax
f013019a:	3d 00 10 00 00       	cmp    $0x1000,%eax
f013019f:	74 17                	je     f01301b8 <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f01301a1:	83 ec 04             	sub    $0x4,%esp
f01301a4:	68 50 cc 13 f0       	push   $0xf013cc50
f01301a9:	68 d6 12 00 00       	push   $0x12d6
f01301ae:	68 3a b5 13 f0       	push   $0xf013b53a
f01301b3:	e8 4d 00 fd ff       	call   f0100205 <_panic>

		ptr_allocations[6] = newAddress;
f01301b8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01301bb:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f01301c1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01301c7:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f01301cd:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f01301d4:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f01301d7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01301de:	eb 21                	jmp    f0130201 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f01301e0:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01301e6:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01301e9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01301ef:	01 c8                	add    %ecx,%eax
f01301f1:	8a 00                	mov    (%eax),%al
f01301f3:	0f be c0             	movsbl %al,%eax
f01301f6:	01 d0                	add    %edx,%eax
f01301f8:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f01301fe:	ff 45 d8             	incl   -0x28(%ebp)
f0130201:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0130207:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f013020a:	7d d4                	jge    f01301e0 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f013020c:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f0130212:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f0130218:	42                   	inc    %edx
f0130219:	01 d2                	add    %edx,%edx
f013021b:	39 d0                	cmp    %edx,%eax
f013021d:	74 17                	je     f0130236 <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f013021f:	83 ec 04             	sub    $0x4,%esp
f0130222:	68 80 cd 13 f0       	push   $0xf013cd80
f0130227:	68 e4 12 00 00       	push   $0x12e4
f013022c:	68 3a b5 13 f0       	push   $0xf013b53a
f0130231:	e8 cf ff fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f0130236:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f013023c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f0130242:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130249:	00 00 00 
		sums[1] = 0;
f013024c:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f0130253:	00 00 00 
		sums[2] = 0;
f0130256:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f013025d:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f0130260:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0130267:	eb 70                	jmp    f01302d9 <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f0130269:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f013026f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130272:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0130279:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f013027f:	01 c8                	add    %ecx,%eax
f0130281:	8a 00                	mov    (%eax),%al
f0130283:	0f be c0             	movsbl %al,%eax
f0130286:	01 d0                	add    %edx,%eax
f0130288:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f013028e:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0130294:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130297:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f013029e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01302a4:	01 c8                	add    %ecx,%eax
f01302a6:	66 8b 40 02          	mov    0x2(%eax),%ax
f01302aa:	98                   	cwtl   
f01302ab:	01 d0                	add    %edx,%eax
f01302ad:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f01302b3:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f01302b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01302bc:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f01302c3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01302c9:	01 c8                	add    %ecx,%eax
f01302cb:	8b 40 04             	mov    0x4(%eax),%eax
f01302ce:	01 d0                	add    %edx,%eax
f01302d0:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f01302d6:	ff 45 d8             	incl   -0x28(%ebp)
f01302d9:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302df:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01302e2:	7d 85                	jge    f0130269 <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f01302e4:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f01302ea:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01302f0:	8d 50 01             	lea    0x1(%eax),%edx
f01302f3:	89 d0                	mov    %edx,%eax
f01302f5:	01 c0                	add    %eax,%eax
f01302f7:	01 d0                	add    %edx,%eax
f01302f9:	01 c0                	add    %eax,%eax
f01302fb:	01 d0                	add    %edx,%eax
f01302fd:	39 c1                	cmp    %eax,%ecx
f01302ff:	75 3a                	jne    f013033b <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f0130301:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f0130307:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f013030d:	8d 50 01             	lea    0x1(%eax),%edx
f0130310:	89 d0                	mov    %edx,%eax
f0130312:	01 c0                	add    %eax,%eax
f0130314:	01 d0                	add    %edx,%eax
f0130316:	01 c0                	add    %eax,%eax
f0130318:	01 d0                	add    %edx,%eax
f013031a:	39 c1                	cmp    %eax,%ecx
f013031c:	75 1d                	jne    f013033b <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f013031e:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f0130324:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f013032a:	8d 50 01             	lea    0x1(%eax),%edx
f013032d:	89 d0                	mov    %edx,%eax
f013032f:	01 c0                	add    %eax,%eax
f0130331:	01 d0                	add    %edx,%eax
f0130333:	01 c0                	add    %eax,%eax
f0130335:	01 d0                	add    %edx,%eax
f0130337:	39 c1                	cmp    %eax,%ecx
f0130339:	74 17                	je     f0130352 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f013033b:	83 ec 04             	sub    $0x4,%esp
f013033e:	68 80 cd 13 f0       	push   $0xf013cd80
f0130343:	68 f6 12 00 00       	push   $0x12f6
f0130348:	68 3a b5 13 f0       	push   $0xf013b53a
f013034d:	e8 b3 fe fc ff       	call   f0100205 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f0130352:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130358:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f013035e:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f0130365:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f0130368:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f013036f:	eb 24                	jmp    f0130395 <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f0130371:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f0130377:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013037a:	01 c0                	add    %eax,%eax
f013037c:	89 c1                	mov    %eax,%ecx
f013037e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0130384:	01 c8                	add    %ecx,%eax
f0130386:	66 8b 00             	mov    (%eax),%ax
f0130389:	98                   	cwtl   
f013038a:	01 d0                	add    %edx,%eax
f013038c:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f0130392:	ff 45 d8             	incl   -0x28(%ebp)
f0130395:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f013039b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f013039e:	7d d1                	jge    f0130371 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f01303a0:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f01303a6:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f01303ac:	8d 48 01             	lea    0x1(%eax),%ecx
f01303af:	89 c8                	mov    %ecx,%eax
f01303b1:	c1 e0 02             	shl    $0x2,%eax
f01303b4:	01 c8                	add    %ecx,%eax
f01303b6:	39 c2                	cmp    %eax,%edx
f01303b8:	74 17                	je     f01303d1 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f01303ba:	83 ec 04             	sub    $0x4,%esp
f01303bd:	68 80 cd 13 f0       	push   $0xf013cd80
f01303c2:	68 00 13 00 00       	push   $0x1300
f01303c7:	68 3a b5 13 f0       	push   $0xf013b53a
f01303cc:	e8 34 fe fc ff       	call   f0100205 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f01303d1:	e8 db cd fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f01303d6:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01303d9:	e8 d1 39 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01303de:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f01303e4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01303ea:	83 ec 08             	sub    $0x8,%esp
f01303ed:	6a 00                	push   $0x0
f01303ef:	50                   	push   %eax
f01303f0:	e8 74 7a fd ff       	call   f0107e69 <krealloc>
f01303f5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f01303f8:	e8 b2 39 fd ff       	call   f0103daf <pf_calculate_free_frames>
f01303fd:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130403:	74 17                	je     f013041c <test_krealloc_BF+0x1f56>
			panic(
f0130405:	83 ec 04             	sub    $0x4,%esp
f0130408:	68 54 b5 13 f0       	push   $0xf013b554
f013040d:	68 08 13 00 00       	push   $0x1308
f0130412:	68 3a b5 13 f0       	push   $0xf013b53a
f0130417:	e8 e9 fd fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f013041c:	e8 90 cd fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f0130421:	89 c2                	mov    %eax,%edx
f0130423:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0130426:	29 c2                	sub    %eax,%edx
f0130428:	89 d0                	mov    %edx,%eax
f013042a:	3d 00 14 00 00       	cmp    $0x1400,%eax
f013042f:	74 17                	je     f0130448 <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f0130431:	83 ec 04             	sub    $0x4,%esp
f0130434:	68 10 ca 13 f0       	push   $0xf013ca10
f0130439:	68 0a 13 00 00       	push   $0x130a
f013043e:	68 3a b5 13 f0       	push   $0xf013b53a
f0130443:	e8 bd fd fc ff       	call   f0100205 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f0130448:	e8 64 cd fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f013044d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0130450:	e8 5a 39 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0130455:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f013045b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0130461:	83 ec 0c             	sub    $0xc,%esp
f0130464:	50                   	push   %eax
f0130465:	e8 02 78 fd ff       	call   f0107c6c <kfree>
f013046a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f013046d:	e8 3d 39 fd ff       	call   f0103daf <pf_calculate_free_frames>
f0130472:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f0130478:	74 17                	je     f0130491 <test_krealloc_BF+0x1fcb>
			panic(
f013047a:	83 ec 04             	sub    $0x4,%esp
f013047d:	68 54 b5 13 f0       	push   $0xf013b554
f0130482:	68 12 13 00 00       	push   $0x1312
f0130487:	68 3a b5 13 f0       	push   $0xf013b53a
f013048c:	e8 74 fd fc ff       	call   f0100205 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f0130491:	e8 1b cd fd ff       	call   f010d1b1 <sys_calculate_free_frames>
f0130496:	89 c2                	mov    %eax,%edx
f0130498:	8b 45 b8             	mov    -0x48(%ebp),%eax
f013049b:	29 c2                	sub    %eax,%edx
f013049d:	89 d0                	mov    %edx,%eax
f013049f:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f01304a4:	74 17                	je     f01304bd <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f01304a6:	83 ec 04             	sub    $0x4,%esp
f01304a9:	68 10 ca 13 f0       	push   $0xf013ca10
f01304ae:	68 14 13 00 00       	push   $0x1314
f01304b3:	68 3a b5 13 f0       	push   $0xf013b53a
f01304b8:	e8 48 fd fc ff       	call   f0100205 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f01304bd:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f01304c4:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01304cb:	eb 48                	jmp    f0130515 <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f01304cd:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01304d0:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01304d5:	83 ec 04             	sub    $0x4,%esp
f01304d8:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f01304de:	51                   	push   %ecx
f01304df:	52                   	push   %edx
f01304e0:	50                   	push   %eax
f01304e1:	e8 b2 65 fd ff       	call   f0106a98 <get_page_table>
f01304e6:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f01304e9:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f01304ef:	85 c0                	test   %eax,%eax
f01304f1:	75 17                	jne    f013050a <test_krealloc_BF+0x2044>
					panic(
f01304f3:	83 ec 04             	sub    $0x4,%esp
f01304f6:	68 3c be 13 f0       	push   $0xf013be3c
f01304fb:	68 21 13 00 00       	push   $0x1321
f0130500:	68 3a b5 13 f0       	push   $0xf013b53a
f0130505:	e8 fb fc fc ff       	call   f0100205 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f013050a:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f0130511:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f0130515:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0130519:	78 b2                	js     f01304cd <test_krealloc_BF+0x2007>
f013051b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f013051f:	7f 09                	jg     f013052a <test_krealloc_BF+0x2064>
f0130521:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0130528:	76 a3                	jbe    f01304cd <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f013052a:	83 ec 0c             	sub    $0xc,%esp
f013052d:	68 1e b7 13 f0       	push   $0xf013b71e
f0130532:	e8 d7 07 fd ff       	call   f0100d0e <cprintf>
f0130537:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f013053a:	83 ec 0c             	sub    $0xc,%esp
f013053d:	68 20 ce 13 f0       	push   $0xf013ce20
f0130542:	e8 c7 07 fd ff       	call   f0100d0e <cprintf>
f0130547:	83 c4 10             	add    $0x10,%esp
	return 0;
f013054a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013054f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130552:	5b                   	pop    %ebx
f0130553:	5f                   	pop    %edi
f0130554:	5d                   	pop    %ebp
f0130555:	c3                   	ret    

f0130556 <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f0130556:	55                   	push   %ebp
f0130557:	89 e5                	mov    %esp,%ebp
f0130559:	83 ec 28             	sub    $0x28,%esp
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
	if(STATIC_MEMBLOCK_ALLOC != 0)
		panic("STATIC_MEMBLOCK_ALLOC = 1 & it shall be 0. Go to 'inc/dynamic_allocator.h' and set STATIC_MEMBLOCK_ALLOC by 0. Then, repeat the test again.");

	//Check MAX_MEM_BLOCK_CNT
	if(MAX_MEM_BLOCK_CNT != ((0xFFFFF000-0xF6000000)/4096))
f013055c:	a1 00 f7 85 f0       	mov    0xf085f700,%eax
f0130561:	3d ff 9f 00 00       	cmp    $0x9fff,%eax
f0130566:	74 17                	je     f013057f <test_initialize_dyn_block_system+0x29>
	{
		panic("Wrong initialize: MAX_MEM_BLOCK_CNT is not set with the correct size of the array");
f0130568:	83 ec 04             	sub    $0x4,%esp
f013056b:	68 60 ce 13 f0       	push   $0xf013ce60
f0130570:	68 39 13 00 00       	push   $0x1339
f0130575:	68 3a b5 13 f0       	push   $0xf013b53a
f013057a:	e8 86 fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != MAX_MEM_BLOCK_CNT-1)
f013057f:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0130584:	8b 15 00 f7 85 f0    	mov    0xf085f700,%edx
f013058a:	4a                   	dec    %edx
f013058b:	39 d0                	cmp    %edx,%eax
f013058d:	74 17                	je     f01305a6 <test_initialize_dyn_block_system+0x50>
	{
		panic("Wrong initialize: Wrong size for the AvailableMemBlocksList");
f013058f:	83 ec 04             	sub    $0x4,%esp
f0130592:	68 b4 ce 13 f0       	push   $0xf013ceb4
f0130597:	68 3f 13 00 00       	push   $0x133f
f013059c:	68 3a b5 13 f0       	push   $0xf013b53a
f01305a1:	e8 5f fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f01305a6:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01305ab:	85 c0                	test   %eax,%eax
f01305ad:	74 17                	je     f01305c6 <test_initialize_dyn_block_system+0x70>
	{
		panic("Wrong initialize: Wrong size for the AllocMemBlocksList");
f01305af:	83 ec 04             	sub    $0x4,%esp
f01305b2:	68 f0 ce 13 f0       	push   $0xf013cef0
f01305b7:	68 45 13 00 00       	push   $0x1345
f01305bc:	68 3a b5 13 f0       	push   $0xf013b53a
f01305c1:	e8 3f fc fc ff       	call   f0100205 <_panic>
	}

	//Check number of nodes in FreeMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 1)
f01305c6:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01305cb:	83 f8 01             	cmp    $0x1,%eax
f01305ce:	74 17                	je     f01305e7 <test_initialize_dyn_block_system+0x91>
	{
		panic("Wrong initialize: Wrong size for the FreeMemBlocksList");
f01305d0:	83 ec 04             	sub    $0x4,%esp
f01305d3:	68 28 cf 13 f0       	push   $0xf013cf28
f01305d8:	68 4b 13 00 00       	push   $0x134b
f01305dd:	68 3a b5 13 f0       	push   $0xf013b53a
f01305e2:	e8 1e fc fc ff       	call   f0100205 <_panic>
	}

	//Check content of FreeMemBlocksList
	struct MemBlock* block = LIST_FIRST(&FreeMemBlocksList);
f01305e7:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f01305ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(block == NULL || block->size != (KERNEL_HEAP_MAX-0xF6000000-DYNAMIC_ALLOCATOR_DS) || block->sva != 0xF6000000+DYNAMIC_ALLOCATOR_DS)
f01305ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01305f3:	74 66                	je     f013065b <test_initialize_dyn_block_system+0x105>
f01305f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01305f8:	8b 48 0c             	mov    0xc(%eax),%ecx
f01305fb:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0130602:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130605:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013060a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f013060d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0130610:	ba 00 00 00 00       	mov    $0x0,%edx
f0130615:	f7 75 ec             	divl   -0x14(%ebp)
f0130618:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013061b:	29 d0                	sub    %edx,%eax
f013061d:	ba 00 f0 ff 09       	mov    $0x9fff000,%edx
f0130622:	29 c2                	sub    %eax,%edx
f0130624:	89 d0                	mov    %edx,%eax
f0130626:	39 c1                	cmp    %eax,%ecx
f0130628:	75 31                	jne    f013065b <test_initialize_dyn_block_system+0x105>
f013062a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013062d:	8b 48 08             	mov    0x8(%eax),%ecx
f0130630:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0130637:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013063a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013063f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0130642:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130645:	ba 00 00 00 00       	mov    $0x0,%edx
f013064a:	f7 75 e4             	divl   -0x1c(%ebp)
f013064d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0130650:	29 d0                	sub    %edx,%eax
f0130652:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130657:	39 c1                	cmp    %eax,%ecx
f0130659:	74 17                	je     f0130672 <test_initialize_dyn_block_system+0x11c>
	{
		panic("Wrong initialize: Wrong content for the FreeMemBlocksList.");
f013065b:	83 ec 04             	sub    $0x4,%esp
f013065e:	68 60 cf 13 f0       	push   $0xf013cf60
f0130663:	68 52 13 00 00       	push   $0x1352
f0130668:	68 3a b5 13 f0       	push   $0xf013b53a
f013066d:	e8 93 fb fc ff       	call   f0100205 <_panic>
	}

	//Check number of disk and memory frames
	if ((freeDiskFrames_after - freeDiskFrames_before) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0130672:	8b 45 14             	mov    0x14(%ebp),%eax
f0130675:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0130678:	74 17                	je     f0130691 <test_initialize_dyn_block_system+0x13b>
f013067a:	83 ec 04             	sub    $0x4,%esp
f013067d:	68 54 b5 13 f0       	push   $0xf013b554
f0130682:	68 56 13 00 00       	push   $0x1356
f0130687:	68 3a b5 13 f0       	push   $0xf013b53a
f013068c:	e8 74 fb fc ff       	call   f0100205 <_panic>
	if ((freeFrames_before - freeFrames_after) != 160) panic("Wrong allocation: pages are not loaded successfully into memory %d", (freeFrames_before - freeFrames_after));
f0130691:	8b 45 08             	mov    0x8(%ebp),%eax
f0130694:	2b 45 10             	sub    0x10(%ebp),%eax
f0130697:	3d a0 00 00 00       	cmp    $0xa0,%eax
f013069c:	74 1b                	je     f01306b9 <test_initialize_dyn_block_system+0x163>
f013069e:	8b 45 08             	mov    0x8(%ebp),%eax
f01306a1:	2b 45 10             	sub    0x10(%ebp),%eax
f01306a4:	50                   	push   %eax
f01306a5:	68 9c cf 13 f0       	push   $0xf013cf9c
f01306aa:	68 57 13 00 00       	push   $0x1357
f01306af:	68 3a b5 13 f0       	push   $0xf013b53a
f01306b4:	e8 4c fb fc ff       	call   f0100205 <_panic>

	//Checking permissions on the allocated spaces
	{
		uint32 a = 0xF6000000;
f01306b9:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
		while(1)
		{
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
f01306c0:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01306c5:	83 ec 04             	sub    $0x4,%esp
f01306c8:	6a 00                	push   $0x0
f01306ca:	ff 75 f4             	pushl  -0xc(%ebp)
f01306cd:	50                   	push   %eax
f01306ce:	e8 e9 5f fe ff       	call   f01166bc <CB>
f01306d3:	83 c4 10             	add    $0x10,%esp
f01306d6:	83 f8 01             	cmp    $0x1,%eax
f01306d9:	75 35                	jne    f0130710 <test_initialize_dyn_block_system+0x1ba>
f01306db:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01306e0:	83 ec 04             	sub    $0x4,%esp
f01306e3:	6a 01                	push   $0x1
f01306e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01306e8:	50                   	push   %eax
f01306e9:	e8 ce 5f fe ff       	call   f01166bc <CB>
f01306ee:	83 c4 10             	add    $0x10,%esp
f01306f1:	83 f8 01             	cmp    $0x1,%eax
f01306f4:	75 1a                	jne    f0130710 <test_initialize_dyn_block_system+0x1ba>
f01306f6:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01306fb:	83 ec 04             	sub    $0x4,%esp
f01306fe:	6a 02                	push   $0x2
f0130700:	ff 75 f4             	pushl  -0xc(%ebp)
f0130703:	50                   	push   %eax
f0130704:	e8 b3 5f fe ff       	call   f01166bc <CB>
f0130709:	83 c4 10             	add    $0x10,%esp
f013070c:	85 c0                	test   %eax,%eax
f013070e:	74 17                	je     f0130727 <test_initialize_dyn_block_system+0x1d1>
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");
f0130710:	83 ec 04             	sub    $0x4,%esp
f0130713:	68 e0 cf 13 f0       	push   $0xf013cfe0
f0130718:	68 5f 13 00 00       	push   $0x135f
f013071d:	68 3a b5 13 f0       	push   $0xf013b53a
f0130722:	e8 de fa fc ff       	call   f0100205 <_panic>

			a+=4096;
f0130727:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
f013072e:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0130735:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130738:	05 ef ff 09 00       	add    $0x9ffef,%eax
f013073d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0130740:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130743:	ba 00 00 00 00       	mov    $0x0,%edx
f0130748:	f7 75 dc             	divl   -0x24(%ebp)
f013074b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f013074e:	29 d0                	sub    %edx,%eax
f0130750:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0130755:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130758:	74 05                	je     f013075f <test_initialize_dyn_block_system+0x209>
				break;
		}
f013075a:	e9 61 ff ff ff       	jmp    f01306c0 <test_initialize_dyn_block_system+0x16a>
			if (CB(ptr_page_directory, a, 0)!=1 || CB(ptr_page_directory, a, 1)!=1 || CB(ptr_page_directory, a, 2)!=0)
				panic("Wrong initialize: Wrong permissions - pages mapped with wrong permissions. Check them again.");

			a+=4096;
			if(a == (0xF6000000+DYNAMIC_ALLOCATOR_DS))
				break;
f013075f:	90                   	nop
		}
	}

	//===============================================//
	cprintf("\nCongratulations!! test initialize_dyn_block_system of KHEAP completed successfully.\n");
f0130760:	83 ec 0c             	sub    $0xc,%esp
f0130763:	68 40 d0 13 f0       	push   $0xf013d040
f0130768:	e8 a1 05 fd ff       	call   f0100d0e <cprintf>
f013076d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0130770:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130775:	c9                   	leave  
f0130776:	c3                   	ret    

f0130777 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0130777:	55                   	push   %ebp
f0130778:	89 e5                	mov    %esp,%ebp
f013077a:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f013077d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0130781:	77 07                	ja     f013078a <nearest_pow2_ceil+0x13>
f0130783:	b8 01 00 00 00       	mov    $0x1,%eax
f0130788:	eb 20                	jmp    f01307aa <nearest_pow2_ceil+0x33>
    int power = 2;
f013078a:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f0130791:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f0130794:	eb 08                	jmp    f013079e <nearest_pow2_ceil+0x27>
    	power <<= 1;
f0130796:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130799:	01 c0                	add    %eax,%eax
f013079b:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f013079e:	d1 6d 08             	shrl   0x8(%ebp)
f01307a1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01307a5:	75 ef                	jne    f0130796 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f01307a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01307aa:	c9                   	leave  
f01307ab:	c3                   	ret    

f01307ac <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f01307ac:	55                   	push   %ebp
f01307ad:	89 e5                	mov    %esp,%ebp
f01307af:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f01307b2:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01307b6:	77 07                	ja     f01307bf <log2_ceil+0x13>
f01307b8:	b8 01 00 00 00       	mov    $0x1,%eax
f01307bd:	eb 1b                	jmp    f01307da <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f01307bf:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f01307c6:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f01307c9:	eb 03                	jmp    f01307ce <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f01307cb:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f01307ce:	d1 6d 08             	shrl   0x8(%ebp)
f01307d1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01307d5:	75 f4                	jne    f01307cb <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f01307d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01307da:	c9                   	leave  
f01307db:	c3                   	ret    

f01307dc <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f01307dc:	55                   	push   %ebp
f01307dd:	89 e5                	mov    %esp,%ebp
f01307df:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f01307e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01307e5:	8b 00                	mov    (%eax),%eax
f01307e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f01307ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01307ed:	8b 00                	mov    (%eax),%eax
f01307ef:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f01307f2:	eb 52                	jmp    f0130846 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f01307f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307f7:	8b 00                	mov    (%eax),%eax
f01307f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f01307fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01307ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130802:	75 12                	jne    f0130816 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0130804:	83 ec 0c             	sub    $0xc,%esp
f0130807:	68 98 d0 13 f0       	push   $0xf013d098
f013080c:	e8 fd 04 fd ff       	call   f0100d0e <cprintf>
f0130811:	83 c4 10             	add    $0x10,%esp
			break;
f0130814:	eb 3f                	jmp    f0130855 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0130816:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013081a:	74 38                	je     f0130854 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f013081c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013081f:	8b 00                	mov    (%eax),%eax
f0130821:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0130824:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130827:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f013082a:	75 12                	jne    f013083e <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f013082c:	83 ec 0c             	sub    $0xc,%esp
f013082f:	68 b4 d0 13 f0       	push   $0xf013d0b4
f0130834:	e8 d5 04 fd ff       	call   f0100d0e <cprintf>
f0130839:	83 c4 10             	add    $0x10,%esp
			break;
f013083c:	eb 17                	jmp    f0130855 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f013083e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130841:	8b 00                	mov    (%eax),%eax
f0130843:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f0130846:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013084a:	74 09                	je     f0130855 <detect_loop_in_FrameInfo_list+0x79>
f013084c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130850:	75 a2                	jne    f01307f4 <detect_loop_in_FrameInfo_list+0x18>
f0130852:	eb 01                	jmp    f0130855 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f0130854:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f0130855:	83 ec 0c             	sub    $0xc,%esp
f0130858:	68 cb d0 13 f0       	push   $0xf013d0cb
f013085d:	e8 ac 04 fd ff       	call   f0100d0e <cprintf>
f0130862:	83 c4 10             	add    $0x10,%esp
}
f0130865:	90                   	nop
f0130866:	c9                   	leave  
f0130867:	c3                   	ret    

f0130868 <scarce_memory>:

void scarce_memory()
{
f0130868:	55                   	push   %ebp
f0130869:	89 e5                	mov    %esp,%ebp
f013086b:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f013086e:	a1 ec f6 85 f0       	mov    0xf085f6ec,%eax
f0130873:	ba 64 00 00 00       	mov    $0x64,%edx
f0130878:	29 c2                	sub    %eax,%edx
f013087a:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f013087f:	0f af c2             	imul   %edx,%eax
f0130882:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130887:	f7 e2                	mul    %edx
f0130889:	89 d0                	mov    %edx,%eax
f013088b:	c1 e8 05             	shr    $0x5,%eax
f013088e:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0130891:	a1 ec f6 85 f0       	mov    0xf085f6ec,%eax
f0130896:	ba 64 00 00 00       	mov    $0x64,%edx
f013089b:	29 c2                	sub    %eax,%edx
f013089d:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f01308a2:	89 d1                	mov    %edx,%ecx
f01308a4:	0f af c8             	imul   %eax,%ecx
f01308a7:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01308ac:	f7 e1                	mul    %ecx
f01308ae:	c1 ea 05             	shr    $0x5,%edx
f01308b1:	89 d0                	mov    %edx,%eax
f01308b3:	c1 e0 02             	shl    $0x2,%eax
f01308b6:	01 d0                	add    %edx,%eax
f01308b8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01308bf:	01 d0                	add    %edx,%eax
f01308c1:	c1 e0 02             	shl    $0x2,%eax
f01308c4:	29 c1                	sub    %eax,%ecx
f01308c6:	89 ca                	mov    %ecx,%edx
f01308c8:	85 d2                	test   %edx,%edx
f01308ca:	74 03                	je     f01308cf <scarce_memory+0x67>
		total_size_tobe_allocated++;
f01308cc:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f01308cf:	8b 15 0c f7 85 f0    	mov    0xf085f70c,%edx
f01308d5:	a1 20 f7 85 f0       	mov    0xf085f720,%eax
f01308da:	29 c2                	sub    %eax,%edx
f01308dc:	89 d0                	mov    %edx,%eax
f01308de:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f01308e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01308e4:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01308e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f01308ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f01308f1:	eb 12                	jmp    f0130905 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f01308f3:	83 ec 0c             	sub    $0xc,%esp
f01308f6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f01308f9:	50                   	push   %eax
f01308fa:	e8 da 5f fd ff       	call   f01068d9 <allocate_frame>
f01308ff:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f0130902:	ff 45 f0             	incl   -0x10(%ebp)
f0130905:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130908:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f013090b:	76 e6                	jbe    f01308f3 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f013090d:	90                   	nop
f013090e:	c9                   	leave  
f013090f:	c3                   	ret    

f0130910 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f0130910:	55                   	push   %ebp
f0130911:	89 e5                	mov    %esp,%ebp
f0130913:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f0130916:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f013091d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f0130924:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f013092b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f013092f:	0f 85 d0 01 00 00    	jne    f0130b05 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130935:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f013093c:	e9 de 00 00 00       	jmp    f0130a1f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f0130941:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f0130948:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f013094d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130950:	c1 e2 04             	shl    $0x4,%edx
f0130953:	01 d0                	add    %edx,%eax
f0130955:	8b 00                	mov    (%eax),%eax
f0130957:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f013095a:	e9 85 00 00 00       	jmp    f01309e4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f013095f:	83 ec 0c             	sub    $0xc,%esp
f0130962:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130965:	e8 27 78 fd ff       	call   f0108191 <env_page_ws_get_size>
f013096a:	83 c4 10             	add    $0x10,%esp
f013096d:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130970:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130975:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013097b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013097e:	0f af c2             	imul   %edx,%eax
f0130981:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130986:	f7 e2                	mul    %edx
f0130988:	89 d0                	mov    %edx,%eax
f013098a:	c1 e8 05             	shr    $0x5,%eax
f013098d:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130990:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130995:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f013099b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f013099e:	89 d1                	mov    %edx,%ecx
f01309a0:	0f af c8             	imul   %eax,%ecx
f01309a3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01309a8:	f7 e1                	mul    %ecx
f01309aa:	c1 ea 05             	shr    $0x5,%edx
f01309ad:	89 d0                	mov    %edx,%eax
f01309af:	c1 e0 02             	shl    $0x2,%eax
f01309b2:	01 d0                	add    %edx,%eax
f01309b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01309bb:	01 d0                	add    %edx,%eax
f01309bd:	c1 e0 02             	shl    $0x2,%eax
f01309c0:	29 c1                	sub    %eax,%ecx
f01309c2:	89 ca                	mov    %ecx,%edx
f01309c4:	85 d2                	test   %edx,%edx
f01309c6:	74 03                	je     f01309cb <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f01309c8:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f01309cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01309ce:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f01309d1:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01309d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01309d9:	c1 e2 04             	shl    $0x4,%edx
f01309dc:	01 d0                	add    %edx,%eax
f01309de:	8b 40 08             	mov    0x8(%eax),%eax
f01309e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01309e4:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f01309e9:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01309ec:	c1 e2 04             	shl    $0x4,%edx
f01309ef:	01 d0                	add    %edx,%eax
f01309f1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01309f5:	74 08                	je     f01309ff <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f01309f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01309fa:	8b 52 44             	mov    0x44(%edx),%edx
f01309fd:	eb 05                	jmp    f0130a04 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f01309ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0130a04:	89 50 08             	mov    %edx,0x8(%eax)
f0130a07:	8b 40 08             	mov    0x8(%eax),%eax
f0130a0a:	85 c0                	test   %eax,%eax
f0130a0c:	0f 85 4d ff ff ff    	jne    f013095f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f0130a12:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0130a16:	0f 85 43 ff ff ff    	jne    f013095f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f0130a1c:	ff 45 e8             	incl   -0x18(%ebp)
f0130a1f:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0130a24:	0f b6 c0             	movzbl %al,%eax
f0130a27:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0130a2a:	0f 8f 11 ff ff ff    	jg     f0130941 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f0130a30:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130a37:	a1 f0 f6 85 f0       	mov    0xf085f6f0,%eax
f0130a3c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130a3f:	eb 19                	jmp    f0130a5a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f0130a41:	83 ec 0c             	sub    $0xc,%esp
f0130a44:	ff 75 dc             	pushl  -0x24(%ebp)
f0130a47:	e8 45 77 fd ff       	call   f0108191 <env_page_ws_get_size>
f0130a4c:	83 c4 10             	add    $0x10,%esp
f0130a4f:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f0130a52:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f0130a57:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130a5a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130a5e:	74 08                	je     f0130a68 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f0130a60:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130a63:	8b 40 44             	mov    0x44(%eax),%eax
f0130a66:	eb 05                	jmp    f0130a6d <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f0130a68:	b8 00 00 00 00       	mov    $0x0,%eax
f0130a6d:	a3 f8 f6 85 f0       	mov    %eax,0xf085f6f8
f0130a72:	a1 f8 f6 85 f0       	mov    0xf085f6f8,%eax
f0130a77:	85 c0                	test   %eax,%eax
f0130a79:	75 c6                	jne    f0130a41 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f0130a7b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130a7f:	75 c0                	jne    f0130a41 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f0130a81:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130a86:	85 c0                	test   %eax,%eax
f0130a88:	0f 84 ec 00 00 00    	je     f0130b7a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130a8e:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130a93:	83 ec 0c             	sub    $0xc,%esp
f0130a96:	50                   	push   %eax
f0130a97:	e8 f5 76 fd ff       	call   f0108191 <env_page_ws_get_size>
f0130a9c:	83 c4 10             	add    $0x10,%esp
f0130a9f:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130aa2:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130aa7:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130aad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130ab0:	0f af c2             	imul   %edx,%eax
f0130ab3:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130ab8:	f7 e2                	mul    %edx
f0130aba:	89 d0                	mov    %edx,%eax
f0130abc:	c1 e8 05             	shr    $0x5,%eax
f0130abf:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130ac2:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130ac7:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130acd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0130ad0:	89 d1                	mov    %edx,%ecx
f0130ad2:	0f af c8             	imul   %eax,%ecx
f0130ad5:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130ada:	f7 e1                	mul    %ecx
f0130adc:	c1 ea 05             	shr    $0x5,%edx
f0130adf:	89 d0                	mov    %edx,%eax
f0130ae1:	c1 e0 02             	shl    $0x2,%eax
f0130ae4:	01 d0                	add    %edx,%eax
f0130ae6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130aed:	01 d0                	add    %edx,%eax
f0130aef:	c1 e0 02             	shl    $0x2,%eax
f0130af2:	29 c1                	sub    %eax,%ecx
f0130af4:	89 ca                	mov    %ecx,%edx
f0130af6:	85 d2                	test   %edx,%edx
f0130af8:	74 03                	je     f0130afd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f0130afa:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130afd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0130b00:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0130b03:	eb 75                	jmp    f0130b7a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f0130b05:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130b0a:	83 ec 0c             	sub    $0xc,%esp
f0130b0d:	50                   	push   %eax
f0130b0e:	e8 7e 76 fd ff       	call   f0108191 <env_page_ws_get_size>
f0130b13:	83 c4 10             	add    $0x10,%esp
f0130b16:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0130b19:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130b1e:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130b24:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130b27:	0f af c2             	imul   %edx,%eax
f0130b2a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0130b2f:	f7 e2                	mul    %edx
f0130b31:	89 d0                	mov    %edx,%eax
f0130b33:	c1 e8 05             	shr    $0x5,%eax
f0130b36:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0130b39:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130b3e:	8b 90 a0 05 00 00    	mov    0x5a0(%eax),%edx
f0130b44:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130b47:	89 d1                	mov    %edx,%ecx
f0130b49:	0f af c8             	imul   %eax,%ecx
f0130b4c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130b51:	f7 e1                	mul    %ecx
f0130b53:	c1 ea 05             	shr    $0x5,%edx
f0130b56:	89 d0                	mov    %edx,%eax
f0130b58:	c1 e0 02             	shl    $0x2,%eax
f0130b5b:	01 d0                	add    %edx,%eax
f0130b5d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130b64:	01 d0                	add    %edx,%eax
f0130b66:	c1 e0 02             	shl    $0x2,%eax
f0130b69:	29 c1                	sub    %eax,%ecx
f0130b6b:	89 ca                	mov    %ecx,%edx
f0130b6d:	85 d2                	test   %edx,%edx
f0130b6f:	74 03                	je     f0130b74 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f0130b71:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0130b74:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0130b77:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0130b7a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130b7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130b80:	01 c2                	add    %eax,%edx
f0130b82:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130b85:	01 d0                	add    %edx,%eax
}
f0130b87:	c9                   	leave  
f0130b88:	c3                   	ret    

f0130b89 <schenv>:


void schenv()
{
f0130b89:	55                   	push   %ebp
f0130b8a:	89 e5                	mov    %esp,%ebp
f0130b8c:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f0130b8f:	c6 05 a4 f7 85 f0 00 	movb   $0x0,0xf085f7a4
	__ne = NULL;
f0130b96:	c7 05 34 f7 85 f0 00 	movl   $0x0,0xf085f734
f0130b9d:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130ba0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130ba7:	eb 3f                	jmp    f0130be8 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f0130ba9:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0130bae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130bb1:	c1 e2 04             	shl    $0x4,%edx
f0130bb4:	01 d0                	add    %edx,%eax
f0130bb6:	83 ec 0c             	sub    $0xc,%esp
f0130bb9:	50                   	push   %eax
f0130bba:	e8 ad 38 fd ff       	call   f010446c <queue_size>
f0130bbf:	83 c4 10             	add    $0x10,%esp
f0130bc2:	85 c0                	test   %eax,%eax
f0130bc4:	74 1f                	je     f0130be5 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f0130bc6:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0130bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130bce:	c1 e2 04             	shl    $0x4,%edx
f0130bd1:	01 d0                	add    %edx,%eax
f0130bd3:	8b 40 04             	mov    0x4(%eax),%eax
f0130bd6:	a3 34 f7 85 f0       	mov    %eax,0xf085f734
			__nl = i;
f0130bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130bde:	a2 a4 f7 85 f0       	mov    %al,0xf085f7a4
			break;
f0130be3:	eb 10                	jmp    f0130bf5 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f0130be5:	ff 45 f4             	incl   -0xc(%ebp)
f0130be8:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0130bed:	0f b6 c0             	movzbl %al,%eax
f0130bf0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130bf3:	7f b4                	jg     f0130ba9 <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f0130bf5:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130bfa:	85 c0                	test   %eax,%eax
f0130bfc:	0f 84 86 00 00 00    	je     f0130c88 <schenv+0xff>
	{
		if (__ne != NULL)
f0130c02:	a1 34 f7 85 f0       	mov    0xf085f734,%eax
f0130c07:	85 c0                	test   %eax,%eax
f0130c09:	74 4b                	je     f0130c56 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f0130c0b:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130c10:	0f b6 c0             	movzbl %al,%eax
f0130c13:	8d 50 01             	lea    0x1(%eax),%edx
f0130c16:	a0 a4 f7 85 f0       	mov    0xf085f7a4,%al
f0130c1b:	0f b6 c0             	movzbl %al,%eax
f0130c1e:	39 c2                	cmp    %eax,%edx
f0130c20:	7d 66                	jge    f0130c88 <schenv+0xff>
			{
				__ne = curenv;
f0130c22:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130c27:	a3 34 f7 85 f0       	mov    %eax,0xf085f734
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130c2c:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130c31:	0f b6 c0             	movzbl %al,%eax
f0130c34:	8a 15 7c f7 85 f0    	mov    0xf085f77c,%dl
f0130c3a:	0f b6 d2             	movzbl %dl,%edx
f0130c3d:	4a                   	dec    %edx
f0130c3e:	39 d0                	cmp    %edx,%eax
f0130c40:	7d 08                	jge    f0130c4a <schenv+0xc1>
f0130c42:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130c47:	40                   	inc    %eax
f0130c48:	eb 05                	jmp    f0130c4f <schenv+0xc6>
f0130c4a:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130c4f:	a2 a4 f7 85 f0       	mov    %al,0xf085f7a4
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0130c54:	eb 32                	jmp    f0130c88 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f0130c56:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130c5b:	a3 34 f7 85 f0       	mov    %eax,0xf085f734
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0130c60:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130c65:	0f b6 c0             	movzbl %al,%eax
f0130c68:	8a 15 7c f7 85 f0    	mov    0xf085f77c,%dl
f0130c6e:	0f b6 d2             	movzbl %dl,%edx
f0130c71:	4a                   	dec    %edx
f0130c72:	39 d0                	cmp    %edx,%eax
f0130c74:	7d 08                	jge    f0130c7e <schenv+0xf5>
f0130c76:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130c7b:	40                   	inc    %eax
f0130c7c:	eb 05                	jmp    f0130c83 <schenv+0xfa>
f0130c7e:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130c83:	a2 a4 f7 85 f0       	mov    %al,0xf085f7a4
		}
	}
}
f0130c88:	90                   	nop
f0130c89:	c9                   	leave  
f0130c8a:	c3                   	ret    

f0130c8b <chksch>:

void chksch(uint8 onoff)
{
f0130c8b:	55                   	push   %ebp
f0130c8c:	89 e5                	mov    %esp,%ebp
f0130c8e:	83 ec 04             	sub    $0x4,%esp
f0130c91:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c94:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f0130c97:	c7 05 90 f7 85 f0 00 	movl   $0x0,0xf085f790
f0130c9e:	00 00 00 
	__ne = NULL;
f0130ca1:	c7 05 34 f7 85 f0 00 	movl   $0x0,0xf085f734
f0130ca8:	00 00 00 
	__pl = 0 ;
f0130cab:	c6 05 dc f6 85 f0 00 	movb   $0x0,0xf085f6dc
	__nl = 0 ;
f0130cb2:	c6 05 a4 f7 85 f0 00 	movb   $0x0,0xf085f7a4
	__chkstatus = onoff;
f0130cb9:	8a 45 fc             	mov    -0x4(%ebp),%al
f0130cbc:	a2 30 f7 85 f0       	mov    %al,0xf085f730
}
f0130cc1:	90                   	nop
f0130cc2:	c9                   	leave  
f0130cc3:	c3                   	ret    

f0130cc4 <chk1>:
void chk1()
{
f0130cc4:	55                   	push   %ebp
f0130cc5:	89 e5                	mov    %esp,%ebp
f0130cc7:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f0130cca:	a0 30 f7 85 f0       	mov    0xf085f730,%al
f0130ccf:	84 c0                	test   %al,%al
f0130cd1:	74 2b                	je     f0130cfe <chk1+0x3a>
		return ;
	__pe = curenv;
f0130cd3:	a1 f4 ed 85 f0       	mov    0xf085edf4,%eax
f0130cd8:	a3 90 f7 85 f0       	mov    %eax,0xf085f790
	__pl = __nl ;
f0130cdd:	a0 a4 f7 85 f0       	mov    0xf085f7a4,%al
f0130ce2:	a2 dc f6 85 f0       	mov    %al,0xf085f6dc
	if (__pe == NULL)
f0130ce7:	a1 90 f7 85 f0       	mov    0xf085f790,%eax
f0130cec:	85 c0                	test   %eax,%eax
f0130cee:	75 07                	jne    f0130cf7 <chk1+0x33>
	{
		__pl = 0;
f0130cf0:	c6 05 dc f6 85 f0 00 	movb   $0x0,0xf085f6dc
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f0130cf7:	e8 8d fe ff ff       	call   f0130b89 <schenv>
f0130cfc:	eb 01                	jmp    f0130cff <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f0130cfe:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f0130cff:	c9                   	leave  
f0130d00:	c3                   	ret    

f0130d01 <chk2>:
void chk2(struct Env* __se)
{
f0130d01:	55                   	push   %ebp
f0130d02:	89 e5                	mov    %esp,%ebp
f0130d04:	53                   	push   %ebx
f0130d05:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f0130d08:	a0 30 f7 85 f0       	mov    0xf085f730,%al
f0130d0d:	84 c0                	test   %al,%al
f0130d0f:	0f 84 43 02 00 00    	je     f0130f58 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f0130d15:	a1 34 f7 85 f0       	mov    0xf085f734,%eax
f0130d1a:	39 45 08             	cmp    %eax,0x8(%ebp)
f0130d1d:	74 19                	je     f0130d38 <chk2+0x37>
f0130d1f:	68 e5 d0 13 f0       	push   $0xf013d0e5
f0130d24:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130d29:	68 c0 00 00 00       	push   $0xc0
f0130d2e:	68 07 d1 13 f0       	push   $0xf013d107
f0130d33:	e8 83 f5 fc ff       	call   f01002bb <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f0130d38:	a1 34 f7 85 f0       	mov    0xf085f734,%eax
f0130d3d:	85 c0                	test   %eax,%eax
f0130d3f:	0f 84 25 01 00 00    	je     f0130e6a <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f0130d45:	8b 15 28 f7 85 f0    	mov    0xf085f728,%edx
f0130d4b:	a0 a4 f7 85 f0       	mov    0xf085f7a4,%al
f0130d50:	0f b6 c0             	movzbl %al,%eax
f0130d53:	01 d0                	add    %edx,%eax
f0130d55:	8a 00                	mov    (%eax),%al
f0130d57:	0f b6 d8             	movzbl %al,%ebx
f0130d5a:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0130d5f:	99                   	cltd   
f0130d60:	f7 fb                	idiv   %ebx
f0130d62:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0130d68:	8b 15 28 f7 85 f0    	mov    0xf085f728,%edx
f0130d6e:	a0 a4 f7 85 f0       	mov    0xf085f7a4,%al
f0130d73:	0f b6 c0             	movzbl %al,%eax
f0130d76:	01 d0                	add    %edx,%eax
f0130d78:	8a 00                	mov    (%eax),%al
f0130d7a:	0f b6 d8             	movzbl %al,%ebx
f0130d7d:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0130d82:	99                   	cltd   
f0130d83:	f7 fb                	idiv   %ebx
f0130d85:	89 c3                	mov    %eax,%ebx
f0130d87:	89 c8                	mov    %ecx,%eax
f0130d89:	99                   	cltd   
f0130d8a:	f7 fb                	idiv   %ebx
f0130d8c:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f0130d90:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130d94:	83 e0 01             	and    $0x1,%eax
f0130d97:	66 85 c0             	test   %ax,%ax
f0130d9a:	74 07                	je     f0130da3 <chk2+0xa2>
f0130d9c:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130da0:	40                   	inc    %eax
f0130da1:	eb 04                	jmp    f0130da7 <chk2+0xa6>
f0130da3:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0130da7:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f0130dab:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f0130daf:	89 d0                	mov    %edx,%eax
f0130db1:	c1 e0 02             	shl    $0x2,%eax
f0130db4:	01 d0                	add    %edx,%eax
f0130db6:	01 c0                	add    %eax,%eax
f0130db8:	01 d0                	add    %edx,%eax
f0130dba:	c1 e0 02             	shl    $0x2,%eax
f0130dbd:	01 d0                	add    %edx,%eax
f0130dbf:	01 c0                	add    %eax,%eax
f0130dc1:	89 c1                	mov    %eax,%ecx
f0130dc3:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0130dc8:	f7 e9                	imul   %ecx
f0130dca:	c1 fa 05             	sar    $0x5,%edx
f0130dcd:	89 c8                	mov    %ecx,%eax
f0130dcf:	c1 f8 1f             	sar    $0x1f,%eax
f0130dd2:	29 c2                	sub    %eax,%edx
f0130dd4:	89 d0                	mov    %edx,%eax
f0130dd6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f0130dda:	e8 5e 35 fd ff       	call   f010433d <kclock_read_cnt0>
f0130ddf:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f0130de3:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130de7:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f0130deb:	76 0a                	jbe    f0130df7 <chk2+0xf6>
f0130ded:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f0130df1:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0130df5:	76 19                	jbe    f0130e10 <chk2+0x10f>
f0130df7:	68 20 d1 13 f0       	push   $0xf013d120
f0130dfc:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130e01:	68 ca 00 00 00       	push   $0xca
f0130e06:	68 07 d1 13 f0       	push   $0xf013d107
f0130e0b:	e8 ab f4 fc ff       	call   f01002bb <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130e10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130e17:	eb 44                	jmp    f0130e5d <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f0130e19:	a1 34 f7 85 f0       	mov    0xf085f734,%eax
f0130e1e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130e21:	89 c2                	mov    %eax,%edx
f0130e23:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0130e28:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0130e2b:	c1 e1 04             	shl    $0x4,%ecx
f0130e2e:	01 c8                	add    %ecx,%eax
f0130e30:	83 ec 08             	sub    $0x8,%esp
f0130e33:	52                   	push   %edx
f0130e34:	50                   	push   %eax
f0130e35:	e8 4c 38 fd ff       	call   f0104686 <find_env_in_queue>
f0130e3a:	83 c4 10             	add    $0x10,%esp
f0130e3d:	85 c0                	test   %eax,%eax
f0130e3f:	74 19                	je     f0130e5a <chk2+0x159>
f0130e41:	68 44 d1 13 f0       	push   $0xf013d144
f0130e46:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130e4b:	68 ce 00 00 00       	push   $0xce
f0130e50:	68 07 d1 13 f0       	push   $0xf013d107
f0130e55:	e8 61 f4 fc ff       	call   f01002bb <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f0130e5a:	ff 45 f4             	incl   -0xc(%ebp)
f0130e5d:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0130e62:	0f b6 c0             	movzbl %al,%eax
f0130e65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130e68:	7f af                	jg     f0130e19 <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f0130e6a:	a1 90 f7 85 f0       	mov    0xf085f790,%eax
f0130e6f:	85 c0                	test   %eax,%eax
f0130e71:	0f 84 e2 00 00 00    	je     f0130f59 <chk2+0x258>
f0130e77:	8b 15 90 f7 85 f0    	mov    0xf085f790,%edx
f0130e7d:	a1 34 f7 85 f0       	mov    0xf085f734,%eax
f0130e82:	39 c2                	cmp    %eax,%edx
f0130e84:	0f 84 cf 00 00 00    	je     f0130f59 <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f0130e8a:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130e8f:	0f b6 c0             	movzbl %al,%eax
f0130e92:	8a 15 7c f7 85 f0    	mov    0xf085f77c,%dl
f0130e98:	0f b6 d2             	movzbl %dl,%edx
f0130e9b:	4a                   	dec    %edx
f0130e9c:	39 d0                	cmp    %edx,%eax
f0130e9e:	74 08                	je     f0130ea8 <chk2+0x1a7>
f0130ea0:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130ea5:	40                   	inc    %eax
f0130ea6:	eb 05                	jmp    f0130ead <chk2+0x1ac>
f0130ea8:	a0 dc f6 85 f0       	mov    0xf085f6dc,%al
f0130ead:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f0130eb0:	a1 90 f7 85 f0       	mov    0xf085f790,%eax
f0130eb5:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130eb8:	89 c2                	mov    %eax,%edx
f0130eba:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0130ebf:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f0130ec3:	c1 e1 04             	shl    $0x4,%ecx
f0130ec6:	01 c8                	add    %ecx,%eax
f0130ec8:	83 ec 08             	sub    $0x8,%esp
f0130ecb:	52                   	push   %edx
f0130ecc:	50                   	push   %eax
f0130ecd:	e8 b4 37 fd ff       	call   f0104686 <find_env_in_queue>
f0130ed2:	83 c4 10             	add    $0x10,%esp
f0130ed5:	85 c0                	test   %eax,%eax
f0130ed7:	75 19                	jne    f0130ef2 <chk2+0x1f1>
f0130ed9:	68 84 d1 13 f0       	push   $0xf013d184
f0130ede:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130ee3:	68 d4 00 00 00       	push   $0xd4
f0130ee8:	68 07 d1 13 f0       	push   $0xf013d107
f0130eed:	e8 c9 f3 fc ff       	call   f01002bb <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130ef2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0130ef9:	eb 4e                	jmp    f0130f49 <chk2+0x248>
		{
			if (i == __tl) continue;
f0130efb:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f0130eff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130f02:	74 41                	je     f0130f45 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f0130f04:	a1 90 f7 85 f0       	mov    0xf085f790,%eax
f0130f09:	8b 40 4c             	mov    0x4c(%eax),%eax
f0130f0c:	89 c2                	mov    %eax,%edx
f0130f0e:	a1 e4 f6 85 f0       	mov    0xf085f6e4,%eax
f0130f13:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0130f16:	c1 e1 04             	shl    $0x4,%ecx
f0130f19:	01 c8                	add    %ecx,%eax
f0130f1b:	83 ec 08             	sub    $0x8,%esp
f0130f1e:	52                   	push   %edx
f0130f1f:	50                   	push   %eax
f0130f20:	e8 61 37 fd ff       	call   f0104686 <find_env_in_queue>
f0130f25:	83 c4 10             	add    $0x10,%esp
f0130f28:	85 c0                	test   %eax,%eax
f0130f2a:	74 1a                	je     f0130f46 <chk2+0x245>
f0130f2c:	68 c8 d1 13 f0       	push   $0xf013d1c8
f0130f31:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130f36:	68 d8 00 00 00       	push   $0xd8
f0130f3b:	68 07 d1 13 f0       	push   $0xf013d107
f0130f40:	e8 76 f3 fc ff       	call   f01002bb <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f0130f45:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f0130f46:	ff 45 f0             	incl   -0x10(%ebp)
f0130f49:	a0 7c f7 85 f0       	mov    0xf085f77c,%al
f0130f4e:	0f b6 c0             	movzbl %al,%eax
f0130f51:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130f54:	7f a5                	jg     f0130efb <chk2+0x1fa>
f0130f56:	eb 01                	jmp    f0130f59 <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0130f58:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f0130f59:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0130f5c:	c9                   	leave  
f0130f5d:	c3                   	ret    

f0130f5e <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0130f5e:	55                   	push   %ebp
f0130f5f:	89 e5                	mov    %esp,%ebp
f0130f61:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130f64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130f6b:	eb 40                	jmp    f0130fad <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0130f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f70:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130f76:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0130f7b:	83 ec 08             	sub    $0x8,%esp
f0130f7e:	52                   	push   %edx
f0130f7f:	50                   	push   %eax
f0130f80:	e8 9b 01 00 00       	call   f0131120 <check_va2pa>
f0130f85:	83 c4 10             	add    $0x10,%esp
f0130f88:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130f8b:	74 19                	je     f0130fa6 <check_boot_pgdir+0x48>
f0130f8d:	68 08 d2 13 f0       	push   $0xf013d208
f0130f92:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0130f97:	68 fa 00 00 00       	push   $0xfa
f0130f9c:	68 07 d1 13 f0       	push   $0xf013d107
f0130fa1:	e8 5f f2 fc ff       	call   f0100205 <_panic>

	//2016
	// check phys mem
	#if USE_KHEAP
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0130fa6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0130fad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fb0:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0130fb6:	a1 74 f7 85 f0       	mov    0xf085f774,%eax
f0130fbb:	39 c2                	cmp    %eax,%edx
f0130fbd:	72 ae                	jb     f0130f6d <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0130fbf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0130fc6:	eb 74                	jmp    f013103c <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0130fc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130fcb:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0130fd1:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0130fd6:	83 ec 08             	sub    $0x8,%esp
f0130fd9:	52                   	push   %edx
f0130fda:	50                   	push   %eax
f0130fdb:	e8 40 01 00 00       	call   f0131120 <check_va2pa>
f0130fe0:	83 c4 10             	add    $0x10,%esp
f0130fe3:	c7 45 f0 00 b0 18 f0 	movl   $0xf018b000,-0x10(%ebp)
f0130fea:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0130ff1:	77 17                	ja     f013100a <check_boot_pgdir+0xac>
f0130ff3:	ff 75 f0             	pushl  -0x10(%ebp)
f0130ff6:	68 40 d2 13 f0       	push   $0xf013d240
f0130ffb:	68 04 01 00 00       	push   $0x104
f0131000:	68 07 d1 13 f0       	push   $0xf013d107
f0131005:	e8 fb f1 fc ff       	call   f0100205 <_panic>
f013100a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013100d:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0131013:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131016:	01 ca                	add    %ecx,%edx
f0131018:	39 d0                	cmp    %edx,%eax
f013101a:	74 19                	je     f0131035 <check_boot_pgdir+0xd7>
f013101c:	68 74 d2 13 f0       	push   $0xf013d274
f0131021:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0131026:	68 04 01 00 00       	push   $0x104
f013102b:	68 07 d1 13 f0       	push   $0xf013d107
f0131030:	e8 d0 f1 fc ff       	call   f0100205 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0131035:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f013103c:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0131043:	76 83                	jbe    f0130fc8 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0131045:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013104c:	e9 af 00 00 00       	jmp    f0131100 <check_boot_pgdir+0x1a2>
		switch (i) {
f0131051:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131054:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0131059:	74 11                	je     f013106c <check_boot_pgdir+0x10e>
f013105b:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0131060:	72 36                	jb     f0131098 <check_boot_pgdir+0x13a>
f0131062:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0131067:	83 f8 02             	cmp    $0x2,%eax
f013106a:	77 2c                	ja     f0131098 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f013106c:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f0131071:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131074:	c1 e2 02             	shl    $0x2,%edx
f0131077:	01 d0                	add    %edx,%eax
f0131079:	8b 00                	mov    (%eax),%eax
f013107b:	85 c0                	test   %eax,%eax
f013107d:	75 7a                	jne    f01310f9 <check_boot_pgdir+0x19b>
f013107f:	68 f6 d2 13 f0       	push   $0xf013d2f6
f0131084:	68 f2 d0 13 f0       	push   $0xf013d0f2
f0131089:	68 0f 01 00 00       	push   $0x10f
f013108e:	68 07 d1 13 f0       	push   $0xf013d107
f0131093:	e8 6d f1 fc ff       	call   f0100205 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0131098:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f013109f:	76 2c                	jbe    f01310cd <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f01310a1:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01310a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01310a9:	c1 e2 02             	shl    $0x2,%edx
f01310ac:	01 d0                	add    %edx,%eax
f01310ae:	8b 00                	mov    (%eax),%eax
f01310b0:	85 c0                	test   %eax,%eax
f01310b2:	75 48                	jne    f01310fc <check_boot_pgdir+0x19e>
f01310b4:	68 f6 d2 13 f0       	push   $0xf013d2f6
f01310b9:	68 f2 d0 13 f0       	push   $0xf013d0f2
f01310be:	68 13 01 00 00       	push   $0x113
f01310c3:	68 07 d1 13 f0       	push   $0xf013d107
f01310c8:	e8 38 f1 fc ff       	call   f0100205 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f01310cd:	a1 78 f7 85 f0       	mov    0xf085f778,%eax
f01310d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01310d5:	c1 e2 02             	shl    $0x2,%edx
f01310d8:	01 d0                	add    %edx,%eax
f01310da:	8b 00                	mov    (%eax),%eax
f01310dc:	85 c0                	test   %eax,%eax
f01310de:	74 1c                	je     f01310fc <check_boot_pgdir+0x19e>
f01310e0:	68 0c d3 13 f0       	push   $0xf013d30c
f01310e5:	68 f2 d0 13 f0       	push   $0xf013d0f2
f01310ea:	68 15 01 00 00       	push   $0x115
f01310ef:	68 07 d1 13 f0       	push   $0xf013d107
f01310f4:	e8 0c f1 fc ff       	call   f0100205 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f01310f9:	90                   	nop
f01310fa:	eb 01                	jmp    f01310fd <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f01310fc:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f01310fd:	ff 45 f4             	incl   -0xc(%ebp)
f0131100:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0131107:	0f 86 44 ff ff ff    	jbe    f0131051 <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f013110d:	83 ec 0c             	sub    $0xc,%esp
f0131110:	68 28 d3 13 f0       	push   $0xf013d328
f0131115:	e8 f4 fb fc ff       	call   f0100d0e <cprintf>
f013111a:	83 c4 10             	add    $0x10,%esp
}
f013111d:	90                   	nop
f013111e:	c9                   	leave  
f013111f:	c3                   	ret    

f0131120 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0131120:	55                   	push   %ebp
f0131121:	89 e5                	mov    %esp,%ebp
f0131123:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0131126:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131129:	c1 e8 16             	shr    $0x16,%eax
f013112c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0131133:	8b 45 08             	mov    0x8(%ebp),%eax
f0131136:	01 d0                	add    %edx,%eax
f0131138:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f013113b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013113e:	8b 00                	mov    (%eax),%eax
f0131140:	83 e0 01             	and    $0x1,%eax
f0131143:	85 c0                	test   %eax,%eax
f0131145:	75 0a                	jne    f0131151 <check_va2pa+0x31>
		return ~0;
f0131147:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013114c:	e9 87 00 00 00       	jmp    f01311d8 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0131151:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131154:	8b 00                	mov    (%eax),%eax
f0131156:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f013115b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013115e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131161:	c1 e8 0c             	shr    $0xc,%eax
f0131164:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131167:	a1 0c f7 85 f0       	mov    0xf085f70c,%eax
f013116c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f013116f:	72 17                	jb     f0131188 <check_va2pa+0x68>
f0131171:	ff 75 f0             	pushl  -0x10(%ebp)
f0131174:	68 48 d3 13 f0       	push   $0xf013d348
f0131179:	68 2b 01 00 00       	push   $0x12b
f013117e:	68 07 d1 13 f0       	push   $0xf013d107
f0131183:	e8 7d f0 fc ff       	call   f0100205 <_panic>
f0131188:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013118b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0131190:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0131193:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131196:	c1 e8 0c             	shr    $0xc,%eax
f0131199:	25 ff 03 00 00       	and    $0x3ff,%eax
f013119e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01311a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01311a8:	01 d0                	add    %edx,%eax
f01311aa:	8b 00                	mov    (%eax),%eax
f01311ac:	83 e0 01             	and    $0x1,%eax
f01311af:	85 c0                	test   %eax,%eax
f01311b1:	75 07                	jne    f01311ba <check_va2pa+0x9a>
		return ~0;
f01311b3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01311b8:	eb 1e                	jmp    f01311d8 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f01311ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01311bd:	c1 e8 0c             	shr    $0xc,%eax
f01311c0:	25 ff 03 00 00       	and    $0x3ff,%eax
f01311c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01311cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01311cf:	01 d0                	add    %edx,%eax
f01311d1:	8b 00                	mov    (%eax),%eax
f01311d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01311d8:	c9                   	leave  
f01311d9:	c3                   	ret    

f01311da <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f01311da:	55                   	push   %ebp
f01311db:	89 e5                	mov    %esp,%ebp
f01311dd:	53                   	push   %ebx
f01311de:	83 ec 14             	sub    $0x14,%esp
f01311e1:	8b 45 10             	mov    0x10(%ebp),%eax
f01311e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01311e7:	8b 45 14             	mov    0x14(%ebp),%eax
f01311ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f01311ed:	8b 45 18             	mov    0x18(%ebp),%eax
f01311f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01311f5:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01311f8:	77 55                	ja     f013124f <printnum+0x75>
f01311fa:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f01311fd:	72 05                	jb     f0131204 <printnum+0x2a>
f01311ff:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131202:	77 4b                	ja     f013124f <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0131204:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0131207:	8d 58 ff             	lea    -0x1(%eax),%ebx
f013120a:	8b 45 18             	mov    0x18(%ebp),%eax
f013120d:	ba 00 00 00 00       	mov    $0x0,%edx
f0131212:	52                   	push   %edx
f0131213:	50                   	push   %eax
f0131214:	ff 75 f4             	pushl  -0xc(%ebp)
f0131217:	ff 75 f0             	pushl  -0x10(%ebp)
f013121a:	e8 01 23 00 00       	call   f0133520 <__udivdi3>
f013121f:	83 c4 10             	add    $0x10,%esp
f0131222:	83 ec 04             	sub    $0x4,%esp
f0131225:	ff 75 20             	pushl  0x20(%ebp)
f0131228:	53                   	push   %ebx
f0131229:	ff 75 18             	pushl  0x18(%ebp)
f013122c:	52                   	push   %edx
f013122d:	50                   	push   %eax
f013122e:	ff 75 0c             	pushl  0xc(%ebp)
f0131231:	ff 75 08             	pushl  0x8(%ebp)
f0131234:	e8 a1 ff ff ff       	call   f01311da <printnum>
f0131239:	83 c4 20             	add    $0x20,%esp
f013123c:	eb 1a                	jmp    f0131258 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f013123e:	83 ec 08             	sub    $0x8,%esp
f0131241:	ff 75 0c             	pushl  0xc(%ebp)
f0131244:	ff 75 20             	pushl  0x20(%ebp)
f0131247:	8b 45 08             	mov    0x8(%ebp),%eax
f013124a:	ff d0                	call   *%eax
f013124c:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f013124f:	ff 4d 1c             	decl   0x1c(%ebp)
f0131252:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0131256:	7f e6                	jg     f013123e <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0131258:	8b 4d 18             	mov    0x18(%ebp),%ecx
f013125b:	bb 00 00 00 00       	mov    $0x0,%ebx
f0131260:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131263:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131266:	53                   	push   %ebx
f0131267:	51                   	push   %ecx
f0131268:	52                   	push   %edx
f0131269:	50                   	push   %eax
f013126a:	e8 c1 23 00 00       	call   f0133630 <__umoddi3>
f013126f:	83 c4 10             	add    $0x10,%esp
f0131272:	05 94 d5 13 f0       	add    $0xf013d594,%eax
f0131277:	8a 00                	mov    (%eax),%al
f0131279:	0f be c0             	movsbl %al,%eax
f013127c:	83 ec 08             	sub    $0x8,%esp
f013127f:	ff 75 0c             	pushl  0xc(%ebp)
f0131282:	50                   	push   %eax
f0131283:	8b 45 08             	mov    0x8(%ebp),%eax
f0131286:	ff d0                	call   *%eax
f0131288:	83 c4 10             	add    $0x10,%esp
}
f013128b:	90                   	nop
f013128c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f013128f:	c9                   	leave  
f0131290:	c3                   	ret    

f0131291 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0131291:	55                   	push   %ebp
f0131292:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0131294:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0131298:	7e 1c                	jle    f01312b6 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f013129a:	8b 45 08             	mov    0x8(%ebp),%eax
f013129d:	8b 00                	mov    (%eax),%eax
f013129f:	8d 50 08             	lea    0x8(%eax),%edx
f01312a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312a5:	89 10                	mov    %edx,(%eax)
f01312a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01312aa:	8b 00                	mov    (%eax),%eax
f01312ac:	83 e8 08             	sub    $0x8,%eax
f01312af:	8b 50 04             	mov    0x4(%eax),%edx
f01312b2:	8b 00                	mov    (%eax),%eax
f01312b4:	eb 40                	jmp    f01312f6 <getuint+0x65>
	else if (lflag)
f01312b6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01312ba:	74 1e                	je     f01312da <getuint+0x49>
		return va_arg(*ap, unsigned long);
f01312bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01312bf:	8b 00                	mov    (%eax),%eax
f01312c1:	8d 50 04             	lea    0x4(%eax),%edx
f01312c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01312c7:	89 10                	mov    %edx,(%eax)
f01312c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01312cc:	8b 00                	mov    (%eax),%eax
f01312ce:	83 e8 04             	sub    $0x4,%eax
f01312d1:	8b 00                	mov    (%eax),%eax
f01312d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01312d8:	eb 1c                	jmp    f01312f6 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f01312da:	8b 45 08             	mov    0x8(%ebp),%eax
f01312dd:	8b 00                	mov    (%eax),%eax
f01312df:	8d 50 04             	lea    0x4(%eax),%edx
f01312e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01312e5:	89 10                	mov    %edx,(%eax)
f01312e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01312ea:	8b 00                	mov    (%eax),%eax
f01312ec:	83 e8 04             	sub    $0x4,%eax
f01312ef:	8b 00                	mov    (%eax),%eax
f01312f1:	ba 00 00 00 00       	mov    $0x0,%edx
}
f01312f6:	5d                   	pop    %ebp
f01312f7:	c3                   	ret    

f01312f8 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f01312f8:	55                   	push   %ebp
f01312f9:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f01312fb:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f01312ff:	7e 1c                	jle    f013131d <getint+0x25>
		return va_arg(*ap, long long);
f0131301:	8b 45 08             	mov    0x8(%ebp),%eax
f0131304:	8b 00                	mov    (%eax),%eax
f0131306:	8d 50 08             	lea    0x8(%eax),%edx
f0131309:	8b 45 08             	mov    0x8(%ebp),%eax
f013130c:	89 10                	mov    %edx,(%eax)
f013130e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131311:	8b 00                	mov    (%eax),%eax
f0131313:	83 e8 08             	sub    $0x8,%eax
f0131316:	8b 50 04             	mov    0x4(%eax),%edx
f0131319:	8b 00                	mov    (%eax),%eax
f013131b:	eb 38                	jmp    f0131355 <getint+0x5d>
	else if (lflag)
f013131d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131321:	74 1a                	je     f013133d <getint+0x45>
		return va_arg(*ap, long);
f0131323:	8b 45 08             	mov    0x8(%ebp),%eax
f0131326:	8b 00                	mov    (%eax),%eax
f0131328:	8d 50 04             	lea    0x4(%eax),%edx
f013132b:	8b 45 08             	mov    0x8(%ebp),%eax
f013132e:	89 10                	mov    %edx,(%eax)
f0131330:	8b 45 08             	mov    0x8(%ebp),%eax
f0131333:	8b 00                	mov    (%eax),%eax
f0131335:	83 e8 04             	sub    $0x4,%eax
f0131338:	8b 00                	mov    (%eax),%eax
f013133a:	99                   	cltd   
f013133b:	eb 18                	jmp    f0131355 <getint+0x5d>
	else
		return va_arg(*ap, int);
f013133d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131340:	8b 00                	mov    (%eax),%eax
f0131342:	8d 50 04             	lea    0x4(%eax),%edx
f0131345:	8b 45 08             	mov    0x8(%ebp),%eax
f0131348:	89 10                	mov    %edx,(%eax)
f013134a:	8b 45 08             	mov    0x8(%ebp),%eax
f013134d:	8b 00                	mov    (%eax),%eax
f013134f:	83 e8 04             	sub    $0x4,%eax
f0131352:	8b 00                	mov    (%eax),%eax
f0131354:	99                   	cltd   
}
f0131355:	5d                   	pop    %ebp
f0131356:	c3                   	ret    

f0131357 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0131357:	55                   	push   %ebp
f0131358:	89 e5                	mov    %esp,%ebp
f013135a:	56                   	push   %esi
f013135b:	53                   	push   %ebx
f013135c:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f013135f:	eb 17                	jmp    f0131378 <vprintfmt+0x21>
			if (ch == '\0')
f0131361:	85 db                	test   %ebx,%ebx
f0131363:	0f 84 af 03 00 00    	je     f0131718 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f0131369:	83 ec 08             	sub    $0x8,%esp
f013136c:	ff 75 0c             	pushl  0xc(%ebp)
f013136f:	53                   	push   %ebx
f0131370:	8b 45 08             	mov    0x8(%ebp),%eax
f0131373:	ff d0                	call   *%eax
f0131375:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0131378:	8b 45 10             	mov    0x10(%ebp),%eax
f013137b:	8d 50 01             	lea    0x1(%eax),%edx
f013137e:	89 55 10             	mov    %edx,0x10(%ebp)
f0131381:	8a 00                	mov    (%eax),%al
f0131383:	0f b6 d8             	movzbl %al,%ebx
f0131386:	83 fb 25             	cmp    $0x25,%ebx
f0131389:	75 d6                	jne    f0131361 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f013138b:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f013138f:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0131396:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f013139d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f01313a4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f01313ab:	8b 45 10             	mov    0x10(%ebp),%eax
f01313ae:	8d 50 01             	lea    0x1(%eax),%edx
f01313b1:	89 55 10             	mov    %edx,0x10(%ebp)
f01313b4:	8a 00                	mov    (%eax),%al
f01313b6:	0f b6 d8             	movzbl %al,%ebx
f01313b9:	8d 43 dd             	lea    -0x23(%ebx),%eax
f01313bc:	83 f8 55             	cmp    $0x55,%eax
f01313bf:	0f 87 2b 03 00 00    	ja     f01316f0 <vprintfmt+0x399>
f01313c5:	8b 04 85 b8 d5 13 f0 	mov    -0xfec2a48(,%eax,4),%eax
f01313cc:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f01313ce:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f01313d2:	eb d7                	jmp    f01313ab <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f01313d4:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f01313d8:	eb d1                	jmp    f01313ab <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f01313da:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f01313e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01313e4:	89 d0                	mov    %edx,%eax
f01313e6:	c1 e0 02             	shl    $0x2,%eax
f01313e9:	01 d0                	add    %edx,%eax
f01313eb:	01 c0                	add    %eax,%eax
f01313ed:	01 d8                	add    %ebx,%eax
f01313ef:	83 e8 30             	sub    $0x30,%eax
f01313f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f01313f5:	8b 45 10             	mov    0x10(%ebp),%eax
f01313f8:	8a 00                	mov    (%eax),%al
f01313fa:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f01313fd:	83 fb 2f             	cmp    $0x2f,%ebx
f0131400:	7e 3e                	jle    f0131440 <vprintfmt+0xe9>
f0131402:	83 fb 39             	cmp    $0x39,%ebx
f0131405:	7f 39                	jg     f0131440 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0131407:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f013140a:	eb d5                	jmp    f01313e1 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f013140c:	8b 45 14             	mov    0x14(%ebp),%eax
f013140f:	83 c0 04             	add    $0x4,%eax
f0131412:	89 45 14             	mov    %eax,0x14(%ebp)
f0131415:	8b 45 14             	mov    0x14(%ebp),%eax
f0131418:	83 e8 04             	sub    $0x4,%eax
f013141b:	8b 00                	mov    (%eax),%eax
f013141d:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0131420:	eb 1f                	jmp    f0131441 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0131422:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131426:	79 83                	jns    f01313ab <vprintfmt+0x54>
				width = 0;
f0131428:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f013142f:	e9 77 ff ff ff       	jmp    f01313ab <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0131434:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f013143b:	e9 6b ff ff ff       	jmp    f01313ab <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0131440:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0131441:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131445:	0f 89 60 ff ff ff    	jns    f01313ab <vprintfmt+0x54>
				width = precision, precision = -1;
f013144b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013144e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0131451:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0131458:	e9 4e ff ff ff       	jmp    f01313ab <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f013145d:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0131460:	e9 46 ff ff ff       	jmp    f01313ab <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0131465:	8b 45 14             	mov    0x14(%ebp),%eax
f0131468:	83 c0 04             	add    $0x4,%eax
f013146b:	89 45 14             	mov    %eax,0x14(%ebp)
f013146e:	8b 45 14             	mov    0x14(%ebp),%eax
f0131471:	83 e8 04             	sub    $0x4,%eax
f0131474:	8b 00                	mov    (%eax),%eax
f0131476:	83 ec 08             	sub    $0x8,%esp
f0131479:	ff 75 0c             	pushl  0xc(%ebp)
f013147c:	50                   	push   %eax
f013147d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131480:	ff d0                	call   *%eax
f0131482:	83 c4 10             	add    $0x10,%esp
			break;
f0131485:	e9 89 02 00 00       	jmp    f0131713 <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f013148a:	8b 45 14             	mov    0x14(%ebp),%eax
f013148d:	83 c0 04             	add    $0x4,%eax
f0131490:	89 45 14             	mov    %eax,0x14(%ebp)
f0131493:	8b 45 14             	mov    0x14(%ebp),%eax
f0131496:	83 e8 04             	sub    $0x4,%eax
f0131499:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f013149b:	85 db                	test   %ebx,%ebx
f013149d:	79 02                	jns    f01314a1 <vprintfmt+0x14a>
				err = -err;
f013149f:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f01314a1:	83 fb 64             	cmp    $0x64,%ebx
f01314a4:	7f 0b                	jg     f01314b1 <vprintfmt+0x15a>
f01314a6:	8b 34 9d 00 d4 13 f0 	mov    -0xfec2c00(,%ebx,4),%esi
f01314ad:	85 f6                	test   %esi,%esi
f01314af:	75 19                	jne    f01314ca <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f01314b1:	53                   	push   %ebx
f01314b2:	68 a5 d5 13 f0       	push   $0xf013d5a5
f01314b7:	ff 75 0c             	pushl  0xc(%ebp)
f01314ba:	ff 75 08             	pushl  0x8(%ebp)
f01314bd:	e8 5e 02 00 00       	call   f0131720 <printfmt>
f01314c2:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f01314c5:	e9 49 02 00 00       	jmp    f0131713 <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f01314ca:	56                   	push   %esi
f01314cb:	68 ae d5 13 f0       	push   $0xf013d5ae
f01314d0:	ff 75 0c             	pushl  0xc(%ebp)
f01314d3:	ff 75 08             	pushl  0x8(%ebp)
f01314d6:	e8 45 02 00 00       	call   f0131720 <printfmt>
f01314db:	83 c4 10             	add    $0x10,%esp
			break;
f01314de:	e9 30 02 00 00       	jmp    f0131713 <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f01314e3:	8b 45 14             	mov    0x14(%ebp),%eax
f01314e6:	83 c0 04             	add    $0x4,%eax
f01314e9:	89 45 14             	mov    %eax,0x14(%ebp)
f01314ec:	8b 45 14             	mov    0x14(%ebp),%eax
f01314ef:	83 e8 04             	sub    $0x4,%eax
f01314f2:	8b 30                	mov    (%eax),%esi
f01314f4:	85 f6                	test   %esi,%esi
f01314f6:	75 05                	jne    f01314fd <vprintfmt+0x1a6>
				p = "(null)";
f01314f8:	be b1 d5 13 f0       	mov    $0xf013d5b1,%esi
			if (width > 0 && padc != '-')
f01314fd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131501:	7e 6d                	jle    f0131570 <vprintfmt+0x219>
f0131503:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0131507:	74 67                	je     f0131570 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0131509:	8b 45 e0             	mov    -0x20(%ebp),%eax
f013150c:	83 ec 08             	sub    $0x8,%esp
f013150f:	50                   	push   %eax
f0131510:	56                   	push   %esi
f0131511:	e8 12 05 00 00       	call   f0131a28 <strnlen>
f0131516:	83 c4 10             	add    $0x10,%esp
f0131519:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f013151c:	eb 16                	jmp    f0131534 <vprintfmt+0x1dd>
					putch(padc, putdat);
f013151e:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0131522:	83 ec 08             	sub    $0x8,%esp
f0131525:	ff 75 0c             	pushl  0xc(%ebp)
f0131528:	50                   	push   %eax
f0131529:	8b 45 08             	mov    0x8(%ebp),%eax
f013152c:	ff d0                	call   *%eax
f013152e:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0131531:	ff 4d e4             	decl   -0x1c(%ebp)
f0131534:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0131538:	7f e4                	jg     f013151e <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013153a:	eb 34                	jmp    f0131570 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f013153c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0131540:	74 1c                	je     f013155e <vprintfmt+0x207>
f0131542:	83 fb 1f             	cmp    $0x1f,%ebx
f0131545:	7e 05                	jle    f013154c <vprintfmt+0x1f5>
f0131547:	83 fb 7e             	cmp    $0x7e,%ebx
f013154a:	7e 12                	jle    f013155e <vprintfmt+0x207>
					putch('?', putdat);
f013154c:	83 ec 08             	sub    $0x8,%esp
f013154f:	ff 75 0c             	pushl  0xc(%ebp)
f0131552:	6a 3f                	push   $0x3f
f0131554:	8b 45 08             	mov    0x8(%ebp),%eax
f0131557:	ff d0                	call   *%eax
f0131559:	83 c4 10             	add    $0x10,%esp
f013155c:	eb 0f                	jmp    f013156d <vprintfmt+0x216>
				else
					putch(ch, putdat);
f013155e:	83 ec 08             	sub    $0x8,%esp
f0131561:	ff 75 0c             	pushl  0xc(%ebp)
f0131564:	53                   	push   %ebx
f0131565:	8b 45 08             	mov    0x8(%ebp),%eax
f0131568:	ff d0                	call   *%eax
f013156a:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f013156d:	ff 4d e4             	decl   -0x1c(%ebp)
f0131570:	89 f0                	mov    %esi,%eax
f0131572:	8d 70 01             	lea    0x1(%eax),%esi
f0131575:	8a 00                	mov    (%eax),%al
f0131577:	0f be d8             	movsbl %al,%ebx
f013157a:	85 db                	test   %ebx,%ebx
f013157c:	74 24                	je     f01315a2 <vprintfmt+0x24b>
f013157e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0131582:	78 b8                	js     f013153c <vprintfmt+0x1e5>
f0131584:	ff 4d e0             	decl   -0x20(%ebp)
f0131587:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f013158b:	79 af                	jns    f013153c <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013158d:	eb 13                	jmp    f01315a2 <vprintfmt+0x24b>
				putch(' ', putdat);
f013158f:	83 ec 08             	sub    $0x8,%esp
f0131592:	ff 75 0c             	pushl  0xc(%ebp)
f0131595:	6a 20                	push   $0x20
f0131597:	8b 45 08             	mov    0x8(%ebp),%eax
f013159a:	ff d0                	call   *%eax
f013159c:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f013159f:	ff 4d e4             	decl   -0x1c(%ebp)
f01315a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01315a6:	7f e7                	jg     f013158f <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f01315a8:	e9 66 01 00 00       	jmp    f0131713 <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f01315ad:	83 ec 08             	sub    $0x8,%esp
f01315b0:	ff 75 e8             	pushl  -0x18(%ebp)
f01315b3:	8d 45 14             	lea    0x14(%ebp),%eax
f01315b6:	50                   	push   %eax
f01315b7:	e8 3c fd ff ff       	call   f01312f8 <getint>
f01315bc:	83 c4 10             	add    $0x10,%esp
f01315bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01315c2:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01315c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315cb:	85 d2                	test   %edx,%edx
f01315cd:	79 23                	jns    f01315f2 <vprintfmt+0x29b>
				putch('-', putdat);
f01315cf:	83 ec 08             	sub    $0x8,%esp
f01315d2:	ff 75 0c             	pushl  0xc(%ebp)
f01315d5:	6a 2d                	push   $0x2d
f01315d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01315da:	ff d0                	call   *%eax
f01315dc:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f01315df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01315e2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01315e5:	f7 d8                	neg    %eax
f01315e7:	83 d2 00             	adc    $0x0,%edx
f01315ea:	f7 da                	neg    %edx
f01315ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01315ef:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f01315f2:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f01315f9:	e9 bc 00 00 00       	jmp    f01316ba <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f01315fe:	83 ec 08             	sub    $0x8,%esp
f0131601:	ff 75 e8             	pushl  -0x18(%ebp)
f0131604:	8d 45 14             	lea    0x14(%ebp),%eax
f0131607:	50                   	push   %eax
f0131608:	e8 84 fc ff ff       	call   f0131291 <getuint>
f013160d:	83 c4 10             	add    $0x10,%esp
f0131610:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131613:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0131616:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f013161d:	e9 98 00 00 00       	jmp    f01316ba <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0131622:	83 ec 08             	sub    $0x8,%esp
f0131625:	ff 75 0c             	pushl  0xc(%ebp)
f0131628:	6a 58                	push   $0x58
f013162a:	8b 45 08             	mov    0x8(%ebp),%eax
f013162d:	ff d0                	call   *%eax
f013162f:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131632:	83 ec 08             	sub    $0x8,%esp
f0131635:	ff 75 0c             	pushl  0xc(%ebp)
f0131638:	6a 58                	push   $0x58
f013163a:	8b 45 08             	mov    0x8(%ebp),%eax
f013163d:	ff d0                	call   *%eax
f013163f:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0131642:	83 ec 08             	sub    $0x8,%esp
f0131645:	ff 75 0c             	pushl  0xc(%ebp)
f0131648:	6a 58                	push   $0x58
f013164a:	8b 45 08             	mov    0x8(%ebp),%eax
f013164d:	ff d0                	call   *%eax
f013164f:	83 c4 10             	add    $0x10,%esp
			break;
f0131652:	e9 bc 00 00 00       	jmp    f0131713 <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f0131657:	83 ec 08             	sub    $0x8,%esp
f013165a:	ff 75 0c             	pushl  0xc(%ebp)
f013165d:	6a 30                	push   $0x30
f013165f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131662:	ff d0                	call   *%eax
f0131664:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0131667:	83 ec 08             	sub    $0x8,%esp
f013166a:	ff 75 0c             	pushl  0xc(%ebp)
f013166d:	6a 78                	push   $0x78
f013166f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131672:	ff d0                	call   *%eax
f0131674:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0131677:	8b 45 14             	mov    0x14(%ebp),%eax
f013167a:	83 c0 04             	add    $0x4,%eax
f013167d:	89 45 14             	mov    %eax,0x14(%ebp)
f0131680:	8b 45 14             	mov    0x14(%ebp),%eax
f0131683:	83 e8 04             	sub    $0x4,%eax
f0131686:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f0131688:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013168b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0131692:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f0131699:	eb 1f                	jmp    f01316ba <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f013169b:	83 ec 08             	sub    $0x8,%esp
f013169e:	ff 75 e8             	pushl  -0x18(%ebp)
f01316a1:	8d 45 14             	lea    0x14(%ebp),%eax
f01316a4:	50                   	push   %eax
f01316a5:	e8 e7 fb ff ff       	call   f0131291 <getuint>
f01316aa:	83 c4 10             	add    $0x10,%esp
f01316ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01316b0:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01316b3:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01316ba:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01316be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01316c1:	83 ec 04             	sub    $0x4,%esp
f01316c4:	52                   	push   %edx
f01316c5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01316c8:	50                   	push   %eax
f01316c9:	ff 75 f4             	pushl  -0xc(%ebp)
f01316cc:	ff 75 f0             	pushl  -0x10(%ebp)
f01316cf:	ff 75 0c             	pushl  0xc(%ebp)
f01316d2:	ff 75 08             	pushl  0x8(%ebp)
f01316d5:	e8 00 fb ff ff       	call   f01311da <printnum>
f01316da:	83 c4 20             	add    $0x20,%esp
			break;
f01316dd:	eb 34                	jmp    f0131713 <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01316df:	83 ec 08             	sub    $0x8,%esp
f01316e2:	ff 75 0c             	pushl  0xc(%ebp)
f01316e5:	53                   	push   %ebx
f01316e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01316e9:	ff d0                	call   *%eax
f01316eb:	83 c4 10             	add    $0x10,%esp
			break;
f01316ee:	eb 23                	jmp    f0131713 <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f01316f0:	83 ec 08             	sub    $0x8,%esp
f01316f3:	ff 75 0c             	pushl  0xc(%ebp)
f01316f6:	6a 25                	push   $0x25
f01316f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01316fb:	ff d0                	call   *%eax
f01316fd:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0131700:	ff 4d 10             	decl   0x10(%ebp)
f0131703:	eb 03                	jmp    f0131708 <vprintfmt+0x3b1>
f0131705:	ff 4d 10             	decl   0x10(%ebp)
f0131708:	8b 45 10             	mov    0x10(%ebp),%eax
f013170b:	48                   	dec    %eax
f013170c:	8a 00                	mov    (%eax),%al
f013170e:	3c 25                	cmp    $0x25,%al
f0131710:	75 f3                	jne    f0131705 <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f0131712:	90                   	nop
		}
	}
f0131713:	e9 47 fc ff ff       	jmp    f013135f <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0131718:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0131719:	8d 65 f8             	lea    -0x8(%ebp),%esp
f013171c:	5b                   	pop    %ebx
f013171d:	5e                   	pop    %esi
f013171e:	5d                   	pop    %ebp
f013171f:	c3                   	ret    

f0131720 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0131720:	55                   	push   %ebp
f0131721:	89 e5                	mov    %esp,%ebp
f0131723:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0131726:	8d 45 10             	lea    0x10(%ebp),%eax
f0131729:	83 c0 04             	add    $0x4,%eax
f013172c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f013172f:	8b 45 10             	mov    0x10(%ebp),%eax
f0131732:	ff 75 f4             	pushl  -0xc(%ebp)
f0131735:	50                   	push   %eax
f0131736:	ff 75 0c             	pushl  0xc(%ebp)
f0131739:	ff 75 08             	pushl  0x8(%ebp)
f013173c:	e8 16 fc ff ff       	call   f0131357 <vprintfmt>
f0131741:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0131744:	90                   	nop
f0131745:	c9                   	leave  
f0131746:	c3                   	ret    

f0131747 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0131747:	55                   	push   %ebp
f0131748:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f013174a:	8b 45 0c             	mov    0xc(%ebp),%eax
f013174d:	8b 40 08             	mov    0x8(%eax),%eax
f0131750:	8d 50 01             	lea    0x1(%eax),%edx
f0131753:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131756:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0131759:	8b 45 0c             	mov    0xc(%ebp),%eax
f013175c:	8b 10                	mov    (%eax),%edx
f013175e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131761:	8b 40 04             	mov    0x4(%eax),%eax
f0131764:	39 c2                	cmp    %eax,%edx
f0131766:	73 12                	jae    f013177a <sprintputch+0x33>
		*b->buf++ = ch;
f0131768:	8b 45 0c             	mov    0xc(%ebp),%eax
f013176b:	8b 00                	mov    (%eax),%eax
f013176d:	8d 48 01             	lea    0x1(%eax),%ecx
f0131770:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131773:	89 0a                	mov    %ecx,(%edx)
f0131775:	8b 55 08             	mov    0x8(%ebp),%edx
f0131778:	88 10                	mov    %dl,(%eax)
}
f013177a:	90                   	nop
f013177b:	5d                   	pop    %ebp
f013177c:	c3                   	ret    

f013177d <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f013177d:	55                   	push   %ebp
f013177e:	89 e5                	mov    %esp,%ebp
f0131780:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0131783:	8b 45 08             	mov    0x8(%ebp),%eax
f0131786:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0131789:	8b 45 0c             	mov    0xc(%ebp),%eax
f013178c:	8d 50 ff             	lea    -0x1(%eax),%edx
f013178f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131792:	01 d0                	add    %edx,%eax
f0131794:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0131797:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f013179e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01317a2:	74 06                	je     f01317aa <vsnprintf+0x2d>
f01317a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01317a8:	7f 07                	jg     f01317b1 <vsnprintf+0x34>
		return -E_INVAL;
f01317aa:	b8 03 00 00 00       	mov    $0x3,%eax
f01317af:	eb 20                	jmp    f01317d1 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01317b1:	ff 75 14             	pushl  0x14(%ebp)
f01317b4:	ff 75 10             	pushl  0x10(%ebp)
f01317b7:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01317ba:	50                   	push   %eax
f01317bb:	68 47 17 13 f0       	push   $0xf0131747
f01317c0:	e8 92 fb ff ff       	call   f0131357 <vprintfmt>
f01317c5:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01317c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01317cb:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01317ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01317d1:	c9                   	leave  
f01317d2:	c3                   	ret    

f01317d3 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f01317d3:	55                   	push   %ebp
f01317d4:	89 e5                	mov    %esp,%ebp
f01317d6:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f01317d9:	8d 45 10             	lea    0x10(%ebp),%eax
f01317dc:	83 c0 04             	add    $0x4,%eax
f01317df:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f01317e2:	8b 45 10             	mov    0x10(%ebp),%eax
f01317e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01317e8:	50                   	push   %eax
f01317e9:	ff 75 0c             	pushl  0xc(%ebp)
f01317ec:	ff 75 08             	pushl  0x8(%ebp)
f01317ef:	e8 89 ff ff ff       	call   f013177d <vsnprintf>
f01317f4:	83 c4 10             	add    $0x10,%esp
f01317f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f01317fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01317fd:	c9                   	leave  
f01317fe:	c3                   	ret    

f01317ff <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f01317ff:	55                   	push   %ebp
f0131800:	89 e5                	mov    %esp,%ebp
f0131802:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f0131805:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131809:	74 13                	je     f013181e <readline+0x1f>
		cprintf("%s", prompt);
f013180b:	83 ec 08             	sub    $0x8,%esp
f013180e:	ff 75 08             	pushl  0x8(%ebp)
f0131811:	68 10 d7 13 f0       	push   $0xf013d710
f0131816:	e8 f3 f4 fc ff       	call   f0100d0e <cprintf>
f013181b:	83 c4 10             	add    $0x10,%esp

	i = 0;
f013181e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131825:	83 ec 0c             	sub    $0xc,%esp
f0131828:	6a 00                	push   $0x0
f013182a:	e8 8c f4 fc ff       	call   f0100cbb <iscons>
f013182f:	83 c4 10             	add    $0x10,%esp
f0131832:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131835:	e8 68 f4 fc ff       	call   f0100ca2 <getchar>
f013183a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f013183d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131841:	79 22                	jns    f0131865 <readline+0x66>
			if (c != -E_EOF)
f0131843:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0131847:	0f 84 ad 00 00 00    	je     f01318fa <readline+0xfb>
				cprintf("read error: %e\n", c);
f013184d:	83 ec 08             	sub    $0x8,%esp
f0131850:	ff 75 ec             	pushl  -0x14(%ebp)
f0131853:	68 13 d7 13 f0       	push   $0xf013d713
f0131858:	e8 b1 f4 fc ff       	call   f0100d0e <cprintf>
f013185d:	83 c4 10             	add    $0x10,%esp
			return;
f0131860:	e9 95 00 00 00       	jmp    f01318fa <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131865:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f0131869:	7e 34                	jle    f013189f <readline+0xa0>
f013186b:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131872:	7f 2b                	jg     f013189f <readline+0xa0>
			if (echoing)
f0131874:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131878:	74 0e                	je     f0131888 <readline+0x89>
				cputchar(c);
f013187a:	83 ec 0c             	sub    $0xc,%esp
f013187d:	ff 75 ec             	pushl  -0x14(%ebp)
f0131880:	e8 06 f4 fc ff       	call   f0100c8b <cputchar>
f0131885:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0131888:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013188b:	8d 50 01             	lea    0x1(%eax),%edx
f013188e:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131891:	89 c2                	mov    %eax,%edx
f0131893:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131896:	01 d0                	add    %edx,%eax
f0131898:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013189b:	88 10                	mov    %dl,(%eax)
f013189d:	eb 56                	jmp    f01318f5 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f013189f:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01318a3:	75 1f                	jne    f01318c4 <readline+0xc5>
f01318a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01318a9:	7e 19                	jle    f01318c4 <readline+0xc5>
			if (echoing)
f01318ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318af:	74 0e                	je     f01318bf <readline+0xc0>
				cputchar(c);
f01318b1:	83 ec 0c             	sub    $0xc,%esp
f01318b4:	ff 75 ec             	pushl  -0x14(%ebp)
f01318b7:	e8 cf f3 fc ff       	call   f0100c8b <cputchar>
f01318bc:	83 c4 10             	add    $0x10,%esp

			i--;
f01318bf:	ff 4d f4             	decl   -0xc(%ebp)
f01318c2:	eb 31                	jmp    f01318f5 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01318c4:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01318c8:	74 0a                	je     f01318d4 <readline+0xd5>
f01318ca:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01318ce:	0f 85 61 ff ff ff    	jne    f0131835 <readline+0x36>
			if (echoing)
f01318d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01318d8:	74 0e                	je     f01318e8 <readline+0xe9>
				cputchar(c);
f01318da:	83 ec 0c             	sub    $0xc,%esp
f01318dd:	ff 75 ec             	pushl  -0x14(%ebp)
f01318e0:	e8 a6 f3 fc ff       	call   f0100c8b <cputchar>
f01318e5:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f01318e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01318eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01318ee:	01 d0                	add    %edx,%eax
f01318f0:	c6 00 00             	movb   $0x0,(%eax)
			return;
f01318f3:	eb 06                	jmp    f01318fb <readline+0xfc>
		}
	}
f01318f5:	e9 3b ff ff ff       	jmp    f0131835 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f01318fa:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f01318fb:	c9                   	leave  
f01318fc:	c3                   	ret    

f01318fd <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f01318fd:	55                   	push   %ebp
f01318fe:	89 e5                	mov    %esp,%ebp
f0131900:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f0131903:	e8 2a ba fd ff       	call   f010d332 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0131908:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013190c:	74 13                	je     f0131921 <atomic_readline+0x24>
		cprintf("%s", prompt);
f013190e:	83 ec 08             	sub    $0x8,%esp
f0131911:	ff 75 08             	pushl  0x8(%ebp)
f0131914:	68 10 d7 13 f0       	push   $0xf013d710
f0131919:	e8 f0 f3 fc ff       	call   f0100d0e <cprintf>
f013191e:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0131921:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0131928:	83 ec 0c             	sub    $0xc,%esp
f013192b:	6a 00                	push   $0x0
f013192d:	e8 89 f3 fc ff       	call   f0100cbb <iscons>
f0131932:	83 c4 10             	add    $0x10,%esp
f0131935:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0131938:	e8 65 f3 fc ff       	call   f0100ca2 <getchar>
f013193d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0131940:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131944:	79 23                	jns    f0131969 <atomic_readline+0x6c>
			if (c != -E_EOF)
f0131946:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f013194a:	74 13                	je     f013195f <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f013194c:	83 ec 08             	sub    $0x8,%esp
f013194f:	ff 75 ec             	pushl  -0x14(%ebp)
f0131952:	68 13 d7 13 f0       	push   $0xf013d713
f0131957:	e8 b2 f3 fc ff       	call   f0100d0e <cprintf>
f013195c:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f013195f:	e8 e8 b9 fd ff       	call   f010d34c <sys_enable_interrupt>
			return;
f0131964:	e9 9a 00 00 00       	jmp    f0131a03 <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0131969:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f013196d:	7e 34                	jle    f01319a3 <atomic_readline+0xa6>
f013196f:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f0131976:	7f 2b                	jg     f01319a3 <atomic_readline+0xa6>
			if (echoing)
f0131978:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013197c:	74 0e                	je     f013198c <atomic_readline+0x8f>
				cputchar(c);
f013197e:	83 ec 0c             	sub    $0xc,%esp
f0131981:	ff 75 ec             	pushl  -0x14(%ebp)
f0131984:	e8 02 f3 fc ff       	call   f0100c8b <cputchar>
f0131989:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f013198c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013198f:	8d 50 01             	lea    0x1(%eax),%edx
f0131992:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0131995:	89 c2                	mov    %eax,%edx
f0131997:	8b 45 0c             	mov    0xc(%ebp),%eax
f013199a:	01 d0                	add    %edx,%eax
f013199c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f013199f:	88 10                	mov    %dl,(%eax)
f01319a1:	eb 5b                	jmp    f01319fe <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01319a3:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01319a7:	75 1f                	jne    f01319c8 <atomic_readline+0xcb>
f01319a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01319ad:	7e 19                	jle    f01319c8 <atomic_readline+0xcb>
			if (echoing)
f01319af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319b3:	74 0e                	je     f01319c3 <atomic_readline+0xc6>
				cputchar(c);
f01319b5:	83 ec 0c             	sub    $0xc,%esp
f01319b8:	ff 75 ec             	pushl  -0x14(%ebp)
f01319bb:	e8 cb f2 fc ff       	call   f0100c8b <cputchar>
f01319c0:	83 c4 10             	add    $0x10,%esp
			i--;
f01319c3:	ff 4d f4             	decl   -0xc(%ebp)
f01319c6:	eb 36                	jmp    f01319fe <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f01319c8:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01319cc:	74 0a                	je     f01319d8 <atomic_readline+0xdb>
f01319ce:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01319d2:	0f 85 60 ff ff ff    	jne    f0131938 <atomic_readline+0x3b>
			if (echoing)
f01319d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01319dc:	74 0e                	je     f01319ec <atomic_readline+0xef>
				cputchar(c);
f01319de:	83 ec 0c             	sub    $0xc,%esp
f01319e1:	ff 75 ec             	pushl  -0x14(%ebp)
f01319e4:	e8 a2 f2 fc ff       	call   f0100c8b <cputchar>
f01319e9:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f01319ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01319ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01319f2:	01 d0                	add    %edx,%eax
f01319f4:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f01319f7:	e8 50 b9 fd ff       	call   f010d34c <sys_enable_interrupt>
			return;
f01319fc:	eb 05                	jmp    f0131a03 <atomic_readline+0x106>
		}
	}
f01319fe:	e9 35 ff ff ff       	jmp    f0131938 <atomic_readline+0x3b>
}
f0131a03:	c9                   	leave  
f0131a04:	c3                   	ret    

f0131a05 <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f0131a05:	55                   	push   %ebp
f0131a06:	89 e5                	mov    %esp,%ebp
f0131a08:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0131a0b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a12:	eb 06                	jmp    f0131a1a <strlen+0x15>
		n++;
f0131a14:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0131a17:	ff 45 08             	incl   0x8(%ebp)
f0131a1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a1d:	8a 00                	mov    (%eax),%al
f0131a1f:	84 c0                	test   %al,%al
f0131a21:	75 f1                	jne    f0131a14 <strlen+0xf>
		n++;
	return n;
f0131a23:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a26:	c9                   	leave  
f0131a27:	c3                   	ret    

f0131a28 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0131a28:	55                   	push   %ebp
f0131a29:	89 e5                	mov    %esp,%ebp
f0131a2b:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131a2e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a35:	eb 09                	jmp    f0131a40 <strnlen+0x18>
		n++;
f0131a37:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0131a3a:	ff 45 08             	incl   0x8(%ebp)
f0131a3d:	ff 4d 0c             	decl   0xc(%ebp)
f0131a40:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131a44:	74 09                	je     f0131a4f <strnlen+0x27>
f0131a46:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a49:	8a 00                	mov    (%eax),%al
f0131a4b:	84 c0                	test   %al,%al
f0131a4d:	75 e8                	jne    f0131a37 <strnlen+0xf>
		n++;
	return n;
f0131a4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a52:	c9                   	leave  
f0131a53:	c3                   	ret    

f0131a54 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0131a54:	55                   	push   %ebp
f0131a55:	89 e5                	mov    %esp,%ebp
f0131a57:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0131a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a5d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0131a60:	90                   	nop
f0131a61:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a64:	8d 50 01             	lea    0x1(%eax),%edx
f0131a67:	89 55 08             	mov    %edx,0x8(%ebp)
f0131a6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131a6d:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131a70:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131a73:	8a 12                	mov    (%edx),%dl
f0131a75:	88 10                	mov    %dl,(%eax)
f0131a77:	8a 00                	mov    (%eax),%al
f0131a79:	84 c0                	test   %al,%al
f0131a7b:	75 e4                	jne    f0131a61 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0131a7d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0131a80:	c9                   	leave  
f0131a81:	c3                   	ret    

f0131a82 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0131a82:	55                   	push   %ebp
f0131a83:	89 e5                	mov    %esp,%ebp
f0131a85:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f0131a88:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a8b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0131a8e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131a95:	eb 1f                	jmp    f0131ab6 <strncpy+0x34>
		*dst++ = *src;
f0131a97:	8b 45 08             	mov    0x8(%ebp),%eax
f0131a9a:	8d 50 01             	lea    0x1(%eax),%edx
f0131a9d:	89 55 08             	mov    %edx,0x8(%ebp)
f0131aa0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131aa3:	8a 12                	mov    (%edx),%dl
f0131aa5:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f0131aa7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131aaa:	8a 00                	mov    (%eax),%al
f0131aac:	84 c0                	test   %al,%al
f0131aae:	74 03                	je     f0131ab3 <strncpy+0x31>
			src++;
f0131ab0:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0131ab3:	ff 45 fc             	incl   -0x4(%ebp)
f0131ab6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131ab9:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131abc:	72 d9                	jb     f0131a97 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0131abe:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131ac1:	c9                   	leave  
f0131ac2:	c3                   	ret    

f0131ac3 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0131ac3:	55                   	push   %ebp
f0131ac4:	89 e5                	mov    %esp,%ebp
f0131ac6:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0131ac9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131acc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0131acf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131ad3:	74 30                	je     f0131b05 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0131ad5:	eb 16                	jmp    f0131aed <strlcpy+0x2a>
			*dst++ = *src++;
f0131ad7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ada:	8d 50 01             	lea    0x1(%eax),%edx
f0131add:	89 55 08             	mov    %edx,0x8(%ebp)
f0131ae0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131ae3:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131ae6:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0131ae9:	8a 12                	mov    (%edx),%dl
f0131aeb:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0131aed:	ff 4d 10             	decl   0x10(%ebp)
f0131af0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131af4:	74 09                	je     f0131aff <strlcpy+0x3c>
f0131af6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131af9:	8a 00                	mov    (%eax),%al
f0131afb:	84 c0                	test   %al,%al
f0131afd:	75 d8                	jne    f0131ad7 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0131aff:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b02:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0131b05:	8b 55 08             	mov    0x8(%ebp),%edx
f0131b08:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131b0b:	29 c2                	sub    %eax,%edx
f0131b0d:	89 d0                	mov    %edx,%eax
}
f0131b0f:	c9                   	leave  
f0131b10:	c3                   	ret    

f0131b11 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0131b11:	55                   	push   %ebp
f0131b12:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0131b14:	eb 06                	jmp    f0131b1c <strcmp+0xb>
		p++, q++;
f0131b16:	ff 45 08             	incl   0x8(%ebp)
f0131b19:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0131b1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b1f:	8a 00                	mov    (%eax),%al
f0131b21:	84 c0                	test   %al,%al
f0131b23:	74 0e                	je     f0131b33 <strcmp+0x22>
f0131b25:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b28:	8a 10                	mov    (%eax),%dl
f0131b2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b2d:	8a 00                	mov    (%eax),%al
f0131b2f:	38 c2                	cmp    %al,%dl
f0131b31:	74 e3                	je     f0131b16 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0131b33:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b36:	8a 00                	mov    (%eax),%al
f0131b38:	0f b6 d0             	movzbl %al,%edx
f0131b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b3e:	8a 00                	mov    (%eax),%al
f0131b40:	0f b6 c0             	movzbl %al,%eax
f0131b43:	29 c2                	sub    %eax,%edx
f0131b45:	89 d0                	mov    %edx,%eax
}
f0131b47:	5d                   	pop    %ebp
f0131b48:	c3                   	ret    

f0131b49 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0131b49:	55                   	push   %ebp
f0131b4a:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0131b4c:	eb 09                	jmp    f0131b57 <strncmp+0xe>
		n--, p++, q++;
f0131b4e:	ff 4d 10             	decl   0x10(%ebp)
f0131b51:	ff 45 08             	incl   0x8(%ebp)
f0131b54:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0131b57:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b5b:	74 17                	je     f0131b74 <strncmp+0x2b>
f0131b5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b60:	8a 00                	mov    (%eax),%al
f0131b62:	84 c0                	test   %al,%al
f0131b64:	74 0e                	je     f0131b74 <strncmp+0x2b>
f0131b66:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b69:	8a 10                	mov    (%eax),%dl
f0131b6b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b6e:	8a 00                	mov    (%eax),%al
f0131b70:	38 c2                	cmp    %al,%dl
f0131b72:	74 da                	je     f0131b4e <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f0131b74:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131b78:	75 07                	jne    f0131b81 <strncmp+0x38>
		return 0;
f0131b7a:	b8 00 00 00 00       	mov    $0x0,%eax
f0131b7f:	eb 14                	jmp    f0131b95 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0131b81:	8b 45 08             	mov    0x8(%ebp),%eax
f0131b84:	8a 00                	mov    (%eax),%al
f0131b86:	0f b6 d0             	movzbl %al,%edx
f0131b89:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131b8c:	8a 00                	mov    (%eax),%al
f0131b8e:	0f b6 c0             	movzbl %al,%eax
f0131b91:	29 c2                	sub    %eax,%edx
f0131b93:	89 d0                	mov    %edx,%eax
}
f0131b95:	5d                   	pop    %ebp
f0131b96:	c3                   	ret    

f0131b97 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0131b97:	55                   	push   %ebp
f0131b98:	89 e5                	mov    %esp,%ebp
f0131b9a:	83 ec 04             	sub    $0x4,%esp
f0131b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ba0:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131ba3:	eb 12                	jmp    f0131bb7 <strchr+0x20>
		if (*s == c)
f0131ba5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ba8:	8a 00                	mov    (%eax),%al
f0131baa:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131bad:	75 05                	jne    f0131bb4 <strchr+0x1d>
			return (char *) s;
f0131baf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bb2:	eb 11                	jmp    f0131bc5 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0131bb4:	ff 45 08             	incl   0x8(%ebp)
f0131bb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bba:	8a 00                	mov    (%eax),%al
f0131bbc:	84 c0                	test   %al,%al
f0131bbe:	75 e5                	jne    f0131ba5 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0131bc0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131bc5:	c9                   	leave  
f0131bc6:	c3                   	ret    

f0131bc7 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0131bc7:	55                   	push   %ebp
f0131bc8:	89 e5                	mov    %esp,%ebp
f0131bca:	83 ec 04             	sub    $0x4,%esp
f0131bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131bd0:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0131bd3:	eb 0d                	jmp    f0131be2 <strfind+0x1b>
		if (*s == c)
f0131bd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bd8:	8a 00                	mov    (%eax),%al
f0131bda:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0131bdd:	74 0e                	je     f0131bed <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0131bdf:	ff 45 08             	incl   0x8(%ebp)
f0131be2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131be5:	8a 00                	mov    (%eax),%al
f0131be7:	84 c0                	test   %al,%al
f0131be9:	75 ea                	jne    f0131bd5 <strfind+0xe>
f0131beb:	eb 01                	jmp    f0131bee <strfind+0x27>
		if (*s == c)
			break;
f0131bed:	90                   	nop
	return (char *) s;
f0131bee:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131bf1:	c9                   	leave  
f0131bf2:	c3                   	ret    

f0131bf3 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0131bf3:	55                   	push   %ebp
f0131bf4:	89 e5                	mov    %esp,%ebp
f0131bf6:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0131bf9:	8b 45 08             	mov    0x8(%ebp),%eax
f0131bfc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0131bff:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c02:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0131c05:	eb 0e                	jmp    f0131c15 <memset+0x22>
		*p++ = c;
f0131c07:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c0a:	8d 50 01             	lea    0x1(%eax),%edx
f0131c0d:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0131c10:	8b 55 0c             	mov    0xc(%ebp),%edx
f0131c13:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0131c15:	ff 4d f8             	decl   -0x8(%ebp)
f0131c18:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0131c1c:	79 e9                	jns    f0131c07 <memset+0x14>
		*p++ = c;

	return v;
f0131c1e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131c21:	c9                   	leave  
f0131c22:	c3                   	ret    

f0131c23 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0131c23:	55                   	push   %ebp
f0131c24:	89 e5                	mov    %esp,%ebp
f0131c26:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131c29:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c2c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131c2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c32:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0131c35:	eb 16                	jmp    f0131c4d <memcpy+0x2a>
		*d++ = *s++;
f0131c37:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131c3a:	8d 50 01             	lea    0x1(%eax),%edx
f0131c3d:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131c40:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c43:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131c46:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131c49:	8a 12                	mov    (%edx),%dl
f0131c4b:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0131c4d:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c50:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131c53:	89 55 10             	mov    %edx,0x10(%ebp)
f0131c56:	85 c0                	test   %eax,%eax
f0131c58:	75 dd                	jne    f0131c37 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0131c5a:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131c5d:	c9                   	leave  
f0131c5e:	c3                   	ret    

f0131c5f <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0131c5f:	55                   	push   %ebp
f0131c60:	89 e5                	mov    %esp,%ebp
f0131c62:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0131c65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131c68:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0131c6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c6e:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0131c71:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c74:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131c77:	73 50                	jae    f0131cc9 <memmove+0x6a>
f0131c79:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131c7c:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c7f:	01 d0                	add    %edx,%eax
f0131c81:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0131c84:	76 43                	jbe    f0131cc9 <memmove+0x6a>
		s += n;
f0131c86:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c89:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0131c8c:	8b 45 10             	mov    0x10(%ebp),%eax
f0131c8f:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0131c92:	eb 10                	jmp    f0131ca4 <memmove+0x45>
			*--d = *--s;
f0131c94:	ff 4d f8             	decl   -0x8(%ebp)
f0131c97:	ff 4d fc             	decl   -0x4(%ebp)
f0131c9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131c9d:	8a 10                	mov    (%eax),%dl
f0131c9f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ca2:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0131ca4:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ca7:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131caa:	89 55 10             	mov    %edx,0x10(%ebp)
f0131cad:	85 c0                	test   %eax,%eax
f0131caf:	75 e3                	jne    f0131c94 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0131cb1:	eb 23                	jmp    f0131cd6 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0131cb3:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131cb6:	8d 50 01             	lea    0x1(%eax),%edx
f0131cb9:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131cbc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131cbf:	8d 4a 01             	lea    0x1(%edx),%ecx
f0131cc2:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0131cc5:	8a 12                	mov    (%edx),%dl
f0131cc7:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0131cc9:	8b 45 10             	mov    0x10(%ebp),%eax
f0131ccc:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131ccf:	89 55 10             	mov    %edx,0x10(%ebp)
f0131cd2:	85 c0                	test   %eax,%eax
f0131cd4:	75 dd                	jne    f0131cb3 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0131cd6:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131cd9:	c9                   	leave  
f0131cda:	c3                   	ret    

f0131cdb <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0131cdb:	55                   	push   %ebp
f0131cdc:	89 e5                	mov    %esp,%ebp
f0131cde:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0131ce1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ce4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0131ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131cea:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0131ced:	eb 2a                	jmp    f0131d19 <memcmp+0x3e>
		if (*s1 != *s2)
f0131cef:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131cf2:	8a 10                	mov    (%eax),%dl
f0131cf4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131cf7:	8a 00                	mov    (%eax),%al
f0131cf9:	38 c2                	cmp    %al,%dl
f0131cfb:	74 16                	je     f0131d13 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0131cfd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131d00:	8a 00                	mov    (%eax),%al
f0131d02:	0f b6 d0             	movzbl %al,%edx
f0131d05:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131d08:	8a 00                	mov    (%eax),%al
f0131d0a:	0f b6 c0             	movzbl %al,%eax
f0131d0d:	29 c2                	sub    %eax,%edx
f0131d0f:	89 d0                	mov    %edx,%eax
f0131d11:	eb 18                	jmp    f0131d2b <memcmp+0x50>
		s1++, s2++;
f0131d13:	ff 45 fc             	incl   -0x4(%ebp)
f0131d16:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0131d19:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d1c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0131d1f:	89 55 10             	mov    %edx,0x10(%ebp)
f0131d22:	85 c0                	test   %eax,%eax
f0131d24:	75 c9                	jne    f0131cef <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0131d26:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0131d2b:	c9                   	leave  
f0131d2c:	c3                   	ret    

f0131d2d <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0131d2d:	55                   	push   %ebp
f0131d2e:	89 e5                	mov    %esp,%ebp
f0131d30:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0131d33:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d36:	8b 45 10             	mov    0x10(%ebp),%eax
f0131d39:	01 d0                	add    %edx,%eax
f0131d3b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0131d3e:	eb 15                	jmp    f0131d55 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0131d40:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d43:	8a 00                	mov    (%eax),%al
f0131d45:	0f b6 d0             	movzbl %al,%edx
f0131d48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131d4b:	0f b6 c0             	movzbl %al,%eax
f0131d4e:	39 c2                	cmp    %eax,%edx
f0131d50:	74 0d                	je     f0131d5f <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0131d52:	ff 45 08             	incl   0x8(%ebp)
f0131d55:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d58:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0131d5b:	72 e3                	jb     f0131d40 <memfind+0x13>
f0131d5d:	eb 01                	jmp    f0131d60 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0131d5f:	90                   	nop
	return (void *) s;
f0131d60:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0131d63:	c9                   	leave  
f0131d64:	c3                   	ret    

f0131d65 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0131d65:	55                   	push   %ebp
f0131d66:	89 e5                	mov    %esp,%ebp
f0131d68:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0131d6b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0131d72:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131d79:	eb 03                	jmp    f0131d7e <strtol+0x19>
		s++;
f0131d7b:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0131d7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d81:	8a 00                	mov    (%eax),%al
f0131d83:	3c 20                	cmp    $0x20,%al
f0131d85:	74 f4                	je     f0131d7b <strtol+0x16>
f0131d87:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d8a:	8a 00                	mov    (%eax),%al
f0131d8c:	3c 09                	cmp    $0x9,%al
f0131d8e:	74 eb                	je     f0131d7b <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0131d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d93:	8a 00                	mov    (%eax),%al
f0131d95:	3c 2b                	cmp    $0x2b,%al
f0131d97:	75 05                	jne    f0131d9e <strtol+0x39>
		s++;
f0131d99:	ff 45 08             	incl   0x8(%ebp)
f0131d9c:	eb 13                	jmp    f0131db1 <strtol+0x4c>
	else if (*s == '-')
f0131d9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131da1:	8a 00                	mov    (%eax),%al
f0131da3:	3c 2d                	cmp    $0x2d,%al
f0131da5:	75 0a                	jne    f0131db1 <strtol+0x4c>
		s++, neg = 1;
f0131da7:	ff 45 08             	incl   0x8(%ebp)
f0131daa:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0131db1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131db5:	74 06                	je     f0131dbd <strtol+0x58>
f0131db7:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0131dbb:	75 20                	jne    f0131ddd <strtol+0x78>
f0131dbd:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dc0:	8a 00                	mov    (%eax),%al
f0131dc2:	3c 30                	cmp    $0x30,%al
f0131dc4:	75 17                	jne    f0131ddd <strtol+0x78>
f0131dc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dc9:	40                   	inc    %eax
f0131dca:	8a 00                	mov    (%eax),%al
f0131dcc:	3c 78                	cmp    $0x78,%al
f0131dce:	75 0d                	jne    f0131ddd <strtol+0x78>
		s += 2, base = 16;
f0131dd0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0131dd4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0131ddb:	eb 28                	jmp    f0131e05 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0131ddd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131de1:	75 15                	jne    f0131df8 <strtol+0x93>
f0131de3:	8b 45 08             	mov    0x8(%ebp),%eax
f0131de6:	8a 00                	mov    (%eax),%al
f0131de8:	3c 30                	cmp    $0x30,%al
f0131dea:	75 0c                	jne    f0131df8 <strtol+0x93>
		s++, base = 8;
f0131dec:	ff 45 08             	incl   0x8(%ebp)
f0131def:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0131df6:	eb 0d                	jmp    f0131e05 <strtol+0xa0>
	else if (base == 0)
f0131df8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0131dfc:	75 07                	jne    f0131e05 <strtol+0xa0>
		base = 10;
f0131dfe:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0131e05:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e08:	8a 00                	mov    (%eax),%al
f0131e0a:	3c 2f                	cmp    $0x2f,%al
f0131e0c:	7e 19                	jle    f0131e27 <strtol+0xc2>
f0131e0e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e11:	8a 00                	mov    (%eax),%al
f0131e13:	3c 39                	cmp    $0x39,%al
f0131e15:	7f 10                	jg     f0131e27 <strtol+0xc2>
			dig = *s - '0';
f0131e17:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e1a:	8a 00                	mov    (%eax),%al
f0131e1c:	0f be c0             	movsbl %al,%eax
f0131e1f:	83 e8 30             	sub    $0x30,%eax
f0131e22:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e25:	eb 42                	jmp    f0131e69 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0131e27:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e2a:	8a 00                	mov    (%eax),%al
f0131e2c:	3c 60                	cmp    $0x60,%al
f0131e2e:	7e 19                	jle    f0131e49 <strtol+0xe4>
f0131e30:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e33:	8a 00                	mov    (%eax),%al
f0131e35:	3c 7a                	cmp    $0x7a,%al
f0131e37:	7f 10                	jg     f0131e49 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0131e39:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e3c:	8a 00                	mov    (%eax),%al
f0131e3e:	0f be c0             	movsbl %al,%eax
f0131e41:	83 e8 57             	sub    $0x57,%eax
f0131e44:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131e47:	eb 20                	jmp    f0131e69 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0131e49:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e4c:	8a 00                	mov    (%eax),%al
f0131e4e:	3c 40                	cmp    $0x40,%al
f0131e50:	7e 39                	jle    f0131e8b <strtol+0x126>
f0131e52:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e55:	8a 00                	mov    (%eax),%al
f0131e57:	3c 5a                	cmp    $0x5a,%al
f0131e59:	7f 30                	jg     f0131e8b <strtol+0x126>
			dig = *s - 'A' + 10;
f0131e5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e5e:	8a 00                	mov    (%eax),%al
f0131e60:	0f be c0             	movsbl %al,%eax
f0131e63:	83 e8 37             	sub    $0x37,%eax
f0131e66:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0131e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e6c:	3b 45 10             	cmp    0x10(%ebp),%eax
f0131e6f:	7d 19                	jge    f0131e8a <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0131e71:	ff 45 08             	incl   0x8(%ebp)
f0131e74:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131e77:	0f af 45 10          	imul   0x10(%ebp),%eax
f0131e7b:	89 c2                	mov    %eax,%edx
f0131e7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e80:	01 d0                	add    %edx,%eax
f0131e82:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0131e85:	e9 7b ff ff ff       	jmp    f0131e05 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0131e8a:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0131e8b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0131e8f:	74 08                	je     f0131e99 <strtol+0x134>
		*endptr = (char *) s;
f0131e91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131e94:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e97:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0131e99:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131e9d:	74 07                	je     f0131ea6 <strtol+0x141>
f0131e9f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ea2:	f7 d8                	neg    %eax
f0131ea4:	eb 03                	jmp    f0131ea9 <strtol+0x144>
f0131ea6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0131ea9:	c9                   	leave  
f0131eaa:	c3                   	ret    

f0131eab <ltostr>:

void
ltostr(long value, char *str)
{
f0131eab:	55                   	push   %ebp
f0131eac:	89 e5                	mov    %esp,%ebp
f0131eae:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0131eb1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0131eb8:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0131ebf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131ec3:	79 13                	jns    f0131ed8 <ltostr+0x2d>
	{
		neg = 1;
f0131ec5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0131ecc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ecf:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0131ed2:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0131ed5:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0131ed8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131edb:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0131ee0:	99                   	cltd   
f0131ee1:	f7 f9                	idiv   %ecx
f0131ee3:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0131ee6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131ee9:	8d 50 01             	lea    0x1(%eax),%edx
f0131eec:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0131eef:	89 c2                	mov    %eax,%edx
f0131ef1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131ef4:	01 d0                	add    %edx,%eax
f0131ef6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131ef9:	83 c2 30             	add    $0x30,%edx
f0131efc:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0131efe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131f01:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131f06:	f7 e9                	imul   %ecx
f0131f08:	c1 fa 02             	sar    $0x2,%edx
f0131f0b:	89 c8                	mov    %ecx,%eax
f0131f0d:	c1 f8 1f             	sar    $0x1f,%eax
f0131f10:	29 c2                	sub    %eax,%edx
f0131f12:	89 d0                	mov    %edx,%eax
f0131f14:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f0131f17:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0131f1a:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0131f1f:	f7 e9                	imul   %ecx
f0131f21:	c1 fa 02             	sar    $0x2,%edx
f0131f24:	89 c8                	mov    %ecx,%eax
f0131f26:	c1 f8 1f             	sar    $0x1f,%eax
f0131f29:	29 c2                	sub    %eax,%edx
f0131f2b:	89 d0                	mov    %edx,%eax
f0131f2d:	c1 e0 02             	shl    $0x2,%eax
f0131f30:	01 d0                	add    %edx,%eax
f0131f32:	01 c0                	add    %eax,%eax
f0131f34:	29 c1                	sub    %eax,%ecx
f0131f36:	89 ca                	mov    %ecx,%edx
f0131f38:	85 d2                	test   %edx,%edx
f0131f3a:	75 9c                	jne    f0131ed8 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0131f3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0131f43:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0131f46:	48                   	dec    %eax
f0131f47:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0131f4a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0131f4e:	74 3d                	je     f0131f8d <ltostr+0xe2>
		start = 1 ;
f0131f50:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0131f57:	eb 34                	jmp    f0131f8d <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0131f59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f5f:	01 d0                	add    %edx,%eax
f0131f61:	8a 00                	mov    (%eax),%al
f0131f63:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0131f66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131f69:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f6c:	01 c2                	add    %eax,%edx
f0131f6e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0131f71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f74:	01 c8                	add    %ecx,%eax
f0131f76:	8a 00                	mov    (%eax),%al
f0131f78:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0131f7a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131f7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f80:	01 c2                	add    %eax,%edx
f0131f82:	8a 45 eb             	mov    -0x15(%ebp),%al
f0131f85:	88 02                	mov    %al,(%edx)
		start++ ;
f0131f87:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0131f8a:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0131f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f90:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0131f93:	7c c4                	jl     f0131f59 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0131f95:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0131f98:	8b 45 0c             	mov    0xc(%ebp),%eax
f0131f9b:	01 d0                	add    %edx,%eax
f0131f9d:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0131fa0:	90                   	nop
f0131fa1:	c9                   	leave  
f0131fa2:	c3                   	ret    

f0131fa3 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0131fa3:	55                   	push   %ebp
f0131fa4:	89 e5                	mov    %esp,%ebp
f0131fa6:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0131fa9:	ff 75 08             	pushl  0x8(%ebp)
f0131fac:	e8 54 fa ff ff       	call   f0131a05 <strlen>
f0131fb1:	83 c4 04             	add    $0x4,%esp
f0131fb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0131fb7:	ff 75 0c             	pushl  0xc(%ebp)
f0131fba:	e8 46 fa ff ff       	call   f0131a05 <strlen>
f0131fbf:	83 c4 04             	add    $0x4,%esp
f0131fc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0131fc5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0131fcc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0131fd3:	eb 17                	jmp    f0131fec <strcconcat+0x49>
		final[s] = str1[s] ;
f0131fd5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131fd8:	8b 45 10             	mov    0x10(%ebp),%eax
f0131fdb:	01 c2                	add    %eax,%edx
f0131fdd:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0131fe0:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fe3:	01 c8                	add    %ecx,%eax
f0131fe5:	8a 00                	mov    (%eax),%al
f0131fe7:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0131fe9:	ff 45 fc             	incl   -0x4(%ebp)
f0131fec:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131fef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0131ff2:	7c e1                	jl     f0131fd5 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0131ff4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0131ffb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0132002:	eb 1f                	jmp    f0132023 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0132004:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132007:	8d 50 01             	lea    0x1(%eax),%edx
f013200a:	89 55 fc             	mov    %edx,-0x4(%ebp)
f013200d:	89 c2                	mov    %eax,%edx
f013200f:	8b 45 10             	mov    0x10(%ebp),%eax
f0132012:	01 c2                	add    %eax,%edx
f0132014:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0132017:	8b 45 0c             	mov    0xc(%ebp),%eax
f013201a:	01 c8                	add    %ecx,%eax
f013201c:	8a 00                	mov    (%eax),%al
f013201e:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0132020:	ff 45 f8             	incl   -0x8(%ebp)
f0132023:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0132026:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132029:	7c d9                	jl     f0132004 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f013202b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013202e:	8b 45 10             	mov    0x10(%ebp),%eax
f0132031:	01 d0                	add    %edx,%eax
f0132033:	c6 00 00             	movb   $0x0,(%eax)
}
f0132036:	90                   	nop
f0132037:	c9                   	leave  
f0132038:	c3                   	ret    

f0132039 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0132039:	55                   	push   %ebp
f013203a:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f013203c:	8b 45 14             	mov    0x14(%ebp),%eax
f013203f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0132045:	8b 45 14             	mov    0x14(%ebp),%eax
f0132048:	8b 00                	mov    (%eax),%eax
f013204a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0132051:	8b 45 10             	mov    0x10(%ebp),%eax
f0132054:	01 d0                	add    %edx,%eax
f0132056:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f013205c:	eb 0c                	jmp    f013206a <strsplit+0x31>
			*string++ = 0;
f013205e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132061:	8d 50 01             	lea    0x1(%eax),%edx
f0132064:	89 55 08             	mov    %edx,0x8(%ebp)
f0132067:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f013206a:	8b 45 08             	mov    0x8(%ebp),%eax
f013206d:	8a 00                	mov    (%eax),%al
f013206f:	84 c0                	test   %al,%al
f0132071:	74 18                	je     f013208b <strsplit+0x52>
f0132073:	8b 45 08             	mov    0x8(%ebp),%eax
f0132076:	8a 00                	mov    (%eax),%al
f0132078:	0f be c0             	movsbl %al,%eax
f013207b:	50                   	push   %eax
f013207c:	ff 75 0c             	pushl  0xc(%ebp)
f013207f:	e8 13 fb ff ff       	call   f0131b97 <strchr>
f0132084:	83 c4 08             	add    $0x8,%esp
f0132087:	85 c0                	test   %eax,%eax
f0132089:	75 d3                	jne    f013205e <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f013208b:	8b 45 08             	mov    0x8(%ebp),%eax
f013208e:	8a 00                	mov    (%eax),%al
f0132090:	84 c0                	test   %al,%al
f0132092:	74 5a                	je     f01320ee <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0132094:	8b 45 14             	mov    0x14(%ebp),%eax
f0132097:	8b 00                	mov    (%eax),%eax
f0132099:	83 f8 0f             	cmp    $0xf,%eax
f013209c:	75 07                	jne    f01320a5 <strsplit+0x6c>
		{
			return 0;
f013209e:	b8 00 00 00 00       	mov    $0x0,%eax
f01320a3:	eb 66                	jmp    f013210b <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f01320a5:	8b 45 14             	mov    0x14(%ebp),%eax
f01320a8:	8b 00                	mov    (%eax),%eax
f01320aa:	8d 48 01             	lea    0x1(%eax),%ecx
f01320ad:	8b 55 14             	mov    0x14(%ebp),%edx
f01320b0:	89 0a                	mov    %ecx,(%edx)
f01320b2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01320b9:	8b 45 10             	mov    0x10(%ebp),%eax
f01320bc:	01 c2                	add    %eax,%edx
f01320be:	8b 45 08             	mov    0x8(%ebp),%eax
f01320c1:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f01320c3:	eb 03                	jmp    f01320c8 <strsplit+0x8f>
			string++;
f01320c5:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f01320c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01320cb:	8a 00                	mov    (%eax),%al
f01320cd:	84 c0                	test   %al,%al
f01320cf:	74 8b                	je     f013205c <strsplit+0x23>
f01320d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01320d4:	8a 00                	mov    (%eax),%al
f01320d6:	0f be c0             	movsbl %al,%eax
f01320d9:	50                   	push   %eax
f01320da:	ff 75 0c             	pushl  0xc(%ebp)
f01320dd:	e8 b5 fa ff ff       	call   f0131b97 <strchr>
f01320e2:	83 c4 08             	add    $0x8,%esp
f01320e5:	85 c0                	test   %eax,%eax
f01320e7:	74 dc                	je     f01320c5 <strsplit+0x8c>
			string++;
	}
f01320e9:	e9 6e ff ff ff       	jmp    f013205c <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f01320ee:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f01320ef:	8b 45 14             	mov    0x14(%ebp),%eax
f01320f2:	8b 00                	mov    (%eax),%eax
f01320f4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01320fb:	8b 45 10             	mov    0x10(%ebp),%eax
f01320fe:	01 d0                	add    %edx,%eax
f0132100:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0132106:	b8 01 00 00 00       	mov    $0x1,%eax
}
f013210b:	c9                   	leave  
f013210c:	c3                   	ret    

f013210d <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f013210d:	55                   	push   %ebp
f013210e:	89 e5                	mov    %esp,%ebp
f0132110:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0132113:	90                   	nop
f0132114:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f013211b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013211e:	89 c2                	mov    %eax,%edx
f0132120:	ec                   	in     (%dx),%al
f0132121:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0132124:	8a 45 f7             	mov    -0x9(%ebp),%al
f0132127:	0f b6 c0             	movzbl %al,%eax
f013212a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013212d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132130:	25 c0 00 00 00       	and    $0xc0,%eax
f0132135:	83 f8 40             	cmp    $0x40,%eax
f0132138:	75 da                	jne    f0132114 <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f013213a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013213e:	74 11                	je     f0132151 <ide_wait_ready+0x44>
f0132140:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0132143:	83 e0 21             	and    $0x21,%eax
f0132146:	85 c0                	test   %eax,%eax
f0132148:	74 07                	je     f0132151 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f013214a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f013214f:	eb 05                	jmp    f0132156 <ide_wait_ready+0x49>
	}
	return 0;
f0132151:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132156:	c9                   	leave  
f0132157:	c3                   	ret    

f0132158 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0132158:	55                   	push   %ebp
f0132159:	89 e5                	mov    %esp,%ebp
f013215b:	57                   	push   %edi
f013215c:	53                   	push   %ebx
f013215d:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0132160:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0132167:	76 16                	jbe    f013217f <ide_read+0x27>
f0132169:	68 23 d7 13 f0       	push   $0xf013d723
f013216e:	68 30 d7 13 f0       	push   $0xf013d730
f0132173:	6a 25                	push   $0x25
f0132175:	68 45 d7 13 f0       	push   $0xf013d745
f013217a:	e8 86 e0 fc ff       	call   f0100205 <_panic>

	ide_wait_ready(0);
f013217f:	83 ec 0c             	sub    $0xc,%esp
f0132182:	6a 00                	push   $0x0
f0132184:	e8 84 ff ff ff       	call   f013210d <ide_wait_ready>
f0132189:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f013218c:	8b 45 10             	mov    0x10(%ebp),%eax
f013218f:	0f b6 c0             	movzbl %al,%eax
f0132192:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0132199:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f013219c:	8a 45 d2             	mov    -0x2e(%ebp),%al
f013219f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01321a2:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01321a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01321a6:	0f b6 c0             	movzbl %al,%eax
f01321a9:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01321b0:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01321b3:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01321b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01321b9:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01321ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01321bd:	c1 e8 08             	shr    $0x8,%eax
f01321c0:	0f b6 c0             	movzbl %al,%eax
f01321c3:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01321ca:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01321cd:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01321d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01321d3:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01321d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01321d7:	c1 e8 10             	shr    $0x10,%eax
f01321da:	0f b6 c0             	movzbl %al,%eax
f01321dd:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01321e4:	88 45 d5             	mov    %al,-0x2b(%ebp)
f01321e7:	8a 45 d5             	mov    -0x2b(%ebp),%al
f01321ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01321ed:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f01321ee:	a1 ac f6 85 f0       	mov    0xf085f6ac,%eax
f01321f3:	83 e0 01             	and    $0x1,%eax
f01321f6:	c1 e0 04             	shl    $0x4,%eax
f01321f9:	88 c2                	mov    %al,%dl
f01321fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01321fe:	c1 e8 18             	shr    $0x18,%eax
f0132201:	83 e0 0f             	and    $0xf,%eax
f0132204:	09 d0                	or     %edx,%eax
f0132206:	83 c8 e0             	or     $0xffffffe0,%eax
f0132209:	0f b6 c0             	movzbl %al,%eax
f013220c:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0132213:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0132216:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0132219:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013221c:	ee                   	out    %al,(%dx)
f013221d:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0132224:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0132228:	8a 45 d7             	mov    -0x29(%ebp),%al
f013222b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f013222e:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013222f:	eb 55                	jmp    f0132286 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0132231:	83 ec 0c             	sub    $0xc,%esp
f0132234:	6a 01                	push   $0x1
f0132236:	e8 d2 fe ff ff       	call   f013210d <ide_wait_ready>
f013223b:	83 c4 10             	add    $0x10,%esp
f013223e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0132241:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0132245:	79 05                	jns    f013224c <ide_read+0xf4>
			return r;
f0132247:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013224a:	eb 45                	jmp    f0132291 <ide_read+0x139>
f013224c:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0132253:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132256:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132259:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0132260:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132263:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0132266:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0132269:	89 cb                	mov    %ecx,%ebx
f013226b:	89 df                	mov    %ebx,%edi
f013226d:	89 c1                	mov    %eax,%ecx
f013226f:	fc                   	cld    
f0132270:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0132272:	89 c8                	mov    %ecx,%eax
f0132274:	89 fb                	mov    %edi,%ebx
f0132276:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0132279:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f013227c:	ff 4d 10             	decl   0x10(%ebp)
f013227f:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0132286:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013228a:	75 a5                	jne    f0132231 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f013228c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132291:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0132294:	5b                   	pop    %ebx
f0132295:	5f                   	pop    %edi
f0132296:	5d                   	pop    %ebp
f0132297:	c3                   	ret    

f0132298 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0132298:	55                   	push   %ebp
f0132299:	89 e5                	mov    %esp,%ebp
f013229b:	56                   	push   %esi
f013229c:	53                   	push   %ebx
f013229d:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f01322a0:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01322a7:	76 16                	jbe    f01322bf <ide_write+0x27>
f01322a9:	68 23 d7 13 f0       	push   $0xf013d723
f01322ae:	68 30 d7 13 f0       	push   $0xf013d730
f01322b3:	6a 3e                	push   $0x3e
f01322b5:	68 45 d7 13 f0       	push   $0xf013d745
f01322ba:	e8 46 df fc ff       	call   f0100205 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f01322bf:	83 ec 0c             	sub    $0xc,%esp
f01322c2:	6a 00                	push   $0x0
f01322c4:	e8 44 fe ff ff       	call   f013210d <ide_wait_ready>
f01322c9:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f01322cc:	8b 45 10             	mov    0x10(%ebp),%eax
f01322cf:	0f b6 c0             	movzbl %al,%eax
f01322d2:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01322d9:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01322dc:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01322df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01322e2:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01322e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01322e6:	0f b6 c0             	movzbl %al,%eax
f01322e9:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01322f0:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01322f3:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01322f6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01322f9:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01322fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01322fd:	c1 e8 08             	shr    $0x8,%eax
f0132300:	0f b6 c0             	movzbl %al,%eax
f0132303:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f013230a:	88 45 d4             	mov    %al,-0x2c(%ebp)
f013230d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0132310:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132313:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0132314:	8b 45 08             	mov    0x8(%ebp),%eax
f0132317:	c1 e8 10             	shr    $0x10,%eax
f013231a:	0f b6 c0             	movzbl %al,%eax
f013231d:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0132324:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0132327:	8a 45 d5             	mov    -0x2b(%ebp),%al
f013232a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f013232d:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f013232e:	a1 ac f6 85 f0       	mov    0xf085f6ac,%eax
f0132333:	83 e0 01             	and    $0x1,%eax
f0132336:	c1 e0 04             	shl    $0x4,%eax
f0132339:	88 c2                	mov    %al,%dl
f013233b:	8b 45 08             	mov    0x8(%ebp),%eax
f013233e:	c1 e8 18             	shr    $0x18,%eax
f0132341:	83 e0 0f             	and    $0xf,%eax
f0132344:	09 d0                	or     %edx,%eax
f0132346:	83 c8 e0             	or     $0xffffffe0,%eax
f0132349:	0f b6 c0             	movzbl %al,%eax
f013234c:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0132353:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0132356:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0132359:	8b 55 e0             	mov    -0x20(%ebp),%edx
f013235c:	ee                   	out    %al,(%dx)
f013235d:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0132364:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0132368:	8a 45 d7             	mov    -0x29(%ebp),%al
f013236b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f013236e:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f013236f:	eb 55                	jmp    f01323c6 <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0132371:	83 ec 0c             	sub    $0xc,%esp
f0132374:	6a 01                	push   $0x1
f0132376:	e8 92 fd ff ff       	call   f013210d <ide_wait_ready>
f013237b:	83 c4 10             	add    $0x10,%esp
f013237e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0132381:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0132385:	79 05                	jns    f013238c <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0132387:	8b 45 dc             	mov    -0x24(%ebp),%eax
f013238a:	eb 45                	jmp    f01323d1 <ide_write+0x139>
f013238c:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0132393:	8b 45 0c             	mov    0xc(%ebp),%eax
f0132396:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0132399:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f01323a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01323a3:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01323a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01323a9:	89 cb                	mov    %ecx,%ebx
f01323ab:	89 de                	mov    %ebx,%esi
f01323ad:	89 c1                	mov    %eax,%ecx
f01323af:	fc                   	cld    
f01323b0:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f01323b2:	89 c8                	mov    %ecx,%eax
f01323b4:	89 f3                	mov    %esi,%ebx
f01323b6:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01323b9:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01323bc:	ff 4d 10             	decl   0x10(%ebp)
f01323bf:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01323c6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01323ca:	75 a5                	jne    f0132371 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f01323cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01323d1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01323d4:	5b                   	pop    %ebx
f01323d5:	5e                   	pop    %esi
f01323d6:	5d                   	pop    %ebp
f01323d7:	c3                   	ret    

f01323d8 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f01323d8:	55                   	push   %ebp
f01323d9:	89 e5                	mov    %esp,%ebp
f01323db:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f01323de:	83 ec 0c             	sub    $0xc,%esp
f01323e1:	68 50 d7 13 f0       	push   $0xf013d750
f01323e6:	e8 23 e9 fc ff       	call   f0100d0e <cprintf>
f01323eb:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f01323ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f01323f5:	83 ec 0c             	sub    $0xc,%esp
f01323f8:	68 7c d7 13 f0       	push   $0xf013d77c
f01323fd:	e8 0c e9 fc ff       	call   f0100d0e <cprintf>
f0132402:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0132405:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132409:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f013240e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132411:	eb 56                	jmp    f0132469 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0132413:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132417:	74 1c                	je     f0132435 <print_mem_block_lists+0x5d>
f0132419:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013241c:	8b 50 08             	mov    0x8(%eax),%edx
f013241f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132422:	8b 48 08             	mov    0x8(%eax),%ecx
f0132425:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132428:	8b 40 0c             	mov    0xc(%eax),%eax
f013242b:	01 c8                	add    %ecx,%eax
f013242d:	39 c2                	cmp    %eax,%edx
f013242f:	73 04                	jae    f0132435 <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0132431:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0132435:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132438:	8b 50 08             	mov    0x8(%eax),%edx
f013243b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013243e:	8b 40 0c             	mov    0xc(%eax),%eax
f0132441:	01 c2                	add    %eax,%edx
f0132443:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132446:	8b 40 08             	mov    0x8(%eax),%eax
f0132449:	83 ec 04             	sub    $0x4,%esp
f013244c:	52                   	push   %edx
f013244d:	50                   	push   %eax
f013244e:	68 91 d7 13 f0       	push   $0xf013d791
f0132453:	e8 b6 e8 fc ff       	call   f0100d0e <cprintf>
f0132458:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f013245b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013245e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0132461:	a1 68 f7 85 f0       	mov    0xf085f768,%eax
f0132466:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132469:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013246d:	74 07                	je     f0132476 <print_mem_block_lists+0x9e>
f013246f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132472:	8b 00                	mov    (%eax),%eax
f0132474:	eb 05                	jmp    f013247b <print_mem_block_lists+0xa3>
f0132476:	b8 00 00 00 00       	mov    $0x0,%eax
f013247b:	a3 68 f7 85 f0       	mov    %eax,0xf085f768
f0132480:	a1 68 f7 85 f0       	mov    0xf085f768,%eax
f0132485:	85 c0                	test   %eax,%eax
f0132487:	75 8a                	jne    f0132413 <print_mem_block_lists+0x3b>
f0132489:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013248d:	75 84                	jne    f0132413 <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f013248f:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0132493:	75 10                	jne    f01324a5 <print_mem_block_lists+0xcd>
f0132495:	83 ec 0c             	sub    $0xc,%esp
f0132498:	68 a0 d7 13 f0       	push   $0xf013d7a0
f013249d:	e8 6c e8 fc ff       	call   f0100d0e <cprintf>
f01324a2:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f01324a5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f01324ac:	83 ec 0c             	sub    $0xc,%esp
f01324af:	68 c4 d7 13 f0       	push   $0xf013d7c4
f01324b4:	e8 55 e8 fc ff       	call   f0100d0e <cprintf>
f01324b9:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f01324bc:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f01324c0:	a1 c4 f6 85 f0       	mov    0xf085f6c4,%eax
f01324c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01324c8:	eb 56                	jmp    f0132520 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f01324ca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01324ce:	74 1c                	je     f01324ec <print_mem_block_lists+0x114>
f01324d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324d3:	8b 50 08             	mov    0x8(%eax),%edx
f01324d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324d9:	8b 48 08             	mov    0x8(%eax),%ecx
f01324dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01324df:	8b 40 0c             	mov    0xc(%eax),%eax
f01324e2:	01 c8                	add    %ecx,%eax
f01324e4:	39 c2                	cmp    %eax,%edx
f01324e6:	73 04                	jae    f01324ec <print_mem_block_lists+0x114>
			sorted = 0 ;
f01324e8:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f01324ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324ef:	8b 50 08             	mov    0x8(%eax),%edx
f01324f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324f5:	8b 40 0c             	mov    0xc(%eax),%eax
f01324f8:	01 c2                	add    %eax,%edx
f01324fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01324fd:	8b 40 08             	mov    0x8(%eax),%eax
f0132500:	83 ec 04             	sub    $0x4,%esp
f0132503:	52                   	push   %edx
f0132504:	50                   	push   %eax
f0132505:	68 91 d7 13 f0       	push   $0xf013d791
f013250a:	e8 ff e7 fc ff       	call   f0100d0e <cprintf>
f013250f:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0132512:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132515:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0132518:	a1 cc f6 85 f0       	mov    0xf085f6cc,%eax
f013251d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132520:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132524:	74 07                	je     f013252d <print_mem_block_lists+0x155>
f0132526:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132529:	8b 00                	mov    (%eax),%eax
f013252b:	eb 05                	jmp    f0132532 <print_mem_block_lists+0x15a>
f013252d:	b8 00 00 00 00       	mov    $0x0,%eax
f0132532:	a3 cc f6 85 f0       	mov    %eax,0xf085f6cc
f0132537:	a1 cc f6 85 f0       	mov    0xf085f6cc,%eax
f013253c:	85 c0                	test   %eax,%eax
f013253e:	75 8a                	jne    f01324ca <print_mem_block_lists+0xf2>
f0132540:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132544:	75 84                	jne    f01324ca <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0132546:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f013254a:	75 10                	jne    f013255c <print_mem_block_lists+0x184>
f013254c:	83 ec 0c             	sub    $0xc,%esp
f013254f:	68 dc d7 13 f0       	push   $0xf013d7dc
f0132554:	e8 b5 e7 fc ff       	call   f0100d0e <cprintf>
f0132559:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f013255c:	83 ec 0c             	sub    $0xc,%esp
f013255f:	68 50 d7 13 f0       	push   $0xf013d750
f0132564:	e8 a5 e7 fc ff       	call   f0100d0e <cprintf>
f0132569:	83 c4 10             	add    $0x10,%esp

}
f013256c:	90                   	nop
f013256d:	c9                   	leave  
f013256e:	c3                   	ret    

f013256f <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f013256f:	55                   	push   %ebp
f0132570:	89 e5                	mov    %esp,%ebp
f0132572:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");

	 LIST_INIT(& AvailableMemBlocksList);
f0132575:	c7 05 94 f7 85 f0 00 	movl   $0x0,0xf085f794
f013257c:	00 00 00 
f013257f:	c7 05 98 f7 85 f0 00 	movl   $0x0,0xf085f798
f0132586:	00 00 00 
f0132589:	c7 05 a0 f7 85 f0 00 	movl   $0x0,0xf085f7a0
f0132590:	00 00 00 


	 for(uint32 i=0 ; i<numOfBlocks ; i++){
f0132593:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f013259a:	e9 9e 00 00 00       	jmp    f013263d <initialize_MemBlocksList+0xce>
	   LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[i]));
f013259f:	a1 d4 f6 85 f0       	mov    0xf085f6d4,%eax
f01325a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325a7:	c1 e2 04             	shl    $0x4,%edx
f01325aa:	01 d0                	add    %edx,%eax
f01325ac:	85 c0                	test   %eax,%eax
f01325ae:	75 14                	jne    f01325c4 <initialize_MemBlocksList+0x55>
f01325b0:	83 ec 04             	sub    $0x4,%esp
f01325b3:	68 04 d8 13 f0       	push   $0xf013d804
f01325b8:	6a 47                	push   $0x47
f01325ba:	68 27 d8 13 f0       	push   $0xf013d827
f01325bf:	e8 41 dc fc ff       	call   f0100205 <_panic>
f01325c4:	a1 d4 f6 85 f0       	mov    0xf085f6d4,%eax
f01325c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325cc:	c1 e2 04             	shl    $0x4,%edx
f01325cf:	01 d0                	add    %edx,%eax
f01325d1:	8b 15 94 f7 85 f0    	mov    0xf085f794,%edx
f01325d7:	89 10                	mov    %edx,(%eax)
f01325d9:	8b 00                	mov    (%eax),%eax
f01325db:	85 c0                	test   %eax,%eax
f01325dd:	74 18                	je     f01325f7 <initialize_MemBlocksList+0x88>
f01325df:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f01325e4:	8b 15 d4 f6 85 f0    	mov    0xf085f6d4,%edx
f01325ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01325ed:	c1 e1 04             	shl    $0x4,%ecx
f01325f0:	01 ca                	add    %ecx,%edx
f01325f2:	89 50 04             	mov    %edx,0x4(%eax)
f01325f5:	eb 12                	jmp    f0132609 <initialize_MemBlocksList+0x9a>
f01325f7:	a1 d4 f6 85 f0       	mov    0xf085f6d4,%eax
f01325fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01325ff:	c1 e2 04             	shl    $0x4,%edx
f0132602:	01 d0                	add    %edx,%eax
f0132604:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f0132609:	a1 d4 f6 85 f0       	mov    0xf085f6d4,%eax
f013260e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132611:	c1 e2 04             	shl    $0x4,%edx
f0132614:	01 d0                	add    %edx,%eax
f0132616:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f013261b:	a1 d4 f6 85 f0       	mov    0xf085f6d4,%eax
f0132620:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132623:	c1 e2 04             	shl    $0x4,%edx
f0132626:	01 d0                	add    %edx,%eax
f0132628:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013262f:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0132634:	40                   	inc    %eax
f0132635:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0
	//panic("initialize_MemBlocksList() is not implemented yet...!!");

	 LIST_INIT(& AvailableMemBlocksList);


	 for(uint32 i=0 ; i<numOfBlocks ; i++){
f013263a:	ff 45 f4             	incl   -0xc(%ebp)
f013263d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132640:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132643:	0f 82 56 ff ff ff    	jb     f013259f <initialize_MemBlocksList+0x30>
	   LIST_INSERT_HEAD(&AvailableMemBlocksList, &(MemBlockNodes[i]));
	 }


}
f0132649:	90                   	nop
f013264a:	c9                   	leave  
f013264b:	c3                   	ret    

f013264c <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013264c:	55                   	push   %ebp
f013264d:	89 e5                	mov    %esp,%ebp
f013264f:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");

	struct MemBlock *element;
	LIST_FOREACH(element, &(*blockList))
f0132652:	8b 45 08             	mov    0x8(%ebp),%eax
f0132655:	8b 00                	mov    (%eax),%eax
f0132657:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013265a:	eb 19                	jmp    f0132675 <find_block+0x29>
	{
		if(element->sva == va){
f013265c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013265f:	8b 40 08             	mov    0x8(%eax),%eax
f0132662:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0132665:	75 05                	jne    f013266c <find_block+0x20>
			 		return element;
f0132667:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013266a:	eb 36                	jmp    f01326a2 <find_block+0x56>
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	//panic("find_block() is not implemented yet...!!");

	struct MemBlock *element;
	LIST_FOREACH(element, &(*blockList))
f013266c:	8b 45 08             	mov    0x8(%ebp),%eax
f013266f:	8b 40 08             	mov    0x8(%eax),%eax
f0132672:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0132675:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0132679:	74 07                	je     f0132682 <find_block+0x36>
f013267b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013267e:	8b 00                	mov    (%eax),%eax
f0132680:	eb 05                	jmp    f0132687 <find_block+0x3b>
f0132682:	b8 00 00 00 00       	mov    $0x0,%eax
f0132687:	8b 55 08             	mov    0x8(%ebp),%edx
f013268a:	89 42 08             	mov    %eax,0x8(%edx)
f013268d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132690:	8b 40 08             	mov    0x8(%eax),%eax
f0132693:	85 c0                	test   %eax,%eax
f0132695:	75 c5                	jne    f013265c <find_block+0x10>
f0132697:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013269b:	75 bf                	jne    f013265c <find_block+0x10>
		if(element->sva == va){
			 		return element;
			 	}
	}

	return NULL;
f013269d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01326a2:	c9                   	leave  
f01326a3:	c3                   	ret    

f01326a4 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f01326a4:	55                   	push   %ebp
f01326a5:	89 e5                	mov    %esp,%ebp
f01326a7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_allocList() is not implemented yet...!!");
	  struct MemBlock *element;
	  struct MemBlock* lastElement = LIST_LAST(&AllocMemBlocksList);
f01326aa:	a1 c8 f6 85 f0       	mov    0xf085f6c8,%eax
f01326af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	  int size=LIST_SIZE(&AllocMemBlocksList);
f01326b2:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01326b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	  if((size==0)||(blockToInsert->sva==0)){
f01326ba:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01326be:	74 0a                	je     f01326ca <insert_sorted_allocList+0x26>
f01326c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01326c3:	8b 40 08             	mov    0x8(%eax),%eax
f01326c6:	85 c0                	test   %eax,%eax
f01326c8:	75 65                	jne    f013272f <insert_sorted_allocList+0x8b>
	    LIST_INSERT_HEAD(&AllocMemBlocksList,blockToInsert);
f01326ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01326ce:	75 14                	jne    f01326e4 <insert_sorted_allocList+0x40>
f01326d0:	83 ec 04             	sub    $0x4,%esp
f01326d3:	68 04 d8 13 f0       	push   $0xf013d804
f01326d8:	6a 6e                	push   $0x6e
f01326da:	68 27 d8 13 f0       	push   $0xf013d827
f01326df:	e8 21 db fc ff       	call   f0100205 <_panic>
f01326e4:	8b 15 c4 f6 85 f0    	mov    0xf085f6c4,%edx
f01326ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01326ed:	89 10                	mov    %edx,(%eax)
f01326ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01326f2:	8b 00                	mov    (%eax),%eax
f01326f4:	85 c0                	test   %eax,%eax
f01326f6:	74 0d                	je     f0132705 <insert_sorted_allocList+0x61>
f01326f8:	a1 c4 f6 85 f0       	mov    0xf085f6c4,%eax
f01326fd:	8b 55 08             	mov    0x8(%ebp),%edx
f0132700:	89 50 04             	mov    %edx,0x4(%eax)
f0132703:	eb 08                	jmp    f013270d <insert_sorted_allocList+0x69>
f0132705:	8b 45 08             	mov    0x8(%ebp),%eax
f0132708:	a3 c8 f6 85 f0       	mov    %eax,0xf085f6c8
f013270d:	8b 45 08             	mov    0x8(%ebp),%eax
f0132710:	a3 c4 f6 85 f0       	mov    %eax,0xf085f6c4
f0132715:	8b 45 08             	mov    0x8(%ebp),%eax
f0132718:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013271f:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0132724:	40                   	inc    %eax
f0132725:	a3 d0 f6 85 f0       	mov    %eax,0xf085f6d0
f013272a:	e9 cf 01 00 00       	jmp    f01328fe <insert_sorted_allocList+0x25a>

	  }
	  else if((lastElement->sva)<(blockToInsert->sva)){
f013272f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132732:	8b 50 08             	mov    0x8(%eax),%edx
f0132735:	8b 45 08             	mov    0x8(%ebp),%eax
f0132738:	8b 40 08             	mov    0x8(%eax),%eax
f013273b:	39 c2                	cmp    %eax,%edx
f013273d:	73 65                	jae    f01327a4 <insert_sorted_allocList+0x100>
	    LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
f013273f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132743:	75 14                	jne    f0132759 <insert_sorted_allocList+0xb5>
f0132745:	83 ec 04             	sub    $0x4,%esp
f0132748:	68 40 d8 13 f0       	push   $0xf013d840
f013274d:	6a 72                	push   $0x72
f013274f:	68 27 d8 13 f0       	push   $0xf013d827
f0132754:	e8 ac da fc ff       	call   f0100205 <_panic>
f0132759:	8b 15 c8 f6 85 f0    	mov    0xf085f6c8,%edx
f013275f:	8b 45 08             	mov    0x8(%ebp),%eax
f0132762:	89 50 04             	mov    %edx,0x4(%eax)
f0132765:	8b 45 08             	mov    0x8(%ebp),%eax
f0132768:	8b 40 04             	mov    0x4(%eax),%eax
f013276b:	85 c0                	test   %eax,%eax
f013276d:	74 0c                	je     f013277b <insert_sorted_allocList+0xd7>
f013276f:	a1 c8 f6 85 f0       	mov    0xf085f6c8,%eax
f0132774:	8b 55 08             	mov    0x8(%ebp),%edx
f0132777:	89 10                	mov    %edx,(%eax)
f0132779:	eb 08                	jmp    f0132783 <insert_sorted_allocList+0xdf>
f013277b:	8b 45 08             	mov    0x8(%ebp),%eax
f013277e:	a3 c4 f6 85 f0       	mov    %eax,0xf085f6c4
f0132783:	8b 45 08             	mov    0x8(%ebp),%eax
f0132786:	a3 c8 f6 85 f0       	mov    %eax,0xf085f6c8
f013278b:	8b 45 08             	mov    0x8(%ebp),%eax
f013278e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132794:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0132799:	40                   	inc    %eax
f013279a:	a3 d0 f6 85 f0       	mov    %eax,0xf085f6d0
				break;
			  }
	    }
	  }

}
f013279f:	e9 5a 01 00 00       	jmp    f01328fe <insert_sorted_allocList+0x25a>

	  }
	  else if((lastElement->sva)<(blockToInsert->sva)){
	    LIST_INSERT_TAIL(&AllocMemBlocksList, blockToInsert);
	  }
	   else if((lastElement->sva)==(blockToInsert->sva)){
f01327a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327a7:	8b 50 08             	mov    0x8(%eax),%edx
f01327aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01327ad:	8b 40 08             	mov    0x8(%eax),%eax
f01327b0:	39 c2                	cmp    %eax,%edx
f01327b2:	75 70                	jne    f0132824 <insert_sorted_allocList+0x180>
	    LIST_INSERT_AFTER(&AllocMemBlocksList,lastElement,blockToInsert);
f01327b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01327b8:	74 06                	je     f01327c0 <insert_sorted_allocList+0x11c>
f01327ba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01327be:	75 14                	jne    f01327d4 <insert_sorted_allocList+0x130>
f01327c0:	83 ec 04             	sub    $0x4,%esp
f01327c3:	68 64 d8 13 f0       	push   $0xf013d864
f01327c8:	6a 75                	push   $0x75
f01327ca:	68 27 d8 13 f0       	push   $0xf013d827
f01327cf:	e8 31 da fc ff       	call   f0100205 <_panic>
f01327d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327d7:	8b 10                	mov    (%eax),%edx
f01327d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01327dc:	89 10                	mov    %edx,(%eax)
f01327de:	8b 45 08             	mov    0x8(%ebp),%eax
f01327e1:	8b 00                	mov    (%eax),%eax
f01327e3:	85 c0                	test   %eax,%eax
f01327e5:	74 0b                	je     f01327f2 <insert_sorted_allocList+0x14e>
f01327e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327ea:	8b 00                	mov    (%eax),%eax
f01327ec:	8b 55 08             	mov    0x8(%ebp),%edx
f01327ef:	89 50 04             	mov    %edx,0x4(%eax)
f01327f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01327f5:	8b 55 08             	mov    0x8(%ebp),%edx
f01327f8:	89 10                	mov    %edx,(%eax)
f01327fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01327fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132800:	89 50 04             	mov    %edx,0x4(%eax)
f0132803:	8b 45 08             	mov    0x8(%ebp),%eax
f0132806:	8b 00                	mov    (%eax),%eax
f0132808:	85 c0                	test   %eax,%eax
f013280a:	75 08                	jne    f0132814 <insert_sorted_allocList+0x170>
f013280c:	8b 45 08             	mov    0x8(%ebp),%eax
f013280f:	a3 c8 f6 85 f0       	mov    %eax,0xf085f6c8
f0132814:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f0132819:	40                   	inc    %eax
f013281a:	a3 d0 f6 85 f0       	mov    %eax,0xf085f6d0
				break;
			  }
	    }
	  }

}
f013281f:	e9 da 00 00 00       	jmp    f01328fe <insert_sorted_allocList+0x25a>
	   else if((lastElement->sva)==(blockToInsert->sva)){
	    LIST_INSERT_AFTER(&AllocMemBlocksList,lastElement,blockToInsert);
	  }
	  else{
	      struct MemBlock* nextElement ;
	      LIST_FOREACH(element,&(AllocMemBlocksList)){
f0132824:	a1 c4 f6 85 f0       	mov    0xf085f6c4,%eax
f0132829:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013282c:	e9 9d 00 00 00       	jmp    f01328ce <insert_sorted_allocList+0x22a>
			  nextElement = element->prev_next_info.le_next;//LIST_NEXT(element);
f0132831:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132834:	8b 00                	mov    (%eax),%eax
f0132836:	89 45 e8             	mov    %eax,-0x18(%ebp)
			  if((blockToInsert->sva)>(element->sva)&&((blockToInsert->sva)<(nextElement->sva))){
f0132839:	8b 45 08             	mov    0x8(%ebp),%eax
f013283c:	8b 50 08             	mov    0x8(%eax),%edx
f013283f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132842:	8b 40 08             	mov    0x8(%eax),%eax
f0132845:	39 c2                	cmp    %eax,%edx
f0132847:	76 7d                	jbe    f01328c6 <insert_sorted_allocList+0x222>
f0132849:	8b 45 08             	mov    0x8(%ebp),%eax
f013284c:	8b 50 08             	mov    0x8(%eax),%edx
f013284f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132852:	8b 40 08             	mov    0x8(%eax),%eax
f0132855:	39 c2                	cmp    %eax,%edx
f0132857:	73 6d                	jae    f01328c6 <insert_sorted_allocList+0x222>
				LIST_INSERT_AFTER(&AllocMemBlocksList,element,blockToInsert);
f0132859:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013285d:	74 06                	je     f0132865 <insert_sorted_allocList+0x1c1>
f013285f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132863:	75 14                	jne    f0132879 <insert_sorted_allocList+0x1d5>
f0132865:	83 ec 04             	sub    $0x4,%esp
f0132868:	68 64 d8 13 f0       	push   $0xf013d864
f013286d:	6a 7c                	push   $0x7c
f013286f:	68 27 d8 13 f0       	push   $0xf013d827
f0132874:	e8 8c d9 fc ff       	call   f0100205 <_panic>
f0132879:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013287c:	8b 10                	mov    (%eax),%edx
f013287e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132881:	89 10                	mov    %edx,(%eax)
f0132883:	8b 45 08             	mov    0x8(%ebp),%eax
f0132886:	8b 00                	mov    (%eax),%eax
f0132888:	85 c0                	test   %eax,%eax
f013288a:	74 0b                	je     f0132897 <insert_sorted_allocList+0x1f3>
f013288c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013288f:	8b 00                	mov    (%eax),%eax
f0132891:	8b 55 08             	mov    0x8(%ebp),%edx
f0132894:	89 50 04             	mov    %edx,0x4(%eax)
f0132897:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013289a:	8b 55 08             	mov    0x8(%ebp),%edx
f013289d:	89 10                	mov    %edx,(%eax)
f013289f:	8b 45 08             	mov    0x8(%ebp),%eax
f01328a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01328a5:	89 50 04             	mov    %edx,0x4(%eax)
f01328a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01328ab:	8b 00                	mov    (%eax),%eax
f01328ad:	85 c0                	test   %eax,%eax
f01328af:	75 08                	jne    f01328b9 <insert_sorted_allocList+0x215>
f01328b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01328b4:	a3 c8 f6 85 f0       	mov    %eax,0xf085f6c8
f01328b9:	a1 d0 f6 85 f0       	mov    0xf085f6d0,%eax
f01328be:	40                   	inc    %eax
f01328bf:	a3 d0 f6 85 f0       	mov    %eax,0xf085f6d0
				break;
f01328c4:	eb 38                	jmp    f01328fe <insert_sorted_allocList+0x25a>
	   else if((lastElement->sva)==(blockToInsert->sva)){
	    LIST_INSERT_AFTER(&AllocMemBlocksList,lastElement,blockToInsert);
	  }
	  else{
	      struct MemBlock* nextElement ;
	      LIST_FOREACH(element,&(AllocMemBlocksList)){
f01328c6:	a1 cc f6 85 f0       	mov    0xf085f6cc,%eax
f01328cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01328ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328d2:	74 07                	je     f01328db <insert_sorted_allocList+0x237>
f01328d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01328d7:	8b 00                	mov    (%eax),%eax
f01328d9:	eb 05                	jmp    f01328e0 <insert_sorted_allocList+0x23c>
f01328db:	b8 00 00 00 00       	mov    $0x0,%eax
f01328e0:	a3 cc f6 85 f0       	mov    %eax,0xf085f6cc
f01328e5:	a1 cc f6 85 f0       	mov    0xf085f6cc,%eax
f01328ea:	85 c0                	test   %eax,%eax
f01328ec:	0f 85 3f ff ff ff    	jne    f0132831 <insert_sorted_allocList+0x18d>
f01328f2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01328f6:	0f 85 35 ff ff ff    	jne    f0132831 <insert_sorted_allocList+0x18d>
				break;
			  }
	    }
	  }

}
f01328fc:	eb 00                	jmp    f01328fe <insert_sorted_allocList+0x25a>
f01328fe:	90                   	nop
f01328ff:	c9                   	leave  
f0132900:	c3                   	ret    

f0132901 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0132901:	55                   	push   %ebp
f0132902:	89 e5                	mov    %esp,%ebp
f0132904:	83 ec 18             	sub    $0x18,%esp
	// Write your code here, remove the panic and write your code
	//panic("alloc_block_FF() is not implemented yet...!!");

	  struct MemBlock *temp;
	  struct MemBlock *element;
	  LIST_FOREACH(element, &(FreeMemBlocksList)){
f0132907:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f013290c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013290f:	e9 6b 02 00 00       	jmp    f0132b7f <alloc_block_FF+0x27e>
	  if((element->size)==(size)){
f0132914:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132917:	8b 40 0c             	mov    0xc(%eax),%eax
f013291a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013291d:	0f 85 90 00 00 00    	jne    f01329b3 <alloc_block_FF+0xb2>
			  temp=element;
f0132923:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132926:	89 45 e8             	mov    %eax,-0x18(%ebp)
			  LIST_REMOVE(&(FreeMemBlocksList) ,element);
f0132929:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013292d:	75 17                	jne    f0132946 <alloc_block_FF+0x45>
f013292f:	83 ec 04             	sub    $0x4,%esp
f0132932:	68 98 d8 13 f0       	push   $0xf013d898
f0132937:	68 92 00 00 00       	push   $0x92
f013293c:	68 27 d8 13 f0       	push   $0xf013d827
f0132941:	e8 bf d8 fc ff       	call   f0100205 <_panic>
f0132946:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132949:	8b 00                	mov    (%eax),%eax
f013294b:	85 c0                	test   %eax,%eax
f013294d:	74 10                	je     f013295f <alloc_block_FF+0x5e>
f013294f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132952:	8b 00                	mov    (%eax),%eax
f0132954:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0132957:	8b 52 04             	mov    0x4(%edx),%edx
f013295a:	89 50 04             	mov    %edx,0x4(%eax)
f013295d:	eb 0b                	jmp    f013296a <alloc_block_FF+0x69>
f013295f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132962:	8b 40 04             	mov    0x4(%eax),%eax
f0132965:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f013296a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013296d:	8b 40 04             	mov    0x4(%eax),%eax
f0132970:	85 c0                	test   %eax,%eax
f0132972:	74 0f                	je     f0132983 <alloc_block_FF+0x82>
f0132974:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132977:	8b 40 04             	mov    0x4(%eax),%eax
f013297a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013297d:	8b 12                	mov    (%edx),%edx
f013297f:	89 10                	mov    %edx,(%eax)
f0132981:	eb 0a                	jmp    f013298d <alloc_block_FF+0x8c>
f0132983:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132986:	8b 00                	mov    (%eax),%eax
f0132988:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f013298d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132990:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132996:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132999:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01329a0:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01329a5:	48                   	dec    %eax
f01329a6:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
			  return temp;
f01329ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01329ae:	e9 ff 01 00 00       	jmp    f0132bb2 <alloc_block_FF+0x2b1>
		}
	   else if ((element->size)>(size)){
f01329b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329b6:	8b 40 0c             	mov    0xc(%eax),%eax
f01329b9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01329bc:	0f 86 b5 01 00 00    	jbe    f0132b77 <alloc_block_FF+0x276>
		  uint32 new_size = (element->size)-(size);
f01329c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01329c5:	8b 40 0c             	mov    0xc(%eax),%eax
f01329c8:	2b 45 08             	sub    0x8(%ebp),%eax
f01329cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		  // get new block from AvailableMemBlocksList
		  struct MemBlock *new_block=LIST_FIRST(&AvailableMemBlocksList);
f01329ce:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f01329d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		  LIST_REMOVE(&AvailableMemBlocksList ,new_block);
f01329d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01329da:	75 17                	jne    f01329f3 <alloc_block_FF+0xf2>
f01329dc:	83 ec 04             	sub    $0x4,%esp
f01329df:	68 98 d8 13 f0       	push   $0xf013d898
f01329e4:	68 99 00 00 00       	push   $0x99
f01329e9:	68 27 d8 13 f0       	push   $0xf013d827
f01329ee:	e8 12 d8 fc ff       	call   f0100205 <_panic>
f01329f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01329f6:	8b 00                	mov    (%eax),%eax
f01329f8:	85 c0                	test   %eax,%eax
f01329fa:	74 10                	je     f0132a0c <alloc_block_FF+0x10b>
f01329fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01329ff:	8b 00                	mov    (%eax),%eax
f0132a01:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132a04:	8b 52 04             	mov    0x4(%edx),%edx
f0132a07:	89 50 04             	mov    %edx,0x4(%eax)
f0132a0a:	eb 0b                	jmp    f0132a17 <alloc_block_FF+0x116>
f0132a0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a0f:	8b 40 04             	mov    0x4(%eax),%eax
f0132a12:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f0132a17:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a1a:	8b 40 04             	mov    0x4(%eax),%eax
f0132a1d:	85 c0                	test   %eax,%eax
f0132a1f:	74 0f                	je     f0132a30 <alloc_block_FF+0x12f>
f0132a21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a24:	8b 40 04             	mov    0x4(%eax),%eax
f0132a27:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132a2a:	8b 12                	mov    (%edx),%edx
f0132a2c:	89 10                	mov    %edx,(%eax)
f0132a2e:	eb 0a                	jmp    f0132a3a <alloc_block_FF+0x139>
f0132a30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a33:	8b 00                	mov    (%eax),%eax
f0132a35:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f0132a3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132a43:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a46:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132a4d:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0132a52:	48                   	dec    %eax
f0132a53:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0
		  LIST_INSERT_TAIL(&(FreeMemBlocksList) ,new_block);
f0132a58:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132a5c:	75 17                	jne    f0132a75 <alloc_block_FF+0x174>
f0132a5e:	83 ec 04             	sub    $0x4,%esp
f0132a61:	68 40 d8 13 f0       	push   $0xf013d840
f0132a66:	68 9a 00 00 00       	push   $0x9a
f0132a6b:	68 27 d8 13 f0       	push   $0xf013d827
f0132a70:	e8 90 d7 fc ff       	call   f0100205 <_panic>
f0132a75:	8b 15 64 f7 85 f0    	mov    0xf085f764,%edx
f0132a7b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a7e:	89 50 04             	mov    %edx,0x4(%eax)
f0132a81:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a84:	8b 40 04             	mov    0x4(%eax),%eax
f0132a87:	85 c0                	test   %eax,%eax
f0132a89:	74 0c                	je     f0132a97 <alloc_block_FF+0x196>
f0132a8b:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f0132a90:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132a93:	89 10                	mov    %edx,(%eax)
f0132a95:	eb 08                	jmp    f0132a9f <alloc_block_FF+0x19e>
f0132a97:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132a9a:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f0132a9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132aa2:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f0132aa7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132aaa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ab0:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0132ab5:	40                   	inc    %eax
f0132ab6:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
		  // setting the size & sva
		  new_block->size=size;
f0132abb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132abe:	8b 55 08             	mov    0x8(%ebp),%edx
f0132ac1:	89 50 0c             	mov    %edx,0xc(%eax)
		  new_block->sva=element->sva;
f0132ac4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ac7:	8b 50 08             	mov    0x8(%eax),%edx
f0132aca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132acd:	89 50 08             	mov    %edx,0x8(%eax)
		  //update size in list
		  element->size=new_size;
f0132ad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ad3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132ad6:	89 50 0c             	mov    %edx,0xc(%eax)
		  element->sva=(element->sva)+ size;
f0132ad9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132adc:	8b 50 08             	mov    0x8(%eax),%edx
f0132adf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ae2:	01 c2                	add    %eax,%edx
f0132ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132ae7:	89 50 08             	mov    %edx,0x8(%eax)
		  temp=new_block;
f0132aea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132aed:	89 45 e8             	mov    %eax,-0x18(%ebp)
		  LIST_REMOVE(&(FreeMemBlocksList) ,new_block);
f0132af0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0132af4:	75 17                	jne    f0132b0d <alloc_block_FF+0x20c>
f0132af6:	83 ec 04             	sub    $0x4,%esp
f0132af9:	68 98 d8 13 f0       	push   $0xf013d898
f0132afe:	68 a2 00 00 00       	push   $0xa2
f0132b03:	68 27 d8 13 f0       	push   $0xf013d827
f0132b08:	e8 f8 d6 fc ff       	call   f0100205 <_panic>
f0132b0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b10:	8b 00                	mov    (%eax),%eax
f0132b12:	85 c0                	test   %eax,%eax
f0132b14:	74 10                	je     f0132b26 <alloc_block_FF+0x225>
f0132b16:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b19:	8b 00                	mov    (%eax),%eax
f0132b1b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132b1e:	8b 52 04             	mov    0x4(%edx),%edx
f0132b21:	89 50 04             	mov    %edx,0x4(%eax)
f0132b24:	eb 0b                	jmp    f0132b31 <alloc_block_FF+0x230>
f0132b26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b29:	8b 40 04             	mov    0x4(%eax),%eax
f0132b2c:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f0132b31:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b34:	8b 40 04             	mov    0x4(%eax),%eax
f0132b37:	85 c0                	test   %eax,%eax
f0132b39:	74 0f                	je     f0132b4a <alloc_block_FF+0x249>
f0132b3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b3e:	8b 40 04             	mov    0x4(%eax),%eax
f0132b41:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0132b44:	8b 12                	mov    (%edx),%edx
f0132b46:	89 10                	mov    %edx,(%eax)
f0132b48:	eb 0a                	jmp    f0132b54 <alloc_block_FF+0x253>
f0132b4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b4d:	8b 00                	mov    (%eax),%eax
f0132b4f:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f0132b54:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b57:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132b5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132b60:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132b67:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0132b6c:	48                   	dec    %eax
f0132b6d:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
		  return temp;
f0132b72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132b75:	eb 3b                	jmp    f0132bb2 <alloc_block_FF+0x2b1>
	// Write your code here, remove the panic and write your code
	//panic("alloc_block_FF() is not implemented yet...!!");

	  struct MemBlock *temp;
	  struct MemBlock *element;
	  LIST_FOREACH(element, &(FreeMemBlocksList)){
f0132b77:	a1 68 f7 85 f0       	mov    0xf085f768,%eax
f0132b7c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132b7f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132b83:	74 07                	je     f0132b8c <alloc_block_FF+0x28b>
f0132b85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132b88:	8b 00                	mov    (%eax),%eax
f0132b8a:	eb 05                	jmp    f0132b91 <alloc_block_FF+0x290>
f0132b8c:	b8 00 00 00 00       	mov    $0x0,%eax
f0132b91:	a3 68 f7 85 f0       	mov    %eax,0xf085f768
f0132b96:	a1 68 f7 85 f0       	mov    0xf085f768,%eax
f0132b9b:	85 c0                	test   %eax,%eax
f0132b9d:	0f 85 71 fd ff ff    	jne    f0132914 <alloc_block_FF+0x13>
f0132ba3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132ba7:	0f 85 67 fd ff ff    	jne    f0132914 <alloc_block_FF+0x13>
		  temp=new_block;
		  LIST_REMOVE(&(FreeMemBlocksList) ,new_block);
		  return temp;
		}
	  }
	  return NULL;
f0132bad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0132bb2:	c9                   	leave  
f0132bb3:	c3                   	ret    

f0132bb4 <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f0132bb4:	55                   	push   %ebp
f0132bb5:	89 e5                	mov    %esp,%ebp
f0132bb7:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] alloc_block_BF
	// Write your code here, remove the panic and write your code
	//panic("alloc_block_BF() is not implemented yet...!!");

	 int suitable = 0;
f0132bba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	 uint32 big_size= (4294967295);//(4*1024*1024*1024)-1
f0132bc1:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
	 struct MemBlock *temp;
	 struct MemBlock *ptr;//= LIST_FIRST(&(FreeMemBlocksList));
	// new var as intial size
	 struct MemBlock *element;
	 LIST_FOREACH(element, &(FreeMemBlocksList))
f0132bc8:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f0132bcd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0132bd0:	e9 d3 00 00 00       	jmp    f0132ca8 <alloc_block_BF+0xf4>
	 {
	  if ((element->size) == (size)) {
f0132bd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132bd8:	8b 40 0c             	mov    0xc(%eax),%eax
f0132bdb:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132bde:	0f 85 90 00 00 00    	jne    f0132c74 <alloc_block_BF+0xc0>
	   temp = element;
f0132be4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132be7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	   LIST_REMOVE(&(FreeMemBlocksList), element);
f0132bea:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132bee:	75 17                	jne    f0132c07 <alloc_block_BF+0x53>
f0132bf0:	83 ec 04             	sub    $0x4,%esp
f0132bf3:	68 98 d8 13 f0       	push   $0xf013d898
f0132bf8:	68 bd 00 00 00       	push   $0xbd
f0132bfd:	68 27 d8 13 f0       	push   $0xf013d827
f0132c02:	e8 fe d5 fc ff       	call   f0100205 <_panic>
f0132c07:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c0a:	8b 00                	mov    (%eax),%eax
f0132c0c:	85 c0                	test   %eax,%eax
f0132c0e:	74 10                	je     f0132c20 <alloc_block_BF+0x6c>
f0132c10:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c13:	8b 00                	mov    (%eax),%eax
f0132c15:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132c18:	8b 52 04             	mov    0x4(%edx),%edx
f0132c1b:	89 50 04             	mov    %edx,0x4(%eax)
f0132c1e:	eb 0b                	jmp    f0132c2b <alloc_block_BF+0x77>
f0132c20:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c23:	8b 40 04             	mov    0x4(%eax),%eax
f0132c26:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f0132c2b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c2e:	8b 40 04             	mov    0x4(%eax),%eax
f0132c31:	85 c0                	test   %eax,%eax
f0132c33:	74 0f                	je     f0132c44 <alloc_block_BF+0x90>
f0132c35:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c38:	8b 40 04             	mov    0x4(%eax),%eax
f0132c3b:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0132c3e:	8b 12                	mov    (%edx),%edx
f0132c40:	89 10                	mov    %edx,(%eax)
f0132c42:	eb 0a                	jmp    f0132c4e <alloc_block_BF+0x9a>
f0132c44:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c47:	8b 00                	mov    (%eax),%eax
f0132c49:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f0132c4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c51:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c5a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132c61:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0132c66:	48                   	dec    %eax
f0132c67:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
	   return temp;
f0132c6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132c6f:	e9 41 01 00 00       	jmp    f0132db5 <alloc_block_BF+0x201>
	  }
	  else if ((element->size) > (size))
f0132c74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c77:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c7a:	3b 45 08             	cmp    0x8(%ebp),%eax
f0132c7d:	76 21                	jbe    f0132ca0 <alloc_block_BF+0xec>
	  {
	   if (element->size < big_size  )
f0132c7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c82:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c85:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0132c88:	73 16                	jae    f0132ca0 <alloc_block_BF+0xec>
	   { // new var
	    //update new var
	    big_size=element->size;
f0132c8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c8d:	8b 40 0c             	mov    0xc(%eax),%eax
f0132c90:	89 45 f0             	mov    %eax,-0x10(%ebp)
	    ptr = element;
f0132c93:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132c96:	89 45 ec             	mov    %eax,-0x14(%ebp)
	    suitable =1;
f0132c99:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	 uint32 big_size= (4294967295);//(4*1024*1024*1024)-1
	 struct MemBlock *temp;
	 struct MemBlock *ptr;//= LIST_FIRST(&(FreeMemBlocksList));
	// new var as intial size
	 struct MemBlock *element;
	 LIST_FOREACH(element, &(FreeMemBlocksList))
f0132ca0:	a1 68 f7 85 f0       	mov    0xf085f768,%eax
f0132ca5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0132ca8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132cac:	74 07                	je     f0132cb5 <alloc_block_BF+0x101>
f0132cae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0132cb1:	8b 00                	mov    (%eax),%eax
f0132cb3:	eb 05                	jmp    f0132cba <alloc_block_BF+0x106>
f0132cb5:	b8 00 00 00 00       	mov    $0x0,%eax
f0132cba:	a3 68 f7 85 f0       	mov    %eax,0xf085f768
f0132cbf:	a1 68 f7 85 f0       	mov    0xf085f768,%eax
f0132cc4:	85 c0                	test   %eax,%eax
f0132cc6:	0f 85 09 ff ff ff    	jne    f0132bd5 <alloc_block_BF+0x21>
f0132ccc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132cd0:	0f 85 ff fe ff ff    	jne    f0132bd5 <alloc_block_BF+0x21>
	    suitable =1;
	   }
	  }
	 }

	 if (suitable == 1)
f0132cd6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0132cda:	0f 85 d0 00 00 00    	jne    f0132db0 <alloc_block_BF+0x1fc>
	 {
	  uint32 new_size = (ptr->size) - (size);
f0132ce0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132ce3:	8b 40 0c             	mov    0xc(%eax),%eax
f0132ce6:	2b 45 08             	sub    0x8(%ebp),%eax
f0132ce9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	  // get new block from AvailableMemBlocksList
	  struct MemBlock *new_block = LIST_FIRST(&AvailableMemBlocksList);
f0132cec:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f0132cf1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	  LIST_REMOVE(&AvailableMemBlocksList, new_block);
f0132cf4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0132cf8:	75 17                	jne    f0132d11 <alloc_block_BF+0x15d>
f0132cfa:	83 ec 04             	sub    $0x4,%esp
f0132cfd:	68 98 d8 13 f0       	push   $0xf013d898
f0132d02:	68 d1 00 00 00       	push   $0xd1
f0132d07:	68 27 d8 13 f0       	push   $0xf013d827
f0132d0c:	e8 f4 d4 fc ff       	call   f0100205 <_panic>
f0132d11:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d14:	8b 00                	mov    (%eax),%eax
f0132d16:	85 c0                	test   %eax,%eax
f0132d18:	74 10                	je     f0132d2a <alloc_block_BF+0x176>
f0132d1a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d1d:	8b 00                	mov    (%eax),%eax
f0132d1f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0132d22:	8b 52 04             	mov    0x4(%edx),%edx
f0132d25:	89 50 04             	mov    %edx,0x4(%eax)
f0132d28:	eb 0b                	jmp    f0132d35 <alloc_block_BF+0x181>
f0132d2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d2d:	8b 40 04             	mov    0x4(%eax),%eax
f0132d30:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f0132d35:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d38:	8b 40 04             	mov    0x4(%eax),%eax
f0132d3b:	85 c0                	test   %eax,%eax
f0132d3d:	74 0f                	je     f0132d4e <alloc_block_BF+0x19a>
f0132d3f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d42:	8b 40 04             	mov    0x4(%eax),%eax
f0132d45:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0132d48:	8b 12                	mov    (%edx),%edx
f0132d4a:	89 10                	mov    %edx,(%eax)
f0132d4c:	eb 0a                	jmp    f0132d58 <alloc_block_BF+0x1a4>
f0132d4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d51:	8b 00                	mov    (%eax),%eax
f0132d53:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f0132d58:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d5b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132d61:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d64:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132d6b:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0132d70:	48                   	dec    %eax
f0132d71:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0
	  // setting the size & sva
	  new_block->size = size;
f0132d76:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d79:	8b 55 08             	mov    0x8(%ebp),%edx
f0132d7c:	89 50 0c             	mov    %edx,0xc(%eax)
	  new_block->sva = ptr->sva;
f0132d7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d82:	8b 50 08             	mov    0x8(%eax),%edx
f0132d85:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132d88:	89 50 08             	mov    %edx,0x8(%eax)
	  //update size in list
	  ptr->size = new_size;
f0132d8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0132d91:	89 50 0c             	mov    %edx,0xc(%eax)
	  ptr->sva += size;
f0132d94:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132d97:	8b 50 08             	mov    0x8(%eax),%edx
f0132d9a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132d9d:	01 c2                	add    %eax,%edx
f0132d9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132da2:	89 50 08             	mov    %edx,0x8(%eax)
	  temp = new_block;
f0132da5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0132da8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	  return temp;
f0132dab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0132dae:	eb 05                	jmp    f0132db5 <alloc_block_BF+0x201>
	 }
	 return NULL;
f0132db0:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0132db5:	c9                   	leave  
f0132db6:	c3                   	ret    

f0132db7 <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0132db7:	55                   	push   %ebp
f0132db8:	89 e5                	mov    %esp,%ebp
f0132dba:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your code
	panic("alloc_block_NF() is not implemented yet...!!");
f0132dbd:	83 ec 04             	sub    $0x4,%esp
f0132dc0:	68 b8 d8 13 f0       	push   $0xf013d8b8
f0132dc5:	68 e8 00 00 00       	push   $0xe8
f0132dca:	68 27 d8 13 f0       	push   $0xf013d827
f0132dcf:	e8 31 d4 fc ff       	call   f0100205 <_panic>

f0132dd4 <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0132dd4:	55                   	push   %ebp
f0132dd5:	89 e5                	mov    %esp,%ebp
f0132dd7:	83 ec 28             	sub    $0x28,%esp
	//print_mem_block_lists() ;

	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_with_merge_freeList
	// Write your code here, remove the panic and write your code
	//panic("insert_sorted_with_merge_freeList() is not implemented yet...!!");
	  struct MemBlock* lastElement = LIST_LAST(&FreeMemBlocksList);
f0132dda:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f0132ddf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	  struct MemBlock* firstElement = LIST_FIRST(&FreeMemBlocksList);
f0132de2:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f0132de7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	  struct MemBlock *element;
	  int size=LIST_SIZE(&FreeMemBlocksList);
f0132dea:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0132def:	89 45 e8             	mov    %eax,-0x18(%ebp)
	  //(LIST_EMPTY(&FreeMemBlocksList))
	  //empty list
	  if(size==0){
f0132df2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0132df6:	75 68                	jne    f0132e60 <insert_sorted_with_merge_freeList+0x8c>
	    LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
f0132df8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132dfc:	75 17                	jne    f0132e15 <insert_sorted_with_merge_freeList+0x41>
f0132dfe:	83 ec 04             	sub    $0x4,%esp
f0132e01:	68 04 d8 13 f0       	push   $0xf013d804
f0132e06:	68 36 01 00 00       	push   $0x136
f0132e0b:	68 27 d8 13 f0       	push   $0xf013d827
f0132e10:	e8 f0 d3 fc ff       	call   f0100205 <_panic>
f0132e15:	8b 15 60 f7 85 f0    	mov    0xf085f760,%edx
f0132e1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e1e:	89 10                	mov    %edx,(%eax)
f0132e20:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e23:	8b 00                	mov    (%eax),%eax
f0132e25:	85 c0                	test   %eax,%eax
f0132e27:	74 0d                	je     f0132e36 <insert_sorted_with_merge_freeList+0x62>
f0132e29:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f0132e2e:	8b 55 08             	mov    0x8(%ebp),%edx
f0132e31:	89 50 04             	mov    %edx,0x4(%eax)
f0132e34:	eb 08                	jmp    f0132e3e <insert_sorted_with_merge_freeList+0x6a>
f0132e36:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e39:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f0132e3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e41:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f0132e46:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e49:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132e50:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0132e55:	40                   	inc    %eax
f0132e56:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c





}
f0132e5b:	e9 ba 06 00 00       	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	  //empty list
	  if(size==0){
	    LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
	  }
	  //insert blockToInsert before first block without merge
	  else if((lastElement->sva + lastElement->size)<(blockToInsert->sva)){
f0132e60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e63:	8b 50 08             	mov    0x8(%eax),%edx
f0132e66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132e69:	8b 40 0c             	mov    0xc(%eax),%eax
f0132e6c:	01 c2                	add    %eax,%edx
f0132e6e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e71:	8b 40 08             	mov    0x8(%eax),%eax
f0132e74:	39 c2                	cmp    %eax,%edx
f0132e76:	73 68                	jae    f0132ee0 <insert_sorted_with_merge_freeList+0x10c>
	    LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
f0132e78:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132e7c:	75 17                	jne    f0132e95 <insert_sorted_with_merge_freeList+0xc1>
f0132e7e:	83 ec 04             	sub    $0x4,%esp
f0132e81:	68 40 d8 13 f0       	push   $0xf013d840
f0132e86:	68 3a 01 00 00       	push   $0x13a
f0132e8b:	68 27 d8 13 f0       	push   $0xf013d827
f0132e90:	e8 70 d3 fc ff       	call   f0100205 <_panic>
f0132e95:	8b 15 64 f7 85 f0    	mov    0xf085f764,%edx
f0132e9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0132e9e:	89 50 04             	mov    %edx,0x4(%eax)
f0132ea1:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ea4:	8b 40 04             	mov    0x4(%eax),%eax
f0132ea7:	85 c0                	test   %eax,%eax
f0132ea9:	74 0c                	je     f0132eb7 <insert_sorted_with_merge_freeList+0xe3>
f0132eab:	a1 64 f7 85 f0       	mov    0xf085f764,%eax
f0132eb0:	8b 55 08             	mov    0x8(%ebp),%edx
f0132eb3:	89 10                	mov    %edx,(%eax)
f0132eb5:	eb 08                	jmp    f0132ebf <insert_sorted_with_merge_freeList+0xeb>
f0132eb7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eba:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f0132ebf:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ec2:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f0132ec7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132eca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0132ed0:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0132ed5:	40                   	inc    %eax
f0132ed6:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c





}
f0132edb:	e9 3a 06 00 00       	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	  //insert blockToInsert before first block without merge
	  else if((lastElement->sva + lastElement->size)<(blockToInsert->sva)){
	    LIST_INSERT_TAIL(&FreeMemBlocksList, blockToInsert);
	  }
	  //merge with last block
	  else if((lastElement->sva + lastElement->size)==(blockToInsert->sva)){
f0132ee0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ee3:	8b 50 08             	mov    0x8(%eax),%edx
f0132ee6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132ee9:	8b 40 0c             	mov    0xc(%eax),%eax
f0132eec:	01 c2                	add    %eax,%edx
f0132eee:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ef1:	8b 40 08             	mov    0x8(%eax),%eax
f0132ef4:	39 c2                	cmp    %eax,%edx
f0132ef6:	0f 85 90 00 00 00    	jne    f0132f8c <insert_sorted_with_merge_freeList+0x1b8>
	    lastElement->size+=blockToInsert->size;
f0132efc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132eff:	8b 50 0c             	mov    0xc(%eax),%edx
f0132f02:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f05:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f08:	01 c2                	add    %eax,%edx
f0132f0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132f0d:	89 50 0c             	mov    %edx,0xc(%eax)
	    blockToInsert->sva=0;
f0132f10:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f13:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	    blockToInsert->size=0;
f0132f1a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f1d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	    LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f0132f24:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132f28:	75 17                	jne    f0132f41 <insert_sorted_with_merge_freeList+0x16d>
f0132f2a:	83 ec 04             	sub    $0x4,%esp
f0132f2d:	68 04 d8 13 f0       	push   $0xf013d804
f0132f32:	68 41 01 00 00       	push   $0x141
f0132f37:	68 27 d8 13 f0       	push   $0xf013d827
f0132f3c:	e8 c4 d2 fc ff       	call   f0100205 <_panic>
f0132f41:	8b 15 94 f7 85 f0    	mov    0xf085f794,%edx
f0132f47:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f4a:	89 10                	mov    %edx,(%eax)
f0132f4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f4f:	8b 00                	mov    (%eax),%eax
f0132f51:	85 c0                	test   %eax,%eax
f0132f53:	74 0d                	je     f0132f62 <insert_sorted_with_merge_freeList+0x18e>
f0132f55:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f0132f5a:	8b 55 08             	mov    0x8(%ebp),%edx
f0132f5d:	89 50 04             	mov    %edx,0x4(%eax)
f0132f60:	eb 08                	jmp    f0132f6a <insert_sorted_with_merge_freeList+0x196>
f0132f62:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f65:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f0132f6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f6d:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f0132f72:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f75:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132f7c:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0132f81:	40                   	inc    %eax
f0132f82:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0





}
f0132f87:	e9 8e 05 00 00       	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	    blockToInsert->sva=0;
	    blockToInsert->size=0;
	    LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
	  }
	  //insert blockToInsert before first block without merge
	  else if((blockToInsert->sva +blockToInsert->size)<(firstElement->sva)){
f0132f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f8f:	8b 50 08             	mov    0x8(%eax),%edx
f0132f92:	8b 45 08             	mov    0x8(%ebp),%eax
f0132f95:	8b 40 0c             	mov    0xc(%eax),%eax
f0132f98:	01 c2                	add    %eax,%edx
f0132f9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0132f9d:	8b 40 08             	mov    0x8(%eax),%eax
f0132fa0:	39 c2                	cmp    %eax,%edx
f0132fa2:	73 68                	jae    f013300c <insert_sorted_with_merge_freeList+0x238>
	      LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
f0132fa4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132fa8:	75 17                	jne    f0132fc1 <insert_sorted_with_merge_freeList+0x1ed>
f0132faa:	83 ec 04             	sub    $0x4,%esp
f0132fad:	68 04 d8 13 f0       	push   $0xf013d804
f0132fb2:	68 45 01 00 00       	push   $0x145
f0132fb7:	68 27 d8 13 f0       	push   $0xf013d827
f0132fbc:	e8 44 d2 fc ff       	call   f0100205 <_panic>
f0132fc1:	8b 15 60 f7 85 f0    	mov    0xf085f760,%edx
f0132fc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fca:	89 10                	mov    %edx,(%eax)
f0132fcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fcf:	8b 00                	mov    (%eax),%eax
f0132fd1:	85 c0                	test   %eax,%eax
f0132fd3:	74 0d                	je     f0132fe2 <insert_sorted_with_merge_freeList+0x20e>
f0132fd5:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f0132fda:	8b 55 08             	mov    0x8(%ebp),%edx
f0132fdd:	89 50 04             	mov    %edx,0x4(%eax)
f0132fe0:	eb 08                	jmp    f0132fea <insert_sorted_with_merge_freeList+0x216>
f0132fe2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fe5:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f0132fea:	8b 45 08             	mov    0x8(%ebp),%eax
f0132fed:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f0132ff2:	8b 45 08             	mov    0x8(%ebp),%eax
f0132ff5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132ffc:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f0133001:	40                   	inc    %eax
f0133002:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c





}
f0133007:	e9 0e 05 00 00       	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	  }
	  //insert blockToInsert before first block without merge
	  else if((blockToInsert->sva +blockToInsert->size)<(firstElement->sva)){
	      LIST_INSERT_HEAD(&FreeMemBlocksList,blockToInsert);
	  }
	  else if((blockToInsert->sva + blockToInsert->size)==(firstElement->sva)){
f013300c:	8b 45 08             	mov    0x8(%ebp),%eax
f013300f:	8b 50 08             	mov    0x8(%eax),%edx
f0133012:	8b 45 08             	mov    0x8(%ebp),%eax
f0133015:	8b 40 0c             	mov    0xc(%eax),%eax
f0133018:	01 c2                	add    %eax,%edx
f013301a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013301d:	8b 40 08             	mov    0x8(%eax),%eax
f0133020:	39 c2                	cmp    %eax,%edx
f0133022:	0f 85 9c 00 00 00    	jne    f01330c4 <insert_sorted_with_merge_freeList+0x2f0>
	     //merge with first block
	    firstElement->size+=blockToInsert->size;
f0133028:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013302b:	8b 50 0c             	mov    0xc(%eax),%edx
f013302e:	8b 45 08             	mov    0x8(%ebp),%eax
f0133031:	8b 40 0c             	mov    0xc(%eax),%eax
f0133034:	01 c2                	add    %eax,%edx
f0133036:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133039:	89 50 0c             	mov    %edx,0xc(%eax)
	    firstElement->sva=blockToInsert->sva;
f013303c:	8b 45 08             	mov    0x8(%ebp),%eax
f013303f:	8b 50 08             	mov    0x8(%eax),%edx
f0133042:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0133045:	89 50 08             	mov    %edx,0x8(%eax)
	     blockToInsert->sva=0;
f0133048:	8b 45 08             	mov    0x8(%ebp),%eax
f013304b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	     blockToInsert->size=0;
f0133052:	8b 45 08             	mov    0x8(%ebp),%eax
f0133055:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	     LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f013305c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133060:	75 17                	jne    f0133079 <insert_sorted_with_merge_freeList+0x2a5>
f0133062:	83 ec 04             	sub    $0x4,%esp
f0133065:	68 04 d8 13 f0       	push   $0xf013d804
f013306a:	68 4d 01 00 00       	push   $0x14d
f013306f:	68 27 d8 13 f0       	push   $0xf013d827
f0133074:	e8 8c d1 fc ff       	call   f0100205 <_panic>
f0133079:	8b 15 94 f7 85 f0    	mov    0xf085f794,%edx
f013307f:	8b 45 08             	mov    0x8(%ebp),%eax
f0133082:	89 10                	mov    %edx,(%eax)
f0133084:	8b 45 08             	mov    0x8(%ebp),%eax
f0133087:	8b 00                	mov    (%eax),%eax
f0133089:	85 c0                	test   %eax,%eax
f013308b:	74 0d                	je     f013309a <insert_sorted_with_merge_freeList+0x2c6>
f013308d:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f0133092:	8b 55 08             	mov    0x8(%ebp),%edx
f0133095:	89 50 04             	mov    %edx,0x4(%eax)
f0133098:	eb 08                	jmp    f01330a2 <insert_sorted_with_merge_freeList+0x2ce>
f013309a:	8b 45 08             	mov    0x8(%ebp),%eax
f013309d:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f01330a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01330a5:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f01330aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01330ad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01330b4:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f01330b9:	40                   	inc    %eax
f01330ba:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0





}
f01330bf:	e9 56 04 00 00       	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	     blockToInsert->size=0;
	     LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
	  }
	  else{
	    //struct MemBlock* nextElement ;
	      LIST_FOREACH(element,&(FreeMemBlocksList)){
f01330c4:	a1 60 f7 85 f0       	mov    0xf085f760,%eax
f01330c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01330cc:	e9 19 04 00 00       	jmp    f01334ea <insert_sorted_with_merge_freeList+0x716>
	      struct MemBlock* nextElement =LIST_NEXT(element); //element->prev_next_info.le_next;
f01330d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330d4:	8b 00                	mov    (%eax),%eax
f01330d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	      //merge with previous and next
	      if((element->sva+element->size)==(blockToInsert->sva)&&(blockToInsert->sva + blockToInsert->size)==(nextElement->sva)){
f01330d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330dc:	8b 50 08             	mov    0x8(%eax),%edx
f01330df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01330e2:	8b 40 0c             	mov    0xc(%eax),%eax
f01330e5:	01 c2                	add    %eax,%edx
f01330e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01330ea:	8b 40 08             	mov    0x8(%eax),%eax
f01330ed:	39 c2                	cmp    %eax,%edx
f01330ef:	0f 85 ad 01 00 00    	jne    f01332a2 <insert_sorted_with_merge_freeList+0x4ce>
f01330f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01330f8:	8b 50 08             	mov    0x8(%eax),%edx
f01330fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01330fe:	8b 40 0c             	mov    0xc(%eax),%eax
f0133101:	01 c2                	add    %eax,%edx
f0133103:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133106:	8b 40 08             	mov    0x8(%eax),%eax
f0133109:	39 c2                	cmp    %eax,%edx
f013310b:	0f 85 91 01 00 00    	jne    f01332a2 <insert_sorted_with_merge_freeList+0x4ce>
	        //merge element and blockToInsert and nextElement
	        element->size += blockToInsert->size +nextElement->size;
f0133111:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133114:	8b 50 0c             	mov    0xc(%eax),%edx
f0133117:	8b 45 08             	mov    0x8(%ebp),%eax
f013311a:	8b 48 0c             	mov    0xc(%eax),%ecx
f013311d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133120:	8b 40 0c             	mov    0xc(%eax),%eax
f0133123:	01 c8                	add    %ecx,%eax
f0133125:	01 c2                	add    %eax,%edx
f0133127:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013312a:	89 50 0c             	mov    %edx,0xc(%eax)
	        blockToInsert->sva=0;
f013312d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133130:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	        blockToInsert->size=0;
f0133137:	8b 45 08             	mov    0x8(%ebp),%eax
f013313a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	        nextElement->size=0;
f0133141:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133144:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	        nextElement->sva=0;
f013314b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013314e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	        LIST_REMOVE(&FreeMemBlocksList, nextElement);
f0133155:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0133159:	75 17                	jne    f0133172 <insert_sorted_with_merge_freeList+0x39e>
f013315b:	83 ec 04             	sub    $0x4,%esp
f013315e:	68 98 d8 13 f0       	push   $0xf013d898
f0133163:	68 5b 01 00 00       	push   $0x15b
f0133168:	68 27 d8 13 f0       	push   $0xf013d827
f013316d:	e8 93 d0 fc ff       	call   f0100205 <_panic>
f0133172:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133175:	8b 00                	mov    (%eax),%eax
f0133177:	85 c0                	test   %eax,%eax
f0133179:	74 10                	je     f013318b <insert_sorted_with_merge_freeList+0x3b7>
f013317b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013317e:	8b 00                	mov    (%eax),%eax
f0133180:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0133183:	8b 52 04             	mov    0x4(%edx),%edx
f0133186:	89 50 04             	mov    %edx,0x4(%eax)
f0133189:	eb 0b                	jmp    f0133196 <insert_sorted_with_merge_freeList+0x3c2>
f013318b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013318e:	8b 40 04             	mov    0x4(%eax),%eax
f0133191:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f0133196:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133199:	8b 40 04             	mov    0x4(%eax),%eax
f013319c:	85 c0                	test   %eax,%eax
f013319e:	74 0f                	je     f01331af <insert_sorted_with_merge_freeList+0x3db>
f01331a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01331a3:	8b 40 04             	mov    0x4(%eax),%eax
f01331a6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01331a9:	8b 12                	mov    (%edx),%edx
f01331ab:	89 10                	mov    %edx,(%eax)
f01331ad:	eb 0a                	jmp    f01331b9 <insert_sorted_with_merge_freeList+0x3e5>
f01331af:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01331b2:	8b 00                	mov    (%eax),%eax
f01331b4:	a3 60 f7 85 f0       	mov    %eax,0xf085f760
f01331b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01331bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01331c2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01331c5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01331cc:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01331d1:	48                   	dec    %eax
f01331d2:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
	        LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01331d7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01331db:	75 17                	jne    f01331f4 <insert_sorted_with_merge_freeList+0x420>
f01331dd:	83 ec 04             	sub    $0x4,%esp
f01331e0:	68 04 d8 13 f0       	push   $0xf013d804
f01331e5:	68 5c 01 00 00       	push   $0x15c
f01331ea:	68 27 d8 13 f0       	push   $0xf013d827
f01331ef:	e8 11 d0 fc ff       	call   f0100205 <_panic>
f01331f4:	8b 15 94 f7 85 f0    	mov    0xf085f794,%edx
f01331fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01331fd:	89 10                	mov    %edx,(%eax)
f01331ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0133202:	8b 00                	mov    (%eax),%eax
f0133204:	85 c0                	test   %eax,%eax
f0133206:	74 0d                	je     f0133215 <insert_sorted_with_merge_freeList+0x441>
f0133208:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f013320d:	8b 55 08             	mov    0x8(%ebp),%edx
f0133210:	89 50 04             	mov    %edx,0x4(%eax)
f0133213:	eb 08                	jmp    f013321d <insert_sorted_with_merge_freeList+0x449>
f0133215:	8b 45 08             	mov    0x8(%ebp),%eax
f0133218:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f013321d:	8b 45 08             	mov    0x8(%ebp),%eax
f0133220:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f0133225:	8b 45 08             	mov    0x8(%ebp),%eax
f0133228:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013322f:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0133234:	40                   	inc    %eax
f0133235:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0
	        LIST_INSERT_HEAD(&AvailableMemBlocksList, nextElement);
f013323a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f013323e:	75 17                	jne    f0133257 <insert_sorted_with_merge_freeList+0x483>
f0133240:	83 ec 04             	sub    $0x4,%esp
f0133243:	68 04 d8 13 f0       	push   $0xf013d804
f0133248:	68 5d 01 00 00       	push   $0x15d
f013324d:	68 27 d8 13 f0       	push   $0xf013d827
f0133252:	e8 ae cf fc ff       	call   f0100205 <_panic>
f0133257:	8b 15 94 f7 85 f0    	mov    0xf085f794,%edx
f013325d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133260:	89 10                	mov    %edx,(%eax)
f0133262:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133265:	8b 00                	mov    (%eax),%eax
f0133267:	85 c0                	test   %eax,%eax
f0133269:	74 0d                	je     f0133278 <insert_sorted_with_merge_freeList+0x4a4>
f013326b:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f0133270:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0133273:	89 50 04             	mov    %edx,0x4(%eax)
f0133276:	eb 08                	jmp    f0133280 <insert_sorted_with_merge_freeList+0x4ac>
f0133278:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013327b:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f0133280:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0133283:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f0133288:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013328b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133292:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0133297:	40                   	inc    %eax
f0133298:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0
	        break;
f013329d:	e9 78 02 00 00       	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	    }
	      //merge with next
	    else if((element->sva+element->size)<(blockToInsert->sva)&&(blockToInsert->sva + blockToInsert->size)==(nextElement->sva)){
f01332a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332a5:	8b 50 08             	mov    0x8(%eax),%edx
f01332a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01332ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01332ae:	01 c2                	add    %eax,%edx
f01332b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01332b3:	8b 40 08             	mov    0x8(%eax),%eax
f01332b6:	39 c2                	cmp    %eax,%edx
f01332b8:	0f 83 b8 00 00 00    	jae    f0133376 <insert_sorted_with_merge_freeList+0x5a2>
f01332be:	8b 45 08             	mov    0x8(%ebp),%eax
f01332c1:	8b 50 08             	mov    0x8(%eax),%edx
f01332c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01332c7:	8b 40 0c             	mov    0xc(%eax),%eax
f01332ca:	01 c2                	add    %eax,%edx
f01332cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01332cf:	8b 40 08             	mov    0x8(%eax),%eax
f01332d2:	39 c2                	cmp    %eax,%edx
f01332d4:	0f 85 9c 00 00 00    	jne    f0133376 <insert_sorted_with_merge_freeList+0x5a2>
	      //merge nextElement and blockToInsert
	        nextElement->size += blockToInsert->size;
f01332da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01332dd:	8b 50 0c             	mov    0xc(%eax),%edx
f01332e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01332e3:	8b 40 0c             	mov    0xc(%eax),%eax
f01332e6:	01 c2                	add    %eax,%edx
f01332e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01332eb:	89 50 0c             	mov    %edx,0xc(%eax)
	        nextElement->sva=blockToInsert->sva;
f01332ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01332f1:	8b 50 08             	mov    0x8(%eax),%edx
f01332f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01332f7:	89 50 08             	mov    %edx,0x8(%eax)
	        blockToInsert->sva=0;
f01332fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01332fd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	        blockToInsert->size=0;
f0133304:	8b 45 08             	mov    0x8(%ebp),%eax
f0133307:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	        LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f013330e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0133312:	75 17                	jne    f013332b <insert_sorted_with_merge_freeList+0x557>
f0133314:	83 ec 04             	sub    $0x4,%esp
f0133317:	68 04 d8 13 f0       	push   $0xf013d804
f013331c:	68 67 01 00 00       	push   $0x167
f0133321:	68 27 d8 13 f0       	push   $0xf013d827
f0133326:	e8 da ce fc ff       	call   f0100205 <_panic>
f013332b:	8b 15 94 f7 85 f0    	mov    0xf085f794,%edx
f0133331:	8b 45 08             	mov    0x8(%ebp),%eax
f0133334:	89 10                	mov    %edx,(%eax)
f0133336:	8b 45 08             	mov    0x8(%ebp),%eax
f0133339:	8b 00                	mov    (%eax),%eax
f013333b:	85 c0                	test   %eax,%eax
f013333d:	74 0d                	je     f013334c <insert_sorted_with_merge_freeList+0x578>
f013333f:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f0133344:	8b 55 08             	mov    0x8(%ebp),%edx
f0133347:	89 50 04             	mov    %edx,0x4(%eax)
f013334a:	eb 08                	jmp    f0133354 <insert_sorted_with_merge_freeList+0x580>
f013334c:	8b 45 08             	mov    0x8(%ebp),%eax
f013334f:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f0133354:	8b 45 08             	mov    0x8(%ebp),%eax
f0133357:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f013335c:	8b 45 08             	mov    0x8(%ebp),%eax
f013335f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0133366:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f013336b:	40                   	inc    %eax
f013336c:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0
	        break;
f0133371:	e9 a4 01 00 00       	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	      }
	      //merge with previous
	    else if((element->sva+element->size)==(blockToInsert->sva)&&(blockToInsert->sva + blockToInsert->size)<(nextElement->sva)){
f0133376:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133379:	8b 50 08             	mov    0x8(%eax),%edx
f013337c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013337f:	8b 40 0c             	mov    0xc(%eax),%eax
f0133382:	01 c2                	add    %eax,%edx
f0133384:	8b 45 08             	mov    0x8(%ebp),%eax
f0133387:	8b 40 08             	mov    0x8(%eax),%eax
f013338a:	39 c2                	cmp    %eax,%edx
f013338c:	0f 85 ac 00 00 00    	jne    f013343e <insert_sorted_with_merge_freeList+0x66a>
f0133392:	8b 45 08             	mov    0x8(%ebp),%eax
f0133395:	8b 50 08             	mov    0x8(%eax),%edx
f0133398:	8b 45 08             	mov    0x8(%ebp),%eax
f013339b:	8b 40 0c             	mov    0xc(%eax),%eax
f013339e:	01 c2                	add    %eax,%edx
f01333a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01333a3:	8b 40 08             	mov    0x8(%eax),%eax
f01333a6:	39 c2                	cmp    %eax,%edx
f01333a8:	0f 83 90 00 00 00    	jae    f013343e <insert_sorted_with_merge_freeList+0x66a>
	      //merge element and blockToInsert
	      element->size +=blockToInsert->size;
f01333ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333b1:	8b 50 0c             	mov    0xc(%eax),%edx
f01333b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01333b7:	8b 40 0c             	mov    0xc(%eax),%eax
f01333ba:	01 c2                	add    %eax,%edx
f01333bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01333bf:	89 50 0c             	mov    %edx,0xc(%eax)
	      blockToInsert->sva=0;
f01333c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01333c5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	      blockToInsert->size=0;
f01333cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01333cf:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	      LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
f01333d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01333da:	75 17                	jne    f01333f3 <insert_sorted_with_merge_freeList+0x61f>
f01333dc:	83 ec 04             	sub    $0x4,%esp
f01333df:	68 04 d8 13 f0       	push   $0xf013d804
f01333e4:	68 70 01 00 00       	push   $0x170
f01333e9:	68 27 d8 13 f0       	push   $0xf013d827
f01333ee:	e8 12 ce fc ff       	call   f0100205 <_panic>
f01333f3:	8b 15 94 f7 85 f0    	mov    0xf085f794,%edx
f01333f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01333fc:	89 10                	mov    %edx,(%eax)
f01333fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0133401:	8b 00                	mov    (%eax),%eax
f0133403:	85 c0                	test   %eax,%eax
f0133405:	74 0d                	je     f0133414 <insert_sorted_with_merge_freeList+0x640>
f0133407:	a1 94 f7 85 f0       	mov    0xf085f794,%eax
f013340c:	8b 55 08             	mov    0x8(%ebp),%edx
f013340f:	89 50 04             	mov    %edx,0x4(%eax)
f0133412:	eb 08                	jmp    f013341c <insert_sorted_with_merge_freeList+0x648>
f0133414:	8b 45 08             	mov    0x8(%ebp),%eax
f0133417:	a3 98 f7 85 f0       	mov    %eax,0xf085f798
f013341c:	8b 45 08             	mov    0x8(%ebp),%eax
f013341f:	a3 94 f7 85 f0       	mov    %eax,0xf085f794
f0133424:	8b 45 08             	mov    0x8(%ebp),%eax
f0133427:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013342e:	a1 a0 f7 85 f0       	mov    0xf085f7a0,%eax
f0133433:	40                   	inc    %eax
f0133434:	a3 a0 f7 85 f0       	mov    %eax,0xf085f7a0
	      break;
f0133439:	e9 dc 00 00 00       	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	    }
	      //insert blockToInsert between to blocks without merge
	    else if((element->sva+element->size)<(blockToInsert->sva)&&(blockToInsert->sva + blockToInsert->size)<(nextElement->sva)){
f013343e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133441:	8b 50 08             	mov    0x8(%eax),%edx
f0133444:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133447:	8b 40 0c             	mov    0xc(%eax),%eax
f013344a:	01 c2                	add    %eax,%edx
f013344c:	8b 45 08             	mov    0x8(%ebp),%eax
f013344f:	8b 40 08             	mov    0x8(%eax),%eax
f0133452:	39 c2                	cmp    %eax,%edx
f0133454:	0f 83 88 00 00 00    	jae    f01334e2 <insert_sorted_with_merge_freeList+0x70e>
f013345a:	8b 45 08             	mov    0x8(%ebp),%eax
f013345d:	8b 50 08             	mov    0x8(%eax),%edx
f0133460:	8b 45 08             	mov    0x8(%ebp),%eax
f0133463:	8b 40 0c             	mov    0xc(%eax),%eax
f0133466:	01 c2                	add    %eax,%edx
f0133468:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f013346b:	8b 40 08             	mov    0x8(%eax),%eax
f013346e:	39 c2                	cmp    %eax,%edx
f0133470:	73 70                	jae    f01334e2 <insert_sorted_with_merge_freeList+0x70e>
	      LIST_INSERT_AFTER(&FreeMemBlocksList,element,blockToInsert);
f0133472:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133476:	74 06                	je     f013347e <insert_sorted_with_merge_freeList+0x6aa>
f0133478:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013347c:	75 17                	jne    f0133495 <insert_sorted_with_merge_freeList+0x6c1>
f013347e:	83 ec 04             	sub    $0x4,%esp
f0133481:	68 64 d8 13 f0       	push   $0xf013d864
f0133486:	68 75 01 00 00       	push   $0x175
f013348b:	68 27 d8 13 f0       	push   $0xf013d827
f0133490:	e8 70 cd fc ff       	call   f0100205 <_panic>
f0133495:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0133498:	8b 10                	mov    (%eax),%edx
f013349a:	8b 45 08             	mov    0x8(%ebp),%eax
f013349d:	89 10                	mov    %edx,(%eax)
f013349f:	8b 45 08             	mov    0x8(%ebp),%eax
f01334a2:	8b 00                	mov    (%eax),%eax
f01334a4:	85 c0                	test   %eax,%eax
f01334a6:	74 0b                	je     f01334b3 <insert_sorted_with_merge_freeList+0x6df>
f01334a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334ab:	8b 00                	mov    (%eax),%eax
f01334ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01334b0:	89 50 04             	mov    %edx,0x4(%eax)
f01334b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334b6:	8b 55 08             	mov    0x8(%ebp),%edx
f01334b9:	89 10                	mov    %edx,(%eax)
f01334bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01334be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01334c1:	89 50 04             	mov    %edx,0x4(%eax)
f01334c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01334c7:	8b 00                	mov    (%eax),%eax
f01334c9:	85 c0                	test   %eax,%eax
f01334cb:	75 08                	jne    f01334d5 <insert_sorted_with_merge_freeList+0x701>
f01334cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01334d0:	a3 64 f7 85 f0       	mov    %eax,0xf085f764
f01334d5:	a1 6c f7 85 f0       	mov    0xf085f76c,%eax
f01334da:	40                   	inc    %eax
f01334db:	a3 6c f7 85 f0       	mov    %eax,0xf085f76c
	      break;
f01334e0:	eb 38                	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
	     blockToInsert->size=0;
	     LIST_INSERT_HEAD(&AvailableMemBlocksList, blockToInsert);
	  }
	  else{
	    //struct MemBlock* nextElement ;
	      LIST_FOREACH(element,&(FreeMemBlocksList)){
f01334e2:	a1 68 f7 85 f0       	mov    0xf085f768,%eax
f01334e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01334ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01334ee:	74 07                	je     f01334f7 <insert_sorted_with_merge_freeList+0x723>
f01334f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01334f3:	8b 00                	mov    (%eax),%eax
f01334f5:	eb 05                	jmp    f01334fc <insert_sorted_with_merge_freeList+0x728>
f01334f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01334fc:	a3 68 f7 85 f0       	mov    %eax,0xf085f768
f0133501:	a1 68 f7 85 f0       	mov    0xf085f768,%eax
f0133506:	85 c0                	test   %eax,%eax
f0133508:	0f 85 c3 fb ff ff    	jne    f01330d1 <insert_sorted_with_merge_freeList+0x2fd>
f013350e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0133512:	0f 85 b9 fb ff ff    	jne    f01330d1 <insert_sorted_with_merge_freeList+0x2fd>





}
f0133518:	eb 00                	jmp    f013351a <insert_sorted_with_merge_freeList+0x746>
f013351a:	90                   	nop
f013351b:	c9                   	leave  
f013351c:	c3                   	ret    
f013351d:	66 90                	xchg   %ax,%ax
f013351f:	90                   	nop

f0133520 <__udivdi3>:
f0133520:	55                   	push   %ebp
f0133521:	57                   	push   %edi
f0133522:	56                   	push   %esi
f0133523:	53                   	push   %ebx
f0133524:	83 ec 1c             	sub    $0x1c,%esp
f0133527:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f013352b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f013352f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133533:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0133537:	89 ca                	mov    %ecx,%edx
f0133539:	89 f8                	mov    %edi,%eax
f013353b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f013353f:	85 f6                	test   %esi,%esi
f0133541:	75 2d                	jne    f0133570 <__udivdi3+0x50>
f0133543:	39 cf                	cmp    %ecx,%edi
f0133545:	77 65                	ja     f01335ac <__udivdi3+0x8c>
f0133547:	89 fd                	mov    %edi,%ebp
f0133549:	85 ff                	test   %edi,%edi
f013354b:	75 0b                	jne    f0133558 <__udivdi3+0x38>
f013354d:	b8 01 00 00 00       	mov    $0x1,%eax
f0133552:	31 d2                	xor    %edx,%edx
f0133554:	f7 f7                	div    %edi
f0133556:	89 c5                	mov    %eax,%ebp
f0133558:	31 d2                	xor    %edx,%edx
f013355a:	89 c8                	mov    %ecx,%eax
f013355c:	f7 f5                	div    %ebp
f013355e:	89 c1                	mov    %eax,%ecx
f0133560:	89 d8                	mov    %ebx,%eax
f0133562:	f7 f5                	div    %ebp
f0133564:	89 cf                	mov    %ecx,%edi
f0133566:	89 fa                	mov    %edi,%edx
f0133568:	83 c4 1c             	add    $0x1c,%esp
f013356b:	5b                   	pop    %ebx
f013356c:	5e                   	pop    %esi
f013356d:	5f                   	pop    %edi
f013356e:	5d                   	pop    %ebp
f013356f:	c3                   	ret    
f0133570:	39 ce                	cmp    %ecx,%esi
f0133572:	77 28                	ja     f013359c <__udivdi3+0x7c>
f0133574:	0f bd fe             	bsr    %esi,%edi
f0133577:	83 f7 1f             	xor    $0x1f,%edi
f013357a:	75 40                	jne    f01335bc <__udivdi3+0x9c>
f013357c:	39 ce                	cmp    %ecx,%esi
f013357e:	72 0a                	jb     f013358a <__udivdi3+0x6a>
f0133580:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0133584:	0f 87 9e 00 00 00    	ja     f0133628 <__udivdi3+0x108>
f013358a:	b8 01 00 00 00       	mov    $0x1,%eax
f013358f:	89 fa                	mov    %edi,%edx
f0133591:	83 c4 1c             	add    $0x1c,%esp
f0133594:	5b                   	pop    %ebx
f0133595:	5e                   	pop    %esi
f0133596:	5f                   	pop    %edi
f0133597:	5d                   	pop    %ebp
f0133598:	c3                   	ret    
f0133599:	8d 76 00             	lea    0x0(%esi),%esi
f013359c:	31 ff                	xor    %edi,%edi
f013359e:	31 c0                	xor    %eax,%eax
f01335a0:	89 fa                	mov    %edi,%edx
f01335a2:	83 c4 1c             	add    $0x1c,%esp
f01335a5:	5b                   	pop    %ebx
f01335a6:	5e                   	pop    %esi
f01335a7:	5f                   	pop    %edi
f01335a8:	5d                   	pop    %ebp
f01335a9:	c3                   	ret    
f01335aa:	66 90                	xchg   %ax,%ax
f01335ac:	89 d8                	mov    %ebx,%eax
f01335ae:	f7 f7                	div    %edi
f01335b0:	31 ff                	xor    %edi,%edi
f01335b2:	89 fa                	mov    %edi,%edx
f01335b4:	83 c4 1c             	add    $0x1c,%esp
f01335b7:	5b                   	pop    %ebx
f01335b8:	5e                   	pop    %esi
f01335b9:	5f                   	pop    %edi
f01335ba:	5d                   	pop    %ebp
f01335bb:	c3                   	ret    
f01335bc:	bd 20 00 00 00       	mov    $0x20,%ebp
f01335c1:	89 eb                	mov    %ebp,%ebx
f01335c3:	29 fb                	sub    %edi,%ebx
f01335c5:	89 f9                	mov    %edi,%ecx
f01335c7:	d3 e6                	shl    %cl,%esi
f01335c9:	89 c5                	mov    %eax,%ebp
f01335cb:	88 d9                	mov    %bl,%cl
f01335cd:	d3 ed                	shr    %cl,%ebp
f01335cf:	89 e9                	mov    %ebp,%ecx
f01335d1:	09 f1                	or     %esi,%ecx
f01335d3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f01335d7:	89 f9                	mov    %edi,%ecx
f01335d9:	d3 e0                	shl    %cl,%eax
f01335db:	89 c5                	mov    %eax,%ebp
f01335dd:	89 d6                	mov    %edx,%esi
f01335df:	88 d9                	mov    %bl,%cl
f01335e1:	d3 ee                	shr    %cl,%esi
f01335e3:	89 f9                	mov    %edi,%ecx
f01335e5:	d3 e2                	shl    %cl,%edx
f01335e7:	8b 44 24 08          	mov    0x8(%esp),%eax
f01335eb:	88 d9                	mov    %bl,%cl
f01335ed:	d3 e8                	shr    %cl,%eax
f01335ef:	09 c2                	or     %eax,%edx
f01335f1:	89 d0                	mov    %edx,%eax
f01335f3:	89 f2                	mov    %esi,%edx
f01335f5:	f7 74 24 0c          	divl   0xc(%esp)
f01335f9:	89 d6                	mov    %edx,%esi
f01335fb:	89 c3                	mov    %eax,%ebx
f01335fd:	f7 e5                	mul    %ebp
f01335ff:	39 d6                	cmp    %edx,%esi
f0133601:	72 19                	jb     f013361c <__udivdi3+0xfc>
f0133603:	74 0b                	je     f0133610 <__udivdi3+0xf0>
f0133605:	89 d8                	mov    %ebx,%eax
f0133607:	31 ff                	xor    %edi,%edi
f0133609:	e9 58 ff ff ff       	jmp    f0133566 <__udivdi3+0x46>
f013360e:	66 90                	xchg   %ax,%ax
f0133610:	8b 54 24 08          	mov    0x8(%esp),%edx
f0133614:	89 f9                	mov    %edi,%ecx
f0133616:	d3 e2                	shl    %cl,%edx
f0133618:	39 c2                	cmp    %eax,%edx
f013361a:	73 e9                	jae    f0133605 <__udivdi3+0xe5>
f013361c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f013361f:	31 ff                	xor    %edi,%edi
f0133621:	e9 40 ff ff ff       	jmp    f0133566 <__udivdi3+0x46>
f0133626:	66 90                	xchg   %ax,%ax
f0133628:	31 c0                	xor    %eax,%eax
f013362a:	e9 37 ff ff ff       	jmp    f0133566 <__udivdi3+0x46>
f013362f:	90                   	nop

f0133630 <__umoddi3>:
f0133630:	55                   	push   %ebp
f0133631:	57                   	push   %edi
f0133632:	56                   	push   %esi
f0133633:	53                   	push   %ebx
f0133634:	83 ec 1c             	sub    $0x1c,%esp
f0133637:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f013363b:	8b 74 24 34          	mov    0x34(%esp),%esi
f013363f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0133643:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0133647:	89 44 24 0c          	mov    %eax,0xc(%esp)
f013364b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f013364f:	89 f3                	mov    %esi,%ebx
f0133651:	89 fa                	mov    %edi,%edx
f0133653:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133657:	89 34 24             	mov    %esi,(%esp)
f013365a:	85 c0                	test   %eax,%eax
f013365c:	75 1a                	jne    f0133678 <__umoddi3+0x48>
f013365e:	39 f7                	cmp    %esi,%edi
f0133660:	0f 86 a2 00 00 00    	jbe    f0133708 <__umoddi3+0xd8>
f0133666:	89 c8                	mov    %ecx,%eax
f0133668:	89 f2                	mov    %esi,%edx
f013366a:	f7 f7                	div    %edi
f013366c:	89 d0                	mov    %edx,%eax
f013366e:	31 d2                	xor    %edx,%edx
f0133670:	83 c4 1c             	add    $0x1c,%esp
f0133673:	5b                   	pop    %ebx
f0133674:	5e                   	pop    %esi
f0133675:	5f                   	pop    %edi
f0133676:	5d                   	pop    %ebp
f0133677:	c3                   	ret    
f0133678:	39 f0                	cmp    %esi,%eax
f013367a:	0f 87 ac 00 00 00    	ja     f013372c <__umoddi3+0xfc>
f0133680:	0f bd e8             	bsr    %eax,%ebp
f0133683:	83 f5 1f             	xor    $0x1f,%ebp
f0133686:	0f 84 ac 00 00 00    	je     f0133738 <__umoddi3+0x108>
f013368c:	bf 20 00 00 00       	mov    $0x20,%edi
f0133691:	29 ef                	sub    %ebp,%edi
f0133693:	89 fe                	mov    %edi,%esi
f0133695:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0133699:	89 e9                	mov    %ebp,%ecx
f013369b:	d3 e0                	shl    %cl,%eax
f013369d:	89 d7                	mov    %edx,%edi
f013369f:	89 f1                	mov    %esi,%ecx
f01336a1:	d3 ef                	shr    %cl,%edi
f01336a3:	09 c7                	or     %eax,%edi
f01336a5:	89 e9                	mov    %ebp,%ecx
f01336a7:	d3 e2                	shl    %cl,%edx
f01336a9:	89 14 24             	mov    %edx,(%esp)
f01336ac:	89 d8                	mov    %ebx,%eax
f01336ae:	d3 e0                	shl    %cl,%eax
f01336b0:	89 c2                	mov    %eax,%edx
f01336b2:	8b 44 24 08          	mov    0x8(%esp),%eax
f01336b6:	d3 e0                	shl    %cl,%eax
f01336b8:	89 44 24 04          	mov    %eax,0x4(%esp)
f01336bc:	8b 44 24 08          	mov    0x8(%esp),%eax
f01336c0:	89 f1                	mov    %esi,%ecx
f01336c2:	d3 e8                	shr    %cl,%eax
f01336c4:	09 d0                	or     %edx,%eax
f01336c6:	d3 eb                	shr    %cl,%ebx
f01336c8:	89 da                	mov    %ebx,%edx
f01336ca:	f7 f7                	div    %edi
f01336cc:	89 d3                	mov    %edx,%ebx
f01336ce:	f7 24 24             	mull   (%esp)
f01336d1:	89 c6                	mov    %eax,%esi
f01336d3:	89 d1                	mov    %edx,%ecx
f01336d5:	39 d3                	cmp    %edx,%ebx
f01336d7:	0f 82 87 00 00 00    	jb     f0133764 <__umoddi3+0x134>
f01336dd:	0f 84 91 00 00 00    	je     f0133774 <__umoddi3+0x144>
f01336e3:	8b 54 24 04          	mov    0x4(%esp),%edx
f01336e7:	29 f2                	sub    %esi,%edx
f01336e9:	19 cb                	sbb    %ecx,%ebx
f01336eb:	89 d8                	mov    %ebx,%eax
f01336ed:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f01336f1:	d3 e0                	shl    %cl,%eax
f01336f3:	89 e9                	mov    %ebp,%ecx
f01336f5:	d3 ea                	shr    %cl,%edx
f01336f7:	09 d0                	or     %edx,%eax
f01336f9:	89 e9                	mov    %ebp,%ecx
f01336fb:	d3 eb                	shr    %cl,%ebx
f01336fd:	89 da                	mov    %ebx,%edx
f01336ff:	83 c4 1c             	add    $0x1c,%esp
f0133702:	5b                   	pop    %ebx
f0133703:	5e                   	pop    %esi
f0133704:	5f                   	pop    %edi
f0133705:	5d                   	pop    %ebp
f0133706:	c3                   	ret    
f0133707:	90                   	nop
f0133708:	89 fd                	mov    %edi,%ebp
f013370a:	85 ff                	test   %edi,%edi
f013370c:	75 0b                	jne    f0133719 <__umoddi3+0xe9>
f013370e:	b8 01 00 00 00       	mov    $0x1,%eax
f0133713:	31 d2                	xor    %edx,%edx
f0133715:	f7 f7                	div    %edi
f0133717:	89 c5                	mov    %eax,%ebp
f0133719:	89 f0                	mov    %esi,%eax
f013371b:	31 d2                	xor    %edx,%edx
f013371d:	f7 f5                	div    %ebp
f013371f:	89 c8                	mov    %ecx,%eax
f0133721:	f7 f5                	div    %ebp
f0133723:	89 d0                	mov    %edx,%eax
f0133725:	e9 44 ff ff ff       	jmp    f013366e <__umoddi3+0x3e>
f013372a:	66 90                	xchg   %ax,%ax
f013372c:	89 c8                	mov    %ecx,%eax
f013372e:	89 f2                	mov    %esi,%edx
f0133730:	83 c4 1c             	add    $0x1c,%esp
f0133733:	5b                   	pop    %ebx
f0133734:	5e                   	pop    %esi
f0133735:	5f                   	pop    %edi
f0133736:	5d                   	pop    %ebp
f0133737:	c3                   	ret    
f0133738:	3b 04 24             	cmp    (%esp),%eax
f013373b:	72 06                	jb     f0133743 <__umoddi3+0x113>
f013373d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0133741:	77 0f                	ja     f0133752 <__umoddi3+0x122>
f0133743:	89 f2                	mov    %esi,%edx
f0133745:	29 f9                	sub    %edi,%ecx
f0133747:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f013374b:	89 14 24             	mov    %edx,(%esp)
f013374e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0133752:	8b 44 24 04          	mov    0x4(%esp),%eax
f0133756:	8b 14 24             	mov    (%esp),%edx
f0133759:	83 c4 1c             	add    $0x1c,%esp
f013375c:	5b                   	pop    %ebx
f013375d:	5e                   	pop    %esi
f013375e:	5f                   	pop    %edi
f013375f:	5d                   	pop    %ebp
f0133760:	c3                   	ret    
f0133761:	8d 76 00             	lea    0x0(%esi),%esi
f0133764:	2b 04 24             	sub    (%esp),%eax
f0133767:	19 fa                	sbb    %edi,%edx
f0133769:	89 d1                	mov    %edx,%ecx
f013376b:	89 c6                	mov    %eax,%esi
f013376d:	e9 71 ff ff ff       	jmp    f01336e3 <__umoddi3+0xb3>
f0133772:	66 90                	xchg   %ax,%ax
f0133774:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0133778:	72 ea                	jb     f0133764 <__umoddi3+0x134>
f013377a:	89 d9                	mov    %ebx,%ecx
f013377c:	e9 62 ff ff ff       	jmp    f01336e3 <__umoddi3+0xb3>
